//GENERATED: 
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
namespace UnrealEngine{
public partial class UAudioComponent:USceneComponent 
{
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern int BP_GetAttenuationSettingsToApply(IntPtr _this,out FSoundAttenuationSettings OutAttenuationSettings);
	
	public  bool BP_GetAttenuationSettingsToApply(out FSoundAttenuationSettings OutAttenuationSettings)
	{
		CheckIsValid();
		int ___ret = BP_GetAttenuationSettingsToApply(_this.Get(),out OutAttenuationSettings);
		return ___ret!=0;
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetSubmixSend(IntPtr _this,IntPtr Submix,float SendLevel);
	
	/// <summary>Sets how much audio the sound should send to the given submix.</summary>
	public  void SetSubmixSend(USoundSubmix Submix,float SendLevel)
	{
		CheckIsValid();
		SetSubmixSend(_this.Get(),Submix,SendLevel);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void AdjustAttenuation(IntPtr _this,ref FSoundAttenuationSettings InAttenuationSettings);
	
	/// <summary>Modify the attenuation settings of the audio component</summary>
	public  void AdjustAttenuation(FSoundAttenuationSettings InAttenuationSettings)
	{
		CheckIsValid();
		AdjustAttenuation(_this.Get(),ref InAttenuationSettings);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetUISound(IntPtr _this,int bInUISound);
	
	/// <summary>Set whether sounds generated by this audio component should be considered UI sounds</summary>
	public  void SetUISound(bool bInUISound)
	{
		CheckIsValid();
		SetUISound(_this.Get(),bInUISound?1:0);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetPitchMultiplier(IntPtr _this,float NewPitchMultiplier);
	
	/// <summary>Set a new pitch multiplier</summary>
	public  void SetPitchMultiplier(float NewPitchMultiplier)
	{
		CheckIsValid();
		SetPitchMultiplier(_this.Get(),NewPitchMultiplier);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetVolumeMultiplier(IntPtr _this,float NewVolumeMultiplier);
	
	/// <summary>Set a new volume multiplier</summary>
	public  void SetVolumeMultiplier(float NewVolumeMultiplier)
	{
		CheckIsValid();
		SetVolumeMultiplier(_this.Get(),NewVolumeMultiplier);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetIntParameter(IntPtr _this,string InName,int InInt);
	
	/// <summary>Set an integer instance parameter for use in sound cues played by this audio component</summary>
	public  void SetIntParameter(string InName,int InInt)
	{
		CheckIsValid();
		SetIntParameter(_this.Get(),InName,InInt);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetBoolParameter(IntPtr _this,string InName,int InBool);
	
	/// <summary>Set a boolean instance parameter for use in sound cues played by this audio component</summary>
	public  void SetBoolParameter(string InName,bool InBool)
	{
		CheckIsValid();
		SetBoolParameter(_this.Get(),InName,InBool?1:0);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetWaveParameter(IntPtr _this,string InName,IntPtr InWave);
	
	/// <summary>Set a sound wave instance parameter for use in sound cues played by this audio component</summary>
	public  void SetWaveParameter(string InName,USoundWave InWave)
	{
		CheckIsValid();
		SetWaveParameter(_this.Get(),InName,InWave);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetFloatParameter(IntPtr _this,string InName,float InFloat);
	
	/// <summary>Set a float instance parameter for use in sound cues played by this audio component</summary>
	public  void SetFloatParameter(string InName,float InFloat)
	{
		CheckIsValid();
		SetFloatParameter(_this.Get(),InName,InFloat);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void AdjustVolume(IntPtr _this,float AdjustVolumeDuration,float AdjustVolumeLevel);
	
	/// <summary>This will allow one to adjust the volume of an AudioComponent on the fly</summary>
	public  void AdjustVolume(float AdjustVolumeDuration,float AdjustVolumeLevel)
	{
		CheckIsValid();
		AdjustVolume(_this.Get(),AdjustVolumeDuration,AdjustVolumeLevel);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern int IsPlaying(IntPtr _this);
	
	/// <summary>@return true if this component is currently playing a SoundCue.</summary>
	public  bool IsPlaying()
	{
		CheckIsValid();
		int ___ret = IsPlaying(_this.Get());
		return ___ret!=0;
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetPaused(IntPtr _this,int bPause);
	
	/// <summary>Pause an audio component playing its sound cue, issue any delegates if needed</summary>
	public  void SetPaused(bool bPause)
	{
		CheckIsValid();
		SetPaused(_this.Get(),bPause?1:0);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void Stop(IntPtr _this);
	
	/// <summary>Stop an audio component playing its sound cue, issue any delegates if needed</summary>
	public  void Stop()
	{
		CheckIsValid();
		Stop(_this.Get());
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void Play(IntPtr _this,float StartTime);
	
	/// <summary>Start a sound playing on an audio component</summary>
	public  void Play(float StartTime=0.000000f)
	{
		CheckIsValid();
		Play(_this.Get(),StartTime);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void FadeOut(IntPtr _this,float FadeOutDuration,float FadeVolumeLevel);
	
	/// <summary>
	/// This is used in place of "stop" when it is desired to fade the volume of the sound before stopping.
	/// If FadeTime is 0.0, this is the same as calling Stop().
	/// If FadeTime is > 0.0, this will adjust the volume multiplier to FadeVolumeLevel over FadeInTime seconds
	/// and then stop the sound.
	/// @param FadeOutDuration how long it should take to reach the FadeVolumeLevel
	/// @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume in which to fade to
	/// </summary>
	public  void FadeOut(float FadeOutDuration,float FadeVolumeLevel)
	{
		CheckIsValid();
		FadeOut(_this.Get(),FadeOutDuration,FadeVolumeLevel);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void FadeIn(IntPtr _this,float FadeInDuration,float FadeVolumeLevel,float StartTime);
	
	/// <summary>
	/// This can be used in place of "play" when it is desired to fade in the sound over time.
	/// If FadeTime is 0.0, the change in volume is instant.
	/// If FadeTime is > 0.0, the multiplier will be increased from 0 to FadeVolumeLevel over FadeIn seconds.
	/// @param FadeInDuration how long it should take to reach the FadeVolumeLevel
	/// @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume to fade to
	/// </summary>
	public  void FadeIn(float FadeInDuration,float FadeVolumeLevel=1.000000f,float StartTime=0.000000f)
	{
		CheckIsValid();
		FadeIn(_this.Get(),FadeInDuration,FadeVolumeLevel,StartTime);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	static extern void SetSound(IntPtr _this,IntPtr NewSound);
	
	/// <summary>Set what sound is played by this component</summary>
	public  void SetSound(USoundBase NewSound)
	{
		CheckIsValid();
		SetSound(_this.Get(),NewSound);
		
	}
	
	[MethodImplAttribute(MethodImplOptions.InternalCall)]
	public static extern new IntPtr StaticClass();
}
}
