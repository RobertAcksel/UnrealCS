#if WITH_EDITOR
#if PLATFORM_64BITS
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
namespace UnrealEngine
{
	/// <summary>
	/// LODActor is an instance of an autogenerated StaticMesh Actors by Hierarchical LOD System
	/// This is essentially just StaticMeshActor that you can't move or edit, but it contains multiple actors reference
	/// @see https://docs.unrealengine.com/latest/INT/Engine/Actors/LODActor/
	/// @see UStaticMesh
	/// </summary>
	public partial class ALODActor
	{
		static readonly int StaticMeshComponent__Offset;
		/// <summary>disable display of this component</summary>
		public UStaticMeshComponent StaticMeshComponent
		{
			get{ CheckIsValid(); IntPtr v = Marshal.ReadIntPtr(_this.Get() + StaticMeshComponent__Offset); if (v == IntPtr.Zero)return null; UStaticMeshComponent retValue = new UStaticMeshComponent(); retValue._this = v; return retValue; }
			set{ CheckIsValid(); if (value == null)Marshal.WriteIntPtr(_this.Get() + StaticMeshComponent__Offset, IntPtr.Zero);else Marshal.WriteIntPtr(_this.Get() + StaticMeshComponent__Offset, value._this.Get()); }
			
		}
		
		static readonly int SubActors__Offset;
		public TObjectArray<AActor>  SubActors
		{
					get{ CheckIsValid();return new TObjectArray<AActor>((FScriptArray)Marshal.PtrToStructure(_this.Get()+SubActors__Offset, typeof(FScriptArray)));}
					set{ CheckIsValid();Marshal.StructureToPtr(value.InterArray, _this.Get()+SubActors__Offset, false);}
			
		}
		
		static readonly int LODDrawDistance__Offset;
		/// <summary>what distance do you want this to show up instead of SubActors</summary>
		public float LODDrawDistance
		{
			get{ CheckIsValid();return (float)Marshal.PtrToStructure(_this.Get()+LODDrawDistance__Offset, typeof(float));}
			
		}
		
		static readonly int LODLevel__Offset;
		/// <summary>The hierarchy level of this actor; the first tier of HLOD is level 1, the second tier is level 2 and so on.</summary>
		public int LODLevel
		{
			get{ CheckIsValid();return (int)Marshal.PtrToStructure(_this.Get()+LODLevel__Offset, typeof(int));}
			set{ CheckIsValid();Marshal.StructureToPtr(value, _this.Get()+LODLevel__Offset, false);}
			
		}
		
		static readonly int SubObjects__Offset;
		/// <summary>assets that were created for this, so that we can delete them</summary>
		public TObjectArray<UObject>  SubObjects
		{
					get{ CheckIsValid();return new TObjectArray<UObject>((FScriptArray)Marshal.PtrToStructure(_this.Get()+SubObjects__Offset, typeof(FScriptArray)));}
					set{ CheckIsValid();Marshal.StructureToPtr(value.InterArray, _this.Get()+SubObjects__Offset, false);}
			
		}
		
		static readonly int bDirty__Offset;
		/// <summary>Whether or not this LODActor is not build or needs rebuilding</summary>
		public bool bDirty
		{
			get{ CheckIsValid();return BoolWrap.Get(_this.Get(), bDirty__Offset, 1, 0, 1, 255);}
			
		}
		
		static readonly int NumTrianglesInSubActors__Offset;
		/// <summary>Cached number of triangles contained in the SubActors</summary>
		public uint NumTrianglesInSubActors
		{
			get{ CheckIsValid();return (uint)Marshal.PtrToStructure(_this.Get()+NumTrianglesInSubActors__Offset, typeof(uint));}
			
		}
		
		static readonly int NumTrianglesInMergedMesh__Offset;
		/// <summary>Cached number of triangles contained in the SubActors</summary>
		public uint NumTrianglesInMergedMesh
		{
			get{ CheckIsValid();return (uint)Marshal.PtrToStructure(_this.Get()+NumTrianglesInMergedMesh__Offset, typeof(uint));}
			
		}
		
		static readonly int bOverrideMaterialMergeSettings__Offset;
		/// <summary>Flag whether or not to use the override MaterialSettings when creating the proxy mesh</summary>
		public bool bOverrideMaterialMergeSettings
		{
			get{ CheckIsValid();return BoolWrap.Get(_this.Get(), bOverrideMaterialMergeSettings__Offset, 1, 0, 1, 255);}
			set{ CheckIsValid();BoolWrap.Set(value,_this.Get(), bOverrideMaterialMergeSettings__Offset, 1,0,1,255);}
			
		}
		
		static readonly int MaterialSettings__Offset;
		/// <summary>Override Material Settings, used when creating the proxy mesh</summary>
		public FMaterialProxySettings MaterialSettings
		{
			get{ CheckIsValid();return (FMaterialProxySettings)Marshal.PtrToStructure(_this.Get()+MaterialSettings__Offset, typeof(FMaterialProxySettings));}
			set{ CheckIsValid();Marshal.StructureToPtr(value, _this.Get()+MaterialSettings__Offset, false);}
			
		}
		
		static readonly int bOverrideTransitionScreenSize__Offset;
		/// <summary>Flag whether or not to use the override TransitionScreenSize for this proxy mesh</summary>
		public bool bOverrideTransitionScreenSize
		{
			get{ CheckIsValid();return BoolWrap.Get(_this.Get(), bOverrideTransitionScreenSize__Offset, 1, 0, 1, 255);}
			set{ CheckIsValid();BoolWrap.Set(value,_this.Get(), bOverrideTransitionScreenSize__Offset, 1,0,1,255);}
			
		}
		
		static readonly int TransitionScreenSize__Offset;
		/// <summary>
		/// Override transition screen size value, determines the screen size at which the proxy is visible
		/// The screen size is based around the projected diameter of the bounding
		/// sphere of the model. i.e. 0.5 means half the screen's maximum dimension.
		/// </summary>
		public float TransitionScreenSize
		{
			get{ CheckIsValid();return (float)Marshal.PtrToStructure(_this.Get()+TransitionScreenSize__Offset, typeof(float));}
			set{ CheckIsValid();Marshal.StructureToPtr(value, _this.Get()+TransitionScreenSize__Offset, false);}
			
		}
		
		static readonly int bOverrideScreenSize__Offset;
		/// <summary>Flag whether or not to use the override ScreenSize when creating the proxy mesh</summary>
		public bool bOverrideScreenSize
		{
			get{ CheckIsValid();return BoolWrap.Get(_this.Get(), bOverrideScreenSize__Offset, 1, 0, 1, 255);}
			set{ CheckIsValid();BoolWrap.Set(value,_this.Get(), bOverrideScreenSize__Offset, 1,0,1,255);}
			
		}
		
		static readonly int ScreenSize__Offset;
		/// <summary>Override screen size value used in mesh reduction, when creating the proxy mesh</summary>
		public int ScreenSize
		{
			get{ CheckIsValid();return (int)Marshal.PtrToStructure(_this.Get()+ScreenSize__Offset, typeof(int));}
			set{ CheckIsValid();Marshal.StructureToPtr(value, _this.Get()+ScreenSize__Offset, false);}
			
		}
		
		static ALODActor()
		{
			IntPtr NativeClassPtr=GetNativeClassFromName("LODActor");
			StaticMeshComponent__Offset=GetPropertyOffset(NativeClassPtr,"StaticMeshComponent");
			SubActors__Offset=GetPropertyOffset(NativeClassPtr,"SubActors");
			LODDrawDistance__Offset=GetPropertyOffset(NativeClassPtr,"LODDrawDistance");
			LODLevel__Offset=GetPropertyOffset(NativeClassPtr,"LODLevel");
			SubObjects__Offset=GetPropertyOffset(NativeClassPtr,"SubObjects");
			bDirty__Offset=GetPropertyOffset(NativeClassPtr,"bDirty");
			NumTrianglesInSubActors__Offset=GetPropertyOffset(NativeClassPtr,"NumTrianglesInSubActors");
			NumTrianglesInMergedMesh__Offset=GetPropertyOffset(NativeClassPtr,"NumTrianglesInMergedMesh");
			bOverrideMaterialMergeSettings__Offset=GetPropertyOffset(NativeClassPtr,"bOverrideMaterialMergeSettings");
			MaterialSettings__Offset=GetPropertyOffset(NativeClassPtr,"MaterialSettings");
			bOverrideTransitionScreenSize__Offset=GetPropertyOffset(NativeClassPtr,"bOverrideTransitionScreenSize");
			TransitionScreenSize__Offset=GetPropertyOffset(NativeClassPtr,"TransitionScreenSize");
			bOverrideScreenSize__Offset=GetPropertyOffset(NativeClassPtr,"bOverrideScreenSize");
			ScreenSize__Offset=GetPropertyOffset(NativeClassPtr,"ScreenSize");
			
		}
		
	}
	
}
#endif
#endif
