<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnrealEngine</name>
    </assembly>
    <members>
        <member name="F:UnrealEngine.FName.ComparisonIndex">
            Index into the Names array (used to find String portion of the string/number pair used for comparison) 
        </member>
        <member name="F:UnrealEngine.FName.DisplayIndex">
            Index into the Names array (used to find String portion of the string/number pair used for display) 
        </member>
        <member name="F:UnrealEngine.FName.Number">
            Number portion of the string/number pair (stored internally as 1 more than actual, so zero'd memory will be the default, no-instance case) 
        </member>
        <member name="M:UnrealEngine.FPaths.ShouldSaveToUserDir">
            Should the "saved" directory structures be rooted in the user dir or relative to the "engine/game" 
        </member>
        <member name="M:UnrealEngine.FPaths.LaunchDir">
            Returns the directory the application was launched from (useful for commandline utilities)
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPaths.EngineDir" -->
        <member name="M:UnrealEngine.FPaths.EngineUserDir">
             Returns the root directory for user-specific engine files. Always writable.
            
             @return root user directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineVersionAgnosticUserDir">
             Returns the root directory for user-specific engine files which can be shared between versions. Always writable.
            
             @return root user directory
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPaths.EngineContentDir" -->
        <member name="M:UnrealEngine.FPaths.EngineConfigDir">
             Returns the directory the root configuration files are located.
            
             @return root config directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineIntermediateDir">
             Returns the intermediate directory of the engine
            
             @return content directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineSavedDir">
             Returns the saved directory of the engine
            
             @return Saved directory.
        </member>
        <member name="M:UnrealEngine.FPaths.EnginePluginsDir">
             Returns the plugins directory of the engine
            
             @return Plugins directory.
        </member>
        <member name="M:UnrealEngine.FPaths.RootDir">
             Returns the root directory of the engine directory tree
            
             @return Root directory.
        </member>
        <member name="M:UnrealEngine.FPaths.GameDir">
             Returns the base directory of the current game by looking at FApp::GetGameName().
             This is usually a subdirectory of the installation
             root directory and can be overridden on the command line to allow self
             contained mod support.
            
             @return base directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameUserDir">
             Returns the root directory for user-specific game files.
            
             @return game user directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameContentDir">
             Returns the content directory of the current game by looking at FApp::GetGameName().
            
             @return content directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameConfigDir">
             Returns the directory the root configuration files are located.
            
             @return root config directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameSavedDir">
             Returns the saved directory of the current game by looking at FApp::GetGameName().
            
             @return saved directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameIntermediateDir">
             Returns the intermediate directory of the current game by looking at FApp::GetGameName().
            
             @return intermediate directory
        </member>
        <member name="M:UnrealEngine.FPaths.GamePluginsDir">
             Returns the plugins directory of the current game by looking at FApp::GetGameName().
            
             @return plugins directory
        </member>
        <member name="M:UnrealEngine.FPaths.SourceConfigDir">
             Returns the directory the engine uses to look for the source leaf ini files. This
             can't be an .ini variable for obvious reasons.
            
             @return source config directory
        </member>
        <member name="M:UnrealEngine.FPaths.GeneratedConfigDir">
             Returns the directory the engine saves generated config files.
            
             @return config directory
        </member>
        <member name="M:UnrealEngine.FPaths.SandboxesDir">
             Returns the directory the engine stores sandbox output
            
             @return sandbox directory
        </member>
        <member name="M:UnrealEngine.FPaths.ProfilingDir">
             Returns the directory the engine uses to output profiling files.
            
             @return log directory
        </member>
        <member name="M:UnrealEngine.FPaths.ScreenShotDir">
             Returns the directory the engine uses to output screenshot files.
            
             @return screenshot directory
        </member>
        <member name="M:UnrealEngine.FPaths.BugItDir">
             Returns the directory the engine uses to output BugIt files.
            
             @return screenshot directory
        </member>
        <member name="M:UnrealEngine.FPaths.VideoCaptureDir">
             Returns the directory the engine uses to output user requested video capture files.
            
             @return Video capture directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameLogDir">
             Returns the directory the engine uses to output logs. This currently can't 
             be an .ini setting as the game starts logging before it can read from .ini
             files.
            
             @return log directory
        </member>
        <member name="M:UnrealEngine.FPaths.AutomationDir">
            @return The directory for automation save files
        </member>
        <member name="M:UnrealEngine.FPaths.AutomationTransientDir">
            @return The directory for automation save files that are meant to be deleted every run
        </member>
        <member name="M:UnrealEngine.FPaths.AutomationLogDir">
            @return The directory for automation log files.
        </member>
        <member name="M:UnrealEngine.FPaths.CloudDir">
            @return The directory for local files used in cloud emulation or support
        </member>
        <member name="M:UnrealEngine.FPaths.GameDevelopersDir">
            @return The directory that contains subfolders for developer-specific content
        </member>
        <member name="M:UnrealEngine.FPaths.GameUserDeveloperDir">
            @return The directory that contains developer-specific content for the current user
        </member>
        <member name="M:UnrealEngine.FPaths.DiffDir">
            @return The directory for temp files used for diff'ing
        </member>
        <member name="M:UnrealEngine.FPaths.GameAgnosticSavedDir">
             Returns the saved directory that is not game specific. This is usually the same as
             EngineSavedDir().
            
             @return saved directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineSourceDir">
            @return The directory where engine source code files are kept
        </member>
        <member name="M:UnrealEngine.FPaths.GameSourceDir">
            @return The directory where game source code files are kept
        </member>
        <member name="M:UnrealEngine.FPaths.FeaturePackDir">
            @return The directory where feature packs are kept
        </member>
        <member name="M:UnrealEngine.FPaths.CollapseRelativeDirectories(System.String@)">
             Takes a fully pathed string and eliminates relative pathing (eg: annihilates ".." with the adjacent directory).
             Assumes all slashes have been converted to TEXT('/').
             For example, takes the string:
            	BaseDirectory/SomeDirectory/../SomeOtherDirectory/Filename.ext
             and converts it to:
            	BaseDirectory/SomeOtherDirectory/Filename.ext
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPaths.MakeStandardFilename(System.String@)" -->
        <member name="M:UnrealEngine.FPaths.MakePlatformFilename(System.String@)">
            Takes an "Unreal" pathname and converts it to a platform filename. 
        </member>
        <member name="M:UnrealEngine.FPaths.ConvertRelativePathToFull(System.String)">
            Converts a relative path name to a fully qualified name relative to the process BaseDir().
        </member>
        <member name="F:UnrealEngine.FScriptDelegate.Object">
            The object bound to this delegate, or nullptr if no object is bound 
        </member>
        <member name="F:UnrealEngine.FScriptDelegate.FunctionName">
            Name of the function to call on the bound object 
        </member>
        <member name="T:UnrealEngine.AActor">
            <summary>
            Actor is the base class for an Object that can be placed or spawned in a level.
            Actors may contain a collection of ActorComponents, which can be used to control how actors move, how they are rendered, etc.
            The other main function of an Actor is the replication of properties and function calls across the network during play.
            @see https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/
            @see UActorComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.PrimaryActorTick">
            <summary>
            Primary Actor tick function, which calls TickActor().
            Tick functions can be configured to control whether ticking is enabled, at what time during a frame the update occurs, and to set up tick dependencies.
            @see https://docs.unrealengine.com/latest/INT/API/Runtime/Engine/Engine/FTickFunction/
            @see AddTickPrerequisiteActor(), AddTickPrerequisiteComponent()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.CustomTimeDilation">
            <summary>Allow each actor to run at a different time speed. The DeltaTime for a frame is multiplied by the global TimeDilation (in WorldSettings) and this CustomTimeDilation for this actor's tick.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bHidden">
            <summary>
            Allows us to only see this Actor in the Editor, and not in the actual game.
            @see SetActorHiddenInGame()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bNetTemporary">
            <summary>If true, when the actor is spawned it will be sent to the client but receive no further replication updates from the server afterwards.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bNetStartup">
            <summary>If true, this actor was loaded directly from the map, and for networking purposes can be addressed by its full path name</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bOnlyRelevantToOwner">
            <summary>If true, this actor is only relevant to its owner. If this flag is changed during play, all non-owner channels would need to be explicitly closed.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bAlwaysRelevant">
            <summary>Always relevant for network (overrides bOnlyRelevantToOwner).</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bReplicateMovement">
            <summary>
            If true, replicate movement/location related properties.
            Actor must also be set to replicate.
            @see SetReplicates()
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Networking/Replication/
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bTearOff">
            <summary>
            If true, this actor is no longer replicated to new clients, and is "torn off" (becomes a ROLE_Authority) on clients to which it was being replicated.
            @see TornOff()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bExchangedRoles">
            <summary>
            Whether we have already exchanged Role/RemoteRole on the client, as when removing then re-adding a streaming level.
            Causes all initialization to be performed again even though the actor may not have actually been reloaded.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bPendingNetUpdate">
            <summary>Is this actor still pending a full net update due to clients that weren't able to replicate the actor at the time of LastNetUpdateTime</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bNetLoadOnClient">
            <summary>This actor will be loaded on network clients during map load</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bNetUseOwnerRelevancy">
            <summary>If actor has valid Owner, call Owner's IsNetRelevantFor and GetNetPriority</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bBlockInput">
            <summary>If true, all input on the stack below this actor will not be considered</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bAllowTickBeforeBeginPlay">
            <summary>
            Whether we allow this Actor to tick before it receives the BeginPlay event.
            Normally we don't tick actors until after BeginPlay; this setting allows this behavior to be overridden.
            This Actor must be able to tick for this setting to be relevant.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bActorEnableCollision">
            <summary>
            Enables any collision on this actor.
            @see SetActorEnableCollision(), GetActorEnableCollision()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bReplicates">
            <summary>
            If true, this actor will replicate to remote machines
            @see SetReplicates()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.NetDriverName">
            <summary>Used to specify the net driver to replicate on (NAME_None || NAME_GameNetDriver is the default net driver)</summary>
        </member>
        <member name="P:UnrealEngine.AActor.RemoteRole">
            <summary>Describes how much control the remote machine has over the actor.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.AActor.Owner" -->
        <member name="P:UnrealEngine.AActor.ReplicatedMovement">
            <summary>Used for replication of our RootComponent's position and velocity</summary>
        </member>
        <member name="P:UnrealEngine.AActor.AttachmentReplication">
            <summary>
            Used for replicating attachment of this actor's RootComponent to another actor.
            This is filled in via GatherCurrentMovement() when the RootComponent has an AttachParent.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.Role">
            <summary>Describes how much control the local machine has over the actor.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.AutoReceiveInput">
            <summary>Automatically registers this actor to receive input from a player.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.InputPriority">
            <summary>The priority of this input component when pushed in to the stack.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.InputComponent">
            <summary>Component that handles input for this actor, if input is enabled.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.NetCullDistanceSquared">
            <summary>Square of the max distance from the client's viewpoint that this actor is relevant and will be replicated.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.NetTag">
            <summary>Internal - used by UWorld::ServerTickClients()</summary>
        </member>
        <member name="P:UnrealEngine.AActor.NetUpdateTime">
            <summary>Next time this actor will be considered for replication, set by SetNetUpdateTime()</summary>
        </member>
        <member name="P:UnrealEngine.AActor.NetUpdateFrequency">
            <summary>How often (per second) this actor will be considered for replication, used to determine NetUpdateTime</summary>
        </member>
        <member name="P:UnrealEngine.AActor.MinNetUpdateFrequency">
            <summary>Used to determine what rate to throttle down to when replicated properties are changing infrequently</summary>
        </member>
        <member name="P:UnrealEngine.AActor.NetPriority">
            <summary>Priority for this actor when checking for replication in a low bandwidth or saturated situation, higher priority means it is more likely to replicate</summary>
        </member>
        <member name="P:UnrealEngine.AActor.LastNetUpdateTime">
            <summary>
            Last time this actor was updated for replication via NetUpdateTime
            @warning: internal net driver time, not related to WorldSettings.TimeSeconds
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bAutoDestroyWhenFinished">
            <summary>If true then destroy self when "finished", meaning all relevant components report that they are done and no timelines or timers are in flight.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bCanBeDamaged">
            <summary>
            Whether this actor can take damage. Must be true for damage events (e.g. ReceiveDamage()) to be called.
            @see https://www.unrealengine.com/blog/damage-in-ue4
            @see TakeDamage(), ReceiveDamage()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bActorIsBeingDestroyed">
            <summary>Set when actor is about to be deleted.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bCollideWhenPlacing">
            <summary>This actor collides with the world when placing in the editor, even if RootComponent collision is disabled. Does not affect spawning, @see SpawnCollisionHandlingMethod</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bFindCameraComponentWhenViewTarget">
            <summary>If true, this actor should search for an owned camera component to view through when used as a view target.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bRelevantForNetworkReplays">
            <summary>If true, this actor will be replicated to network replays (default is true)</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bGenerateOverlapEventsDuringLevelStreaming">
            <summary>If true, this actor will generate overlap events when spawned as part of level streaming. You might enable this is in the case where a streaming level loads around an actor and you want overlaps to trigger.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.Instigator">
            <summary>Pawn responsible for damage caused by this actor.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.Children">
            <summary>Array of Actors whose Owner is this actor</summary>
        </member>
        <member name="P:UnrealEngine.AActor.RootComponent">
            <summary>Collision primitive that defines the transform (location, rotation, scale) of this Actor.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.PivotOffset">
            <summary>Local space pivot offset for the actor</summary>
        </member>
        <member name="P:UnrealEngine.AActor.ControllingMatineeActors">
            <summary>The matinee actors that control this actor.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.InitialLifeSpan">
            <summary>How long this Actor lives before dying, 0=forever. Note this is the INITIAL value and should not be modified once play has begun.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.Layers">
            <summary>Layer's the actor belongs to.  This is outside of the editoronly data to allow hiding of LD-specified layers at runtime for profiling.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.GroupActor">
            <summary>The group this actor is a part of.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.SpriteScale">
            <summary>The scale to apply to any billboard components in editor builds (happens in any WITH_EDITOR build, including non-cooked games).</summary>
        </member>
        <member name="P:UnrealEngine.AActor.ActorLabel">
            <summary>
            The friendly name for this actor, displayed in the editor.  You should always use AActor::GetActorLabel() to access the actual label to display,
            and call AActor::SetActorLabel() or FActorLabelUtilities::SetActorLabelUnique() to change the label.  Never set the label directly.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.FolderPath">
            <summary>The folder path of this actor in the world (empty=root, / separated)</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bHiddenEd">
            <summary>Whether this actor is hidden within the editor viewport.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bEditable">
            <summary>Whether the actor can be manipulated by editor operations.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bListedInSceneOutliner">
            <summary>Whether this actor should be listed in the scene outliner.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bHiddenEdLayer">
            <summary>Whether this actor is hidden by the layer browser.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bHiddenEdTemporary">
            <summary>Whether this actor is temporarily hidden within the editor; used for show/hide/etc functionality w/o dirtying the actor.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bHiddenEdLevel">
            <summary>Whether this actor is hidden by the level browser.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bLockLocation">
            <summary>If true, prevents the actor from being moved in the editor viewport.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bAllowReceiveTickEventOnDedicatedServer">
            <summary>
            If false, the Blueprint ReceiveTick() event will be disabled on dedicated servers.
            @see AllowReceiveTickEventOnDedicatedServer()
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.bActorSeamlessTraveled">
            <summary>Indicates the actor was pulled through a seamless travel.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bIgnoresOriginShifting">
            <summary>Whether this actor should not be affected by world origin shifting.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.bEnableAutoLODGeneration">
            <summary>If true, and if World setting has bEnableHierarchicalLOD equal to true, then it will generate LODActor from groups of clustered Actor</summary>
        </member>
        <member name="P:UnrealEngine.AActor.Tags">
            <summary>Array of tags that can be used for grouping and categorizing.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.HiddenEditorViews">
            <summary>Bitflag to represent which views this actor is hidden in, via per-view layer visibility.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnTakeAnyDamage">
            <summary>Called when the actor is damaged in any way.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnTakePointDamage">
            <summary>Called when the actor is damaged by point damage.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnActorBeginOverlap">
            <summary>
            Called when another actor begins to overlap this actor, for example a player walking into a trigger.
            For events when objects have a blocking collision, for example a player hitting a wall, see 'Hit' events.
            @note Components on both this and the other Actor must have bGenerateOverlapEvents set to true to generate overlap events.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnActorEndOverlap">
            <summary>
            Called when another actor stops overlapping this actor.
            @note Components on both this and the other Actor must have bGenerateOverlapEvents set to true to generate overlap events.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnBeginCursorOver">
            <summary>Called when the mouse cursor is moved over this actor if mouse over events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnEndCursorOver">
            <summary>Called when the mouse cursor is moved off this actor if mouse over events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnClicked">
            <summary>Called when the left mouse button is clicked while the mouse is over this actor and click events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnReleased">
            <summary>Called when the left mouse button is released while the mouse is over this actor and click events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnInputTouchBegin">
            <summary>Called when a touch input is received over this actor when touch events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnInputTouchEnd">
            <summary>Called when a touch input is received over this component when touch events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnInputTouchEnter">
            <summary>Called when a finger is moved over this actor when touch over events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnInputTouchLeave">
            <summary>Called when a finger is moved off this actor when touch over events are enabled in the player controller.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnActorHit">
            <summary>
            Called when this Actor hits (or is hit by) something solid. This could happen due to things like Character movement, using Set Location with 'sweep' enabled, or physics simulation.
            For events when objects overlap (e.g. walking into a trigger) see the 'Overlap' event.
            @note For collisions during physics simulation to generate hit events, 'Simulation Generates Hit Events' must be enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnDestroyed">
            <summary>Event triggered when the actor is destroyed.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.OnEndPlay">
            <summary>Event triggered when the actor is being removed from a level.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.BlueprintCreatedComponents">
            <summary>Array of ActorComponents that are created by blueprints and serialized per-instance.</summary>
        </member>
        <member name="P:UnrealEngine.AActor.InstanceComponents">
            <summary>Array of ActorComponents that have been added by the user on a per-instance basis.</summary>
        </member>
        <member name="T:UnrealEngine.AAmbientSound">
            <summary>A sound actor that can be placed in a level</summary>
        </member>
        <member name="T:UnrealEngine.AAtmosphericFog">
            <summary>
            A placeable fog actor that simulates atmospheric light scattering
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/FogEffects/AtmosphericFog/index.html
            </summary>
        </member>
        <member name="P:UnrealEngine.AAudioVolume.Priority">
            <summary>
            Priority of this volume. In the case of overlapping volumes the one with the highest priority
            is chosen. The order is undefined if two or more overlapping volumes have the same priority.
            </summary>
        </member>
        <member name="P:UnrealEngine.AAudioVolume.bEnabled">
            <summary>whether this volume is currently enabled and able to affect sounds</summary>
        </member>
        <member name="P:UnrealEngine.AAudioVolume.Settings">
            <summary>Reverb settings to use for this volume.</summary>
        </member>
        <member name="P:UnrealEngine.AAudioVolume.AmbientZoneSettings">
            <summary>Interior settings used for this volume</summary>
        </member>
        <member name="P:UnrealEngine.ABrush.BrushType">
            <summary>Type of brush</summary>
        </member>
        <member name="P:UnrealEngine.ABrush.BrushColor">
            <summary>Information.</summary>
        </member>
        <member name="P:UnrealEngine.ABrush.bPlaceableFromClassBrowser">
            <summary>If true, this brush class can be placed using the class browser like other simple class types</summary>
        </member>
        <member name="P:UnrealEngine.ABrush.bNotForClientOrServer">
            <summary>If true, this brush is a builder or otherwise does not need to be loaded into the game</summary>
        </member>
        <member name="P:UnrealEngine.ABrush.bInManipulation">
            <summary>Flag set when we are in a manipulation (scaling, translation, brush builder param change etc.)</summary>
        </member>
        <member name="P:UnrealEngine.ABrush.SavedSelections">
            <summary>
            Stores selection information from geometry mode.  This is the only information that we can't
            regenerate by looking at the source brushes following an undo operation.
            </summary>
        </member>
        <member name="T:UnrealEngine.ACameraActor">
            <summary>A CameraActor is a camera viewpoint that can be placed in a level.</summary>
        </member>
        <member name="P:UnrealEngine.ACameraActor.AutoActivateForPlayer">
            <summary>Specifies which player controller, if any, should automatically use this Camera when the controller is active.</summary>
        </member>
        <member name="T:UnrealEngine.ACharacter">
            <summary>
            Characters are Pawns that have a mesh, collision, and built-in movement logic.
            They are responsible for all physical interaction between the player or AI and the world, and also implement basic networking and input models.
            They are designed for a vertically-oriented player representation that can walk, jump, fly, and swim through the world using CharacterMovementComponent.
            @see APawn, UCharacterMovementComponent
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Pawn/Character/
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.Mesh">
            <summary>The main skeletal mesh associated with this Character (optional sub-object).</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.CharacterMovement">
            <summary>Movement component used for movement logic in various movement modes (walking, falling, etc), containing relevant settings and functions to control movement.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.CapsuleComponent">
            <summary>The CapsuleComponent being used for movement collision (by CharacterMovement). Always treated as being vertically aligned in simple collision check functions.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.BasedMovement">
            <summary>Info about our current movement base (object we are standing on).</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.ReplicatedBasedMovement">
            <summary>Replicated version of relative movement. Read-only on simulated proxies!</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.AnimRootMotionTranslationScale">
            <summary>Scale to apply to root motion translation on this Character</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.BaseTranslationOffset">
            <summary>Saved translation offset of mesh.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.BaseRotationOffset">
            <summary>Saved rotation offset of mesh.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.ReplicatedServerLastTransformUpdateTimeStamp">
            <summary>CharacterMovement ServerLastTransformUpdateTimeStamp value, replicated to simulated proxies.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.ReplicatedMovementMode">
            <summary>CharacterMovement MovementMode (and custom mode) replicated for simulated proxies. Use CharacterMovementComponent::UnpackNetworkMovementMode() to translate it.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bInBaseReplication">
            <summary>Flag that we are receiving replication of the based movement.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.CrouchedEyeHeight">
            <summary>Default crouched eye height</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bIsCrouched">
            <summary>Set by character movement to specify that this Character is currently crouched.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bPressedJump">
            <summary>When true, player wants to jump</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bClientUpdating">
            <summary>When true, applying updates to network client (replaying saved moves for a locally controlled character)</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bClientWasFalling">
            <summary>True if Pawn was initially falling when started to replay network moves.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bClientResimulateRootMotion">
            <summary>If server disagrees with root motion track position, client has to resimulate root motion from last AckedMove.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bClientResimulateRootMotionSources">
            <summary>If server disagrees with root motion state, client has to resimulate root motion from last AckedMove.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bSimGravityDisabled">
            <summary>Disable simulated gravity (set when character encroaches geometry on client, to keep him from falling through floors)</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bServerMoveIgnoreRootMotion">
            <summary>Disable root motion on the server. When receiving a DualServerMove, where the first move is not root motion and the second is.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.JumpKeyHoldTime">
            <summary>
            Jump key Held Time.
            This is the time that the player has held the jump key, in seconds.
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.JumpMaxHoldTime">
            <summary>
            The max time the jump key can be held.
            Note that if StopJumping() is not called before the max jump hold time is reached,
            then the character will carry on receiving vertical velocity. Therefore it is usually
            best to call StopJumping() when jump input has ceased (such as a button up event).
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.JumpMaxCount">
            <summary>
            The max number of jumps the character can perform.
            Note that if JumpMaxHoldTime is non zero and StopJumping is not called, the player
            may be able to perform and unlimited number of jumps. Therefore it is usually
            best to call StopJumping() when jump input has ceased (such as a button up event).
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.JumpCurrentCount">
            <summary>
            Tracks the current number of jumps performed.
            This is incremented in CheckJumpInput, used in CanJump_Implementation, and reset in OnMovementModeChanged.
            When providing overrides for these methods, it's recommended to either manually
            increment / reset this value, or call the Super:: method.
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.bWasJumping">
            <summary>Tracks whether or not the character was already jumping last frame.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.OnReachedJumpApex">
            <summary>Broadcast when Character's jump reaches its apex. Needs CharacterMovement->bNotifyApex = true</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.MovementModeChangedDelegate">
            <summary>Multicast delegate for MovementMode changing.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.OnCharacterMovementUpdated">
            <summary>
            Event triggered at the end of a CharacterMovementComponent movement update.
            This is the preferred event to use rather than the Tick event when performing custom updates to CharacterMovement properties based on the current state.
            This is mainly due to the nature of network updates, where client corrections in position from the server can cause multiple iterations of a movement update,
            which allows this event to update as well, while a Tick event would not.
            @param       DeltaSeconds            Delta time in seconds for this update
            @param       InitialLocation         Location at the start of the update. May be different than the current location if movement occurred.
            @param       InitialVelocity         Velocity at the start of the update. May be different than the current velocity.
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.SavedRootMotion">
            <summary>
            For LocallyControlled Autonomous clients.
            During a PerformMovement() after root motion is prepared, we save it off into this and
            then record it into our SavedMoves.
            During SavedMove playback we use it as our "Previous Move" SavedRootMotion which includes
            last received root motion from the Server
            </summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.ClientRootMotionParams">
            <summary>For LocallyControlled Autonomous clients. Saved root motion data to be used by SavedMoves.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.RootMotionRepMoves">
            <summary>Array of previously received root motion moves from the server.</summary>
        </member>
        <member name="P:UnrealEngine.ACharacter.RepRootMotion">
            <summary>Replicated Root Motion montage</summary>
        </member>
        <member name="T:UnrealEngine.AController">
            <summary>
            Controllers are non-physical actors that can possess a Pawn to control
            its actions.  PlayerControllers are used by human players to control pawns, while
            AIControllers implement the artificial intelligence for the pawns they control.
            Controllers take control of a pawn using their Possess() method, and relinquish
            control of the pawn by calling UnPossess().
            Controllers receive notifications for many of the events occurring for the Pawn they
            are controlling.  This gives the controller the opportunity to implement the behavior
            in response to this event, intercepting the event and superseding the Pawn's default
            behavior.
            ControlRotation (accessed via GetControlRotation()), determines the viewing/aiming
            direction of the controlled Pawn and is affected by input such as from a mouse or gamepad.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Controller/
            </summary>
        </member>
        <member name="P:UnrealEngine.AController.Pawn">
            <summary>Pawn currently being controlled by this controller.  Use Pawn.Possess() to take control of a pawn</summary>
        </member>
        <member name="P:UnrealEngine.AController.Character">
            <summary>Character currently being controlled by this controller.  Value is same as Pawn if the controlled pawn is a character, otherwise NULL</summary>
        </member>
        <member name="P:UnrealEngine.AController.PlayerState">
            <summary>PlayerState containing replicated information about the player using this controller (only exists for players, not NPCs).</summary>
        </member>
        <member name="P:UnrealEngine.AController.ControlRotation">
            <summary>The control rotation of the Controller. See GetControlRotation.</summary>
        </member>
        <member name="P:UnrealEngine.AController.bAttachToPawn">
            <summary>
            If true, the controller location will match the possessed Pawn's location. If false, it will not be updated. Rotation will match ControlRotation in either case.
            Since a Controller's location is normally inaccessible, this is intended mainly for purposes of being able to attach
            an Actor that follows the possessed Pawn location, but that still has the full aim rotation (since a Pawn might
            update only some components of the rotation).
            </summary>
        </member>
        <member name="P:UnrealEngine.AController.bIsPlayerController">
            <summary>Whether this controller is a PlayerController.</summary>
        </member>
        <member name="P:UnrealEngine.AController.StateName">
            <summary>CONTROLLER STATE PROPERTIES</summary>
        </member>
        <member name="P:UnrealEngine.AController.OnInstigatedAnyDamage">
            <summary>Called when the controller has instigated damage in any way</summary>
        </member>
        <member name="T:UnrealEngine.ADebugCameraController">
            <summary>
            Camera controller that allows you to fly around a level mostly unrestricted by normal movement rules.
            To turn it on, please press Alt+C or both (left and right) analogs on XBox pad,
            or use the "ToggleDebugCamera" console command. Check the debug camera bindings
            in DefaultPawn.cpp for the camera controls.
            </summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.bShowSelectedInfo">
            <summary>Whether to show information about the selected actor on the debug camera HUD.</summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.bIsFrozenRendering">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.DrawFrustum">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.SpeedScale">
            <summary>Allows control over the speed of the spectator pawn. This scales the speed based on the InitialMaxSpeed. Use Set Pawn Movement Speed Scale during runtime</summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.InitialMaxSpeed">
            <summary>Initial max speed of the spectator pawn when we start possession.</summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.InitialAccel">
            <summary>Initial acceleration of the spectator pawn when we start possession.</summary>
        </member>
        <member name="P:UnrealEngine.ADebugCameraController.InitialDecel">
            <summary>Initial deceleration of the spectator pawn when we start possession.</summary>
        </member>
        <member name="T:UnrealEngine.ADecalActor">
            <summary>
            DecalActor contains a DecalComponent which can be used to render material modifications on top of existing geometry.
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/DecalActor
            @see UDecalComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.ADecalActor.BoxComponent">
            <summary>formerly we used this component to draw a box, now we use the DecalComponentVisualizer</summary>
        </member>
        <member name="T:UnrealEngine.ADefaultPawn">
            <summary>
            DefaultPawn implements a simple Pawn with spherical collision and built-in flying movement.
            @see UFloatingPawnMovement
            </summary>
        </member>
        <member name="P:UnrealEngine.ADefaultPawn.BaseTurnRate">
            <summary>Base turn rate, in deg/sec. Other scaling may affect final turn rate.</summary>
        </member>
        <member name="P:UnrealEngine.ADefaultPawn.BaseLookUpRate">
            <summary>Base lookup rate, in deg/sec. Other scaling may affect final lookup rate.</summary>
        </member>
        <member name="P:UnrealEngine.ADefaultPawn.MovementComponent">
            <summary>DefaultPawn movement component</summary>
        </member>
        <member name="P:UnrealEngine.ADefaultPawn.bAddDefaultMovementBindings">
            <summary>If true, adds default input bindings for movement and camera look.</summary>
        </member>
        <member name="T:UnrealEngine.ADirectionalLight">
            <summary>Implements a directional light actor.</summary>
        </member>
        <member name="P:UnrealEngine.ADocumentationActor.DocumentLink">
            <summary>Link to a help document.</summary>
        </member>
        <member name="P:UnrealEngine.AEmitter.bCurrentlyActive">
            <summary>used to update status of toggleable level placed emitters on clients</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.PS_CameraEffect">
            <summary>Particle System to use</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.PS_CameraEffectNonExtremeContent">
            <summary>The effect to use for non extreme content</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.BaseCamera">
            <summary>Camera this emitter is attached to, will be notified when emitter is destroyed</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.RelativeTransform">
            <summary>
            Effect-to-camera transform to allow arbitrary placement of the particle system .
            Note the X component of the location will be scaled with camera fov to keep the lens effect the same apparent size.
            </summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.BaseFOV">
            <summary>This is the assumed FOV for which the effect was authored. The code will make automatic adjustments to make it look the same at different FOVs</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.bAllowMultipleInstances">
            <summary>true if multiple instances of this emitter can exist simultaneously, false otherwise.</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.bResetWhenRetriggered">
            <summary>If bAllowMultipleInstances is true and this effect is retriggered, the particle system will be reset if this is true</summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.EmittersToTreatAsSame">
            <summary>
            If an emitter class in this array is currently playing, do not play this effect.
            Useful for preventing multiple similar or expensive camera effects from playing simultaneously.
            </summary>
        </member>
        <member name="P:UnrealEngine.AEmitterCameraLensEffectBase.DistFromCamera">
            <summary>DEPRECATED(4.11)</summary>
        </member>
        <member name="T:UnrealEngine.AExponentialHeightFog">
            <summary>Implements an Actor for exponential height fog.</summary>
        </member>
        <member name="P:UnrealEngine.AExponentialHeightFog.bEnabled">
            <summary>replicated copy of ExponentialHeightFogComponent's bEnabled property</summary>
        </member>
        <member name="T:UnrealEngine.AGameMode">
            <summary>
            GameMode is a subclass of GameModeBase that behaves like a multiplayer match-based game.
            It has default behavior for picking spawn points and match state.
            If you want a simpler base, inherit from GameModeBase instead.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.MatchState">
            <summary>What match state we are currently in</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.bDelayedStart">
            <summary>Whether the game should immediately start when the first player logs in. Affects the default behavior of ReadyToStartMatch</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.NumSpectators">
            <summary>Current number of spectators.</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.NumPlayers">
            <summary>Current number of human players.</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.NumBots">
            <summary>number of non-human players (AI controlled but participating as a player).</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.MinRespawnDelay">
            <summary>Minimum time before player can respawn after dying.</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.NumTravellingPlayers">
            <summary>Number of players that are still traveling from a previous map</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.EngineMessageClass">
            <summary>Contains strings describing localized game agnostic messages.</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.InactivePlayerArray">
            <summary>PlayerStates of players who have disconnected from the server (saved in case they reconnect)</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.InactivePlayerStateLifeSpan">
            <summary>Time a playerstate will stick around in an inactive state after a player logout</summary>
        </member>
        <member name="P:UnrealEngine.AGameMode.bHandleDedicatedServerReplays">
            <summary>If true, dedicated servers will record replays when HandleMatchHasStarted/HandleMatchHasStopped is called</summary>
        </member>
        <member name="T:UnrealEngine.AGameModeBase">
            <summary>
            The GameModeBase defines the game being played. It governs the game rules, scoring, what actors
            are allowed to exist in this game type, and who may enter the game.
            It is only instanced on the server and will never exist on the client.
            A GameModeBase actor is instantiated when the level is initialized for gameplay in
            C++ UGameEngine::LoadMap().
            The class of this GameMode actor is determined by (in order) either the URL ?game=xxx,
            the GameMode Override value set in the World Settings, or the DefaultGameMode entry set
            in the game's Project Settings.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/GameMode/index.html
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.OptionsString">
            <summary>Save options string and parse it when needed</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.GameSessionClass">
            <summary>Class of GameSession, which handles login approval and online game interface</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.GameStateClass">
            <summary>Class of GameState associated with this GameMode.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.PlayerControllerClass">
            <summary>The class of PlayerController to spawn for players logging in.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.PlayerStateClass">
            <summary>A PlayerState of this class will be associated with every player to replicate relevant player information to all clients.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.HUDClass">
            <summary>HUD class this game uses.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.DefaultPawnClass">
            <summary>The default pawn class used by players.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.SpectatorClass">
            <summary>The pawn class used by the PlayerController for players when spectating.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.ReplaySpectatorPlayerControllerClass">
            <summary>The PlayerController class used when spectating a network replay.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.GameSession">
            <summary>Game Session handles login approval, arbitration, online game interface</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.GameState">
            <summary>GameState is used to replicate game state relevant properties to all clients.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.DefaultPlayerName">
            <summary>The default player name assigned to players that join with no name specified.</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.bUseSeamlessTravel">
            <summary>Whether the game perform map travels using SeamlessTravel() which loads in the background and doesn't disconnect clients</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.bStartPlayersAsSpectators">
            <summary>Whether players should immediately spawn when logging in, or stay as spectators until they manually spawn</summary>
        </member>
        <member name="P:UnrealEngine.AGameModeBase.bPauseable">
            <summary>Whether the game is pauseable.</summary>
        </member>
        <member name="T:UnrealEngine.AGameNetworkManager">
            <summary>Handles game-specific networking management (cheat detection, bandwidth management, etc.).</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.AdjustedNetSpeed">
            <summary>Current adjusted net speed - Used for dynamically managing netspeed for listen servers</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.LastNetSpeedUpdateTime">
            <summary>Last time netspeed was updated for server (by client entering or leaving)</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.TotalNetBandwidth">
            <summary>Total available bandwidth for listen server, split dynamically across net connections</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MinDynamicBandwidth">
            <summary>Minimum bandwidth dynamically set per connection</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MaxDynamicBandwidth">
            <summary>Maximum bandwidth dynamically set per connection</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.bIsStandbyCheckingEnabled">
            <summary>Used to determine if checking for standby cheats should occur</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.bHasStandbyCheatTriggered">
            <summary>Used to determine whether we've already caught a cheat or not</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.StandbyRxCheatTime">
            <summary>The amount of time without packets before triggering the cheat code</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.StandbyTxCheatTime">
            <summary>The amount of time without packets before triggering the cheat code</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.BadPingThreshold">
            <summary>The point we determine the server is either delaying packets or has bad upstream</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.PercentMissingForRxStandby">
            <summary>The percentage of clients missing RX data before triggering the standby code</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.PercentMissingForTxStandby">
            <summary>The percentage of clients missing TX data before triggering the standby code</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.PercentForBadPing">
            <summary>The percentage of clients with bad ping before triggering the standby code</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.JoinInProgressStandbyWaitTime">
            <summary>The amount of time to wait before checking a connection for standby issues</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MoveRepSize">
            <summary>Average size of replicated move packet (ServerMove() packet size) from player</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MAXPOSITIONERRORSQUARED">
            <summary>MAXPOSITIONERRORSQUARED is the square of the max position error that is accepted (not corrected) in net play</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MAXNEARZEROVELOCITYSQUARED">
            <summary>MAXNEARZEROVELOCITYSQUARED is the square of the max velocity that is considered zero (not corrected) in net play</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.CLIENTADJUSTUPDATECOST">
            <summary>
            CLIENTADJUSTUPDATECOST is the bandwidth cost in bytes of sending a client adjustment update. 180 is greater than the actual cost, but represents a tweaked value reserving enough bandwidth for
                  other updates sent to the client.  Increase this value to reduce client adjustment update frequency, or if the amount of data sent in the clientadjustment() call increases
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MAXCLIENTUPDATEINTERVAL">
            <summary>MAXCLIENTUPDATEINTERVAL is the maximum time between movement updates from the client before the server forces an update.</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MaxMoveDeltaTime">
            <summary>MaxMoveDeltaTime is the default maximum time delta of CharacterMovement ServerMoves. Should be less than or equal to MAXCLIENTUPDATEINTERVAL, otherwise server will interfere by forceing position updates</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.ClientAuthorativePosition">
            <summary>If client update is within MAXPOSITIONERRORSQUARED then he is authorative on his final position</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.ClientErrorUpdateRateLimit">
            <summary>Minimum delay between the server sending error corrections to a client, in seconds.</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.bMovementTimeDiscrepancyDetection">
            <summary>Whether movement time discrepancy detection is enabled.</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.bMovementTimeDiscrepancyResolution">
            <summary>Whether movement time discrepancy resolution is enabled (when detected, make client movement "pay back" excessive time discrepancies)</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MovementTimeDiscrepancyMaxTimeMargin">
            <summary>Maximum time client can be ahead before triggering movement time discrepancy detection/resolution (if enabled).</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MovementTimeDiscrepancyMinTimeMargin">
            <summary>Maximum time client can be behind.</summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MovementTimeDiscrepancyResolutionRate">
            <summary>
            During time discrepancy resolution, we "pay back" the time discrepancy at this rate for future moves until total error is zero.
            1.0 = 100% resolution rate, meaning the next X ServerMoves from the client are fully paying back the time,
            0.5 = 50% resolution rate, meaning future ServerMoves will spend 50% of tick continuing to move the character and 50% paying back.
            Lowering from 100% could be used to produce less severe/noticeable corrections, although typically we would want to correct
            the client as quickly as possible.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.MovementTimeDiscrepancyDriftAllowance">
            <summary>
            Accepted drift in clocks between client and server as a percent per second allowed.
            0.0 is "no forgiveness" and all logic would run on raw values, no tampering on the server side.
            0.02 would be a 2% per second difference "forgiven" - if the time discrepancy in a given second was less than 2%,
            the error handling/detection code effectively ignores it.
            Increasing this value above 0% lessens the chance of false positives on time discrepancy (burst packet loss, performance
            hitches), but also means anyone tampering with their client time below that percent will not be detected and no resolution
            action will be taken, and anyone above that threshold will still gain the advantage of this % of time boost (if running at
            10% speed-up and this value is 0.05 or 5% allowance, they would only be resolved down to a 5% speed boost).
            Time discrepancy detection code DOES keep track of LifetimeRawTimeDiscrepancy, which is unaffected by this drift allowance,
            so cheating below DriftAllowance percent could be tracked and acted on outside of an individual game. For example, if DriftAllowance
            was 0.05 (meaning we're not going to actively prevent any cheating below 5% boosts to ensure less false positives for normal players),
            we could still post-process analytics of the game showing that Player X regularly runs at 4% speed boost and take action.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.bMovementTimeDiscrepancyForceCorrectionsDuringResolution">
            <summary>
            Whether client moves should be force corrected during time discrepancy resolution, useful for projects that have lenient
            move error tolerance/ClientAuthorativePosition enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameNetworkManager.bUseDistanceBasedRelevancy">
            <summary>If true, actor network relevancy is constrained by whether they are within their NetCullDistanceSquared from the client's view point.</summary>
        </member>
        <member name="T:UnrealEngine.AGameSession">
            <summary>
            Acts as a game-specific wrapper around the session interface. The game code makes calls to this when it needs to interact with the session interface.
            A game session exists only the server, while running an online game.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameSession.MaxSpectators">
            <summary>Maximum number of spectators allowed by this server.</summary>
        </member>
        <member name="P:UnrealEngine.AGameSession.MaxPlayers">
            <summary>Maximum number of players allowed by this server.</summary>
        </member>
        <member name="P:UnrealEngine.AGameSession.MaxPartySize">
            <summary>Restrictions on the largest party that can join together</summary>
        </member>
        <member name="P:UnrealEngine.AGameSession.MaxSplitscreensPerConnection">
            <summary>Maximum number of splitscreen players to allow from one connection</summary>
        </member>
        <member name="P:UnrealEngine.AGameSession.bRequiresPushToTalk">
            <summary>Is voice enabled always or via a push to talk keybinding</summary>
        </member>
        <member name="P:UnrealEngine.AGameSession.SessionName">
            <summary>SessionName local copy from PlayerState class.  should really be define in this class, but need to address replication issues</summary>
        </member>
        <member name="T:UnrealEngine.AGameState">
            <summary>
            GameState is a subclass of GameStateBase that behaves like a multiplayer match-based game.
            It is tied to functionality in GameMode.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameState.MatchState">
            <summary>What match state we are currently in</summary>
        </member>
        <member name="P:UnrealEngine.AGameState.PreviousMatchState">
            <summary>Previous map state, used to handle if multiple transitions happen per frame</summary>
        </member>
        <member name="P:UnrealEngine.AGameState.ElapsedTime">
            <summary>Elapsed game time since match has started.</summary>
        </member>
        <member name="T:UnrealEngine.AGameStateBase">
            <summary>
            GameStateBase is a class that manages the game's global state, and is spawned by GameModeBase.
            It exists on both the client and the server and is fully replicated.
            </summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.GameModeClass">
            <summary>Class of the server's game mode, assigned by GameModeBase.</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.AuthorityGameMode">
            <summary>Instance of the current game mode, exists only on the server. For non-authority clients, this will be NULL.</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.SpectatorClass">
            <summary>Class used by spectators, assigned by GameModeBase.</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.PlayerArray">
            <summary>Array of all PlayerStates, maintained on both server and clients (PlayerStates are always relevant)</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.bReplicatedHasBegunPlay">
            <summary>Replicated when GameModeBase->StartPlay has been called so the client will also start play</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.ReplicatedWorldTimeSeconds">
            <summary>Server TimeSeconds. Useful for syncing up animation and gameplay.</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.ServerWorldTimeSecondsDelta">
            <summary>The difference from the local world's TimeSeconds and the server world's TimeSeconds.</summary>
        </member>
        <member name="P:UnrealEngine.AGameStateBase.ServerWorldTimeSecondsUpdateFrequency">
            <summary>Frequency that the server updates the replicated TimeSeconds from the world. Set to zero to disable periodic updates.</summary>
        </member>
        <member name="T:UnrealEngine.AHUD">
            <summary>
            Base class of the heads-up display. This has a canvas and a debug canvas on which primitives can be drawn.
            It also contains a list of simple hit boxes that can be used for simple item click detection.
            A method of rendering debug text is also included.
            Provides some simple methods for rendering text, textures, rectangles and materials which can also be accessed from blueprints.
            @see UCanvas
            @see FHUDHitBox
            @see FDebugTextInfo
            </summary>
        </member>
        <member name="P:UnrealEngine.AHUD.PlayerOwner">
            <summary>PlayerController which owns this HUD.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.bLostFocusPaused">
            <summary>Tells whether the game was paused due to lost focus</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.bShowHUD">
            <summary>Whether or not the HUD should be drawn.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.bShowDebugInfo">
            <summary>If true, current ViewTarget shows debug information using its DisplayDebug().</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.bShowHitBoxDebugInfo">
            <summary>If true, show hitbox debugging info.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.bShowOverlays">
            <summary>If true, render actor overlays.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.bEnableDebugTextShadow">
            <summary>Put shadow on debug strings</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.PostRenderedActors">
            <summary>Holds a list of Actors that need PostRender() calls.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.DebugDisplay">
            <summary>Array of names specifying what debug info to display for viewtarget actor.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.ToggledDebugCategories">
            <summary>Array of names specifying what subsets of debug info to display for viewtarget actor.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.Canvas">
            <summary>Canvas to Draw HUD on.  Only valid during PostRender() event.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.DebugCanvas">
            <summary>'Foreground' debug canvas, will draw in front of Slate UI.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.ShowDebugTargetDesiredClass">
            <summary>Class filter for selecting 'ShowDebugTargetActor' when 'bShowDebugForReticleTarget' is true.</summary>
        </member>
        <member name="P:UnrealEngine.AHUD.ShowDebugTargetActor">
            <summary>Show Debug Actor used if 'bShowDebugForReticleTarget' is true, only updated if trace from reticle hit a new Actor of class 'ShowDebugTargetDesiredClass'</summary>
        </member>
        <member name="T:UnrealEngine.AInfo">
            <summary>
            Info is the base class of an Actor that isn't meant to have a physical representation in the world, used primarily
            for "manager" type classes that hold settings data about the world, but might need to be an Actor for replication purposes.
            </summary>
        </member>
        <member name="T:UnrealEngine.ALevelBounds">
            <summary>
            Defines level bounds
            Updates bounding box automatically based on actors transformation changes or holds fixed user defined bounding box
            Uses only actors where AActor::IsLevelBoundsRelevant() == true
            </summary>
        </member>
        <member name="P:UnrealEngine.ALevelBounds.bAutoUpdateBounds">
            <summary>Whether to automatically update actor bounds based on all relevant actors bounds belonging to the same level</summary>
        </member>
        <member name="T:UnrealEngine.ALevelScriptActor">
            <summary>
            ALevelScriptActor is the base class for classes generated by
            ULevelScriptBlueprints. ALevelScriptActor instances are hidden actors that
            exist within a level, and can execute level-wide logic (operating on specific
            actor instances within the level). The level-script's functionality is defined
            inside the ULevelScriptBlueprint itself (using the blueprint's node-based
            interface).
            @see AActor
            @see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/Types/LevelBlueprint/index.html
            @see ULevelScriptBlueprint
            @see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/index.html
            @see UBlueprint
            </summary>
        </member>
        <member name="P:UnrealEngine.ALevelStreamingVolume.StreamingLevelNames">
            <summary>Levels names affected by this level streaming volume.</summary>
        </member>
        <member name="P:UnrealEngine.ALevelStreamingVolume.bEditorPreVisOnly">
            <summary>If true, this streaming volume should only be used for editor streaming level previs.</summary>
        </member>
        <member name="P:UnrealEngine.ALevelStreamingVolume.bDisabled">
            <summary>
            If true, this streaming volume is ignored by the streaming volume code.  Used to either
            disable a level streaming volume without disassociating it from the level, or to toggle
            the control of a level's streaming between Kismet and volume streaming.
            </summary>
        </member>
        <member name="P:UnrealEngine.ALevelStreamingVolume.StreamingUsage">
            <summary>Determines what this volume is used for, e.g. whether to control loading, loading and visibility or just visibilty (blocking on load)</summary>
        </member>
        <member name="P:UnrealEngine.ALight.bEnabled">
            <summary>replicated copy of LightComponent's bEnabled property</summary>
        </member>
        <member name="T:UnrealEngine.ALODActor">
            <summary>
            LODActor is an instance of an autogenerated StaticMesh Actors by Hierarchical LOD System
            This is essentially just StaticMeshActor that you can't move or edit, but it contains multiple actors reference
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/LODActor/
            @see UStaticMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.StaticMeshComponent">
            <summary>disable display of this component</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.LODDrawDistance">
            <summary>what distance do you want this to show up instead of SubActors</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.LODLevel">
            <summary>The hierarchy level of this actor; the first tier of HLOD is level 1, the second tier is level 2 and so on.</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.SubObjects">
            <summary>assets that were created for this, so that we can delete them</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.bDirty">
            <summary>Whether or not this LODActor is not build or needs rebuilding</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.NumTrianglesInSubActors">
            <summary>Cached number of triangles contained in the SubActors</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.NumTrianglesInMergedMesh">
            <summary>Cached number of triangles contained in the SubActors</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.bOverrideMaterialMergeSettings">
            <summary>Flag whether or not to use the override MaterialSettings when creating the proxy mesh</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.MaterialSettings">
            <summary>Override Material Settings, used when creating the proxy mesh</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.bOverrideTransitionScreenSize">
            <summary>Flag whether or not to use the override TransitionScreenSize for this proxy mesh</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.TransitionScreenSize">
            <summary>
            Override transition screen size value, determines the screen size at which the proxy is visible
            The screen size is based around the projected diameter of the bounding
            sphere of the model. i.e. 0.5 means half the screen's maximum dimension.
            </summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.bOverrideScreenSize">
            <summary>Flag whether or not to use the override ScreenSize when creating the proxy mesh</summary>
        </member>
        <member name="P:UnrealEngine.ALODActor.ScreenSize">
            <summary>Override screen size value used in mesh reduction, when creating the proxy mesh</summary>
        </member>
        <member name="P:UnrealEngine.AMaterialInstanceActor.TargetActors">
            <summary>Pointer to actors that we want to control paramters of using Matinee.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.MatineeData">
            <summary>The matinee data used by this actor</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.MatineeControllerName">
            <summary>Name of controller node in level script, used to know what function to try and find for events</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.PlayRate">
            <summary>Time multiplier for playback.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bPlayOnLevelLoad">
            <summary>If true, the matinee will play when the level is loaded.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bForceStartPos">
            <summary>Lets you force the sequence to always start at ForceStartPosition</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.ForceStartPosition">
            <summary>Time position to always start at if bForceStartPos is set to true.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bLooping">
            <summary>
            If sequence should pop back to beginning when finished.
            Note, if true, will never get Completed/Reversed events - sequence must be explicitly Stopped.
            </summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bRewindOnPlay">
            <summary>If true, sequence will rewind itself back to the start each time the Play input is activated.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bNoResetOnRewind">
            <summary>
            If true, when rewinding this interpolation, reset the 'initial positions' of any RelateToInitial movements to the current location.
            This allows the next loop of movement to proceed from the current locations.
            </summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bRewindIfAlreadyPlaying">
            <summary>
            Only used if bRewindOnPlay if true. Defines what should happen if the Play input is activated while currently playing.
            If true, hitting Play while currently playing will pop the position back to the start and begin playback over again.
            If false, hitting Play while currently playing will do nothing.
            </summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bDisableRadioFilter">
            <summary>If true, disables the realtime radio effect</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bClientSideOnly">
            <summary>
            Indicates that this interpolation does not affect gameplay. This means that:
            -it is not replicated via MatineeActor
            -it is not ticked if no affected Actors are visible
            -on dedicated servers, it is completely ignored
            </summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bSkipUpdateIfNotVisible">
            <summary>if bClientSideOnly is true, whether this matinee should be completely skipped if none of the affected Actors are visible</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bIsSkippable">
            <summary>Lets you skip the matinee with the CANCELMATINEE exec command. Triggers all events to the end along the way.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.PreferredSplitScreenNum">
            <summary>Preferred local viewport number (when split screen is active) the director track should associate with, or zero for 'all'.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bDisableMovementInput">
            <summary>Disable Input from player during play</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bDisableLookAtInput">
            <summary>Disable LookAt Input from player during play</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bHidePlayer">
            <summary>Hide Player Pawn during play</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bHideHud">
            <summary>Hide HUD during play</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.GroupActorInfos">
            <summary>@todo UE4 matinee - shouldnt be directly editable.  Needs a nice interface in matinee</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bShouldShowGore">
            <summary>Cached value that indicates whether or not gore was enabled when the sequence was started</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.GroupInst">
            <summary>Instance data for interp groups. One for each variable/group combination.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.CameraCuts">
            <summary>Contains the camera world-position for each camera cut in the cinematic.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bIsScrubbing">
            <summary>Set by the editor when scrubbing data</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bIsPlaying">
            <summary>properties that may change on InterpAction that we need to notify clients about, since the object's properties will not be replicated</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.bPendingStop">
            <summary>The below property is deprecated and will be removed in 4.9.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.ReplicationForceIsPlaying">
            <summary>Counter to indicate that play count has changed. Used to work around single frames that go from play-stop-play where bIsPlaying won't get replicated.</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.OnPlay">
            <summary>Event triggered when the matinee is played for whatever reason</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.OnStop">
            <summary>Event triggered when the matinee is stopped for whatever reason</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActor.OnPause">
            <summary>Event triggered when the matinee is paused for whatever reason</summary>
        </member>
        <member name="T:UnrealEngine.AMatineeActorCameraAnim">
            <summary>Actor used to control temporary matinees for camera anims that only exist in the editor</summary>
        </member>
        <member name="P:UnrealEngine.AMatineeActorCameraAnim.CameraAnim">
            <summary>The camera anim we are editing</summary>
        </member>
        <member name="T:UnrealEngine.ANavigationData">
            <summary>
            Represents abstract Navigation Data (sub-classed as NavMesh, NavGraph, etc)
            Used as a common interface for all navigation types handled by NavigationSystem
            </summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.bEnableDrawing">
            <summary>if set to true then this navigation data will be drawing itself when requested as part of "show navigation"</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.bForceRebuildOnLoad">
            <summary>
            By default navigation will skip the first update after being successfully loaded
            setting bForceRebuildOnLoad to false can override this behavior
            </summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.bCanBeMainNavData">
            <summary>If set, navigation data can act as default one in navigation system's queries</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.bCanSpawnOnRebuild">
            <summary>If set, navigation data will be spawned in persistent level during rebuild if actor doesn't exist</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.bRebuildAtRuntime">
            <summary>If true, the NavMesh can be dynamically rebuilt at runtime.</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.ObservedPathsTickInterval">
            <summary>all observed paths will be processed every ObservedPathsTickInterval seconds</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.DataVersion">
            <summary>Navigation data versioning.</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationData.SupportedAreas">
            <summary>serialized area class - ID mapping</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationObjectBase.bIsPIEPlayerStart">
            <summary>True if this nav point was spawned to be a PIE player start.</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.NavAgentProps">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.bGatherDetailedInfo">
            <summary>if set, all steps of A* algorithm will be accessible for debugging</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.bShowNodePool">
            <summary>show polys from open (orange) and closed (yellow) sets</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.bShowBestPath">
            <summary>show current best path</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.bShowDiffWithPreviousStep">
            <summary>show which nodes were modified in current A* step</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.CostDisplayMode">
            <summary>determines which cost will be shown</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.TextCanvasOffset">
            <summary>text canvas offset to apply</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.PathfindingTime">
            <summary>Time in micro seconds</summary>
        </member>
        <member name="P:UnrealEngine.ANavigationTestingActor.FilterClass">
            <summary>"None" will result in default filter being used</summary>
        </member>
        <member name="P:UnrealEngine.ANavLinkProxy.PointLinks">
            <summary>Navigation links (point to point) added to navigation data</summary>
        </member>
        <member name="P:UnrealEngine.ANavLinkProxy.SegmentLinks">
            <summary>
            Navigation links (segment to segment) added to navigation data
                 @todo hidden from use until we fix segment links. Not really working now
            </summary>
        </member>
        <member name="P:UnrealEngine.ANavLinkProxy.bSmartLinkIsRelevant">
            <summary>Smart link: toggle relevancy</summary>
        </member>
        <member name="T:UnrealEngine.ANavModifierVolume">
            <summary>Allows applying selected AreaClass to navmesh, using Volume's shape</summary>
        </member>
        <member name="T:UnrealEngine.APainCausingVolume">
            <summary>Volume that causes damage over time to any Actor that overlaps its collision.</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.bPainCausing">
            <summary>Whether volume currently causes damage.</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.DamagePerSec">
            <summary>Damage done per second to actors in this volume when bPainCausing=true</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.DamageType">
            <summary>Type of damage done</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.PainInterval">
            <summary>If pain causing, time between damage applications.</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.bEntryPain">
            <summary>if bPainCausing, cause pain when something enters the volume in addition to damage each second</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.BACKUP_bPainCausing">
            <summary>Checkpointed bPainCausing value</summary>
        </member>
        <member name="P:UnrealEngine.APainCausingVolume.DamageInstigator">
            <summary>Controller that gets credit for any damage caused by this volume</summary>
        </member>
        <member name="T:UnrealEngine.APawn">
            <summary>
            Pawn is the base class of all actors that can be possessed by players or AI.
            They are the physical representations of players and creatures in a level.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Pawn/
            </summary>
        </member>
        <member name="P:UnrealEngine.APawn.bUseControllerRotationPitch">
            <summary>If true, this Pawn's pitch will be updated to match the Controller's ControlRotation pitch, if controlled by a PlayerController.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.bUseControllerRotationYaw">
            <summary>If true, this Pawn's yaw will be updated to match the Controller's ControlRotation yaw, if controlled by a PlayerController.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.bUseControllerRotationRoll">
            <summary>If true, this Pawn's roll will be updated to match the Controller's ControlRotation roll, if controlled by a PlayerController.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.bCanAffectNavigationGeneration">
            <summary>
            If set to false (default) given pawn instance will never affect navigation generation.
                Setting it to true will result in using regular AActor's navigation relevancy
                calculation to check if this pawn instance should affect navigation generation
                Use SetCanAffectNavigationGeneration to change this value at runtime.
                Note that modifying this value at runtime will result in any navigation change only if runtime navigation generation is enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.APawn.BaseEyeHeight">
            <summary>Base eye height above collision center.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.AutoPossessPlayer">
            <summary>
            Determines which PlayerController, if any, should automatically possess the pawn when the level starts or when the pawn is spawned.
            @see AutoPossessAI
            </summary>
        </member>
        <member name="P:UnrealEngine.APawn.AIControllerClass">
            <summary>Default class to use when pawn is controlled by AI.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.PlayerState">
            <summary>If Pawn is possessed by a player, points to his playerstate.  Needed for network play as controllers are not replicated to clients.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.RemoteViewPitch">
            <summary>Replicated so we can see where remote clients are looking.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.LastHitBy">
            <summary>Controller of the last Actor that caused us damage.</summary>
        </member>
        <member name="P:UnrealEngine.APawn.Controller">
            <summary>Controller currently possessing this Actor</summary>
        </member>
        <member name="P:UnrealEngine.APawn.ControlInputVector">
            <summary>
            Accumulated control input vector, stored in world space. This is the pending input, which is cleared (zeroed) once consumed.
            @see GetPendingMovementInputVector(), AddMovementInput()
            </summary>
        </member>
        <member name="P:UnrealEngine.APawn.LastControlInputVector">
            <summary>
            The last control input vector that was processed by ConsumeMovementInputVector().
            @see GetLastMovementInputVector()
            </summary>
        </member>
        <member name="T:UnrealEngine.APhysicsVolume">
            <summary>
            PhysicsVolume: A bounding volume which affects actor physics.
            Each AActor is affected at any time by one PhysicsVolume.
            </summary>
        </member>
        <member name="P:UnrealEngine.APhysicsVolume.TerminalVelocity">
            <summary>Terminal velocity of pawns using CharacterMovement when falling.</summary>
        </member>
        <member name="P:UnrealEngine.APhysicsVolume.Priority">
            <summary>Determines which PhysicsVolume takes precedence if they overlap (higher number = higher priority).</summary>
        </member>
        <member name="P:UnrealEngine.APhysicsVolume.FluidFriction">
            <summary>This property controls the amount of friction applied by the volume as pawns using CharacterMovement move through it. The higher this value, the harder it will feel to move through</summary>
        </member>
        <member name="P:UnrealEngine.APhysicsVolume.bWaterVolume">
            <summary>True if this volume contains a fluid like water</summary>
        </member>
        <member name="P:UnrealEngine.APhysicsVolume.bPhysicsOnContact">
            <summary>By default, the origin of an AActor must be inside a PhysicsVolume for it to affect the actor. However if this flag is true, the other actor only has to touch the volume to be affected by it.</summary>
        </member>
        <member name="P:UnrealEngine.APlanarReflection.PlanarReflectionComponent">
            <summary>Planar reflection component.</summary>
        </member>
        <member name="T:UnrealEngine.APlayerCameraManager">
            <summary>
            A PlayerCameraManager is responsible for managing the camera for a particular
            player. It defines the final view properties used by other systems (e.g. the renderer),
            meaning you can think of it as your virtual eyeball in the world. It can compute the
            final camera properties directly, or it can arbitrate/blend between other objects or
            actors that influence the camera (e.g. blending from one CameraActor to another).
            The PlayerCameraManagers primary external responsibility is to reliably respond to
            various Get*() functions, such as GetCameraViewPoint. Most everything else is
            implementation detail and overrideable by user projects.
            By default, a PlayerCameraManager maintains a "view target", which is the primary actor
            the camera is associated with. It can also apply various "post" effects to the final
            view state, such as camera animations, shakes, post-process effects or special
            effects such as dirt on the lens.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Camera/
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.PCOwner">
            <summary>PlayerController that owns this Camera actor</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.DefaultFOV">
            <summary>FOV to use by default.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.DefaultOrthoWidth">
            <summary>The default desired width (in world units) of the orthographic view (ignored in Perspective mode)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.DefaultAspectRatio">
            <summary>Default aspect ratio</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.CameraCache">
            <summary>Cached camera properties.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.LastFrameCameraCache">
            <summary>Cached camera properties, one frame old.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewTarget">
            <summary>Current ViewTarget</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.PendingViewTarget">
            <summary>Pending view target for blending</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ModifierList">
            <summary>List of active camera modifier instances that have a chance to update the final camera POV</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.DefaultModifiers">
            <summary>List of modifiers to create by default for this camera</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.FreeCamDistance">
            <summary>Distance to place free camera from view target (used in certain CameraStyles)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.FreeCamOffset">
            <summary>Offset to Z free camera position (used in certain CameraStyles)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewTargetOffset">
            <summary>Offset to view target (used in certain CameraStyles)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.CameraLensEffects">
            <summary>CameraBlood emitter attached to this camera</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.CachedCameraShakeMod">
            <summary>Cached ref to modifier for code-driven screen shakes</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.AnimInstPool">
            <summary>Internal pool of camera anim instance objects available for playing camera animations. Defines the max number of camera anims that can play simultaneously.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.PostProcessBlendCache">
            <summary>Internal list of active post process effects. Parallel array to PostProcessBlendCacheWeights.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ActiveAnims">
            <summary>Array of camera anim instances that are currently playing and in-use</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.FreeAnims">
            <summary>Array of camera anim instances that are not playing and available to be used.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.AnimCameraActor">
            <summary>Internal. Receives the output of individual camera animations.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.bIsOrthographic">
            <summary>True when this camera should use an orthographic perspective instead of FOV</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.bUseClientSideCameraUpdates">
            <summary>True if server will use camera positions replicated from the client instead of calculating them locally.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewPitchMin">
            <summary>Minimum view pitch, in degrees.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewPitchMax">
            <summary>Maximum view pitch, in degrees.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewYawMin">
            <summary>Minimum view yaw, in degrees.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewYawMax">
            <summary>Maximum view yaw, in degrees.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewRollMin">
            <summary>Minimum view roll, in degrees.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerCameraManager.ViewRollMax">
            <summary>Maximum view roll, in degrees.</summary>
        </member>
        <member name="T:UnrealEngine.APlayerController">
            <summary>
            PlayerControllers are used by human players to control Pawns.
            ControlRotation (accessed via GetControlRotation()), determines the aiming
            orientation of the controlled Pawn.
            In networked games, PlayerControllers exist on the server for every player-controlled pawn,
            and also on the controlling client's machine. They do NOT exist on a client's
            machine for pawns controlled by remote players elsewhere on the network.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Controller/PlayerController/
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.Player">
            <summary>UPlayer associated with this PlayerController.  Could be a local player or a net connection.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.AcknowledgedPawn">
            <summary>Used in net games so client can acknowledge it possessed a specific pawn.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.ControllingDirTrackInst">
            <summary>Director track that's currently possessing this player controller, or none if not possessed.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.MyHUD">
            <summary>Heads up display associated with this PlayerController.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.PlayerCameraManager">
            <summary>Camera manager associated with this Player Controller.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.PlayerCameraManagerClass">
            <summary>PlayerCamera class should be set for each game, otherwise Engine.PlayerCameraManager is used</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bAutoManageActiveCameraTarget">
            <summary>
            True to allow this player controller to manage the camera target for you,
            typically by using the possessed pawn as the camera target. Set to false
            if you want to manually control the camera target.
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.TargetViewRotation">
            <summary>Used to replicate the view rotation of targets not owned/possessed by this PlayerController.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.SmoothTargetViewRotationSpeed">
            <summary>Interp speed for blending remote view rotation for smoother client updates</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.HiddenActors">
            <summary>The actors which the camera shouldn't see - e.g. used to hide actors which the camera penetrates</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.LastSpectatorStateSynchTime">
            <summary>Used to make sure the client is kept synchronized when in a spectator state</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.LastSpectatorSyncLocation">
            <summary>Last location synced on the server for a spectator.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.LastSpectatorSyncRotation">
            <summary>Last rotation synced on the server for a spectator.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.ClientCap">
            <summary>Cap set by server on bandwidth from client to server in bytes/sec (only has impact if >=2600)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.CheatManager">
            <summary>Object that manages "cheat" commands.  Not instantiated in shipping builds.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.CheatClass">
            <summary>Class of my CheatManager.  The Cheat Manager is not created in shipping builds</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.PlayerInput">
            <summary>Object that manages player input.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bPlayerIsWaiting">
            <summary>True if PlayerController is currently waiting for the match to start or to respawn. Only valid in Spectating state.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.NetPlayerIndex">
            <summary>
            index identifying players using the same base connection (splitscreen clients)
            Used by netcode to match replicated PlayerControllers to the correct splitscreen viewport and child connection
            replicated via special internal code, not through normal variable replication
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.PendingSwapConnection">
            <summary>
            this is set on the OLD PlayerController when performing a swap over a network connection
            so we know what connection we're waiting on acknowledgment from to finish destroying this PC
            (or when the connection is closed)
            @see GameModeBase::SwapPlayerControllers()
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.NetConnection">
            <summary>The net connection this controller is communicating on, NULL for local players on server</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.InputYawScale">
            <summary>Yaw input speed scaling</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.InputPitchScale">
            <summary>Pitch input speed scaling</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.InputRollScale">
            <summary>Roll input speed scaling</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bShowMouseCursor">
            <summary>Whether the mouse cursor should be displayed.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bEnableClickEvents">
            <summary>Whether actor/component click events should be generated.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bEnableTouchEvents">
            <summary>Whether actor/component touch events should be generated.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bEnableMouseOverEvents">
            <summary>Whether actor/component mouse over events should be generated.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bEnableTouchOverEvents">
            <summary>Whether actor/component touch over events should be generated.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.DefaultClickTraceChannel">
            <summary>Default trace channel used for determining what world object was clicked on.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.CurrentClickTraceChannel">
            <summary>Trace channel currently being used for determining what world object was clicked on.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.InactiveStateInputComponent">
            <summary>InputComponent we use when player is in Inactive state.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.CurrentTouchInterface">
            <summary>The currently set touch interface</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.SpectatorPawn">
            <summary>The pawn used when spectating (NULL if not spectating).</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.SpawnLocation">
            <summary>The location used internally when there is no pawn or spectator, to know where to spawn the spectator or focus the camera on death.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.bIsLocalPlayerController">
            <summary>Set during SpawnActor once and never again to indicate the intent of this controller instance (SERVER ONLY)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.SeamlessTravelCount">
            <summary>Counter for this players seamless travels (used along with the below value, to restrict ServerNotifyLoadedWorld)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerController.LastCompletedSeamlessTravelCount">
            <summary>The value of SeamlessTravelCount, upon the last call to GameModeBase::HandleSeamlessTravelPlayer; used to detect seamless travel</summary>
        </member>
        <member name="T:UnrealEngine.APlayerStart">
            <summary>
            This class indicates a location where a player can spawn when the game begins
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/PlayerStart/
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerStart.PlayerStartTag">
            <summary>Used when searching for which playerstart to use.</summary>
        </member>
        <member name="T:UnrealEngine.APlayerState">
            <summary>
            A PlayerState is created for every player on a server (or in a standalone game).
            PlayerStates are replicated to all clients, and contain network game relevant information about the player, such as playername, score, etc.
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.Score">
            <summary>Player's current score.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.Ping">
            <summary>Replicated compressed ping for this player (holds ping in msec divided by 4)</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.PlayerName">
            <summary>Player name, or blank if none.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.PlayerId">
            <summary>Unique net id number. Actual value varies based on current online subsystem, use it only as a guaranteed unique number per player.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.bIsSpectator">
            <summary>Whether this player is currently a spectator</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.bOnlySpectator">
            <summary>Whether this player can only ever be a spectator</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.bIsABot">
            <summary>True if this PlayerState is associated with an AIController</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.bIsInactive">
            <summary>Means this PlayerState came from the GameMode's InactivePlayerArray</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.bFromPreviousLevel">
            <summary>
            indicates this is a PlayerState from the previous level of a seamless travel,
            waiting for the player to finish the transition before creating a new one
            this is used to avoid preserving the PlayerState in the InactivePlayerArray if the player leaves
            </summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.StartTime">
            <summary>Elapsed time on server when this PlayerState was first created.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.EngineMessageClass">
            <summary>This is used for sending game agnostic messages that can be localized</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.SavedNetworkAddress">
            <summary>Used to match up InactivePlayerState with rejoining playercontroller.</summary>
        </member>
        <member name="P:UnrealEngine.APlayerState.UniqueId">
            <summary>
            The id used by the network to uniquely identify a player.
            NOTE: the internals of this property should *never* be exposed to the player as it's transient
            and opaque in meaning (ie it might mean date/time followed by something else).
            It is OK to use and pass around this property, though.
            </summary>
        </member>
        <member name="T:UnrealEngine.APostProcessVolume">
            <summary>for FPostprocessSettings</summary>
        </member>
        <member name="P:UnrealEngine.APostProcessVolume.Settings">
            <summary>Post process settings to use for this volume.</summary>
        </member>
        <member name="P:UnrealEngine.APostProcessVolume.Priority">
            <summary>
            Priority of this volume. In the case of overlapping volumes the one with the highest priority
            overrides the lower priority ones. The order is undefined if two or more overlapping volumes have the same priority.
            </summary>
        </member>
        <member name="P:UnrealEngine.APostProcessVolume.BlendRadius">
            <summary>World space radius around the volume that is used for blending (only if not unbound).</summary>
        </member>
        <member name="P:UnrealEngine.APostProcessVolume.BlendWeight">
            <summary>0:no effect, 1:full effect</summary>
        </member>
        <member name="P:UnrealEngine.APostProcessVolume.bEnabled">
            <summary>Whether this volume is enabled or not.</summary>
        </member>
        <member name="P:UnrealEngine.APostProcessVolume.bUnbound">
            <summary>Whether this volume bounds are used or it affects the whole world.</summary>
        </member>
        <member name="P:UnrealEngine.APrecomputedVisibilityOverrideVolume.OverrideVisibleActors">
            <summary>Array of actors that will always be considered visible by Precomputed Visibility when viewed from inside this volume.</summary>
        </member>
        <member name="P:UnrealEngine.APrecomputedVisibilityOverrideVolume.OverrideInvisibleActors">
            <summary>Array of actors that will always be considered invisible by Precomputed Visibility when viewed from inside this volume.</summary>
        </member>
        <member name="P:UnrealEngine.APrecomputedVisibilityOverrideVolume.OverrideInvisibleLevels">
            <summary>Array of level names whose actors will always be considered invisible by Precomputed Visibility when viewed from inside this volume.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawTriangleEdges">
            <summary>should we draw edges of every navmesh's triangle</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawPolyEdges">
            <summary>should we draw edges of every poly (i.e. not only border-edges)</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawFilledPolys">
            <summary>if disabled skips filling drawn navmesh polygons</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawNavMeshEdges">
            <summary>should we draw border-edges</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawTileBounds">
            <summary>should we draw the tile boundaries</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawPathCollidingGeometry">
            <summary>Draw input geometry passed to the navmesh generator.  Recommend disabling other geometry rendering via viewport showflags in editor.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bDrawOctree">
            <summary>should we draw edges of every navmesh's triangle</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.DrawOffset">
            <summary>vertical offset added to navmesh's debug representation for better readability</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bFixedTilePoolSize">
            <summary>if true, the NavMesh will allocate fixed size pool for tiles, should be enabled to support streaming</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.TilePoolSize">
            <summary>maximum number of tiles NavMesh can hold</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.TileSizeUU">
            <summary>size of single tile, expressed in uu</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.CellSize">
            <summary>horizontal size of voxelization cell</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.CellHeight">
            <summary>vertical size of voxelization cell</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.AgentRadius">
            <summary>Radius of smallest agent to traverse this navmesh</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.AgentMaxHeight">
            <summary>Size of the tallest agent that will path with this navmesh.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.AgentMaxSlope">
            <summary>The maximum slope (angle) that the agent can move on.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.MinRegionArea">
            <summary>The minimum dimension of area. Areas smaller than this will be discarded</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.MergeRegionSize">
            <summary>The size limit of regions to be merged with bigger regions (watershed partitioning only)</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.MaxSimplificationError">
            <summary>How much navigable shapes can get simplified - the higher the value the more freedom</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.TileNumberHardLimit">
            <summary>
            Absolute hard limit to number of navmesh tiles. Be very, very careful while modifying it while
                having big maps with navmesh. A single, empty tile takes 176 bytes and empty tiles are
                allocated up front (subject to change, but that's where it's at now)
                @note TileNumberHardLimit is always rounded up to the closest power of 2
            </summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.DefaultDrawDistance">
            <summary>navmesh draw distance in game (always visible in editor)</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.DefaultMaxSearchNodes">
            <summary>
            specifes default limit to A* nodes used when performing navigation queries.
                Can be overridden by passing custom FNavigationQueryFilter
            </summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.DefaultMaxHierarchicalSearchNodes">
            <summary>specifes default limit to A* nodes used when performing hierarchical navigation queries.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.RegionPartitioning">
            <summary>partitioning method for creating navmesh polys</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.LayerPartitioning">
            <summary>partitioning method for creating tile layers</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.RegionChunkSplits">
            <summary>number of chunk splits (along single axis) used for region's partitioning: ChunkyMonotone</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.LayerChunkSplits">
            <summary>number of chunk splits (along single axis) used for layer's partitioning: ChunkyMonotone</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bSortNavigationAreasByCost">
            <summary>
            Controls whether Navigation Areas will be sorted by cost before application
                to navmesh during navmesh generation. This is relevant then there are
                areas overlapping and we want to have area cost express area relevancy
                as well. Setting it to true will result in having area sorted by cost,
                but it will also increase navmesh generation cost a bit
            </summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bPerformVoxelFiltering">
            <summary>
            controls whether voxel filterring will be applied (via FRecastTileGenerator::ApplyVoxelFilter).
                Results in generated navemesh better fitting navigation bounds, but hits (a bit) generation performance
            </summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bMarkLowHeightAreas">
            <summary>mark areas with insufficient free height above instead of cutting them out</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bUseBetterOffsetsFromCorners">
            <summary>TODO: switch to disable new code from OffsetFromCorners if necessary - remove it later</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bStoreEmptyTileLayers">
            <summary>If set, tiles generated without any navmesh data will be marked to distinguish them from not generated / streamed out ones. Defaults to false.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bUseVirtualFilters">
            <summary>Indicates whether default navigation filters will use virtual functions. Defaults to true.</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.bUseVoxelCache">
            <summary>Cache rasterized voxels instead of just collision vertices/indices in navigation octree</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.TileSetUpdateInterval">
            <summary>indicates how often we will sort navigation tiles to mach players position</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.HeuristicScale">
            <summary>Euclidean distance heuristic scale used while pathfinding</summary>
        </member>
        <member name="P:UnrealEngine.ARecastNavMesh.VerticalDeviationFromGroundCompensation">
            <summary>Value added to each search height to compensate for error between navmesh polys and walkable geometry</summary>
        </member>
        <member name="T:UnrealEngine.ASkeletalMeshActor">
            <summary>
            SkeletalMeshActor is an instance of a USkeletalMesh in the world.
            Skeletal meshes are deformable meshes that can be animated and change their geometry at run-time.
            Skeletal meshes dragged into the level from the Content Browser are automatically converted to StaticMeshActors.
            @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/SkeletalMeshes/
            @see USkeletalMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.ASkeletalMeshActor.bShouldDoAnimNotifies">
            <summary>Whether or not this actor should respond to anim notifies - CURRENTLY ONLY AFFECTS PlayParticleEffect NOTIFIES*</summary>
        </member>
        <member name="P:UnrealEngine.ASkeletalMeshActor.ReplicatedMesh">
            <summary>Used to replicate mesh to clients</summary>
        </member>
        <member name="P:UnrealEngine.ASkeletalMeshActor.ReplicatedPhysAsset">
            <summary>Used to replicate physics asset to clients</summary>
        </member>
        <member name="P:UnrealEngine.ASkeletalMeshActor.ReplicatedMaterial0">
            <summary>used to replicate the material in index 0</summary>
        </member>
        <member name="P:UnrealEngine.ASkyLight.bEnabled">
            <summary>replicated copy of LightComponent's bEnabled property</summary>
        </member>
        <member name="T:UnrealEngine.ASphereReflectionCapture">
            <summary>
            Actor used to capture the scene for reflection in a sphere shape.
            @see https://docs.unrealengine.com/latest/INT/Resources/ContentExamples/Reflections/1_4
            </summary>
        </member>
        <member name="T:UnrealEngine.ASplineMeshActor">
            <summary>
            SplineMeshActor is an actor with a SplineMeshComponent.
            @see USplineMeshComponent
            </summary>
        </member>
        <member name="T:UnrealEngine.AStaticMeshActor">
            <summary>
            StaticMeshActor is an instance of a UStaticMesh in the world.
            Static meshes are geometry that do not animate or otherwise deform, and are more efficient to render than other types of geometry.
            Static meshes dragged into the level from the Content Browser are automatically converted to StaticMeshActors.
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/StaticMeshActor/
            @see UStaticMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.AStaticMeshActor.bStaticMeshReplicateMovement">
            <summary>This static mesh should replicate movement. Automatically sets the RemoteRole and bReplicateMovement flags. Meant to be edited on placed actors (those other two properties are not)</summary>
        </member>
        <member name="P:UnrealEngine.ASubDSurfaceActor.SubDSurface">
            <summary>Component to render the actor, used GetSubDSurface() to access</summary>
        </member>
        <member name="P:UnrealEngine.ASubDSurfaceActor.DisplayMeshComponent">
            <summary>later this all will be done by USubDSurfaceComponent</summary>
        </member>
        <member name="P:UnrealEngine.ASubDSurfaceActor.SpriteComponent">
            <summary>Reference to the billboard component</summary>
        </member>
        <member name="T:UnrealEngine.ATriggerBase">
            <summary>An actor used to generate collision events (begin/end overlap) in the level.</summary>
        </member>
        <member name="P:UnrealEngine.ATriggerBase.CollisionComponent">
            <summary>Shape component used for collision</summary>
        </member>
        <member name="P:UnrealEngine.ATriggerBase.SpriteComponent">
            <summary>Billboard used to see the trigger in the editor</summary>
        </member>
        <member name="T:UnrealEngine.AWindDirectionalSource">
            <summary>Actor that provides a directional wind source. Only affects SpeedTree assets.</summary>
        </member>
        <member name="T:UnrealEngine.AWorldSettings">
            <summary>Actor containing all script accessible world properties.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bEnableWorldBoundsChecks">
            <summary>If true, enables CheckStillInWorld checks</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bEnableNavigationSystem">
            <summary>if set to false navigation system will not get created (and all navigation functionality won't be accessible)</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bEnableAISystem">
            <summary>if set to false AI system will not get created. Use it to disable all AI-related activity on a map</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bEnableWorldComposition">
            <summary>
            Enables tools for composing a tiled world.
            Level has to be saved and all sub-levels removed before enabling this option.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bUseClientSideLevelStreamingVolumes">
            <summary>
            Enables client-side streaming volumes instead of server-side.
            Expected usage scenario: server has all streaming levels always loaded, clients independently stream levels in/out based on streaming volumes.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bEnableWorldOriginRebasing">
            <summary>World origin will shift to a camera position when camera goes far away from current origin</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bWorldGravitySet">
            <summary>if set to true, when we call GetGravityZ we assume WorldGravityZ has already been initialized and skip the lookup of DefaultGravityZ and GlobalGravityZ</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bGlobalGravitySet">
            <summary>If set to true we will use GlobalGravityZ instead of project setting DefaultGravityZ</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.KillZ">
            <summary>any actor falling below this level gets destroyed</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.KillZDamageType">
            <summary>The type of damage inflicted when a actor falls below KillZ</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.WorldGravityZ">
            <summary>current gravity actually being used</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.GlobalGravityZ">
            <summary>optional level specific gravity override set by level designer</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultPhysicsVolumeClass">
            <summary>level specific default physics volume</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.PhysicsCollisionHandlerClass">
            <summary>optional level specific collision handler</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultGameMode">
            <summary>The default GameMode to use when starting this map in the game. If this value is NULL, the INI setting for default game type is used.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.GameNetworkManagerClass">
            <summary>Class of GameNetworkManager to spawn for network games</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.PackedLightAndShadowMapTextureSize">
            <summary>Maximum size of textures for packed light and shadow maps</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bMinimizeBSPSections">
            <summary>
            Causes the BSP build to generate as few sections as possible.
            This is useful when you need to reduce draw calls but can reduce texture streaming efficiency and effective lightmap resolution.
            Note - changes require a rebuild to propagate.  Also, be sure to select all surfaces and make sure they all have the same flags to minimize section count.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultColorScale">
            <summary>Default color scale for the level</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultMaxDistanceFieldOcclusionDistance">
            <summary>Max occlusion distance used by mesh distance fields, overridden if there is a movable skylight.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.GlobalDistanceFieldViewDistance">
            <summary>Distance from the camera that the global distance field should cover.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DynamicIndirectShadowsSelfShadowingIntensity">
            <summary>
            Controls the intensity of self-shadowing from capsule indirect shadows.
            These types of shadows use approximate occluder representations, so reducing self-shadowing intensity can hide those artifacts.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bPrecomputeVisibility">
            <summary>
            Whether to place visibility cells inside Precomputed Visibility Volumes and along camera tracks in this level.
            Precomputing visibility reduces rendering thread time at the cost of some runtime memory and somewhat increased lighting build times.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bPlaceCellsOnlyAlongCameraTracks">
            <summary>Whether to place visibility cells only along camera tracks or only above shadow casting surfaces.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.VisibilityCellSize">
            <summary>
            World space size of precomputed visibility cells in x and y.
            Smaller sizes produce more effective occlusion culling at the cost of increased runtime memory usage and lighting build times.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.VisibilityAggressiveness">
            <summary>
            Determines how aggressive precomputed visibility should be.
            More aggressive settings cull more objects but also cause more visibility errors like popping.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bForceNoPrecomputedLighting">
            <summary>
            Whether to force lightmaps and other precomputed lighting to not be created even when the engine thinks they are needed.
            This is useful for improving iteration in levels with fully dynamic lighting and shadowing.
            Note that any lighting and shadowing interactions that are usually precomputed will be lost if this is enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultReverbSettings">
            <summary>Default reverb settings used by audio volumes.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultAmbientZoneSettings">
            <summary>Default interior settings used by audio volumes.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DefaultBaseSoundMix">
            <summary>Default Base SoundMix.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bEnableHierarchicalLODSystem">
            <summary>if set to true, hierarchical LODs will be built, which will create hierarchical LODActors</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.HierarchicalLODSetup">
            <summary>Hierarchical LOD Setup</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.WorldToMeters">
            <summary>scale of 1uu to 1m in real world measurements, for HMD and other physically tracked devices (e.g. 1uu = 1cm would be 100.0)</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.MonoCullingDistance">
            <summary>Distance from the player after which content will be rendered in mono if monoscopic far field rendering is activated</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.BookMarks">
            <summary>Level Bookmarks: 10 should be MAX_BOOKMARK_NUMBER @fixmeconst</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.TimeDilation">
            <summary>
            Normally 1 - scales real time passage.
            Warning - most use cases should use GetEffectiveTimeDilation() instead of reading from this directly
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.MatineeTimeDilation">
            <summary>
            Additional time dilation used by Matinee (or Sequencer) slomo track.  Transient because this is often
            temporarily modified by the editor when previewing slow motion effects, yet we don't want it saved or loaded from level packages.
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.DemoPlayTimeDilation">
            <summary>Additional TimeDilation used to control demo playback speed</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.MinGlobalTimeDilation">
            <summary>Lowest acceptable global time dilation.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.MaxGlobalTimeDilation">
            <summary>Highest acceptable global time dilation.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.MinUndilatedFrameTime">
            <summary>Smallest possible frametime, not considering dilation. Equiv to 1/FastestFPS.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.MaxUndilatedFrameTime">
            <summary>Largest possible frametime, not considering dilation. Equiv to 1/SlowestFPS.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.Pauser">
            <summary>If paused, FName of person pausing the game.</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bHighPriorityLoading">
            <summary>when this flag is set, more time is allocated to background loading (replicated)</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.bHighPriorityLoadingLocal">
            <summary>copy of bHighPriorityLoading that is not replicated, for clientside-only loading operations</summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.ReplicationViewers">
            <summary>
            valid only during replication - information about the player(s) being replicated to
            (there could be more than one in the case of a splitscreen client)
            </summary>
        </member>
        <member name="P:UnrealEngine.AWorldSettings.AssetUserData">
            <summary>Array of user data stored with the asset</summary>
        </member>
        <member name="T:UnrealEngine.EVertexAttributeStreamType">
            <summary>typical vertex attribute formats but as they are only CPU processed at the moment we could chnage that</summary>
        </member>
        <member name="F:UnrealEngine.EVertexAttributeStreamType.VAST_float3">
            <summary>FVector2D e.g. UV</summary>
        </member>
        <member name="F:UnrealEngine.EVertexAttributeStreamType.VAST_float4">
            <summary>FVector e.g. position</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:UnrealEngine.UActorChannel" -->
        <member name="P:UnrealEngine.UActorChannel.Actor">
            <summary>Variables.</summary>
        </member>
        <member name="T:UnrealEngine.UActorComponent">
            <summary>
            ActorComponent is the base class for components that define reusable behavior that can be added to different types of Actors.
            ActorComponents that have a transform are known as SceneComponents and those that can be rendered are PrimitiveComponents.
            @see [ActorComponent](https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html#actorcomponents)
            @see USceneComponent
            @see UPrimitiveComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.PrimaryComponentTick">
            <summary>Main tick function for the Actor</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.ComponentTags">
            <summary>Array of tags that can be used for grouping and categorizing. Can also be accessed from scripting.</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.AssetUserData">
            <summary>Array of user data stored with the component</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bReplicates">
            <summary>Is this component currently replicating? Should the network code consider it for replication? Owning Actor must be replicating first!</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bNetAddressable">
            <summary>Is this component safe to ID over the network by name?</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bCreatedByConstructionScript">
            <summary>True if this component was created by a construction script, and will be destroyed by DestroyConstructedComponents</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bInstanceComponent">
            <summary>True if this component was created as an instance component</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bAutoActivate">
            <summary>Whether the component is activated at creation or must be explicitly activated.</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bIsActive">
            <summary>Whether the component is currently active.</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bCanEverAffectNavigation">
            <summary>Whether this component can potentially influence navigation</summary>
        </member>
        <member name="P:UnrealEngine.UActorComponent.bIsEditorOnly">
            <summary>If true, the component will be excluded from non-editor builds</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.Skeleton">
            <summary>Pointer to the Skeleton this asset can be played on .</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.MetaData">
            <summary>
            Meta data that can be saved with the asset
            You can query by GetMetaData function
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.ParentAsset">
            <summary>
            Parent Asset, if set, you won't be able to edit any data in here but just mapping table
            During cooking, this data will be used to bake out to normal asset
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.ChildrenAssets">
            <summary>note this is transient as they're added as they're loaded</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.AssetMappingTable">
            <summary>Asset mapping table when ParentAsset is set</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.AssetUserData">
            <summary>Array of user data stored with the asset</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationAsset.PreviewPoseAsset">
            <summary>The default skeletal mesh to use when previewing this asset - this only applies when you open Persona using this asset// @todo: note that this doesn't retarget right now</summary>
        </member>
        <member name="T:UnrealEngine.UAnimationSettings">
            <summary>Default animation settings.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.CompressCommandletVersion">
            <summary>compression upgrade version</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.AlternativeCompressionThreshold">
            <summary>
            The alternate error threshold (0.0 means don't try anything other than the current / default scheme)
            Determines the current setting for world-space error tolerance in the animation compressor.
            When requested, animation being compressed will also consider an alternative compression
            method if the end result of that method produces less error than the AlternativeCompressionThreshold.
            Also known as "Max End Effector Error"
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bForceBelowThreshold">
            <summary>If true and the existing compression error is greater than Alternative Compression Threshold, then any compression technique (even one that increases the size) with a lower error will be used until it falls below the threshold</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bFirstRecompressUsingCurrentOrDefault">
            <summary>
            If true, then the animation will be first recompressed with it's current compressor if non-NULL, or with the global default compressor (specified in the engine ini)
            Also known as "Run Current Default Compressor"
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bRaiseMaxErrorToExisting">
            <summary>If true and the existing compression error is greater than Alternative Compression Threshold, then Alternative Compression Threshold will be effectively raised to the existing error level</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bTryFixedBitwiseCompression">
            <summary>If true, the uniform bitwise techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bTryPerTrackBitwiseCompression">
            <summary>If true, the per-track compressor techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bTryLinearKeyRemovalCompression">
            <summary>If true, the linear key removal techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bTryIntervalKeyRemoval">
            <summary>If true, the resampling techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimationSettings.bStripAnimationDataOnDedicatedServer">
            <summary>If true, animation track data will be stripped from dedicated server cooked data</summary>
        </member>
        <member name="T:UnrealEngine.UAnimBlueprint">
            <summary>
            An Anim Blueprint is essentially a specialized Blueprint whose graphs control the animation of a Skeletal Mesh.
            It can perform blending of animations, directly control the bones of the skeleton, and output a final pose
            for a Skeletal Mesh each frame.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprint.TargetSkeleton">
            <summary>The kind of skeleton that animation graphs compiled from the blueprint will animate</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprint.Groups">
            <summary>List of animation sync groups</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprint.bUseMultiThreadedAnimationUpdate">
            <summary>
            Allows this anim Blueprint to update its native update, blend tree, montages and asset players on
            a worker thread. The compiler will attempt to pick up any issues that may occur with threaded update.
            For updates to run in multiple threads both this flag and the project setting "Allow Multi Threaded
            Animation Update" should be set.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprint.bWarnAboutBlueprintUsage">
            <summary>
            Selecting this option will cause the compiler to emit warnings whenever a call into Blueprint
            is made from the animation graph. This can help track down optimizations that need to be made.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprint.ParentAssetOverrides">
            <summary>Array of overrides to asset containing nodes in the parent that have been overridden</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprint.PoseWatches">
            <summary>
            Array of active pose watches (pose watch allows us to see the bone pose at a
            particular point of the anim graph)
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprintGeneratedClass.BakedStateMachines">
            <summary>List of state machines present in this blueprint class</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprintGeneratedClass.TargetSkeleton">
            <summary>Target skeleton for this blueprint class</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprintGeneratedClass.AnimNotifies">
            <summary>A list of anim notifies that state machines (or anything else) may reference</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprintGeneratedClass.RootAnimNodeIndex">
            <summary>The index of the root node in the animation tree</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprintGeneratedClass.OrderedSavedPoseIndices">
            <summary>Indices for each of the saved pose nodes that require updating, in the order they need to get updates.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimBlueprintGeneratedClass.SyncGroupNames">
            <summary>Array of sync group names in the order that they are requested during compile</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.BakedStateMachines">
            <summary>List of state machines present in this blueprint class</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.TargetSkeleton">
            <summary>Target skeleton for this blueprint class</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.AnimNotifies">
            <summary>A list of anim notifies that state machines (or anything else) may reference</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.RootAnimNodeIndex">
            <summary>The index of the root node in the animation tree</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.OrderedSavedPoseIndices">
            <summary>Indices for each of the saved pose nodes that require updating, in the order they need to get updates.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.AnimNodeProperties">
            <summary>The array of anim nodes</summary>
        </member>
        <member name="P:UnrealEngine.UAnimClassData.SyncGroupNames">
            <summary>Array of sync group names in the order that they are requested during compile</summary>
        </member>
        <member name="P:UnrealEngine.UAnimComposite.AnimationTrack">
            <summary>Serializable data that stores section/anim pairing *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimComposite.PreviewBasePose">
            <summary>Preview Base pose for additive BlendSpace *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress.Description">
            <summary>Name of Compression Scheme used for this asset</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress.bNeedsSkeleton">
            <summary>Compression algorithms requiring a skeleton should set this value to true.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress.TranslationCompressionFormat">
            <summary>Format for bitwise compression of translation data.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress.RotationCompressionFormat">
            <summary>Format for bitwise compression of rotation data.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress.ScaleCompressionFormat">
            <summary>Format for bitwise compression of scale data.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.MaxEndEffectorError">
            <summary>
            Maximum amount of error that a compression technique can introduce in an end effector
            Determines the current setting for world - space error tolerance in the animation compressor.
            When requested, animation being compressed will also consider an alternative compression
            method if the end result of that method produces less error than the AlternativeCompressionThreshold.
            Also known as "Alternative Compression Threshold"
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bTryFixedBitwiseCompression">
            <summary>If true, the uniform bitwise techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bTryPerTrackBitwiseCompression">
            <summary>If true, the per-track compressor techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bTryLinearKeyRemovalCompression">
            <summary>If true, the linear key removal techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bTryIntervalKeyRemoval">
            <summary>If true, the resampling techniques will be tried</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bRunCurrentDefaultCompressor">
            <summary>
            If true, then the animation will be first recompressed with it's current compressor if non-NULL, or with the global default compressor (specified in the engine ini)
            Also known as "First Recompress Using Current Or Default"
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bAutoReplaceIfExistingErrorTooGreat">
            <summary>
            If true and the existing compression error is greater than Max End Effector Error, then any compression technique (even one that increases the size) with a lower error will be used until it falls below the threshold
            Also known as "force below threshold"
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_Automatic.bRaiseMaxErrorToExisting">
            <summary>If true and the existing compression error is greater than Max End Effector Error, then Max End Effector Error will be effectively raised to the existing error level</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveEverySecondKey.MinKeys">
            <summary>Animations with fewer than MinKeys will not lose any keys.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveEverySecondKey.bStartAtSecondKey">
            <summary>
            If bStartAtSecondKey is true, remove keys 1,3,5,etc.
            If bStartAtSecondKey is false, remove keys 0,2,4,etc.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.MaxPosDiff">
            <summary>Maximum position difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.MaxAngleDiff">
            <summary>Maximum angle difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.MaxScaleDiff">
            <summary>Maximum Scale difference to use when testing if an animation key may be removed. Lower values retain more keys, but yield less compression.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.MaxEffectorDiff">
            <summary>
            As keys are tested for removal, we monitor the effects all the way down to the end effectors.
            If their position changes by more than this amount as a result of removing a key, the key will be retained.
            This value is used for all bones except the end-effectors parent.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.MinEffectorDiff">
            <summary>
            As keys are tested for removal, we monitor the effects all the way down to the end effectors.
            If their position changes by more than this amount as a result of removing a key, the key will be retained.
            This value is used for the end-effectors parent, allowing tighter restrictions near the end of a skeletal chain.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.EffectorDiffSocket">
            <summary>
            Error threshold for End Effectors with Sockets attached to them.
            Typically more important bone, where we want to be less aggressive with compression.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.ParentKeyScale">
            <summary>
            A scale value which increases the likelihood that a bone will retain a key if it's parent also had a key at the same time position.
            Higher values can remove shaking artifacts from the animation, at the cost of compression.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.bRetarget">
            <summary>
            true = As the animation is compressed, adjust animated nodes to compensate for compression error.
            false= Do not adjust animated nodes.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimCompress_RemoveLinearKeys.bActuallyFilterLinearKeys">
            <summary>
            Controls whether the final filtering step will occur, or only the retargetting after bitwise compression.
            If both this and bRetarget are false, then the linear compressor will do no better than the underlying bitwise compressor, extremely slowly.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.DeltaTime">
            <summary>DeltaTime *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.CurrentSkeleton">
            <summary>This is used to extract animation. If Mesh exists, this will be overwritten by Mesh->Skeleton</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.RootMotionMode">
            <summary>Sets where this blueprint pulls Root Motion from</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.bUseMultiThreadedAnimationUpdate">
            <summary>
            Allows this anim instance to update its native update, blend tree, montages and asset players on
            a worker thread. This flag is propagated from the UAnimBlueprint to this instance by the compiler.
            The compiler will attempt to pick up any issues that may occur with threaded update.
            For updates to run in multiple threads both this flag and the project setting "Allow Multi Threaded
            Animation Update" should be set.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.OnMontageBlendingOut">
            <summary>Called when a montage starts blending out, whether interrupted or finished</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.OnMontageStarted">
            <summary>Called when a montage has started</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.OnMontageEnded">
            <summary>Called when a montage has ended, whether interrupted or finished</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.OnAllMontageInstancesEnded">
            <summary>Called when all Montage instances have ended.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.bQueueMontageEvents">
            <summary>
            True when Montages are being ticked, and Montage Events should be queued.
            When Montage are being ticked, we queue AnimNotifies and Events. We trigger notifies first, then Montage events.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimInstance.ActiveAnimNotifyState">
            <summary>
            Currently Active AnimNotifyState, stored as a copy of the event as we need to
                          call NotifyEnd on the event after a deletion in the editor. After this the event
                          is removed correctly.
            </summary>
        </member>
        <member name="T:UnrealEngine.UAnimMontage">
            <summary>
            * Any property you're adding to AnimMontage and parent class has to be considered for Child Asset
            *
            * Child Asset is considered to be only asset mapping feature using everything else in the class
            * For example, you can just use all parent's setting  for the montage, but only remap assets
            * This isn't magic bullet unfortunately and it is consistent effort of keeping the data synced with parent
            * If you add new property, please make sure those property has to be copied for children.
            * If it does, please add the copy in the function RefreshParentAssetData
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.BlendIn">
            <summary>Blend in option.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.BlendOut">
            <summary>Blend out option. This is only used when it blends out itself. If it's interrupted by other montages, it will use new montage's BlendIn option to blend out.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UAnimMontage.BlendOutTriggerTime" -->
        <member name="P:UnrealEngine.UAnimMontage.SyncGroup">
            <summary>If you're using marker based sync for this montage, make sure to add sync group name. For now we only support one group</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.SyncSlotIndex">
            <summary>wip: until we have UI working</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.CompositeSections">
            <summary>composite section.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.SlotAnimTracks">
            <summary>slot data, each slot contains anim track</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.BranchingPoints">
            <summary>Remove this when VER_UE4_MONTAGE_BRANCHING_POINT_REMOVAL is removed.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.bEnableRootMotionTranslation">
            <summary>If this is on, it will allow extracting root motion translation. DEPRECATED in 4.5 root motion is controlled by anim sequences *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.bEnableRootMotionRotation">
            <summary>If this is on, it will allow extracting root motion rotation. DEPRECATED in 4.5 root motion is controlled by anim sequences *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.RootMotionRootLock">
            <summary>Root Bone will be locked to that position when extracting root motion. DEPRECATED in 4.5 root motion is controlled by anim sequences *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.PreviewBasePose">
            <summary>Preview Base pose for additive BlendSpace *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.BranchingPointMarkers">
            <summary>Cached list of Branching Point markers</summary>
        </member>
        <member name="P:UnrealEngine.UAnimMontage.BranchingPointStateNotifyIndices">
            <summary>Keep track of which AnimNotify_State are marked as BranchingPoints, so we can update their state when the Montage is ticked</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify.NotifyColor">
            <summary>Color of Notify in editor</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState.NotifyColor">
            <summary>Color of Notify in editor</summary>
        </member>
        <member name="T:UnrealEngine.UAnimNotifyState_TimedParticleEffect">
            <summary>
            Timed Particle Effect Notify
            Allows a looping particle effect to be played in an animation that will activate
            at the beginning of the notify and deactivate at the end.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_TimedParticleEffect.PSTemplate">
            <summary>The particle system to spawn for the notify state</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_TimedParticleEffect.SocketName">
            <summary>The socket or bone to attach the system to</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_TimedParticleEffect.LocationOffset">
            <summary>Offset from the socket or bone to place the particle system</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_TimedParticleEffect.RotationOffset">
            <summary>Rotation offset from the socket or bone for the particle system</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_TimedParticleEffect.bDestroyAtEnd">
            <summary>Whether the particle system should be immediately destroyed at the end of the notify state or be allowed to finish</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_TimedParticleEffect.PreviousPSTemplates">
            <summary>
            The following arrays are used to handle property changes during a state. Because we can't
            store any stateful data here we can't know which emitter is ours. The best metric we have
            is an emitter on our Mesh Component with the same template and socket name we have defined.
            Because these can change at any time we need to track previous versions when we are in an
            editor build. Refactor when stateful data is possible, tracking our component instead.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.PSTemplate">
            <summary>The particle system to use for this trail.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.FirstSocketName">
            <summary>Name of the first socket defining this trail.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.SecondSocketName">
            <summary>Name of the second socket defining this trail.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.WidthScaleMode">
            <summary>
            Controls the way width scale is applied. In each method a width scale of 1.0 will mean the width is unchanged from the position of the sockets. A width scale of 0.0 will cause a trail of zero width.
            From Centre = Trail width is scaled outwards from the centre point between the two sockets.
            From First = Trail width is scaled outwards from the position of the first socket.
            From Second = Trail width is scaled outwards from the position of the Second socket.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.WidthScaleCurve">
            <summary>Name of the curve to drive the width scale.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.bRenderGeometry">
            <summary>If true, render the trail geometry (this should typically be on)</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.bRenderSpawnPoints">
            <summary>If true, render stars at each spawned particle point along the trail</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.bRenderTangents">
            <summary>If true, render a line showing the tangent at each spawned particle point along the trail</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotifyState_Trail.bRenderTessellation">
            <summary>If true, render the tessellated path between spawned particles</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlayParticleEffect.PSTemplate">
            <summary>Particle System to Spawn</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlayParticleEffect.LocationOffset">
            <summary>Location offset from the socket</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlayParticleEffect.RotationOffset">
            <summary>Rotation offset from socket</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlayParticleEffect.Attached">
            <summary>Should attach to the bone/socket</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlayParticleEffect.SocketName">
            <summary>SocketName to attach to</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlaySound.Sound">
            <summary>Sound to Play</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlaySound.VolumeMultiplier">
            <summary>Volume Multiplier</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlaySound.PitchMultiplier">
            <summary>Pitch Multiplier</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlaySound.bFollow">
            <summary>If this sound should follow its owner</summary>
        </member>
        <member name="P:UnrealEngine.UAnimNotify_PlaySound.AttachName">
            <summary>Socket or bone name to attach sound to</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.NumFrames">
            <summary>Number of raw frames in this sequence (not used by engine - just for informational purposes).</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.TrackToSkeletonMapTable">
            <summary>
            In the future, maybe keeping RawAnimSequenceTrack + TrackMap as one would be good idea to avoid inconsistent array size
            TrackToSkeletonMapTable(i) should contains  track mapping data for RawAnimationData(i).
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.RawDataGuid">
            <summary>Update this if the contents of RawAnimationData changes;</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.AnimationTrackNames">
            <summary>This is name of RawAnimationData tracks for editoronly - if we lose skeleton, we'll need relink them</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.CompressionScheme">
            <summary>
            The compression scheme that was most recently used to compress this animation.
            May be NULL.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.AdditiveAnimType">
            <summary>Additive animation type. *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.RefPoseType">
            <summary>Additive refrerence pose type. Refer above enum type</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.RefPoseSeq">
            <summary>Additive reference animation if it's relevant - i.e. AnimScaled or AnimFrame *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.RefFrameIndex">
            <summary>Additve reference frame if RefPoseType == AnimFrame *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.EncodingPkgVersion">
            <summary>The version of the global encoding package used at the time of import</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.RetargetSource">
            <summary>Base pose to use when retargeting</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.bEnableRootMotion">
            <summary>If this is on, it will allow extracting of root motion *</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.RootMotionRootLock">
            <summary>Root Bone will be locked to that position when extracting root motion.*</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.bForceRootLock">
            <summary>Force Root Bone Lock even if Root Motion is not enabled</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.bRootMotionSettingsCopiedFromMontage">
            <summary>Have we copied root motion settings from an owning montage</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.CompressCommandletVersion">
            <summary>Saved version number with CompressAnimations commandlet. To help with doing it in multiple passes.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.bDoNotOverrideCompression">
            <summary>
            Do not attempt to override compression scheme when running CompressAnimations commandlet.
            Some high frequency animations are too sensitive and shouldn't be changed.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.bWasCompressedWithoutTranslations">
            <summary>Used to track whether, or not, this sequence was compressed with it's full translation tracks</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.AssetImportData">
            <summary>Importing data and options used for this mesh</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.SourceFilePath">
            <summary>Path to the resource used to construct this skeletal mesh</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.SourceFileTimestamp">
            <summary>Date/Time-stamp of the file from the last import</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequence.AuthoredSyncMarkers">
            <summary>Authored Sync markers</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequenceBase.Notifies">
            <summary>Animation notifies, sorted by time (earliest notification first).</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequenceBase.SequenceLength">
            <summary>Length (in seconds) of this AnimSequence if played back with a speed of 1.0.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequenceBase.RateScale">
            <summary>Number for tweaking playback rate of this animation globally.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequenceBase.RawCurveData">
            <summary>Raw uncompressed float curve data</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSequenceBase.AnimNotifyTracks">
            <summary>if you change Notifies array, this will need to be rebuilt</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.bAnimRotationOnly">
            <summary>
            Indicates that only the rotation should be taken from the animation sequence and the translation should come from the USkeletalMesh ref pose.
            Note that the root bone always takes translation from the animation, even if this flag is set.
            You can use the UseTranslationBoneNames array to specify other bones that should use translation with this flag set.
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.TrackBoneNames">
            <summary>Bone name that each track relates to. TrackBoneName.Num() == Number of tracks.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.Sequences">
            <summary>Actual animation sequence information.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.LinkupCache">
            <summary>Non-serialised cache of linkups between different skeletal meshes and this AnimSet. // @UE4: Do not change private - they will go away</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.BoneUseAnimTranslation">
            <summary>
            Array of booleans that indicate whether or not to read the translation of a bone from animation or ref skeleton.
            This is basically a cooked down version of UseTranslationBoneNames for speed.
            Size matches the number of tracks.
               // @UE4: Do not change private - they will go away
            </summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.ForceUseMeshTranslation">
            <summary>Cooked down version of ForceMeshTranslationBoneNames // @UE4: Do not change private - they will go away</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.UseTranslationBoneNames">
            <summary>Names of bones that should use translation from the animation, if bAnimRotationOnly is set. // @UE4: Do not change private - they will go away</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.ForceMeshTranslationBoneNames">
            <summary>List of bones which are ALWAYS going to use their translation from the mesh and not the animation. // @UE4: Do not change private - they will go away</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.PreviewSkelMeshName">
            <summary>In the AnimSetEditor, when you switch to this AnimSet, it sees if this skeletal mesh is loaded and if so switches to it.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSet.BestRatioSkelMeshName">
            <summary>Holds the name of the skeletal mesh whose reference skeleton best matches the TrackBoneName array.</summary>
        </member>
        <member name="P:UnrealEngine.UAnimSingleNodeInstance.CurrentAsset">
            <summary>Current Asset being played *</summary>
        </member>
        <member name="T:UnrealEngine.UApplicationLifecycleComponent">
            <summary>Component to handle receiving notifications from the OS about application state (activated, suspended, termination, etc).</summary>
        </member>
        <member name="P:UnrealEngine.UApplicationLifecycleComponent.ApplicationWillDeactivateDelegate">
            <summary>
            This is called when the application is about to be deactivated (e.g., due to a phone call or SMS or the sleep button).
            The game should be paused if possible, etc...
            </summary>
        </member>
        <member name="P:UnrealEngine.UApplicationLifecycleComponent.ApplicationHasReactivatedDelegate">
            <summary>Called when the application has been reactivated (reverse any processing done in the Deactivate delegate)</summary>
        </member>
        <member name="P:UnrealEngine.UApplicationLifecycleComponent.ApplicationWillEnterBackgroundDelegate">
            <summary>
            This is called when the application is being backgrounded (e.g., due to switching
            to another app or closing it via the home button)
            The game should release shared resources, save state, etc..., since it can be
            terminated from the background state without any further warning.
            </summary>
        </member>
        <member name="P:UnrealEngine.UApplicationLifecycleComponent.ApplicationHasEnteredForegroundDelegate">
            <summary>Called when the application is returning to the foreground (reverse any processing done in the EnterBackground delegate)</summary>
        </member>
        <member name="P:UnrealEngine.UApplicationLifecycleComponent.ApplicationWillTerminateDelegate">
            <summary>
            This *may* be called when the application is getting terminated by the OS.
            There is no guarantee that this will ever be called on a mobile device,
            save state when ApplicationWillEnterBackgroundDelegate is called instead.
            </summary>
        </member>
        <member name="T:UnrealEngine.UArrowComponent">
            <summary>A simple arrow rendered using lines. Useful for indicating which way an object is facing.</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.bIsScreenSizeScaled">
            <summary>Set to limit the screen size of this arrow</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.ScreenSize">
            <summary>The size on screen to limit this arrow to (in screen space)</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.bTreatAsASprite">
            <summary>If true, don't show the arrow when EngineShowFlags.BillboardSprites is disabled.</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.SpriteCategoryName">
            <summary>Sprite category that the arrow component belongs to, if being treated as a sprite. Value serves as a key into the localization file.</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.SpriteInfo">
            <summary>Sprite category information regarding the arrow component, if being treated as a sprite.</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.bLightAttachment">
            <summary>If true, this arrow component is attached to a light actor</summary>
        </member>
        <member name="P:UnrealEngine.UArrowComponent.bUseInEditorScaling">
            <summary>Whether to use in-editor arrow scaling (i.e. to be affected by the global arrow scale)</summary>
        </member>
        <member name="T:UnrealEngine.UAssetImportData">
            <summary>todo: Make this class better suited to multiple import paths - maybe have FAssetImportInfo use a map rather than array?</summary>
        </member>
        <member name="P:UnrealEngine.UAssetImportData.SourceFilePath">
            <summary>Path to the resource used to construct this static mesh. Relative to the object's package, BaseDir() or absolute</summary>
        </member>
        <member name="P:UnrealEngine.UAssetImportData.SourceFileTimestamp">
            <summary>Date/Time-stamp of the file from the last import</summary>
        </member>
        <member name="P:UnrealEngine.UAssetImportData.SourceData">
            <summary>Source file data describing the files that were used to import this asset.</summary>
        </member>
        <member name="T:UnrealEngine.UAssetMappingTable">
            <summary>
            UAssetMappingTable : that has AssetMappingTableging data
                    - used for retargeting
                    - support to share different animations
            </summary>
        </member>
        <member name="P:UnrealEngine.UAssetMappingTable.MappedAssets">
            <summary>Mappin of asset between source and target *</summary>
        </member>
        <member name="T:UnrealEngine.UAtmosphericFogComponent">
            <summary>Used to create fogging effects such as clouds.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.SunMultiplier">
            <summary>Global scattering factor.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.FogMultiplier">
            <summary>Scattering factor on object.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.DensityMultiplier">
            <summary>Fog density control factor.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.DensityOffset">
            <summary>Fog density offset to control opacity [-1.f ~ 1.f].</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.DistanceScale">
            <summary>Distance scale.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.AltitudeScale">
            <summary>Altitude scale (only Z scale).</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.DistanceOffset">
            <summary>Distance offset, in km (to handle large distance)</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.GroundOffset">
            <summary>Ground offset.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.StartDistance">
            <summary>Start Distance.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.SunDiscScale">
            <summary>Distance offset, in km (to handle large distance)</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.DefaultBrightness">
            <summary>Default light brightness. Used when there is no sunlight placed in the level. Unit is lumens</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.DefaultLightColor">
            <summary>Default light color. Used when there is no sunlight placed in the level.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.bDisableSunDisk">
            <summary>Disable Sun Disk rendering.</summary>
        </member>
        <member name="P:UnrealEngine.UAtmosphericFogComponent.bDisableGroundScattering">
            <summary>Disable Color scattering from ground.</summary>
        </member>
        <member name="T:UnrealEngine.UAudioComponent">
            <summary>
            AudioComponent is used to play a Sound
            @see https://docs.unrealengine.com/latest/INT/Audio/Overview/index.html
            @see USoundBase
            </summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.Sound">
            <summary>The sound to be played</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.InstanceParameters">
            <summary>Array of per-instance parameters for this AudioComponent.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.SoundClassOverride">
            <summary>Optional sound group this AudioComponent belongs to</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bAutoDestroy">
            <summary>Auto destroy this component on completion</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bStopWhenOwnerDestroyed">
            <summary>Stop sound when owner is destroyed</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bShouldRemainActiveIfDropped">
            <summary>Whether the wave instances should remain active if they're dropped by the prioritization code. Useful for e.g. vehicle sounds that shouldn't cut out.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bAllowSpatialization">
            <summary>Is this audio component allowed to be spatialized?</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bOverrideAttenuation">
            <summary>Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bOverrideSubtitlePriority">
            <summary>Whether or not to override the sound's subtitle priority.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bIsUISound">
            <summary>Whether or not this sound plays when the game is paused in the UI</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bEnableLowPassFilter">
            <summary>Whether or not to apply a low-pass filter to the sound that plays in this audio component.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.bSuppressSubtitles">
            <summary>If true, subtitles in the sound data will be ignored.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.PitchModulationMin">
            <summary>The lower bound to use when randomly determining a pitch multiplier</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.PitchModulationMax">
            <summary>The upper bound to use when randomly determining a pitch multiplier</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.VolumeModulationMin">
            <summary>The lower bound to use when randomly determining a volume multiplier</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.VolumeModulationMax">
            <summary>The upper bound to use when randomly determining a volume multiplier</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.VolumeMultiplier">
            <summary>A volume multiplier to apply to sounds generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.Priority">
            <summary>A priority value that is used for sounds that play on this component that scales against final output volume.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.SubtitlePriority">
            <summary>Used by the subtitle manager to prioritize subtitles wave instances spawned by this component.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.PitchMultiplier">
            <summary>A pitch multiplier to apply to sounds generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.LowPassFilterFrequency">
            <summary>The frequency of the lowpass filter (in hertz) to apply to this voice. A frequency of 0.0 is the device sample rate and will bypass the filter.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.AttenuationSettings">
            <summary>If bOverrideSettings is false, the asset to use to determine attenuation properties for sounds generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.AttenuationOverrides">
            <summary>If bOverrideSettings is true, the attenuation properties to use for sounds generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.ConcurrencySettings">
            <summary>What sound concurrency to use for sounds generated by this audio component</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.OnAudioFinished">
            <summary>called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early</summary>
        </member>
        <member name="P:UnrealEngine.UAudioComponent.OnAudioPlaybackPercent">
            <summary>called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early</summary>
        </member>
        <member name="T:UnrealEngine.UAudioSettings">
            <summary>Audio settings.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.DefaultSoundClassName">
            <summary>The SoundClass assigned to newly created sounds</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.DefaultSoundConcurrencyName">
            <summary>The SoundConcurrency assigned to newly created sounds</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.DefaultBaseSoundMix">
            <summary>The SoundMix to use as base when no other system has specified a Base SoundMix</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.VoiPSoundClass">
            <summary>Sound class to be used for the VOIP audio component</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.MaximumConcurrentStreams">
            <summary>How many streaming sounds can be played at the same time (if more are played they will be sorted by priority)</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.bAllowVirtualizedSounds">
            <summary>Allows sounds to play at 0 volume.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.bDisableMasterEQ">
            <summary>Disables master EQ effect in the audio DSP graph.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.bDisableMasterReverb">
            <summary>Disables master reverb effect in the audio DSP graph.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.bAllowCenterChannel3DPanning">
            <summary>Enables the surround sound spatialization calculations to include the center channel.</summary>
        </member>
        <member name="P:UnrealEngine.UAudioSettings.DialogueFilenameFormat">
            <summary>
            The format string to use when generating the filename for contexts within dialogue waves. This must generate unique names for your project.
            Available format markers:
              * {DialogueGuid} - The GUID of the dialogue wave. Guaranteed to be unique and stable against asset renames.
              * {DialogueHash} - The hash of the dialogue wave. Not guaranteed to be unique or stable against asset renames, however may be unique enough if combined with the dialogue name.
              * {DialogueName} - The name of the dialogue wave. Not guaranteed to be unique or stable against asset renames, however may be unique enough if combined with the dialogue hash.
              * {ContextId}    - The ID of the context. Guaranteed to be unique within its dialogue wave. Not guaranteed to be stable against changes to the context.
              * {ContextIndex} - The index of the context within its parent dialogue wave. Guaranteed to be unique within its dialogue wave. Not guaranteed to be stable against contexts being removed.
            </summary>
        </member>
        <member name="T:UnrealEngine.UAutomationTestSettings">
            <summary>Implements the Editor's user settings.</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.AutomationTestmap">
            <summary>The automation test map to be used for several of the automation tests.</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.EditorPerformanceTestMaps">
            <summary>The map to be used for the editor performance capture tool.</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.BuildPromotionTest">
            <summary>Editor build promotion test settings</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.MaterialEditorPromotionTest">
            <summary>Material editor promotion test settings</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.ParticleEditorPromotionTest">
            <summary>Particle editor promotion test settings</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.BlueprintEditorPromotionTest">
            <summary>Blueprint editor promotion test settings</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.EngineTestModules">
            <summary>Modules to load that have engine tests</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.EditorTestModules">
            <summary>Modules to load that have editor tests</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.TestLevelFolders">
            <summary>Folders containing levels to exclude from automated tests</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.TestAssetsToOpen">
            <summary>Asset to test for open in automation process</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.ExternalTools">
            <summary>External executables and scripts to run as part of automation.</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.ImportExportTestDefinitions">
            <summary>Asset import / Export test settings</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.LaunchOnSettings">
            <summary>The map and device type to be used for the editor Launch On With Map Iterations test.</summary>
        </member>
        <member name="P:UnrealEngine.UAutomationTestSettings.DefaultScreenshotResolution">
            <summary>The default resolution to take all automation screenshots at.</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.DefaultTimeToLive">
            <summary>How long an avoidance UID must not be updated before the system will put it back in the pool. Actual delay is up to 150% of this value.</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.LockTimeAfterAvoid">
            <summary>How long to stay on course (barring collision) after making an avoidance move</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.LockTimeAfterClean">
            <summary>How long to stay on course (barring collision) after making an unobstructed move (should be > 0.0, but can be less than a full frame)</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.DeltaTimeToPredict">
            <summary>This is how far forward in time (seconds) we extend our velocity cones and thus our prediction</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.ArtificialRadiusExpansion">
            <summary>Multiply the radius of all STORED avoidance objects by this value to allow a little extra room for avoidance maneuvers.</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.TestHeightDifference">
            <summary>Deprecated - use HeightCheckMargin, generally a much smaller value.</summary>
        </member>
        <member name="P:UnrealEngine.UAvoidanceManager.HeightCheckMargin">
            <summary>Allowable height margin between obstacles and agents. This is over and above the difference in agent heights.</summary>
        </member>
        <member name="T:UnrealEngine.UBackgroundBlur">
            <summary>
            A background blur is a container widget that can contain one child widget, providing an opportunity
            to surround it with adjustable padding and apply a post-process Gaussian blur to all content beneath the widget.
            * Single Child
            * Blur Effect
            </summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.HorizontalAlignment">
            <summary>The alignment of the content horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.VerticalAlignment">
            <summary>The alignment of the content vertically.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.bApplyAlphaToBlur">
            <summary>True to modulate the strength of the blur based on the widget alpha.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.BlurStrength">
            <summary>How blurry the background is.  Larger numbers mean more blurry but will result in larger runtime cost on the gpu.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.bOverrideAutoRadiusCalculation">
            <summary>Whether or not the radius should be computed automatically or if it should use the radius</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.BlurRadius">
            <summary>
            This is the number of pixels which will be weighted in each direction from any given pixel when computing the blur
            A larger value is more costly but allows for stronger blurs.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlur.LowQualityFallbackBrush">
            <summary>
            An image to draw instead of applying a blur when low quality override mode is enabled.
            You can enable low quality mode for background blurs by setting the cvar Slate.ForceBackgroundBlurLowQualityOverride to 1.
            This is usually done in the project's scalability settings
            </summary>
        </member>
        <member name="T:UnrealEngine.UBackgroundBlurSlot">
            <summary>The Slot for the UBackgroundBlurSlot, contains the widget displayed in a BackgroundBlur's single slot</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlurSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlurSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UBackgroundBlurSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UBillboardComponent">
            <summary>A 2d texture that will be rendered always facing the camera.</summary>
        </member>
        <member name="P:UnrealEngine.UBillboardComponent.SpriteCategoryName">
            <summary>Sprite category that the component belongs to. Value serves as a key into the localization file.</summary>
        </member>
        <member name="P:UnrealEngine.UBillboardComponent.SpriteInfo">
            <summary>Sprite category information regarding the component</summary>
        </member>
        <member name="P:UnrealEngine.UBillboardComponent.bUseInEditorScaling">
            <summary>Whether to use in-editor arrow scaling (i.e. to be affected by the global arrow scale)</summary>
        </member>
        <member name="T:UnrealEngine.UBlendProfile">
            <summary>
            A blend profile is a set of per-bone scales that can be used in transitions and blend lists
            to tweak the weights of specific bones. The scales are applied to the normal weight for that bone
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlendProfile.OwningSkeleton">
            <summary>The skeleton that owns this profile</summary>
        </member>
        <member name="P:UnrealEngine.UBlendProfile.ProfileEntries">
            <summary>List of blend scale entries</summary>
        </member>
        <member name="T:UnrealEngine.UBlendSpace">
            <summary>Contains a grid of data points with weights from sample points in the space</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpace.AxisToScaleAnimation">
            <summary>If you have input interpolation, which axis to drive animation speed (scale) - i.e. for locomotion animation, speed axis will drive animation speed (thus scale)*</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpace1D.bScaleAnimation">
            <summary>Drive animation speed by blend input position *</summary>
        </member>
        <member name="T:UnrealEngine.UBlendSpaceBase">
            <summary>Allows multiple animations to be blended between based on input parameters</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.bRotationBlendInMeshSpace">
            <summary>
            When you use blend per bone, allows rotation to blend in mesh space. This only works if this does not contain additive animation samples
            This is more performance intensive
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.PreviewBasePose">
            <summary>Preview Base pose for additive BlendSpace *</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.AnimLength">
            <summary>This animation length changes based on current input (resulting in different blend time)*</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.PerBoneBlend">
            <summary>Define target weight interpolation per bone. This will blend in different speed per each bone setting</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.InterpolationParam">
            <summary>Input interpolation parameter for all 3 axis, for each axis input, decide how you'd like to interpolate input to</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.TargetWeightInterpolationSpeedPerSec">
            <summary>
            Target weight interpolation. When target samples are set, how fast you'd like to get to target. Improve target blending.
            i.e. for locomotion, if you interpolate input, when you move from left to right rapidly, you'll interpolate through forward, but if you use target weight interpolation,
            you'll skip forward, but interpolate between left to right
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.NotifyTriggerMode">
            <summary>
            The current mode used by the blendspace to decide which animation notifies to fire. Valid options are:
                  - AllAnimations - All notify events will fire
                  - HighestWeightedAnimation - Notify events will only fire from the highest weighted animation
                  - None - No notify events will fire from any animations
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.SampleIndexWithMarkers">
            <summary>
            Track index to get marker data from. Samples are tested for the suitability of marker based sync
                      during load and if we can use marker based sync we cache an index to a representative sample here
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.SampleData">
            <summary>Sample animation data *</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.GridSamples">
            <summary>Grid samples, indexing scheme imposed by subclass *</summary>
        </member>
        <member name="P:UnrealEngine.UBlendSpaceBase.BlendParameters">
            <summary>Blend Parameters for each axis. *</summary>
        </member>
        <member name="T:UnrealEngine.UBlueprint">
            <summary>
            Blueprints are special assets that provide an intuitive, node-based interface that can be used to create new types of Actors
            and script level events; giving designers and gameplay programmers the tools to quickly create and iterate gameplay from
            within Unreal Editor without ever needing to write a line of code.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bRecompileOnLoad">
            <summary>Whether or not this blueprint should recompile itself on load</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.ParentClass">
            <summary>
            Pointer to the parent class that the generated class should derive from. This *can* be null under rare circumstances,
            one such case can be created by creating a blueprint (A) based on another blueprint (B), shutting down the editor, and
            deleting the parent blueprint.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bHasBeenRegenerated">
            <summary>When the class generated by this blueprint is loaded, it will be recompiled the first time.  After that initial recompile, subsequent loads will skip the regeneration step</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bIsRegeneratingOnLoad">
            <summary>State flag to indicate whether or not the Blueprint is currently being regenerated on load</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bIsNewlyCreated">
            <summary>Whether or not this blueprint is newly created, and hasn't been opened in an editor yet</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bForceFullEditor">
            <summary>Whether to force opening the full (non data-only) editor for this blueprint.</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bRunConstructionScriptOnDrag">
            <summary>whether or not you want to continuously rerun the construction script for an actor as you drag it in the editor, or only when the drag operation is complete</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bGenerateConstClass">
            <summary>Whether or not this blueprint's class is a const class or not.  Should set CLASS_Const in the KismetCompiler.</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bGenerateAbstractClass">
            <summary>Whether or not this blueprint's class is a abstract class or not.  Should set CLASS_Abstract in the KismetCompiler.</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.BlueprintDescription">
            <summary>shows up in the content browser when the blueprint is hovered</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.BlueprintCategory">
            <summary>The category of the Blueprint, used to organize this Blueprint class when displayed in palette windows</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.HideCategories">
            <summary>Additional HideCategories. These are added to HideCategories from parent.</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bDisplayCompilePIEWarning">
            <summary>TRUE to show a warning when attempting to start in PIE and there is a compiler error on this Blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.SearchGuid">
            <summary>Guid key for finding searchable data for Blueprint in the DDC</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bDeprecate">
            <summary>Deprecates the Blueprint, marking the generated class with the CLASS_Deprecated flag</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.SimpleConstructionScript">
            <summary>'Simple' construction script - graph of components to instance</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.UbergraphPages">
            <summary>Set of pages that combine into a single uber-graph</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.FunctionGraphs">
            <summary>Set of functions implemented for this class graphically</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.DelegateSignatureGraphs">
            <summary>Graphs of signatures for delegates</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.MacroGraphs">
            <summary>Set of macros implemented for this class</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.IntermediateGeneratedGraphs">
            <summary>Set of functions actually compiled for this class</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.EventGraphs">
            <summary>Set of functions actually compiled for this class</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bDuplicatingReadOnly">
            <summary>
            Flag indicating that a read only duplicate of this blueprint is being created, used to disable logic in ::PostDuplicate,
            This flag needs to be copied on duplication (because it's the duplicated object that we're disabling on PostDuplicate),
            but we don't *need* to serialize it for permanent objects.
            Without setting this flag a blueprint will be marked dirty when it is duplicated and if saved while in this dirty
            state you will not be able to open the blueprint. More specifically, UClass::Rename (called by DestroyGeneratedClass)
            sets a dirty flag on the package. Once saved the package will fail to open because some unnamed objects are present in
            the pacakge.
            This flag can be used to avoid the package being marked as dirty in the first place. Ideally PostDuplicateObject
            would not rename classes that are still in use by the original object.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.ComponentTemplates">
            <summary>Array of component template objects, used by AddComponent function</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.Timelines">
            <summary>Array of templates for timelines that should be created</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.InheritableComponentHandler">
            <summary>Stores data to override (in children classes) components (created by SCS) from parent classes</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.BlueprintType">
            <summary>The type of this blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.Status">
            <summary>The current status of this blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.NewVariables">
            <summary>Array of new variables to be added to generated class</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.CategorySorting">
            <summary>Array of user sorted categories</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.ImplementedInterfaces">
            <summary>Array of info about the interfaces we implement in this blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.BlueprintSystemVersion">
            <summary>The version of the blueprint system that was used to  create this blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.LastEditedDocuments">
            <summary>Set of documents that were being edited in this blueprint, so we can open them right away</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.Breakpoints">
            <summary>Persistent debugging options</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bBeingCompiled">
            <summary>The blueprint is currently compiled</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.CrcLastCompiledCDO">
            <summary>CRC for CDO calculated right after the latest compilation used by Reinstancer to check if default values were changed</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.OriginalClass">
            <summary>If this BP is just a duplicate created for a specific compilation, the reference to original GeneratedClass is needed</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprint.bNativize">
            <summary>Deprecated properties.</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintCore.SkeletonGeneratedClass">
            <summary>
            Pointer to the skeleton class; this is regenerated any time a member variable or function is added but
                  is usually incomplete (no code or hidden autogenerated variables are added to it)
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintCore.GeneratedClass">
            <summary>Pointer to the 'most recent' fully generated class</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintCore.bLegacyNeedToPurgeSkelRefs">
            <summary>BackCompat:  Whether or not we need to purge references in this blueprint to the skeleton generated during compile-on-load</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintCore.bLegacyGeneratedClassIsAuthoritative">
            <summary>BackCompat: Whether or not this blueprint's authoritative CDO data has been migrated from the SkeletonGeneratedClass CDO to the GeneratedClass CDO</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintCore.BlueprintGuid">
            <summary>Blueprint Guid</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.DynamicBindingObjects">
            <summary>Array of objects containing information for dynamically binding delegates to functions in this blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.ComponentTemplates">
            <summary>Array of component template objects, used by AddComponent function</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.Timelines">
            <summary>Array of templates for timelines that should be created</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.SimpleConstructionScript">
            <summary>'Simple' construction script - graph of components to instance</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.InheritableComponentHandler">
            <summary>Stores data to override (in children classes) components (created by SCS) from parent classes</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.FastCallPairs">
            <summary>
            This is a list of event graph call function nodes that are simple (no argument) thunks into the event graph (typically used for animation delegates, etc...)
            It is a deprecated list only used for backwards compatibility prior to VER_UE4_SERIALIZE_BLUEPRINT_EVENTGRAPH_FASTCALLS_IN_UFUNCTION.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.bHasInstrumentation">
            <summary>If this Generated Class has instrumentation</summary>
        </member>
        <member name="P:UnrealEngine.UBlueprintGeneratedClass.bHasNativizedParent">
            <summary>Flag used to indicate if this class has a nativized parent in a cooked build.</summary>
        </member>
        <member name="T:UnrealEngine.UBodySetup">
            <summary>
            BodySetup contains all collision information that is associated with a single asset.
            A single BodySetup instance is shared among many BodyInstances so that geometry data is not duplicated.
            Assets typically implement a GetBodySetup function that is used during physics state creation.
            @see GetBodySetup
            @see FBodyInstance
            </summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.AggGeom">
            <summary>Simplified collision representation of this</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.BoneName">
            <summary>Used in the PhysicsAsset case. Associates this Body with Bone in a skeletal mesh.</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.PhysicsType">
            <summary>If Unfixed it will use physics. If fixed, it will use kinematic. Default will inherit from OwnerComponent's behavior.</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bAlwaysFullAnimWeight">
            <summary>
            If true (and bEnableFullAnimWeightBodies in SkelMeshComp is true), the physics of this bone will always be blended into the skeletal mesh, regardless of what PhysicsWeight of the SkelMeshComp is.
            This is useful for bones that should always be physics, even when blending physics in and out for hit reactions (eg cloth or pony-tails).
            </summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bConsiderForBounds">
            <summary>
            Should this BodySetup be considered for the bounding box of the PhysicsAsset (and hence SkeletalMeshComponent).
            There is a speed improvement from having less BodySetups processed each frame when updating the bounds.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bMeshCollideAll">
            <summary>
            If true, the physics of this mesh (only affects static meshes) will always contain ALL elements from the mesh - not just the ones enabled for collision.
            This is useful for forcing high detail collisions using the entire render mesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bDoubleSidedGeometry">
            <summary>
            If true, the physics triangle mesh will use double sided faces when doing scene queries.
            This is useful for planes and single sided meshes that need traces to work on both sides.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bGenerateNonMirroredCollision">
            <summary>Should we generate data necessary to support collision on normal (non-mirrored) versions of this body.</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bSharedCookedData">
            <summary>Whether the cooked data is shared by multiple body setups. This is needed for per poly collision case where we don't want to duplicate cooked data, but still need multiple body setups for in place geometry changes</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.bGenerateMirroredCollision">
            <summary>
            Should we generate data necessary to support collision on mirrored versions of this mesh.
            This halves the collision data size for this mesh, but disables collision on mirrored instances of the body.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.PhysMaterial">
            <summary>Physical material to use for simple collision on this body. Encodes information about density, friction etc.</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.CollisionReponse">
            <summary>Collision Type for this body. This eventually changes response to collision to others *</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.CollisionTraceFlag">
            <summary>Collision Trace behavior - by default, it will keep simple(convex)/complex(per-poly) separate *</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.DefaultInstance">
            <summary>Default properties of the body instance, copied into objects on instantiation, was URB_BodyInstance</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.WalkableSlopeOverride">
            <summary>Custom walkable slope setting for this body.</summary>
        </member>
        <member name="P:UnrealEngine.UBodySetup.BuildScale3D">
            <summary>Build scale for this body setup (static mesh settings define this value)</summary>
        </member>
        <member name="T:UnrealEngine.UBookMark">
            <summary>A camera position the current level.</summary>
        </member>
        <member name="P:UnrealEngine.UBookMark.Location">
            <summary>Camera position</summary>
        </member>
        <member name="P:UnrealEngine.UBookMark.Rotation">
            <summary>Camera rotation</summary>
        </member>
        <member name="P:UnrealEngine.UBookMark.HiddenLevels">
            <summary>Array of levels that are hidden</summary>
        </member>
        <member name="T:UnrealEngine.UBorder">
            <summary>
            A border is a container widget that can contain one child widget, providing an opportunity
            to surround it with a background image and adjustable padding.
            * Single Child
            * Image
            </summary>
        </member>
        <member name="P:UnrealEngine.UBorder.ContentColorAndOpacity">
            <summary>Color and opacity multiplier of content in the border</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.HorizontalAlignment">
            <summary>The alignment of the content horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.VerticalAlignment">
            <summary>The alignment of the content vertically.</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.Background">
            <summary>Brush to drag as the background</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.BrushColor">
            <summary>Color and opacity of the actual border image</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.DesiredSizeScale">
            <summary>
            Scales the computed desired size of this border and its contents. Useful
            for making things that slide open without having to hard-code their size.
            Note: if the parent widget is set up to ignore this widget's desired size,
            then changing this value will have no effect.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBorder.bShowEffectWhenDisabled">
            <summary>Whether or not to show the disabled effect when this border is disabled</summary>
        </member>
        <member name="P:UnrealEngine.UBorder.Brush">
            <summary>Image to use for the border</summary>
        </member>
        <member name="T:UnrealEngine.UBorderSlot">
            <summary>The Slot for the UBorderSlot, contains the widget displayed in a border's single slot</summary>
        </member>
        <member name="P:UnrealEngine.UBorderSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UBorderSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UBorderSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UBoxComponent">
            <summary>A box generally used for simple collision. Bounds are rendered as lines in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UBoxComponent.BoxExtent">
            <summary>The extents (radii dimensions) of the box *</summary>
        </member>
        <member name="T:UnrealEngine.UBoxReflectionCaptureComponent">
            <summary>-> will be exported to EngineDecalClasses.h</summary>
        </member>
        <member name="P:UnrealEngine.UBoxReflectionCaptureComponent.BoxTransitionDistance">
            <summary>Adjust capture transition distance</summary>
        </member>
        <member name="P:UnrealEngine.UBreakpoint.bEnabled">
            <summary>Is the breakpoint currently enabled?</summary>
        </member>
        <member name="P:UnrealEngine.UBreakpoint.Node">
            <summary>Node that the breakpoint is placed on</summary>
        </member>
        <member name="P:UnrealEngine.UBreakpoint.bStepOnce">
            <summary>Is this breakpoint auto-generated, and should be removed when next hit?</summary>
        </member>
        <member name="T:UnrealEngine.UBrushBuilder">
            <summary>
            Base class of UnrealEd brush builders.
            Tips for writing brush builders:
            - Always validate the user-specified and call BadParameters function
              if anything is wrong, instead of actually building geometry.
              If you build an invalid brush due to bad user parameters, you'll
              cause an extraordinary amount of pain for the poor user.
            - When generating polygons with more than 3 vertices, BE SURE all the
              polygon's vertices are coplanar!  Out-of-plane polygons will cause
              geometry to be corrupted.
            </summary>
        </member>
        <member name="P:UnrealEngine.UBrushBuilder.ToolTip">
            <summary>localized FString that will be displayed as the name of this brush builder in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UBrushBuilder.NotifyBadParams">
            <summary>If false, disabled the bad param notifications</summary>
        </member>
        <member name="T:UnrealEngine.UBrushComponent">
            <summary>
            A brush component defines a shape that can be modified within the editor. They are used both as part of BSP building, and for volumes.
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/Volumes
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/Brushes
            </summary>
        </member>
        <member name="P:UnrealEngine.UBrushComponent.BrushBodySetup">
            <summary>Description of collision</summary>
        </member>
        <member name="P:UnrealEngine.UBrushComponent.PrePivot">
            <summary>Local space translation</summary>
        </member>
        <member name="T:UnrealEngine.UButton">
            <summary>
            The button is a click-able primitive widget to enable basic interaction, you
            can place any other widget inside a button to make a more complex and
            interesting click-able element in your UI.
            * Single Child
            * Clickable
            </summary>
        </member>
        <member name="P:UnrealEngine.UButton.Style">
            <summary>The template style asset, used to seed the mutable instance of the style.</summary>
        </member>
        <member name="P:UnrealEngine.UButton.WidgetStyle">
            <summary>The button style used at runtime</summary>
        </member>
        <member name="P:UnrealEngine.UButton.ColorAndOpacity">
            <summary>The color multiplier for the button content</summary>
        </member>
        <member name="P:UnrealEngine.UButton.BackgroundColor">
            <summary>The color multiplier for the button background</summary>
        </member>
        <member name="P:UnrealEngine.UButton.ClickMethod">
            <summary>The type of mouse action required by the user to trigger the buttons 'Click'</summary>
        </member>
        <member name="P:UnrealEngine.UButton.TouchMethod">
            <summary>The type of touch action required by the user to trigger the buttons 'Click'</summary>
        </member>
        <member name="P:UnrealEngine.UButton.IsFocusable">
            <summary>Sometimes a button should only be mouse-clickable and never keyboard focusable.</summary>
        </member>
        <member name="P:UnrealEngine.UButton.OnClicked">
            <summary>Called when the button is clicked</summary>
        </member>
        <member name="P:UnrealEngine.UButton.OnPressed">
            <summary>Called when the button is pressed</summary>
        </member>
        <member name="P:UnrealEngine.UButton.OnReleased">
            <summary>Called when the button is released</summary>
        </member>
        <member name="T:UnrealEngine.UButtonSlot">
            <summary>The Slot for the UButtonSlot, contains the widget displayed in a button's single slot</summary>
        </member>
        <member name="P:UnrealEngine.UButtonSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UButtonSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UButtonSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UButtonStyleAsset">
            <summary>
            An asset describing a button's appearance.
            Just a wrapper for the struct with real data in it.style factory
            </summary>
        </member>
        <member name="P:UnrealEngine.UButtonStyleAsset.ButtonStyle">
            <summary>The actual data describing the button's appearance.</summary>
        </member>
        <member name="T:UnrealEngine.UCameraAnim">
            <summary>A predefined animation to be played on a camera</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.CameraInterpGroup">
            <summary>The UInterpGroup that holds our actual interpolation data.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.PreviewInterpGroup">
            <summary>This is to preview and they only exists in editor</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.AnimLength">
            <summary>Length, in seconds.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.BoundingBox">
            <summary>AABB in local space.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.bRelativeToInitialTransform">
            <summary>
            If true, assume all transform keys are intended be offsets from the start of the animation. This allows the animation to be authored at any world location and be applied as a delta to the camera.
            If false, assume all transform keys are authored relative to the world origin. Positions will be directly applied as deltas to the camera.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.bRelativeToInitialFOV">
            <summary>
            If true, assume all FOV keys are intended be offsets from the start of the animation.
            If false, assume all FOV keys are authored relative to the current FOV of the camera at the start of the animation.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.BaseFOV">
            <summary>The base FOV that all FOV keys are relative to.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.BasePostProcessSettings">
            <summary>Default PP settings to put on the animated camera. For modifying PP without keyframes.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnim.BasePostProcessBlendWeight">
            <summary>Default PP blend weight to put on the animated camera. For modifying PP without keyframes.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnimInst.CamAnim">
            <summary>which CameraAnim this is an instance of</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnimInst.PlayRate">
            <summary>Multiplier for playback rate.  1.0 = normal.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraAnimInst.MoveTrack">
            <summary>cached movement track from the currently playing anim so we don't have to go find it every frame</summary>
        </member>
        <member name="T:UnrealEngine.UCameraComponent">
            <summary>
            Represents a camera viewpoint and settings, such as projection type, field of view, and post-process overrides.
            The default behavior for an actor used as the camera view target is to look for an attached camera component and use its location, rotation, and settings.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.FieldOfView">
            <summary>The horizontal field of view (in degrees) in perspective mode (ignored in Orthographic mode)</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.OrthoWidth">
            <summary>The desired width (in world units) of the orthographic view (ignored in Perspective mode)</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.OrthoNearClipPlane">
            <summary>The near plane distance of the orthographic view (in world units)</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.OrthoFarClipPlane">
            <summary>The far plane distance of the orthographic view (in world units)</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.AspectRatio">
            <summary>Aspect Ratio (Width/Height)</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.bConstrainAspectRatio">
            <summary>If bConstrainAspectRatio is true, black bars will be added if the destination view has a different aspect ratio than this camera requested.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.bUseFieldOfViewForLOD">
            <summary>If true, account for the field of view angle when computing which level of detail to use for meshes.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.bLockToHmd">
            <summary>True if the camera's orientation and position should be locked to the HMD</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.bUsePawnControlRotation">
            <summary>
            If this camera component is placed on a pawn, should it use the view/control rotation of the pawn where possible?
            @see APawn::GetViewRotation()
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.ProjectionMode">
            <summary>The type of camera</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.PostProcessBlendWeight">
            <summary>Indicates if PostProcessSettings should be used when using this Camera to view through.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.PostProcessSettings">
            <summary>Post process settings to use for this camera. Don't forget to check the properties you want to override</summary>
        </member>
        <member name="P:UnrealEngine.UCameraComponent.bUseControllerViewRotation">
            <summary>DEPRECATED: use bUsePawnControlRotation instead</summary>
        </member>
        <member name="T:UnrealEngine.UCameraModifier">
            <summary>
            A CameraModifier is a base class for objects that may adjust the final camera properties after
            being computed by the APlayerCameraManager (@see ModifyCamera). A CameraModifier
            can be stateful, and is associated uniquely with a specific APlayerCameraManager.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.bDebug">
            <summary>If true, enables certain debug visualization features.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.bExclusive">
            <summary>If true, no other modifiers of same priority allowed.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.Priority">
            <summary>Priority value that determines the order in which modifiers are applied. 0 = highest priority, 255 = lowest.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.CameraOwner">
            <summary>Camera this object is associated with.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.AlphaInTime">
            <summary>When blending in, alpha proceeds from 0 to 1 over this time</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.AlphaOutTime">
            <summary>When blending out, alpha proceeds from 1 to 0 over this time</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier.Alpha">
            <summary>Current blend alpha.</summary>
        </member>
        <member name="T:UnrealEngine.UCameraModifier_CameraShake">
            <summary>
            A UCameraModifier_CameraShake is a camera modifier that can apply a UCameraShake to
            the owning camera.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier_CameraShake.ActiveShakes">
            <summary>List of active CameraShake instances</summary>
        </member>
        <member name="P:UnrealEngine.UCameraModifier_CameraShake.SplitScreenShakeScale">
            <summary>Scaling factor applied to all camera shakes in when in splitscreen mode. Normally used to reduce shaking, since shakes feel more intense in a smaller viewport.</summary>
        </member>
        <member name="T:UnrealEngine.UCameraShake">
            <summary>
            A CameraShake is an asset that defines how to shake the camera in
            a particular way. CameraShakes can be authored as either oscillating shakes,
            animated shakes, or both.
            An oscillating shake will sinusoidally vibrate various camera parameters over time. Each location
            and rotation axis can be oscillated independently with different parameters to create complex and
            random-feeling shakes. These are easier to author and tweak, but can still feel mechanical and are
            limited to vibration-style shakes, such as earthquakes.
            Animated shakes play keyframed camera animations.  These can take more effort to author, but enable
            more natural-feeling results and things like directional shakes.  For instance, you can have an explosion
            to the camera's right push it primarily to the left.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.bSingleInstance">
            <summary>
            If true to only allow a single instance of this shake class to play at any given time.
            Subsequent attempts to play this shake will simply restart the timer.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.OscillationDuration">
            <summary>Duration in seconds of current screen shake. Less than 0 means indefinite, 0 means no oscillation.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.OscillationBlendInTime">
            <summary>Duration of the blend-in, where the oscillation scales from 0 to 1.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.OscillationBlendOutTime">
            <summary>Duration of the blend-out, where the oscillation scales from 1 to 0.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.RotOscillation">
            <summary>Rotational oscillation</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.LocOscillation">
            <summary>Positional oscillation</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.FOVOscillation">
            <summary>FOV oscillation</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.AnimPlayRate">
            <summary>Scalar defining how fast to play the anim.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.AnimScale">
            <summary>Scalar defining how "intense" to play the anim.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.AnimBlendInTime">
            <summary>Linear blend-in time.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.AnimBlendOutTime">
            <summary>Linear blend-out time.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.RandomAnimSegmentDuration">
            <summary>When bRandomAnimSegment is true, this defines how long the anim should play.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.Anim">
            <summary>Source camera animation to play. Can be null.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.bRandomAnimSegment">
            <summary>
            If true, play a random snippet of the animation of length Duration.  Implies bLoop and bRandomStartTime = true for the CameraAnim.
            If false, play the full anim once, non-looped. Useful for getting variety out of a single looped CameraAnim asset.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.ShakeScale">
            <summary>Overall intensity scale for this shake instance.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.OscillatorTimeRemaining">
            <summary>Time remaining for oscillation shakes. Less than 0.f means shake infinitely.</summary>
        </member>
        <member name="P:UnrealEngine.UCameraShake.AnimInst">
            <summary>The playing instance of the CameraAnim-based shake, if any.</summary>
        </member>
        <member name="T:UnrealEngine.UCanvas">
            <summary>A drawing canvas.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.OrgX">
            <summary>Modifiable properties.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.OrgY">
            <summary>Origin for drawing in X.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.ClipX">
            <summary>Origin for drawing in Y.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.ClipY">
            <summary>Bottom right clipping region.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.DrawColor">
            <summary>Bottom right clipping region.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.bCenterX">
            <summary>Color for drawing.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.bCenterY">
            <summary>Whether to center the text horizontally (about CurX)</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.bNoSmooth">
            <summary>Whether to center the text vertically (about CurY)</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.SizeX">
            <summary>Don't bilinear filter.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.SizeY">
            <summary>Zero-based actual dimensions X.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.ColorModulate">
            <summary>Internal.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.GradientTexture0">
            <summary>Default texture to use</summary>
        </member>
        <member name="P:UnrealEngine.UCanvas.ReporterGraph">
            <summary>Helper class to render 2d graphs on canvas</summary>
        </member>
        <member name="P:UnrealEngine.UCanvasPanelSlot.LayoutData">
            <summary>The anchoring information for the slot</summary>
        </member>
        <member name="P:UnrealEngine.UCanvasPanelSlot.bAutoSize">
            <summary>When AutoSize is true we use the widget's desired size</summary>
        </member>
        <member name="P:UnrealEngine.UCanvasPanelSlot.ZOrder">
            <summary>The order priority this widget is rendered in.  Higher values are rendered last (and so they will appear to be on top).</summary>
        </member>
        <member name="T:UnrealEngine.UCanvasRenderTarget2D">
            <summary>
            CanvasRenderTarget2D is 2D render target which exposes a Canvas interface to allow you to draw elements onto
            it directly.  Use FindCanvasRenderTarget2D() to find or create a render target texture by unique name, then
            bind a function to the OnCanvasRenderTargetUpdate delegate which will be called when the render target is
            updated.  If you need to repaint your canvas every single frame, simply call UpdateResource() on it from a Tick
            function.  Also, remember to hold onto your new canvas render target with a reference so that it doesn't get
            garbage collected.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCanvasRenderTarget2D.OnCanvasRenderTargetUpdate">
            <summary>Called when this Canvas Render Target is asked to update its texture resource.</summary>
        </member>
        <member name="P:UnrealEngine.UCanvasRenderTarget2D.bShouldClearRenderTargetOnReceiveUpdate">
            <summary>
            If true, clear the render target to green whenever OnReceiveUpdate() is called.  (Defaults to true.)
            If false, the render target will retain whatever values it had, allowing the user to update only areas that
            have changed.
            </summary>
        </member>
        <member name="T:UnrealEngine.UCapsuleComponent">
            <summary>A capsule generally used for simple collision. Bounds are rendered as lines in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UCapsuleComponent.CapsuleHalfHeight">
            <summary>
            Half-height, from center of capsule to the end of top or bottom hemisphere.
            This cannot be less than CapsuleRadius.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCapsuleComponent.CapsuleRadius">
            <summary>
            Radius of cap hemispheres and center cylinder.
            This cannot be more than CapsuleHalfHeight.
            </summary>
        </member>
        <member name="T:UnrealEngine.UChannel">
            <summary>Base class of communication channels.</summary>
        </member>
        <member name="T:UnrealEngine.UCharacterMovementComponent">
            <summary>
            CharacterMovementComponent handles movement logic for the associated Character owner.
            It supports various movement modes including: walking, falling, swimming, flying, custom.
            Movement is affected primarily by current Velocity and Acceleration. Acceleration is updated each frame
            based on the input vector accumulated thus far (see UPawnMovementComponent::GetPendingInputVector()).
            Networking is fully implemented, with server-client correction and prediction included.
            @see ACharacter, UPawnMovementComponent
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Framework/Pawn/Character/
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.CharacterOwner">
            <summary>Character movement component belongs to</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.GravityScale">
            <summary>Custom gravity scale. Gravity is multiplied by this amount for the character.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxStepHeight">
            <summary>Maximum height character can step up</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.JumpZVelocity">
            <summary>Initial velocity (instantaneous vertical acceleration) when jumping.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.JumpOffJumpZFactor">
            <summary>Fraction of JumpZVelocity to use when automatically "jumping off" of a base actor that's not allowed to be a base for a character. (For example, if you're not allowed to stand on other players.)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.WalkableFloorAngle">
            <summary>Max angle in degrees of a walkable surface. Any greater than this and it is too steep to be walkable.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.WalkableFloorZ">
            <summary>Minimum Z value for floor normal. If less, not a walkable surface. Computed from WalkableFloorAngle.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MovementMode">
            <summary>
            Actor's current movement mode (walking, falling, etc).
               - walking:  Walking on a surface, under the effects of friction, and able to "step up" barriers. Vertical velocity is zero.
               - falling:  Falling under the effects of gravity, after jumping or walking off the edge of a surface.
               - flying:   Flying, ignoring the effects of gravity.
               - swimming: Swimming through a fluid volume, under the effects of gravity and buoyancy.
               - custom:   User-defined custom movement mode, including many possible sub-modes.
            This is automatically replicated through the Character owner and for client-server movement functions.
            @see SetMovementMode(), CustomMovementMode
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.CustomMovementMode">
            <summary>
            Current custom sub-mode if MovementMode is set to Custom.
            This is automatically replicated through the Character owner and for client-server movement functions.
            @see SetMovementMode()
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.GroundFriction">
            <summary>
            Setting that affects movement control. Higher values allow faster changes in direction.
            If bUseSeparateBrakingFriction is false, also affects the ability to stop more quickly when braking (whenever Acceleration is zero), where it is multiplied by BrakingFrictionFactor.
            When braking, this property allows you to control how much friction is applied when moving across the ground, applying an opposing force that scales with current velocity.
            This can be used to simulate slippery surfaces such as ice or oil by changing the value (possibly based on the material pawn is standing on).
            @see BrakingDecelerationWalking, BrakingFriction, bUseSeparateBrakingFriction, BrakingFrictionFactor
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxWalkSpeed">
            <summary>The maximum ground speed when walking. Also determines maximum lateral speed when falling.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxWalkSpeedCrouched">
            <summary>The maximum ground speed when walking and crouched.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxSwimSpeed">
            <summary>The maximum swimming speed.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxFlySpeed">
            <summary>The maximum flying speed.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxCustomMovementSpeed">
            <summary>The maximum speed when using Custom movement mode.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxAcceleration">
            <summary>Max Acceleration (rate of change of velocity)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.BrakingFrictionFactor">
            <summary>
            Factor used to multiply actual value of friction used when braking.
            This applies to any friction value that is currently used, which may depend on bUseSeparateBrakingFriction.
            @note This is 2 by default for historical reasons, a value of 1 gives the true drag equation.
            @see bUseSeparateBrakingFriction, GroundFriction, BrakingFriction
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.BrakingFriction">
            <summary>
            Friction (drag) coefficient applied when braking (whenever Acceleration = 0, or if character is exceeding max speed); actual value used is this multiplied by BrakingFrictionFactor.
            When braking, this property allows you to control how much friction is applied when moving across the ground, applying an opposing force that scales with current velocity.
            Braking is composed of friction (velocity-dependent drag) and constant deceleration.
            This is the current value, used in all movement modes; if this is not desired, override it or bUseSeparateBrakingFriction when movement mode changes.
            @note Only used if bUseSeparateBrakingFriction setting is true, otherwise current friction such as GroundFriction is used.
            @see bUseSeparateBrakingFriction, BrakingFrictionFactor, GroundFriction, BrakingDecelerationWalking
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bUseSeparateBrakingFriction">
            <summary>
            If true, BrakingFriction will be used to slow the character to a stop (when there is no Acceleration).
            If false, braking uses the same friction passed to CalcVelocity() (ie GroundFriction when walking), multiplied by BrakingFrictionFactor.
            This setting applies to all movement modes; if only desired in certain modes, consider toggling it when movement modes change.
            @see BrakingFriction
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.BrakingDecelerationWalking">
            <summary>
            Deceleration when walking and not applying acceleration. This is a constant opposing force that directly lowers velocity by a constant value.
            @see GroundFriction, MaxAcceleration
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.BrakingDecelerationFalling">
            <summary>
            Lateral deceleration when falling and not applying acceleration.
            @see MaxAcceleration
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.BrakingDecelerationSwimming">
            <summary>
            Deceleration when swimming and not applying acceleration.
            @see MaxAcceleration
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.BrakingDecelerationFlying">
            <summary>
            Deceleration when flying and not applying acceleration.
            @see MaxAcceleration
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AirControl">
            <summary>
            When falling, amount of lateral movement control available to the character.
            0 = no control, 1 = full control at max speed of MaxWalkSpeed.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AirControlBoostMultiplier">
            <summary>
            When falling, multiplier applied to AirControl when lateral velocity is less than AirControlBoostVelocityThreshold.
            Setting this to zero will disable air control boosting. Final result is clamped at 1.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AirControlBoostVelocityThreshold">
            <summary>
            When falling, if lateral velocity magnitude is less than this value, AirControl is multiplied by AirControlBoostMultiplier.
            Setting this to zero will disable air control boosting.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.FallingLateralFriction">
            <summary>
            Friction to apply to lateral air movement when falling.
            If bUseSeparateBrakingFriction is false, also affects the ability to stop more quickly when braking (whenever Acceleration is zero).
            @see BrakingFriction, bUseSeparateBrakingFriction
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.CrouchedHalfHeight">
            <summary>Collision half-height when crouching (component scale is applied separately)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.Buoyancy">
            <summary>Water buoyancy. A ratio (1.0 = neutral buoyancy, 0.0 = no buoyancy)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PerchRadiusThreshold">
            <summary>
            Don't allow the character to perch on the edge of a surface if the contact is this close to the edge of the capsule.
            Note that characters will not fall off if they are within MaxStepHeight of a walkable surface below.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PerchAdditionalHeight">
            <summary>
            When perching on a ledge, add this additional distance to MaxStepHeight when determining how high above a walkable floor we can perch.
            Note that we still enforce MaxStepHeight to start the step up; this just allows the character to hang off the edge or step slightly higher off the floor.
            (@see PerchRadiusThreshold)
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.RotationRate">
            <summary>Change in rotation per second, used when UseControllerDesiredRotation or OrientRotationToMovement are true. Set a negative value for infinite rotation rate and instant turns.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bUseControllerDesiredRotation">
            <summary>
            If true, smoothly rotate the Character toward the Controller's desired rotation (typically Controller->ControlRotation), using RotationRate as the rate of rotation change. Overridden by OrientRotationToMovement.
            Normally you will want to make sure that other settings are cleared, such as bUseControllerRotationYaw on the Character.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bOrientRotationToMovement">
            <summary>
            If true, rotate the Character toward the direction of acceleration, using RotationRate as the rate of rotation change. Overrides UseControllerDesiredRotation.
            Normally you will want to make sure that other settings are cleared, such as bUseControllerRotationYaw on the Character.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bMovementInProgress">
            <summary>
            True during movement update.
            Used internally so that attempts to change CharacterOwner and UpdatedComponent are deferred until after an update.
            @see IsMovementInProgress()
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bEnableScopedMovementUpdates">
            <summary>
            If true, high-level movement updates will be wrapped in a movement scope that accumulates updates and defers a bulk of the work until the end.
            When enabled, touch and hit events will not be triggered until the end of multiple moves within an update, which can improve performance.
            @see FScopedMovementUpdate
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bForceMaxAccel">
            <summary>Ignores size of acceleration component, and forces max acceleration to drive character at full velocity.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bRunPhysicsWithNoController">
            <summary>
            If true, movement will be performed even if there is no Controller for the Character owner.
            Normally without a Controller, movement will be aborted and velocity and acceleration are zeroed if the character is walking.
            Characters that are spawned without a Controller but with this flag enabled will initialize the movement mode to DefaultLandMovementMode or DefaultWaterMovementMode appropriately.
            @see DefaultLandMovementMode, DefaultWaterMovementMode
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bForceNextFloorCheck">
            <summary>
            Force the Character in MOVE_Walking to do a check for a valid floor even if he hasn't moved. Cleared after next floor check.
            Normally if bAlwaysCheckFloor is false we try to avoid the floor check unless some conditions are met, but this can be used to force the next check to always run.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bShrinkProxyCapsule">
            <summary>
            If true, the capsule needs to be shrunk on this simulated proxy, to avoid replication rounding putting us in geometry.
            Whenever this is set to true, this will cause the capsule to be shrunk again on the next update, and then set to false.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bCanWalkOffLedges">
            <summary>If true, Character can walk off a ledge.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bCanWalkOffLedgesWhenCrouching">
            <summary>If true, Character can walk off a ledge when crouching.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bDeferUpdateMoveComponent">
            <summary>true to update CharacterOwner and UpdatedComponent after movement ends</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.DeferredUpdatedMoveComponent">
            <summary>What to update CharacterOwner and UpdatedComponent after movement ends</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxOutOfWaterStepHeight">
            <summary>Maximum step height for getting out of water</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.OutofWaterZ">
            <summary>Z velocity applied when pawn tries to get out of water</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.Mass">
            <summary>Mass of pawn (for when momentum is imparted to it).</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bEnablePhysicsInteraction">
            <summary>If enabled, the player will interact with physics objects when walking into them.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bTouchForceScaledToMass">
            <summary>If enabled, the TouchForceFactor is applied per kg mass of the affected object.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bPushForceScaledToMass">
            <summary>If enabled, the PushForceFactor is applied per kg mass of the affected object.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bPushForceUsingZOffset">
            <summary>If enabled, the PushForce location is moved using PushForcePointZOffsetFactor. Otherwise simply use the impact point.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bScalePushForceToVelocity">
            <summary>
            If enabled, the applied push force will try to get the physics object to the same velocity than the player, not faster. This will only
                          scale the force down, it will never apply more force than defined by PushForceFactor.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.StandingDownwardForceScale">
            <summary>Force applied to objects we stand on (due to Mass and Gravity) is scaled by this amount.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.InitialPushForceFactor">
            <summary>Initial impulse force to apply when the player bounces into a blocking physics object.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PushForceFactor">
            <summary>Force to apply when the player collides with a blocking physics object.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PushForcePointZOffsetFactor">
            <summary>Z-Offset for the position the force is applied to. 0.0f is the center of the physics object, 1.0f is the top and -1.0f is the bottom of the object.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.TouchForceFactor">
            <summary>Force to apply to physics objects that are touched by the player.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UCharacterMovementComponent.MinTouchForce" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UCharacterMovementComponent.MaxTouchForce" -->
        <member name="P:UnrealEngine.UCharacterMovementComponent.RepulsionForce">
            <summary>Force per kg applied constantly to all overlapping components.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bForceBraking">
            <summary>Deprecated properties</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.CrouchedSpeedMultiplier">
            <summary>Multiplier to max ground speed to use when crouched</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.Acceleration">
            <summary>
            Current acceleration vector (with magnitude).
            This is calculated each update based on the input vector and the constraints of MaxAcceleration and the current movement mode.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.LastUpdateLocation">
            <summary>Location after last PerformMovement or SimulateMovement update. Used internally to detect changes in position from outside character movement to try to validate the current floor.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.LastUpdateRotation">
            <summary>Rotation after last PerformMovement or SimulateMovement update.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.LastUpdateVelocity">
            <summary>Velocity after last PerformMovement or SimulateMovement update. Used internally to detect changes in velocity from external sources.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.ServerLastTransformUpdateTimeStamp">
            <summary>Timestamp when location or rotation last changed during an update. Only valid on the server.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PendingImpulseToApply">
            <summary>Accumulated impulse to be added next tick.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PendingForceToApply">
            <summary>Accumulated force to be added next tick.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AnalogInputModifier">
            <summary>Modifier to applied to values such as acceleration and max speed due to analog input.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxSimulationTimeStep">
            <summary>
            Max time delta for each discrete simulation step.
            Used primarily in the the more advanced movement modes that break up larger time steps (usually those applying gravity such as falling and walking).
            Lowering this value can address issues with fast-moving objects or complex collision scenarios, at the cost of performance.
            WARNING: if (MaxSimulationTimeStep * MaxSimulationIterations) is too low for the min framerate, the last simulation step may exceed MaxSimulationTimeStep to complete the simulation.
            @see MaxSimulationIterations
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxSimulationIterations">
            <summary>
            Max number of iterations used for each discrete simulation step.
            Used primarily in the the more advanced movement modes that break up larger time steps (usually those applying gravity such as falling and walking).
            Increasing this value can address issues with fast-moving objects or complex collision scenarios, at the cost of performance.
            WARNING: if (MaxSimulationTimeStep * MaxSimulationIterations) is too low for the min framerate, the last simulation step may exceed MaxSimulationTimeStep to complete the simulation.
            @see MaxSimulationTimeStep
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxDepenetrationWithGeometry">
            <summary>
            Max distance we allow simulated proxies to depenetrate when moving out of anything but Pawns.
            This is generally more tolerant than with Pawns, because other geometry is either not moving, or is moving predictably with a bit of delay compared to on the server.
            @see MaxDepenetrationWithGeometryAsProxy, MaxDepenetrationWithPawn, MaxDepenetrationWithPawnAsProxy
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxDepenetrationWithGeometryAsProxy">
            <summary>
            Max distance we allow simulated proxies to depenetrate when moving out of anything but Pawns.
            This is generally more tolerant than with Pawns, because other geometry is either not moving, or is moving predictably with a bit of delay compared to on the server.
            @see MaxDepenetrationWithGeometry, MaxDepenetrationWithPawn, MaxDepenetrationWithPawnAsProxy
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxDepenetrationWithPawn">
            <summary>
            Max distance we are allowed to depenetrate when moving out of other Pawns.
            @see MaxDepenetrationWithGeometry, MaxDepenetrationWithGeometryAsProxy, MaxDepenetrationWithPawnAsProxy
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MaxDepenetrationWithPawnAsProxy">
            <summary>
            Max distance we allow simulated proxies to depenetrate when moving out of other Pawns.
            Typically we don't want a large value, because we receive a server authoritative position that we should not then ignore by pushing them out of the local player.
            @see MaxDepenetrationWithGeometry, MaxDepenetrationWithGeometryAsProxy, MaxDepenetrationWithPawn
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NetworkSimulatedSmoothLocationTime">
            <summary>How long to take to smoothly interpolate from the old pawn position on the client to the corrected one sent by the server. Not used by Linear smoothing.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NetworkSimulatedSmoothRotationTime">
            <summary>How long to take to smoothly interpolate from the old pawn rotation on the client to the corrected one sent by the server. Not used by Linear smoothing.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.ListenServerNetworkSimulatedSmoothLocationTime">
            <summary>Similar setting as NetworkSimulatedSmoothLocationTime but only used on Listen servers.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.ListenServerNetworkSimulatedSmoothRotationTime">
            <summary>Similar setting as NetworkSimulatedSmoothRotationTime but only used on Listen servers.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NetworkMaxSmoothUpdateDistance">
            <summary>Maximum distance character is allowed to lag behind server location when interpolating between updates.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NetworkNoSmoothUpdateDistance">
            <summary>Maximum distance beyond which character is teleported to the new server location without any smoothing.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.LedgeCheckThreshold">
            <summary>Used in determining if pawn is going off ledge.  If the ledge is "shorter" than this value then the pawn will be able to walk off it. *</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.JumpOutOfWaterPitch">
            <summary>When exiting water, jump if control pitch angle is this high or above.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.CurrentFloor">
            <summary>Information about the floor the Character is standing on (updated only during walking movement).</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.DefaultLandMovementMode">
            <summary>
            Default movement mode when not in water. Used at player startup or when teleported.
            @see DefaultWaterMovementMode
            @see bRunPhysicsWithNoController
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.DefaultWaterMovementMode">
            <summary>
            Default movement mode when in water. Used at player startup or when teleported.
            @see DefaultLandMovementMode
            @see bRunPhysicsWithNoController
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.GroundMovementMode">
            <summary>
            Ground movement mode to switch to after falling and resuming ground movement.
            Only allowed values are: MOVE_Walking, MOVE_NavWalking.
            @see SetGroundMovementMode(), GetGroundMovementMode()
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bMaintainHorizontalGroundVelocity">
            <summary>
            If true, walking movement always maintains horizontal velocity when moving up ramps, which causes movement up ramps to be faster parallel to the ramp surface.
            If false, then walking movement maintains velocity magnitude parallel to the ramp surface.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bImpartBaseVelocityX">
            <summary>If true, impart the base actor's X velocity when falling off it (which includes jumping)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bImpartBaseVelocityY">
            <summary>If true, impart the base actor's Y velocity when falling off it (which includes jumping)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bImpartBaseVelocityZ">
            <summary>If true, impart the base actor's Z velocity when falling off it (which includes jumping)</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bImpartBaseAngularVelocity">
            <summary>
            If true, impart the base component's tangential components of angular velocity when jumping or falling off it.
            Only those components of the velocity allowed by the separate component settings (bImpartBaseVelocityX etc) will be applied.
            @see bImpartBaseVelocityX, bImpartBaseVelocityY, bImpartBaseVelocityZ
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bJustTeleported">
            <summary>Used by movement code to determine if a change in position is based on normal movement or a teleport. If not a teleport, velocity can be recomputed based on the change in position.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bNetworkUpdateReceived">
            <summary>True when a network replication update is received for simulated proxies.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bNetworkMovementModeChanged">
            <summary>True when the networked movement mode has been replicated.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bIgnoreClientMovementErrorChecksAndCorrection">
            <summary>
            True when we should ignore server location difference checks for client error on this movement component
            This can be useful when character is moving at extreme speeds for a duration and you need it to look
            smooth on clients. Make sure to disable when done, as this would break this character's server-client
            movement correction.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bNotifyApex">
            <summary>
            If true, event NotifyJumpApex() to CharacterOwner's controller when at apex of jump. Is cleared when event is triggered.
            By default this is off, and if you want the event to fire you typically set it to true when movement mode changes to "Falling" from another mode (see OnMovementModeChanged).
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bCheatFlying">
            <summary>Instantly stop when in flying mode and no acceleration is being applied.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bWantsToCrouch">
            <summary>If true, try to crouch (or keep crouching) on next update. If false, try to stop crouching on next update.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bCrouchMaintainsBaseLocation">
            <summary>
            If true, crouching should keep the base of the capsule in place by lowering the center of the shrunken capsule. If false, the base of the capsule moves up and the center stays in place.
            The same behavior applies when the character uncrouches: if true, the base is kept in the same location and the center moves up. If false, the capsule grows and only moves up if the base impacts something.
            By default this variable is set when the movement mode changes: set to true when walking and false otherwise. Feel free to override the behavior when the movement mode changes.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bIgnoreBaseRotation">
            <summary>
            Whether the character ignores changes in rotation of the base it is standing on.
            If true, the character maintains current world rotation.
            If false, the character rotates with the moving base.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bFastAttachedMove">
            <summary>
            Set this to true if riding on a moving base that you know is clear from non-moving world obstructions.
            Optimization to avoid sweeps during based movement, use with care.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bAlwaysCheckFloor">
            <summary>
            Whether we always force floor checks for stationary Characters while walking.
            Normally floor checks are avoided if possible when not moving, but this can be used to force them if there are use-cases where they are being skipped erroneously
            (such as objects moving up into the character from below).
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bUseFlatBaseForFloorChecks">
            <summary>
            Performs floor checks as if the character is using a shape with a flat base.
            This avoids the situation where characters slowly lower off the side of a ledge (as their capsule 'balances' on the edge).
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bPerformingJumpOff">
            <summary>Used to prevent reentry of JumpOff()</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bWantsToLeaveNavWalking">
            <summary>Used to safely leave NavWalking movement mode</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bUseRVOAvoidance">
            <summary>If set, component will use RVO avoidance. This only runs on the server.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bRequestedMoveUseAcceleration">
            <summary>
            Should use acceleration for path following?
            If true, acceleration is applied when path following to reach the target velocity.
            If false, path following velocity is set directly, disregarding acceleration.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bHasRequestedVelocity">
            <summary>Was velocity requested by path following?</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bRequestedMoveWithMaxSpeed">
            <summary>Was acceleration requested to be always max speed?</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bWasAvoidanceUpdated">
            <summary>Was avoidance updated in this frame?</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bProjectNavMeshWalking">
            <summary>Whether to raycast to underlying geometry to better conform navmesh-walking characters</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bProjectNavMeshOnBothWorldChannels">
            <summary>Use both WorldStatic and WorldDynamic channels for NavWalking geometry conforming</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.RequestedVelocity">
            <summary>
            Velocity requested by path following.
            @see RequestDirectMove()
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AvoidanceUID">
            <summary>No default value, for now it's assumed to be valid if GetAvoidanceManager() returns non-NULL.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AvoidanceGroup">
            <summary>Moving actor's group mask</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.GroupsToAvoid">
            <summary>Will avoid other agents if they are in one of specified groups</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.GroupsToIgnore">
            <summary>Will NOT avoid other agents if they are in one of specified groups, higher priority than GroupsToAvoid</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AvoidanceWeight">
            <summary>De facto default value 0.5 (due to that being the default in the avoidance registration function), indicates RVO behavior.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PendingLaunchVelocity">
            <summary>Temporarily holds launch velocity when pawn is to be launched so it happens at end of movement.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NavMeshProjectionInterval">
            <summary>How often we should raycast to project from navmesh to underlying geometry</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NavMeshProjectionInterpSpeed">
            <summary>Speed at which to interpolate agent navmesh offset between traces. 0: Instant (no interp) > 0: Interp speed")</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NavMeshProjectionHeightScaleUp">
            <summary>
            Scale of the total capsule height to use for projection from navmesh to underlying geometry in the upward direction.
            In other words, start the trace at [CapsuleHeight * NavMeshProjectionHeightScaleUp] above nav mesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NavMeshProjectionHeightScaleDown">
            <summary>
            Scale of the total capsule height to use for projection from navmesh to underlying geometry in the downward direction.
            In other words, trace down to [CapsuleHeight * NavMeshProjectionHeightScaleDown] below nav mesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.NavWalkingFloorDistTolerance">
            <summary>Ignore small differences in ground height between server and client data during NavWalking mode</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.PostPhysicsTickFunction">
            <summary>Post-physics tick function for this character</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.MinTimeBetweenTimeStampResets">
            <summary>
            Minimum time between client TimeStamp resets.
                   !! This has to be large enough so that we don't confuse the server if the client can stall or timeout.
                   We do this as we use floats for TimeStamps, and server derives DeltaTime from two TimeStamps.
                   As time goes on, accuracy decreases from those floating point numbers.
                   So we trigger a TimeStamp reset at regular intervals to maintain a high level of accuracy.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.CurrentRootMotion">
            <summary>Root Motion Group containing active root motion sources being applied to movement</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.RootMotionParams">
            <summary>
            Root Motion movement params. Holds result of anim montage root motion during PerformMovement(), and is overridden
             during autonomous move playback to force historical root motion for MoveAutonomous() calls
            </summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.AnimRootMotionVelocity">
            <summary>Velocity extracted from RootMotionParams when there is anim root motion active. Invalid to use when HasAnimRootMotion() returns false.</summary>
        </member>
        <member name="P:UnrealEngine.UCharacterMovementComponent.bWasSimulatingRootMotion">
            <summary>True when SimulatedProxies are simulating RootMotion</summary>
        </member>
        <member name="T:UnrealEngine.UCheatManager">
            <summary>
            Cheat Manager is a central blueprint to implement test and debug code and actions that are not to ship with the game.
            As the Cheat Manager is not instanced in shipping builds, it is for debugging purposes only
            </summary>
        </member>
        <member name="P:UnrealEngine.UCheatManager.DebugCameraControllerRef">
            <summary>Debug camera - used to have independent camera without stopping gameplay</summary>
        </member>
        <member name="P:UnrealEngine.UCheatManager.DebugCameraControllerClass">
            <summary>Debug camera - used to have independent camera without stopping gameplay</summary>
        </member>
        <member name="T:UnrealEngine.UCheckBox">
            <summary>
            The checkbox widget allows you to display a toggled state of 'unchecked', 'checked' and
            'indeterminable.  You can use the checkbox for a classic checkbox, or as a toggle button,
            or as radio buttons.
            * Single Child
            * Toggle
            </summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.WidgetStyle">
            <summary>The checkbox bar style</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.Style">
            <summary>Style of the check box</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.UncheckedImage">
            <summary>Image to use when the checkbox is unchecked</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.UncheckedHoveredImage">
            <summary>Image to use when the checkbox is unchecked and hovered</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.UncheckedPressedImage">
            <summary>Image to use when the checkbox is unchecked and pressed</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.CheckedImage">
            <summary>Image to use when the checkbox is checked</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.CheckedHoveredImage">
            <summary>Image to use when the checkbox is checked and hovered</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.CheckedPressedImage">
            <summary>Image to use when the checkbox is checked and pressed</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.UndeterminedImage">
            <summary>Image to use when the checkbox is in an ambiguous state and hovered</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.UndeterminedHoveredImage">
            <summary>Image to use when the checkbox is checked and hovered</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.UndeterminedPressedImage">
            <summary>Image to use when the checkbox is in an ambiguous state and pressed</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.HorizontalAlignment">
            <summary>How the content of the toggle button should align within the given space</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.Padding">
            <summary>Spacing between the check box image and its content</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.BorderBackgroundColor">
            <summary>The color of the background border</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.IsFocusable">
            <summary>Sometimes a button should only be mouse-clickable and never keyboard focusable.</summary>
        </member>
        <member name="P:UnrealEngine.UCheckBox.OnCheckStateChanged">
            <summary>Called when the checked state has changed</summary>
        </member>
        <member name="T:UnrealEngine.UCheckBoxStyleAsset">
            <summary>
            An asset describing a CheckBox's appearance.
            Just a wrapper for the struct with real data in it.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCheckBoxStyleAsset.CheckBoxStyle">
            <summary>The actual data describing the Check Box's appearance.</summary>
        </member>
        <member name="T:UnrealEngine.UChildActorComponent">
            <summary>A component that spawns an Actor when registered, and destroys it when unregistered.</summary>
        </member>
        <member name="P:UnrealEngine.UChildActorComponent.ChildActorClass">
            <summary>The class of Actor to spawn</summary>
        </member>
        <member name="P:UnrealEngine.UChildActorComponent.ChildActor">
            <summary>The actor that we spawned and own</summary>
        </member>
        <member name="P:UnrealEngine.UChildActorComponent.ChildActorTemplate">
            <summary>Property to point to the template child actor for details panel purposes</summary>
        </member>
        <member name="T:UnrealEngine.UChildConnection">
            <summary>Represents a secondary split screen connection that reroutes calls to the parent connection.</summary>
        </member>
        <member name="T:UnrealEngine.UCircularThrobber">
            <summary>
            A throbber widget that orients images in a spinning circle.
            * No Children
            * Spinner Progress
            </summary>
        </member>
        <member name="P:UnrealEngine.UCircularThrobber.NumberOfPieces">
            <summary>How many pieces there are</summary>
        </member>
        <member name="P:UnrealEngine.UCircularThrobber.Period">
            <summary>The amount of time for a full circle (in seconds)</summary>
        </member>
        <member name="P:UnrealEngine.UCircularThrobber.Radius">
            <summary>The radius of the circle. If the throbber is a child of Canvas Panel, the 'Size to Content' option must be enabled in order to set Radius.</summary>
        </member>
        <member name="P:UnrealEngine.UCircularThrobber.PieceImage">
            <summary>Image to use for each segment of the throbber</summary>
        </member>
        <member name="T:UnrealEngine.UCollisionProfile">
            <summary>Set up and modify collision settings.</summary>
        </member>
        <member name="P:UnrealEngine.UCollisionProfile.Profiles">
            <summary>
            This is hacky, but without this edit tag, we can't get valid property handle
            and we can't save them properly to config, so we need this tag.
            </summary>
        </member>
        <member name="T:UnrealEngine.UComboBox">
            <summary>The combobox allows you to display a list of options to the user in a dropdown menu for them to select one.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBox.Items">
            <summary>The list of items to be displayed on the combobox.</summary>
        </member>
        <member name="T:UnrealEngine.UComboBoxString">
            <summary>The combobox allows you to display a list of options to the user in a dropdown menu for them to select one.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.DefaultOptions">
            <summary>The default list of items to be displayed on the combobox.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.SelectedOption">
            <summary>The item in the combobox to select by default</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.WidgetStyle">
            <summary>The style.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.ItemStyle">
            <summary>The item row style.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.MaxListHeight">
            <summary>The max height of the combobox list that opens</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.HasDownArrow">
            <summary>
            When false, the down arrow is not generated and it is up to the API consumer
            to make their own visual hint that this is a drop down.
            </summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.EnableGamepadNavigationMode">
            <summary>
            When false, directional keys will change the selection. When true, ComboBox
            must be activated and will only capture arrow input while activated.
            </summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.Font">
            <summary>
            The default font to use in the combobox, only applies if you're not implementing OnGenerateWidgetEvent
            to factory each new entry.
            </summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.ForegroundColor">
            <summary>The foreground color to pass through the hierarchy.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.OnSelectionChanged">
            <summary>Called when a new item is selected in the combobox.</summary>
        </member>
        <member name="P:UnrealEngine.UComboBoxString.OnOpening">
            <summary>Called when the combobox is opening</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.HelpDescription">
            <summary>Description of the commandlet's purpose</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.HelpUsage">
            <summary>Usage template to show for "ucc help"</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.HelpWebLink">
            <summary>Hyperlink for more info</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.HelpParamNames">
            <summary>The name of the parameter the commandlet takes</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.HelpParamDescriptions">
            <summary>The description of the parameter</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.IsServer">
            <summary>
            Whether to load objects required in server, client, and editor context.  If IsEditor is set to false, then a
            UGameEngine (or whatever the value of /Script/Engine.Engine.GameEngine is) will be created for the commandlet instead
            of a UEditorEngine (or /Script/Engine.Engine.EditorEngine), unless the commandlet overrides the CreateCustomEngine method.
            </summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.LogToConsole">
            <summary>Whether to redirect standard log to the console</summary>
        </member>
        <member name="P:UnrealEngine.UCommandlet.ShowErrorCount">
            <summary>Whether to show standard error and warning count on exit</summary>
        </member>
        <member name="T:UnrealEngine.UConsole">
            <summary>A basic command line console that accepts most commands.</summary>
        </member>
        <member name="P:UnrealEngine.UConsole.ConsoleTargetPlayer">
            <summary>The player which the next console command should be executed in the context of.  If nullptr, execute in the viewport.</summary>
        </member>
        <member name="P:UnrealEngine.UConsole.HistoryBuffer">
            <summary>Holds the history buffer, order is old to new</summary>
        </member>
        <member name="T:UnrealEngine.UCurveBase">
            <summary>Defines a curve of interpolated points to evaluate over a given range</summary>
        </member>
        <member name="P:UnrealEngine.UCurveBase.ImportPath">
            <summary>The filename imported to create this object. Relative to this object's package, BaseDir() or absolute</summary>
        </member>
        <member name="P:UnrealEngine.UCurveFloat.FloatCurve">
            <summary>Keyframe data</summary>
        </member>
        <member name="P:UnrealEngine.UCurveFloat.bIsEventCurve">
            <summary>Flag to represent event curve</summary>
        </member>
        <member name="P:UnrealEngine.UCurveLinearColor.FloatCurves">
            <summary>Keyframe data, one curve for red, green, blue, and alpha</summary>
        </member>
        <member name="T:UnrealEngine.UCurveTable">
            <summary>Imported spreadsheet table as curves.</summary>
        </member>
        <member name="P:UnrealEngine.UCurveTable.ImportPath">
            <summary>The filename imported to create this object. Relative to this object's package, BaseDir() or absolute</summary>
        </member>
        <member name="P:UnrealEngine.UCurveVector.FloatCurves">
            <summary>Keyframe data, one curve for X, Y and Z</summary>
        </member>
        <member name="T:UnrealEngine.UDamageType">
            <summary>
            A DamageType is intended to define and describe a particular form of damage and to provide an avenue
            for customizing responses to damage from various sources.
            For example, a game could make a DamageType_Fire set it up to ignite the damaged actor.
            DamageTypes are never instanced and should be treated as immutable data holders with static code
            functionality.  They should never be stateful.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.bCausedByWorld">
            <summary>True if this damagetype is caused by the world (falling off level, into lava, etc).</summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.bScaleMomentumByMass">
            <summary>True to scale imparted momentum by the receiving pawn's mass for pawns using character movement</summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.bRadialDamageVelChange">
            <summary>When applying radial impulses, whether to treat as impulse or velocity change.</summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.DamageImpulse">
            <summary>The magnitude of impulse to apply to the Actors damaged by this type.</summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.DestructibleImpulse">
            <summary>How large the impulse should be applied to destructible meshes</summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.DestructibleDamageSpreadScale">
            <summary>How much the damage spreads on a destructible mesh</summary>
        </member>
        <member name="P:UnrealEngine.UDamageType.DamageFalloff">
            <summary>Damage fall-off for radius damage (exponent).  Default 1.0=linear, 2.0=square of distance, etc.</summary>
        </member>
        <member name="T:UnrealEngine.UDataTable">
            <summary>Imported spreadsheet table.</summary>
        </member>
        <member name="P:UnrealEngine.UDataTable.RowStruct">
            <summary>Structure to use for each row of the table, must inherit from FTableRowBase</summary>
        </member>
        <member name="P:UnrealEngine.UDataTable.ImportPath">
            <summary>The filename imported to create this object. Relative to this object's package, BaseDir() or absolute</summary>
        </member>
        <member name="P:UnrealEngine.UDataTable.RowStructName">
            <summary>The name of the RowStruct we were using when we were last saved</summary>
        </member>
        <member name="T:UnrealEngine.UDecalComponent">
            <summary>
            A material that is rendered onto the surface of a mesh. A kind of 'bumper sticker' for a model.
            @see https://docs.unrealengine.com/latest/INT/Engine/Actors/DecalActor
            @see UDecalActor
            </summary>
        </member>
        <member name="P:UnrealEngine.UDecalComponent.DecalMaterial">
            <summary>Decal material.</summary>
        </member>
        <member name="P:UnrealEngine.UDecalComponent.SortOrder">
            <summary>
            Controls the order in which decal elements are rendered.  Higher values draw later (on top).
            Setting many different sort orders on many different decals prevents sorting by state and can reduce performance.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDecalComponent.FadeStartDelay">
            <summary>Time in seconds to wait before beginning to fade out the decal. Set fade duration and start delay to 0 to make persistent.</summary>
        </member>
        <member name="P:UnrealEngine.UDecalComponent.FadeDuration">
            <summary>Time in seconds for the decal to fade out. Set fade duration and start delay to 0 to make persistent.</summary>
        </member>
        <member name="P:UnrealEngine.UDecalComponent.bDestroyOwnerAfterFade">
            <summary>Automatically destroys the owning actor after fully fading out.</summary>
        </member>
        <member name="P:UnrealEngine.UDecalComponent.DecalSize">
            <summary>Decal size in local space (does not include the component scale), technically redundant but there for convenience</summary>
        </member>
        <member name="T:UnrealEngine.UDestructibleComponent">
            <summary>
            This component holds the physics data for a DestructibleActor.
            The USkeletalMesh pointer in the base class (SkinnedMeshComponent) MUST be a DestructibleMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleComponent.bFractureEffectOverride">
            <summary>If set, use this actor's fracture effects instead of the asset's fracture effects.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleComponent.FractureEffects">
            <summary>Fracture effects for each fracture level. Used only if Fracture Effect Override is set.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleComponent.bEnableHardSleeping">
            <summary>
            Enable "hard sleeping" for destruction-generated PxActors.  This means that they turn kinematic
            when they sleep, but can be made dynamic again by application of enough damage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleComponent.LargeChunkThreshold">
            <summary>The minimum size required to treat chunks as Large.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleComponent.DestructibleMesh">
            <summary>Provide a blueprint interface for setting the destructible mesh</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleComponent.OnComponentFracture">
            <summary>Called when a component is touched</summary>
        </member>
        <member name="T:UnrealEngine.UDestructibleFractureSettings">
            <summary>Information to create an NxDestructibleAsset</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.CellSiteCount">
            <summary>The number of voronoi cell sites.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.FractureMaterialDesc">
            <summary>Stored interior material data.  Just need one as we only support Voronoi splitting.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.RandomSeed">
            <summary>Random seed for reproducibility</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.VoronoiSites">
            <summary>Stored Voronoi sites</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.OriginalSubmeshCount">
            <summary>The mesh's original number of submeshes.  APEX needs to store this in the authoring.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.Materials">
            <summary>APEX references materials by name, but we'll bypass that mechanism and use of UE materials instead.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleFractureSettings.ChunkParameters">
            <summary>Per-chunk authoring parameters, which should be made writable when a chunk selection GUI is in place.</summary>
        </member>
        <member name="T:UnrealEngine.UDestructibleMesh">
            <summary>Holds an APEX destructible asset as well as an associated USkeletalMesh.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleMesh.DefaultDestructibleParameters">
            <summary>Parameters controlling the destruction behavior.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleMesh.FractureEffects">
            <summary>Fracture effects for each fracture level, unless overridden in the component.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleMesh.FractureSettings">
            <summary>Information used to author an NxDestructibleAsset</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleMesh.SourceStaticMesh">
            <summary>Static mesh this destructible mesh is created from. Is nullptr if not created from a static mesh</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleMesh.SourceSMImportTimestamp">
            <summary>Timestamp of the source static meshes last import at the time this destruction mesh has been generated.</summary>
        </member>
        <member name="P:UnrealEngine.UDestructibleMesh.FractureChunkMeshes">
            <summary>Array of static meshes to build the fracture chunks from</summary>
        </member>
        <member name="P:UnrealEngine.UDeviceProfile.DeviceType">
            <summary>The type of this profile, I.e. IOS, Windows, PS4 etc</summary>
        </member>
        <member name="P:UnrealEngine.UDeviceProfile.BaseProfileName">
            <summary>The name of the parent profile of this object</summary>
        </member>
        <member name="P:UnrealEngine.UDeviceProfile.Parent">
            <summary>The parent object of this profile, it is the object matching this DeviceType with the BaseProfileName</summary>
        </member>
        <member name="P:UnrealEngine.UDeviceProfile.CVars">
            <summary>The collection of CVars which is set from this profile</summary>
        </member>
        <member name="T:UnrealEngine.UDeviceProfileManager">
            <summary>Implements a helper class that manages all profiles in the Device</summary>
        </member>
        <member name="P:UnrealEngine.UDeviceProfileManager.Profiles">
            <summary>Holds the collection of managed profiles.</summary>
        </member>
        <member name="P:UnrealEngine.UDialogueWave.bMature">
            <summary>true if this dialogue is considered to contain mature/adult content.</summary>
        </member>
        <member name="P:UnrealEngine.UDialogueWave.SpokenText">
            <summary>A localized version of the text that is actually spoken phonetically in the audio.</summary>
        </member>
        <member name="P:UnrealEngine.UDialogueWave.SubtitleOverride">
            <summary>A localized version of the subtitle text that should be displayed for this audio. By default this will be the same as the Spoken Text.</summary>
        </member>
        <member name="P:UnrealEngine.UDialogueWave.VoiceActorDirection">
            <summary>Provides general notes to the voice actor intended to direct their performance, as well as contextual information to the translator.</summary>
        </member>
        <member name="P:UnrealEngine.UDialogueWave.ContextMappings">
            <summary>Mappings between dialogue contexts and associated soundwaves.</summary>
        </member>
        <member name="T:UnrealEngine.UDirectionalLightComponent">
            <summary>A light component that has parallel rays. Will provide a uniform lighting across any affected surface (eg. The Sun). This will affect all objects in the defined light-mass importance volume.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.bEnableLightShaftOcclusion">
            <summary>Whether to occlude fog and atmosphere inscattering with screenspace blurred occlusion from this light.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.OcclusionMaskDarkness">
            <summary>Controls how dark the occlusion masking is, a value of 1 results in no darkening term.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.OcclusionDepthRange">
            <summary>Everything closer to the camera than this distance will occlude light shafts.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.LightShaftOverrideDirection">
            <summary>
            Can be used to make light shafts come from somewhere other than the light's actual direction.
            This will only be used when non-zero.  It does not have to be normalized.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.DynamicShadowDistanceMovableLight">
            <summary>
            How far Cascaded Shadow Map dynamic shadows will cover for a movable light, measured from the camera.
            A value of 0 disables the dynamic shadow.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.DynamicShadowDistanceStationaryLight">
            <summary>
            How far Cascaded Shadow Map dynamic shadows will cover for a stationary light, measured from the camera.
            A value of 0 disables the dynamic shadow.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.DynamicShadowCascades">
            <summary>
            Number of cascades to split the view frustum into for the whole scene dynamic shadow.
            More cascades result in better shadow resolution, but adds significant rendering cost.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.CascadeDistributionExponent">
            <summary>
            Controls whether the cascades are distributed closer to the camera (larger exponent) or further from the camera (smaller exponent).
            An exponent of 1 means that cascade transitions will happen at a distance proportional to their resolution.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.CascadeTransitionFraction">
            <summary>
            Proportion of the fade region between cascades.
            Pixels within the fade region of two cascades have their shadows blended to avoid hard transitions between quality levels.
            A value of zero eliminates the fade region, creating hard transitions.
            Higher values increase the size of the fade region, creating a more gradual transition between cascades.
            The value is expressed as a percentage proportion (i.e. 0.1 = 10% overlap).
            Ideal values are the smallest possible which still hide the transition.
            An increased fade region size causes an increase in shadow rendering cost.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.ShadowDistanceFadeoutFraction">
            <summary>
            Controls the size of the fade out region at the far extent of the dynamic shadow's influence.
            This is specified as a fraction of DynamicShadowDistance.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.bUseInsetShadowsForMovableObjects">
            <summary>
            Stationary lights only: Whether to use per-object inset shadows for movable components, even though cascaded shadow maps are enabled.
            This allows dynamic objects to have a shadow even when they are outside of the cascaded shadow map, which is important when DynamicShadowDistanceStationaryLight is small.
            If DynamicShadowDistanceStationaryLight is large (currently > 8000), this will be forced off.
            Disabling this can reduce shadowing cost significantly with many movable objects.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.FarShadowCascadeCount">
            <summary>0: no DistantShadowCascades, otherwise the count of cascades between WholeSceneDynamicShadowRadius and DistantShadowDistance that are covered by distant shadow cascades.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.FarShadowDistance">
            <summary>Distance at which the far shadow cascade should end.  Far shadows will cover the range between 'Dynamic Shadow Distance' and this distance.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.DistanceFieldShadowDistance">
            <summary>Distance at which the ray traced shadow cascade should end.  Distance field shadows will cover the range between 'Dynamic Shadow Distance' this distance.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.LightSourceAngle">
            <summary>
            Light source angle in degrees, used for dynamic shadowing methods.
            Currently only Ray Traced Distance Field shadows and Capsule shadows support area shadows, and therefore make use of LightSourceAngle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.TraceDistance">
            <summary>Determines how far shadows can be cast, in world units.  Larger values increase the shadowing cost.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.LightmassSettings">
            <summary>The Lightmass settings for this object.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.bCastModulatedShadows">
            <summary>Whether the light should cast modulated shadows from dynamic objects (mobile only).  Also requires Cast Shadows to be set to True.</summary>
        </member>
        <member name="P:UnrealEngine.UDirectionalLightComponent.ModulatedShadowColor">
            <summary>Color to modulate against the scene color when rendering modulated shadows. (mobile only)</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionFloat.bCanBeBaked">
            <summary>Can this variable be baked out to a FRawDistribution? Should be true 99% of the time</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionFloatConstant.Constant">
            <summary>This float will be returned for all values of time.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionFloatConstantCurve.ConstantCurve">
            <summary>Keyframe data for how output constant varies over time.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionFloatUniform.Min">
            <summary>Low end of output float distribution.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionFloatUniform.Max">
            <summary>High end of output float distribution.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionFloatUniformCurve.ConstantCurve">
            <summary>Keyframe data for how output constant varies over time.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVector.bCanBeBaked">
            <summary>Can this variable be baked out to a FRawDistribution? Should be true 99% of the time</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVector.bIsDirty">
            <summary>Set internally when the distribution is updated so that that FRawDistribution can know to update itself</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorConstant.Constant">
            <summary>This FVector will be returned for all input times.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorConstant.bLockAxes">
            <summary>If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorConstantCurve.ConstantCurve">
            <summary>Keyframe data for each component (X,Y,Z) over time.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorConstantCurve.bLockAxes">
            <summary>If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorUniform.Max">
            <summary>Upper end of FVector magnitude range.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorUniform.Min">
            <summary>Lower end of FVector magnitude range.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorUniform.bLockAxes">
            <summary>If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorUniformCurve.ConstantCurve">
            <summary>Keyframe data for how output constant varies over time.</summary>
        </member>
        <member name="P:UnrealEngine.UDistributionVectorUniformCurve.bLockAxes1">
            <summary>If true, X == Y == Z ie. only one degree of freedom. If false, each axis is picked independently.</summary>
        </member>
        <member name="T:UnrealEngine.UDragDropOperation">
            <summary>This class is the base drag drop operation for UMG, extend it to add additional data and add new functionality.</summary>
        </member>
        <member name="P:UnrealEngine.UDragDropOperation.Tag">
            <summary>A simple string tag you can optionally use to provide extra metadata about the operation.</summary>
        </member>
        <member name="P:UnrealEngine.UDragDropOperation.Payload">
            <summary>
            The payload of the drag operation.  This can be any UObject that you want to pass along as dragged data.  If you
            were building an inventory screen this would be the UObject representing the item being moved to another slot.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDragDropOperation.DefaultDragVisual">
            <summary>
            The Drag Visual is the widget to display when dragging the item.  Normally people create a new widget to represent the
            temporary drag.
            </summary>
        </member>
        <member name="P:UnrealEngine.UDragDropOperation.Offset">
            <summary>A percentage offset (-1..+1) from the Pivot location, the percentage is of the desired size of the dragged visual.</summary>
        </member>
        <member name="T:UnrealEngine.UDrawFrustumComponent">
            <summary>Utility component for drawing a view frustum. Origin is at the component location, frustum points down position X axis.</summary>
        </member>
        <member name="P:UnrealEngine.UDrawFrustumComponent.FrustumColor">
            <summary>Color to draw the wireframe frustum.</summary>
        </member>
        <member name="P:UnrealEngine.UDrawFrustumComponent.FrustumAngle">
            <summary>
            Angle of longest dimension of view shape.
            If the angle is 0 then an orthographic projection is used
            </summary>
        </member>
        <member name="P:UnrealEngine.UDrawFrustumComponent.FrustumAspectRatio">
            <summary>Ratio of horizontal size over vertical size.</summary>
        </member>
        <member name="P:UnrealEngine.UDrawFrustumComponent.FrustumStartDist">
            <summary>Distance from origin to start drawing the frustum.</summary>
        </member>
        <member name="P:UnrealEngine.UDrawFrustumComponent.FrustumEndDist">
            <summary>Distance from origin to stop drawing the frustum.</summary>
        </member>
        <member name="P:UnrealEngine.UDrawFrustumComponent.Texture">
            <summary>optional texture to show on the near plane</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.Schema">
            <summary>The schema that this graph obeys</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.Nodes">
            <summary>Set of all nodes in this graph</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.bEditable">
            <summary>If true, graph can be edited by the user</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.bAllowDeletion">
            <summary>
            If true, graph can be deleted from the whatever container it is in. For FunctionGraphs
            this flag is reset to false on load (unless the function is the construction script or
            AnimGraph)
            </summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.bAllowRenaming">
            <summary>If true, graph can be renamed; Note: Graph can also be renamed if bAllowDeletion is true currently</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.SubGraphs">
            <summary>Child graphs that are a part of this graph; the separation is purely visual</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.GraphGuid">
            <summary>Guid for this graph</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraph.InterfaceGuid">
            <summary>Guid of interface graph this graph comes from (used for conforming)</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.DeprecatedPins">
            <summary>List of connector pins</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodePosX">
            <summary>X position of node in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodePosY">
            <summary>Y position of node in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodeWidth">
            <summary>Width of node in the editor; only used when the node can be resized</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodeHeight">
            <summary>Height of node in the editor; only used when the node can be resized</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bCanResizeNode">
            <summary>If true, this node can be resized and should be drawn with a resize handle</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bHasCompilerMessage">
            <summary>Flag to check for compile error/warning</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bCanRenameNode">
            <summary>If true, this node can be renamed in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodeUpgradeMessage">
            <summary>Note for a node that lingers until saved</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodeComment">
            <summary>Comment string that is drawn on the node</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bCommentBubblePinned">
            <summary>Comment bubble pinned state</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bCommentBubbleVisible">
            <summary>Comment bubble visibility</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.ErrorType">
            <summary>Flag to store node specific compile error/warning</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.ErrorMsg">
            <summary>Error/Warning description</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.NodeGuid">
            <summary>GUID to uniquely identify this node, to facilitate diffing versions of this graph</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.AdvancedPinDisplay">
            <summary>Enum to indicate if a node has advanced-display-pins, and if they are shown</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bUserSetEnabledState">
            <summary>Indicates whether or not the user explicitly set the enabled state</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode.bIsNodeEnabled">
            <summary>(DEPRECATED) FALSE if the node is a disabled, which eliminates it from being compiled</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode_Documentation.Link">
            <summary>Documentation Link</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphNode_Documentation.Excerpt">
            <summary>Documentation Excerpt</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.PinName">
            <summary>Name of this pin</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.PinFriendlyName">
            <summary>Used as the display name if set</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.PinToolTip">
            <summary>The tool-tip describing this pin's purpose</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.Direction">
            <summary>Direction of flow of this pin (input or output)</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.PinType">
            <summary>The type of information carried on this pin</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.DefaultValue">
            <summary>Default value for this pin (used if the pin has no connections), stored as a string</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.AutogeneratedDefaultValue">
            <summary>Initial default value (the autogenerated value, to identify if the user has modified the value), stored as a string</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.DefaultObject">
            <summary>If the default value for this pin should be an object, we store a pointer to it</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.DefaultTextValue">
            <summary>If the default value for this pin should be an FText, it is stored here.</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.LinkedTo">
            <summary>Set of pins that we are linked to</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.SubPins">
            <summary>The pins created when a pin is split and hidden</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.ParentPin">
            <summary>The pin that was split and generated this pin</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.ReferencePassThroughConnection">
            <summary>Pin that this pin uses for passing through reference connection</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bHidden">
            <summary>If true, this connector is currently hidden.</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bNotConnectable">
            <summary>If true, this connector is unconnectable, and present only to allow the editing of the default text.</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bDefaultValueIsReadOnly">
            <summary>If true, the default value of this connector is fixed and cannot be modified by the user (it's visible for reference only)</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bDefaultValueIsIgnored">
            <summary>If true, the default value on this pin is ignored and should not be set</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bIsDiffing">
            <summary>If true, this pin is the focus of a diff</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bAdvancedView">
            <summary>If true, the pin may be hidden by user</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.bDisplayAsMutableRef">
            <summary>If true, the pin is displayed as ref</summary>
        </member>
        <member name="P:UnrealEngine.UEdGraphPin_Deprecated.PersistentGuid">
            <summary>Pin name could be changed, so whenever possible it's good to have a persistent GUID identifying Pin to reconstruct Node seamlessly</summary>
        </member>
        <member name="T:UnrealEngine.UEditableText">
            <summary>Editable text box widget</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.Text">
            <summary>The text content for this editable text box widget</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.HintText">
            <summary>Hint text that appears when there is no text in the text box</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.WidgetStyle">
            <summary>The style</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.Style">
            <summary>Text style</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.BackgroundImageSelected">
            <summary>Background image for the selected text (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.BackgroundImageComposing">
            <summary>Background image for the composing text (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.CaretImage">
            <summary>Image brush used for the caret (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.Font">
            <summary>Font color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.ColorAndOpacity">
            <summary>Text color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.IsReadOnly">
            <summary>Sets whether this text box can actually be modified interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.IsPassword">
            <summary>Sets whether this text box is for storing a password</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.MinimumDesiredWidth">
            <summary>Minimum width that a text block should be</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.IsCaretMovedWhenGainFocus">
            <summary>Workaround as we lose focus when the auto completion closes.</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.SelectAllTextWhenFocused">
            <summary>Whether to select all text when the user clicks to give focus on the widget</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.RevertTextOnEscape">
            <summary>Whether to allow the user to back out of changes when they press the escape key</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.ClearKeyboardFocusOnCommit">
            <summary>Whether to clear keyboard focus when pressing enter to commit changes</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.SelectAllTextOnCommit">
            <summary>Whether to select all text when pressing enter to commit changes</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.AllowContextMenu">
            <summary>Whether the context menu can be opened</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.KeyboardType">
            <summary>If we're on a platform that requires a virtual keyboard, what kind of keyboard should this widget use?</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.ShapedTextOptions">
            <summary>Controls how the text within this widget should be shaped.</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.OnTextChanged">
            <summary>Called whenever the text is changed interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UEditableText.OnTextCommitted">
            <summary>Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus.</summary>
        </member>
        <member name="T:UnrealEngine.UEditableTextBox">
            <summary>
            Allows the user to type in custom text.  Only permits a single line of text to be entered.
            * No Children
            * Text Entry
            </summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.Text">
            <summary>The text content for this editable text box widget</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.WidgetStyle">
            <summary>The style</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.Style">
            <summary>Style used for the text box</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.HintText">
            <summary>Hint text that appears when there is no text in the text box</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.Font">
            <summary>Font color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.ForegroundColor">
            <summary>Text color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.BackgroundColor">
            <summary>The color of the background/border around the editable text (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.ReadOnlyForegroundColor">
            <summary>Text color and opacity when read-only (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.IsReadOnly">
            <summary>Sets whether this text box can actually be modified interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.IsPassword">
            <summary>Sets whether this text box is for storing a password</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.MinimumDesiredWidth">
            <summary>Minimum width that a text block should be</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.Padding">
            <summary>Padding between the box/border and the text widget inside (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.IsCaretMovedWhenGainFocus">
            <summary>Workaround as we lose focus when the auto completion closes.</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.SelectAllTextWhenFocused">
            <summary>Whether to select all text when the user clicks to give focus on the widget</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.RevertTextOnEscape">
            <summary>Whether to allow the user to back out of changes when they press the escape key</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.ClearKeyboardFocusOnCommit">
            <summary>Whether to clear keyboard focus when pressing enter to commit changes</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.SelectAllTextOnCommit">
            <summary>Whether to select all text when pressing enter to commit changes</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.AllowContextMenu">
            <summary>Whether the context menu can be opened</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.KeyboardType">
            <summary>If we're on a platform that requires a virtual keyboard, what kind of keyboard should this widget use?</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.ShapedTextOptions">
            <summary>Controls how the text within this widget should be shaped.</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.OnTextChanged">
            <summary>Called whenever the text is changed interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UEditableTextBox.OnTextCommitted">
            <summary>Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus.</summary>
        </member>
        <member name="P:UnrealEngine.UEndUserSettings.bSendAnonymousUsageDataToEpic">
            <summary>Determines whether the engine sends anonymous usage information about game sessions to Epic Games in order to improve Unreal Engine. Information will never be shared with 3rd parties.</summary>
        </member>
        <member name="P:UnrealEngine.UEndUserSettings.bSendMeanTimeBetweenFailureDataToEpic">
            <summary>Determines whether the engine sends anonymous crash/abnormal-shutdown data about game sessions to Epic Games in order to improve Unreal Engine. Information will never be shared with 3rd parties.</summary>
        </member>
        <member name="P:UnrealEngine.UEndUserSettings.bAllowUserIdInUsageData">
            <summary>If enabled, adds user identifying data to the otherwise anonymous reports sent to Epic Games.</summary>
        </member>
        <member name="T:UnrealEngine.UEngine">
            <summary>
            Abstract base class of all Engine classes, responsible for management of systems critical to editor or game systems.
            Also defines default classes for certain engine systems.
            </summary>
        </member>
        <member name="P:UnrealEngine.UEngine.TinyFont">
            <summary>Fonts.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.TinyFontName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SmallFont">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SmallFontName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MediumFont">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MediumFontName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LargeFont">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LargeFontName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SubtitleFont">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SubtitleFontName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.AdditionalFonts">
            <summary>Any additional fonts that script may use without hard-referencing the font.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.AdditionalFontNames">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ConsoleClass">
            <summary>The class to use for the game console.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ConsoleClassName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameViewportClientClass">
            <summary>The class to use for the game viewport client.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameViewportClientClassName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LocalPlayerClass">
            <summary>The class to use for local players.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LocalPlayerClassName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.WorldSettingsClass">
            <summary>The class for WorldSettings *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.WorldSettingsClassName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.NavigationSystemClassName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.NavigationSystemClass">
            <summary>The class for NavigationSystem *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.AvoidanceManagerClassName">
            <summary>Name of behavior tree manager class</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.AvoidanceManagerClass">
            <summary>The class for behavior tree manager *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PhysicsCollisionHandlerClass">
            <summary>PhysicsCollisionHandler class we should use by default *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PhysicsCollisionHandlerClassName">
            <summary>Name of PhysicsCollisionHandler class we should use by default.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.AIControllerClassName">
            <summary>name of Controller class to be used as default AIController class for pawns</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameUserSettings">
            <summary>Global instance of the user game settings</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LevelScriptActorClass">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LevelScriptActorClassName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultBlueprintBaseClassName">
            <summary>Name of the base class to use for new blueprints, configurable on a per-game basis</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameSingletonClassName">
            <summary>Name of a singleton class to create at startup time, configurable per game</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameSingleton">
            <summary>A UObject spawned at initialization time to handle game-specific data</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PlayOnConsoleSaveDir">
            <summary>Path that levels for play on console will be saved to (relative to FPaths::GameSavedDir())</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultTexture">
            <summary>A global default texture.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultDiffuseTexture">
            <summary>A global default diffuse texture.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultDiffuseTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultBSPVertexTexture">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultBSPVertexTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.HighFrequencyNoiseTexture">
            <summary>Texture used to get random image grain values for post processing</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.HighFrequencyNoiseTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultBokehTexture">
            <summary>Texture used to blur out of focus content, mimics the Bokeh shape of actual cameras</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultBokehTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.WireframeMaterial">
            <summary>The material used to render wireframe meshes.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.WireframeMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GeomMaterial">
            <summary>A translucent material used to render things in geometry mode.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GeomMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DebugMeshMaterial">
            <summary>A material used to render debug meshes.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DebugMeshMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LevelColorationLitMaterial">
            <summary>Material used for visualizing level membership in lit view port modes.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LevelColorationLitMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LevelColorationUnlitMaterial">
            <summary>Material used for visualizing level membership in unlit view port modes.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LevelColorationUnlitMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightingTexelDensityMaterial">
            <summary>Material used for visualizing lighting only w/ lightmap texel density.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightingTexelDensityName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ShadedLevelColorationLitMaterial">
            <summary>Material used for visualizing level membership in lit view port modes. Uses shading to show axis directions.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ShadedLevelColorationLitMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ShadedLevelColorationUnlitMaterial">
            <summary>Material used for visualizing level membership in unlit view port modes.  Uses shading to show axis directions.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ShadedLevelColorationUnlitMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.RemoveSurfaceMaterial">
            <summary>Material used to indicate that the associated BSP surface should be removed.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.RemoveSurfaceMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorMaterial">
            <summary>Material that renders vertex color as emmissive.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterial_ColorOnly">
            <summary>Material for visualizing vertex colors on meshes in the scene (color only, no alpha)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterialName_ColorOnly">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterial_AlphaAsColor">
            <summary>Material for visualizing vertex colors on meshes in the scene (alpha channel as color)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterialName_AlphaAsColor">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterial_RedOnly">
            <summary>Material for visualizing vertex colors on meshes in the scene (red only)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterialName_RedOnly">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterial_GreenOnly">
            <summary>Material for visualizing vertex colors on meshes in the scene (green only)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterialName_GreenOnly">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterial_BlueOnly">
            <summary>Material for visualizing vertex colors on meshes in the scene (blue only)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.VertexColorViewModeMaterialName_BlueOnly">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.BoneWeightMaterial">
            <summary>Material used to render bone weights on skeletal meshes</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.BoneWeightMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ConstraintLimitMaterial">
            <summary>Material used to render constraint limits</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.InvalidLightmapSettingsMaterial">
            <summary>Material that renders a message about lightmap settings being invalid.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.InvalidLightmapSettingsMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PreviewShadowsIndicatorMaterial">
            <summary>Material that renders a message about preview shadows being used.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PreviewShadowsIndicatorMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ArrowMaterial">
            <summary>Material that 'fakes' lighting, used for arrows, widgets.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ArrowMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightingOnlyBrightness">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ShaderComplexityColors">
            <summary>The colors used to render shader complexity.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.QuadComplexityColors">
            <summary>The colors used to render quad complexity.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightComplexityColors">
            <summary>The colors used to render light complexity.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.StationaryLightOverlapColors">
            <summary>The colors used to render stationary light overlap.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LODColorationColors">
            <summary>The colors used to render LOD coloration.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.HLODColorationColors">
            <summary>The colors used to render LOD coloration.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.StreamingAccuracyColors">
            <summary>The colors used for texture streaming accuracy debug view modes.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MaxPixelShaderAdditiveComplexityCount">
            <summary>
            Complexity limits for the various complexity view mode combinations.
            These limits are used to map instruction counts to ShaderComplexityColors.
            </summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MinLightMapDensity">
            <summary>Minimum lightmap density value for coloring.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.IdealLightMapDensity">
            <summary>Ideal lightmap density value for coloring.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MaxLightMapDensity">
            <summary>Maximum lightmap density value for coloring.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bRenderLightMapDensityGrayscale">
            <summary>If true, then render gray scale density.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.RenderLightMapDensityGrayscaleScale">
            <summary>The scale factor when rendering gray scale density.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.RenderLightMapDensityColorScale">
            <summary>The scale factor when rendering color density.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightMapDensityVertexMappedColor">
            <summary>The color to render vertex mapped objects in for LightMap Density view mode.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightMapDensitySelectedColor">
            <summary>The color to render selected objects in for LightMap Density view mode.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.StatColorMappings">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.EditorBrushMaterial">
            <summary>A material used to render the sides of the builder brush/volumes/etc.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.EditorBrushMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultPhysMaterial">
            <summary>PhysicalMaterial to use if none is defined for a particular object.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultPhysMaterialName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PreIntegratedSkinBRDFTexture">
            <summary>Texture used for pre-integrated skin shading</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PreIntegratedSkinBRDFTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MiniFontTexture">
            <summary>Texture used to do font rendering in shaders</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MiniFontTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.WeightMapPlaceholderTexture">
            <summary>Texture used as a placeholder for terrain weight-maps to give the material the correct texture format.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.WeightMapPlaceholderTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightMapDensityTexture">
            <summary>Texture used to display LightMapDensity</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.LightMapDensityTextureName">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameViewport">
            <summary>The view port representing the current game instance. Can be 0 so don't use without checking.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DeferredCommands">
            <summary>Array of deferred command strings/ execs that get executed at the end of the frame</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.TickCycles">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.GameCycles">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ClientCycles">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.NearClipPlane">
            <summary>The distance of the camera's near clipping plane.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bHardwareSurveyEnabled">
            <summary>DEPRECATED - Can a runtime game/application report anonymous hardware survey statistics (such as display resolution and GPU model) back to Epic?</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bSubtitlesEnabled">
            <summary>Flag for completely disabling subtitles for localized sounds.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bSubtitlesForcedOff">
            <summary>Flag for forcibly disabling subtitles even if you try to turn them back on they will be off</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MaximumLoopIterationCount">
            <summary>Script maximum loop iteration count used as a threshold to warn users about script execution runaway</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bCanBlueprintsTickByDefault">
            <summary>
            Controls whether Blueprint subclasses of actors or components can tick by default.
            Blueprints that derive from native C++ classes that have bCanEverTick=true will always be able to tick
            Blueprints that derive from exactly AActor or UActorComponent will always be able to tick
            Otherwise, they can tick as long as the parent doesn't have meta=(ChildCannotTick) and either bCanBlueprintsTickByDefault is true or the parent has meta=(ChildCanTick)
            </summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bOptimizeAnimBlueprintMemberVariableAccess">
            <summary>Controls whether anim blueprint nodes that access member variables of their class directly should use the optimized path that avoids a thunk to the Blueprint VM. This will force all anim blueprints to be recompiled.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bAllowMultiThreadedAnimationUpdate">
            <summary>Controls whether by default we allow anim blueprint graph updates to be performed on non-game threads. This enables some extra checks in the anim blueprint compiler that will warn when unsafe operations are being attempted. This will force all anim blueprints to be recompiled.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bEnableEditorPSysRealtimeLOD">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bSmoothFrameRate">
            <summary>Whether to enable framerate smoothing.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bUseFixedFrameRate">
            <summary>Whether to use a fixed framerate.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.FixedFrameRate">
            <summary>The fixed framerate to use.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SmoothedFrameRateRange">
            <summary>Range of framerates in which smoothing will kick in</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bCheckForMultiplePawnsSpawnedInAFrame">
            <summary>
            Whether we should check for more than N pawns spawning in a single frame.
            Basically, spawning pawns and all of their attachments can be slow.  And on consoles it
            can be really slow.  If this bool is true we will display a
            </summary>
        </member>
        <member name="P:UnrealEngine.UEngine.NumPawnsAllowedToBeSpawnedInAFrame">
            <summary>If bCheckForMultiplePawnsSpawnedInAFrame==true, then we will check to see that no more than this number of pawns are spawned in a frame. *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bShouldGenerateLowQualityLightmaps">
            <summary>Whether or not the LQ lightmaps should be generated during lighting rebuilds.  This has been moved to r.SupportLowQualityLightmaps.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_WorldBox">
            <summary>Color preferences.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_BrushWire">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_AddWire">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_SubtractWire">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_SemiSolidWire">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_NonSolidWire">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_WireBackground">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_ScaleBoxHi">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_VolumeCollision">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_BSPCollision">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_OrthoBackground">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_Volume">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.C_BrushShape">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.StreamingDistanceFactor">
            <summary>Fudge factor for tweaking the distance based miplevel determination</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.TransitionType">
            <summary>The current transition type.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.TransitionDescription">
            <summary>The current transition description text.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.TransitionGameMode">
            <summary>The gamemode for the destination map</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MeshLODRange">
            <summary>Level of detail range control for meshes</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bAllowMatureLanguage">
            <summary>whether mature language is allowed *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.CameraRotationThreshold">
            <summary>camera rotation (deg) beyond which occlusion queries are ignored from previous frame (because they are likely not valid)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.CameraTranslationThreshold">
            <summary>camera movement beyond which occlusion queries are ignored from previous frame (because they are likely not valid)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PrimitiveProbablyVisibleTime">
            <summary>The amount of time a primitive is considered to be probably visible after it was last actually visible.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MaxOcclusionPixelsFraction">
            <summary>Max screen pixel fraction where retesting when unoccluded is worth the GPU time.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bPauseOnLossOfFocus">
            <summary>Whether to pause the game if focus is lost.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MaxParticleResize">
            <summary>
            The maximum allowed size to a ParticleEmitterInstance::Resize call.
            If larger, the function will return without resizing.
            </summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MaxParticleResizeWarn">
            <summary>If the resize request is larger than this, spew out a warning to the log</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PendingDroppedNotes">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.PhysicErrorCorrection">
            <summary>Error correction data for replicating simulated physics (rigid bodies)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.NetClientTicksPerSecond">
            <summary>Number of times to tick each client per second</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DisplayGamma">
            <summary>Current display gamma setting</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.MinDesiredFrameRate">
            <summary>Minimum desired framerate setting</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.DefaultSelectedMaterialColor">
            <summary>Default color of selected objects in the level viewport (additive)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SelectedMaterialColor">
            <summary>Color of selected objects in the level viewport (additive)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SelectionOutlineColor">
            <summary>Color of the selection outline color.  Generally the same as selected material color unless the selection material color is being overridden</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SubduedSelectionOutlineColor">
            <summary>Subdued version of the selection outline color. Used for indicating sub-selection of components vs actors</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SelectedMaterialColorOverride">
            <summary>An override to use in some cases instead of the selected material color</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bIsOverridingSelectedColor">
            <summary>Whether or not selection color is being overridden</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bEnableOnScreenDebugMessages">
            <summary>If true, then disable OnScreenDebug messages. Can be toggled in real-time.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bEnableOnScreenDebugMessagesDisplay">
            <summary>If true, then disable the display of OnScreenDebug messages (used when running)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bSuppressMapWarnings">
            <summary>If true, then skip drawing map warnings on screen even in non (UE_BUILD_SHIPPING || UE_BUILD_TEST) builds</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bDisableAILogging">
            <summary>determines whether AI logging should be processed or not</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ScreenSaverInhibitorSemaphore">
            <summary>Semaphore to control screen saver inhibitor thread access.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bLockReadOnlyLevels">
            <summary>true if the the user cannot modify levels that are read only.</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ParticleEventManagerClassPath">
            <summary>Particle event manager *</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SelectionHighlightIntensity">
            <summary>Used to alter the intensity level of the selection highlight on selected objects</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SelectionMeshSectionHighlightIntensity">
            <summary>Used to alter the intensity level of the selection highlight on selected mesh sections in mesh editors</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.BSPSelectionHighlightIntensity">
            <summary>Used to alter the intensity level of the selection highlight on selected BSP surfaces</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.HoverHighlightIntensity">
            <summary>Used to alter the intensity level of the selection highlight on hovered objects</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.SelectionHighlightIntensityBillboards">
            <summary>Used to alter the intensity level of the selection highlight on selected billboard objects</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.NetDriverDefinitions">
            <summary>A list of named UNetDriver definitions</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.ServerActors">
            <summary>A configurable list of actors that are automatically spawned upon server startup (just prior to InitGame)</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.RuntimeServerActors">
            <summary>Runtime-modified list of server actors, allowing plugins to use serveractors, without permanently adding them to config files</summary>
        </member>
        <member name="P:UnrealEngine.UEngine.bStartedLoadMapMovie">
            <summary>true if the loading movie was started during LoadMap().</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.FailedPlaceMessage">
            <summary>Message displayed in message dialog when player pawn fails to spawn because no playerstart was available.</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.MaxedOutMessage">
            <summary>Message when player join attempt is refused because the server is at capacity.</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.EnteredMessage">
            <summary>Message when a new player enters the game.</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.LeftMessage">
            <summary>Message when a player leaves the game.</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.GlobalNameChange">
            <summary>Message when a player changes his name.</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.SpecEnteredMessage">
            <summary>Message when a new spectator enters the server (if spectator has a player name).</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.NewPlayerMessage">
            <summary>Message when a new player enters the server (if player is unnamed).</summary>
        </member>
        <member name="P:UnrealEngine.UEngineMessage.NewSpecMessage">
            <summary>Message when a new spectator enters the server (if spectator is unnamed).</summary>
        </member>
        <member name="P:UnrealEngine.UExpandableArea.MaxHeight">
            <summary>The maximum height of the area</summary>
        </member>
        <member name="P:UnrealEngine.UExpandableArea.OnExpansionChanged">
            <summary>A bindable delegate for the IsChecked.</summary>
        </member>
        <member name="T:UnrealEngine.UExponentialHeightFogComponent">
            <summary>Used to create fogging effects such as clouds but with a density that is related to the height of the fog.</summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.FogDensity">
            <summary>Global density factor.</summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.InscatteringColorCubemap">
            <summary>
            Cubemap that can be specified for fog color, which is useful to make distant, heavily fogged scene elements match the sky.
            When the cubemap is specified, FogInscatteringColor is ignored and Directional inscattering is disabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.InscatteringTextureTint">
            <summary>Tint color used when InscatteringColorCubemap is specified, for quick edits without having to reimport InscatteringColorCubemap.</summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.FullyDirectionalInscatteringColorDistance">
            <summary>Distance at which InscatteringColorCubemap should be used directly for the Inscattering Color.</summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.NonDirectionalInscatteringColorDistance">
            <summary>Distance at which only the average color of InscatteringColorCubemap should be used as Inscattering Color.</summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.DirectionalInscatteringExponent">
            <summary>
            Controls the size of the directional inscattering cone, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light with bUsedAsAtmosphereSunLight enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.DirectionalInscatteringStartDistance">
            <summary>
            Controls the start distance from the viewer of the directional inscattering, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light with bUsedAsAtmosphereSunLight enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.DirectionalInscatteringColor">
            <summary>
            Controls the color of the directional inscattering, which is used to approximate inscattering from a directional light.
            Note: there must be a directional light with bUsedAsAtmosphereSunLight enabled for DirectionalInscattering to be used.
            </summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.FogHeightFalloff">
            <summary>
            Height density factor, controls how the density increases as height decreases.
            Smaller values make the visible transition larger.
            </summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.FogMaxOpacity">
            <summary>
            Maximum opacity of the fog.
            A value of 1 means the fog can become fully opaque at a distance and replace scene color completely,
            A value of 0 means the fog color will not be factored in at all.
            </summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.StartDistance">
            <summary>Distance from the camera that the fog will start, in world units.</summary>
        </member>
        <member name="P:UnrealEngine.UExponentialHeightFogComponent.FogCutoffDistance">
            <summary>Scene elements past this distance will not have fog applied.  This is useful for excluding skyboxes which already have fog baked in.</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.SupportedClass">
            <summary>Supported class of this exporter</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.ExportRootScope">
            <summary>
            The root scope of objects to be exported, only used if PPF_ExportsNotFullyQualfied is set
            Objects being exported that are contained within ExportRootScope will use just their name instead of a full path
            </summary>
        </member>
        <member name="P:UnrealEngine.UExporter.FormatExtension">
            <summary>File extension to use for this exporter</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.FormatDescription">
            <summary>Descriptiong of the export format</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.PreferredFormatIndex">
            <summary>Index into FormatExtension/FormatDescription of the preferred export format.</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.TextIndent">
            <summary>Current indentation of spaces of the exported text</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.bText">
            <summary>If true, this will export the data as text</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.bSelectedOnly">
            <summary>If true, this will export only the selected objects</summary>
        </member>
        <member name="P:UnrealEngine.UExporter.bForceFileOperations">
            <summary>If true, this will force the exporter code to create a file-based Ar (this can keep large output files from taking too much memory)</summary>
        </member>
        <member name="T:UnrealEngine.UFloatingPawnMovement">
            <summary>
            FloatingPawnMovement is a movement component that provides simple movement for any Pawn class.
            Limits on speed and acceleration are provided, while gravity is not implemented.
            Normally the root component of the owning actor is moved, however another component may be selected (see SetUpdatedComponent()).
            During swept (non-teleporting) movement only collision of UpdatedComponent is considered, attached components will teleport to the end location ignoring collision.
            </summary>
        </member>
        <member name="P:UnrealEngine.UFloatingPawnMovement.MaxSpeed">
            <summary>Maximum velocity magnitude allowed for the controlled Pawn.</summary>
        </member>
        <member name="P:UnrealEngine.UFloatingPawnMovement.Acceleration">
            <summary>Acceleration applied by input (rate of change of velocity)</summary>
        </member>
        <member name="P:UnrealEngine.UFloatingPawnMovement.Deceleration">
            <summary>Deceleration applied when there is no input (rate of change of velocity)</summary>
        </member>
        <member name="P:UnrealEngine.UFloatingPawnMovement.TurningBoost">
            <summary>
            Setting affecting extra force applied when changing direction, making turns have less drift and become more responsive.
            Velocity magnitude is not allowed to increase, that only happens due to normal acceleration. It may decrease with large direction changes.
            Larger values apply extra force to reach the target direction more quickly, while a zero value disables any extra turn force.
            </summary>
        </member>
        <member name="P:UnrealEngine.UFloatingPawnMovement.bPositionCorrected">
            <summary>Set to true when a position correction is applied. Used to avoid recalculating velocity when this occurs.</summary>
        </member>
        <member name="T:UnrealEngine.UFont">
            <summary>
            A font object, for use by Slate, UMG, and Canvas.
            A font can either be:
              * Runtime cached - The font contains a series of TTF files that combine to form a composite font. The glyphs are cached on demand when required at runtime.
              * Offline cached - The font contains a series of textures containing pre-baked cached glyphs and their associated texture coordinates.
            </summary>
        </member>
        <member name="P:UnrealEngine.UFont.Characters">
            <summary>
            List of characters in the font.  For a MultiFont, this will include all characters in all sub-fonts!  Thus,
                          the number of characters in this array isn't necessary the number of characters available in the font
            </summary>
        </member>
        <member name="P:UnrealEngine.UFont.Textures">
            <summary>Textures that store this font's glyph image data //NOTE: Do not expose this to the editor as it has nasty crash potential</summary>
        </member>
        <member name="P:UnrealEngine.UFont.IsRemapped">
            <summary>
            True if font is 'remapped'.  That is, the character array is not a direct mapping to unicode values.  Instead,
                          all characters are indexed indirectly through the CharRemap array
            </summary>
        </member>
        <member name="P:UnrealEngine.UFont.EmScale">
            <summary>Font metrics.</summary>
        </member>
        <member name="P:UnrealEngine.UFont.Ascent">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UFont.Descent">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UFont.Leading">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UFont.Kerning">
            <summary>Default horizontal spacing between characters when rendering text with this font</summary>
        </member>
        <member name="P:UnrealEngine.UFont.ImportOptions">
            <summary>Options used when importing this font</summary>
        </member>
        <member name="P:UnrealEngine.UFont.NumCharacters">
            <summary>
            Number of characters in the font, not including multiple instances of the same character (for multi-fonts).
                          This is cached at load-time or creation time, and is never serialized.
            </summary>
        </member>
        <member name="P:UnrealEngine.UFont.MaxCharHeight">
            <summary>
            The maximum height of a character in this font.  For multi-fonts, this array will contain a maximum
                          character height for each multi-font, otherwise the array will contain only a single element.  This is
                          cached at load-time or creation time, and is never serialized.
            </summary>
        </member>
        <member name="P:UnrealEngine.UFont.ScalingFactor">
            <summary>Scale to apply to the font.</summary>
        </member>
        <member name="P:UnrealEngine.UFont.LegacyFontSize">
            <summary>The default size of the font used for legacy Canvas APIs that don't specify a font size</summary>
        </member>
        <member name="P:UnrealEngine.UFont.LegacyFontName">
            <summary>The default font name to use for legacy Canvas APIs that don't specify a font name</summary>
        </member>
        <member name="P:UnrealEngine.UFont.CompositeFont">
            <summary>Embedded composite font data</summary>
        </member>
        <member name="T:UnrealEngine.UFontFace">
            <summary>
            A font face asset contains the raw payload data for a source TTF/OTF file as used by FreeType.
            During cook this asset type generates a ".ufont" file containing the raw payload data (unless loaded "Inline").
            </summary>
        </member>
        <member name="P:UnrealEngine.UFontFace.SourceFilename">
            <summary>The filename of the font face we were created from. This may not always exist on disk, as we may have previously loaded and cached the font data inside this asset.</summary>
        </member>
        <member name="P:UnrealEngine.UFontFace.FontFaceData">
            <summary>The data associated with the font face. This should always be filled in providing the source filename is valid.</summary>
        </member>
        <member name="T:UnrealEngine.UFontImportOptions">
            <summary>Holds options for importing fonts.</summary>
        </member>
        <member name="P:UnrealEngine.UFontImportOptions.Data">
            <summary>The actual data for this object.  We wrap it in a struct so that we can copy it around between objects.</summary>
        </member>
        <member name="T:UnrealEngine.UForceFeedbackAttenuation">
            <summary>
            Wrapper class that can be created as an asset for force feedback attenuation properties which allows reuse
            of the properties for multiple attenuation components
            </summary>
        </member>
        <member name="T:UnrealEngine.UForceFeedbackComponent">
            <summary>ForceFeedbackComponent allows placing a rumble effect in to the world and having it apply to player characters who come near it</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.ForceFeedbackEffect">
            <summary>The feedback effect to be played</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.bAutoDestroy">
            <summary>Auto destroy this component on completion</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.bStopWhenOwnerDestroyed">
            <summary>Stop effect when owner is destroyed</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.bOverrideAttenuation">
            <summary>Should the Attenuation Settings asset be used (false) or should the properties set directly on the component be used for attenuation properties</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.IntensityMultiplier">
            <summary>The intensity multiplier to apply to effects generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.AttenuationSettings">
            <summary>If bOverrideSettings is false, the asset to use to determine attenuation properties for effects generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.AttenuationOverrides">
            <summary>If bOverrideSettings is true, the attenuation properties to use for effects generated by this component</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackComponent.OnForceFeedbackFinished">
            <summary>called when we finish playing audio, either because it played to completion or because a Stop() call turned it off early</summary>
        </member>
        <member name="T:UnrealEngine.UForceFeedbackEffect">
            <summary>A predefined force-feedback effect to be played on a controller</summary>
        </member>
        <member name="P:UnrealEngine.UForceFeedbackEffect.Duration">
            <summary>Duration of force feedback pattern in seconds.</summary>
        </member>
        <member name="T:UnrealEngine.UGameEngine">
            <summary>Engine that manages core systems that enable a game.</summary>
        </member>
        <member name="P:UnrealEngine.UGameEngine.MaxDeltaTime">
            <summary>Maximium delta time the engine uses to populate FApp::DeltaTime. If 0, unbound.</summary>
        </member>
        <member name="P:UnrealEngine.UGameEngine.ServerFlushLogInterval">
            <summary>Maximium time (in seconds) between the flushes of the logs on the server (best effort). If 0, this will happen every tick.</summary>
        </member>
        <member name="T:UnrealEngine.UGameInstance">
            <summary>
            GameInstance: high-level manager object for an instance of the running game.
            Spawned at game creation and not destroyed until game instance is shut down.
            Running as a standalone game, there will be one of these.
            Running in PIE (play-in-editor) will generate one of these per PIE instance.
            </summary>
        </member>
        <member name="P:UnrealEngine.UGameInstance.OnlineSession">
            <summary>Class to manage online services</summary>
        </member>
        <member name="T:UnrealEngine.UGameUserSettings">
            <summary>Stores user settings for a game (for example graphics and sound settings), with the ability to save and load to and from a file.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.bUseVSync">
            <summary>Whether to use VSync or not. (public to allow UI to connect to it)</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.ResolutionSizeX">
            <summary>Game screen resolution width, in pixels.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.ResolutionSizeY">
            <summary>Game screen resolution height, in pixels.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastUserConfirmedResolutionSizeX">
            <summary>Game screen resolution width, in pixels.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastUserConfirmedResolutionSizeY">
            <summary>Game screen resolution height, in pixels.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.WindowPosX">
            <summary>Window PosX</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.WindowPosY">
            <summary>Window PosY</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.FullscreenMode">
            <summary>
            Game window fullscreen mode
                 0 = Fullscreen
                 1 = Windowed fullscreen
                 2 = Windowed
            </summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastConfirmedFullscreenMode">
            <summary>Last user confirmed fullscreen mode setting.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.PreferredFullscreenMode">
            <summary>Fullscreen mode to use when toggling between windowed and fullscreen. Same values as r.FullScreenMode.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.Version">
            <summary>All settings will be wiped and set to default if the serialized version differs from UE_GAMEUSERSETTINGS_VERSION.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.FrameRateLimit">
            <summary>Frame rate cap</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.DesiredScreenWidth">
            <summary>Desired screen width used to calculate the resolution scale when user changes display mode</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.bUseDesiredScreenHeight">
            <summary>If true, the desired screen height will be used to scale the render resolution automatically.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.DesiredScreenHeight">
            <summary>Desired screen height used to calculate the resolution scale when user changes display mode</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastRecommendedScreenWidth">
            <summary>Result of the last benchmark; calculated resolution to use.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastRecommendedScreenHeight">
            <summary>Result of the last benchmark; calculated resolution to use.</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastCPUBenchmarkResult">
            <summary>Result of the last benchmark (CPU); -1 if there has not been a benchmark run</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastGPUBenchmarkResult">
            <summary>Result of the last benchmark (GPU); -1 if there has not been a benchmark run</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastCPUBenchmarkSteps">
            <summary>Result of each individual sub-section of the last CPU benchmark; empty if there has not been a benchmark run</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastGPUBenchmarkSteps">
            <summary>Result of each individual sub-section of the last GPU benchmark; empty if there has not been a benchmark run</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.LastGPUBenchmarkMultiplier">
            <summary>Multiplier used against the last GPU benchmark</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.bUseHDRDisplayOutput">
            <summary>HDR</summary>
        </member>
        <member name="P:UnrealEngine.UGameUserSettings.HDRDisplayOutputNits">
            <summary>HDR</summary>
        </member>
        <member name="T:UnrealEngine.UGameViewportClient">
            <summary>
            A game viewport (FViewport) is a high-level abstract interface for the
            platform specific rendering, audio, and input subsystems.
            GameViewportClient is the engine's interface to a game viewport.
            Exactly one GameViewportClient is created for each instance of the game.  The
            only case (so far) where you might have a single instance of Engine, but
            multiple instances of the game (and thus multiple GameViewportClients) is when
            you have more than one PIE window running.
            Responsibilities:
            propagating input events to the global interactions list
            @see UGameViewportClient
            </summary>
        </member>
        <member name="P:UnrealEngine.UGameViewportClient.ViewportConsole">
            <summary>The viewport's console.   Might be null on consoles</summary>
        </member>
        <member name="P:UnrealEngine.UGameViewportClient.DebugProperties">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UGameViewportClient.World">
            <summary>The relative world context for this viewport</summary>
        </member>
        <member name="T:UnrealEngine.UGarbageCollectionSettings">
            <summary>Implements the settings for garbage collection.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.TimeBetweenPurgingPendingKillObjects">
            <summary>Time in seconds (game time) we should wait between purging object references to objects that are pending kill.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.FlushStreamingOnGC">
            <summary>If enabled, streaming will be flushed each time garbage collection is triggered.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.AllowParallelGC">
            <summary>If enabled, garbage collection will use multiple threads.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.CreateGCClusters">
            <summary>If true, the engine will attempt to create clusters of objects for better garbage collection performance.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.MergeGCClusters">
            <summary>If true, when creating clusters, the clusters referenced from another cluster will get merged into one big cluster.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.NumRetriesBeforeForcingGC">
            <summary>Maximum number of times GC can be skipped if worker threads are currently modifying UObject state. 0 = never force GC</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.MaxObjectsNotConsideredByGC">
            <summary>Maximum Object Count Not Considered By GC. Works only in cooked builds.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.SizeOfPermanentObjectPool">
            <summary>Size Of Permanent Object Pool (bytes). Works only in cooked builds.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.MaxObjectsInGame">
            <summary>Maximum number of UObjects that can exist in cooked game. Keep this as small as possible.</summary>
        </member>
        <member name="P:UnrealEngine.UGarbageCollectionSettings.MaxObjectsInEditor">
            <summary>Maximum number of UObjects that can exist in the editor game. Make sure this can hold enough objects for the editor and commadlets within reasonable limit.</summary>
        </member>
        <member name="T:UnrealEngine.UGridPanel">
            <summary>
            A panel that evenly divides up available space between all of its children.
            * Many Children
            </summary>
        </member>
        <member name="P:UnrealEngine.UGridPanel.ColumnFill">
            <summary>The column fill rules</summary>
        </member>
        <member name="P:UnrealEngine.UGridPanel.RowFill">
            <summary>The row fill rules</summary>
        </member>
        <member name="T:UnrealEngine.UGridSlot">
            <summary>
            A slot for UGridPanel, these slots all share the same size as the largest slot
            in the grid.
            </summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.Row">
            <summary>The row index of the cell this slot is in</summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.Column">
            <summary>The column index of the cell this slot is in</summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.Layer">
            <summary>Positive values offset this cell to be hit-tested and drawn on top of others. Default is 0; i.e. no offset.</summary>
        </member>
        <member name="P:UnrealEngine.UGridSlot.Nudge">
            <summary>Offset this slot's content by some amount; positive values offset to lower right</summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.SortedInstances">
            <summary>Table for remaping instances from cluster tree to PerInstanceSMData order</summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.NumBuiltInstances">
            <summary>The number of instances in the ClusterTree. Subsequent instances will always be rendered.</summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.BuiltInstanceBounds">
            <summary>Bounding box of any built instances (cached from the ClusterTree)</summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.UnbuiltInstanceBounds">
            <summary>Bounding box of any unbuilt instances</summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.UnbuiltInstanceBoundsList">
            <summary>Bounds of each individual unbuilt instance, used for LOD calculation</summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.bEnableDensityScaling">
            <summary>
            Enable for detail meshes that don't really affect the game. Disable for anything important.
            Typically, this will be enabled for small meshes without collision (e.g. grass) and disabled for large meshes with collision (e.g. trees)
            </summary>
        </member>
        <member name="P:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.OcclusionLayerNumNodes">
            <summary>The number of nodes in the occlusion layer</summary>
        </member>
        <member name="P:UnrealEngine.UHorizontalBoxSlot.Padding">
            <summary>The amount of padding between the slots parent and the content.</summary>
        </member>
        <member name="P:UnrealEngine.UHorizontalBoxSlot.Size">
            <summary>How much space this slot should occupy in the direction of the panel.</summary>
        </member>
        <member name="T:UnrealEngine.UImage">
            <summary>
            The image widget allows you to display a Slate Brush, or texture or material in the UI.
            * No Children
            </summary>
        </member>
        <member name="P:UnrealEngine.UImage.Image">
            <summary>Image to draw</summary>
        </member>
        <member name="P:UnrealEngine.UImage.Brush">
            <summary>Image to draw</summary>
        </member>
        <member name="P:UnrealEngine.UImage.ColorAndOpacity">
            <summary>Color and opacity</summary>
        </member>
        <member name="P:UnrealEngine.UInheritableComponentHandler.Records">
            <summary>All component records</summary>
        </member>
        <member name="P:UnrealEngine.UInheritableComponentHandler.UnnecessaryComponents">
            <summary>List of components that were marked unnecessary, need to keep these around so it doesn't regenerate them when a child asks for one</summary>
        </member>
        <member name="T:UnrealEngine.UInputKeySelector">
            <summary>A widget for selecting a single key or a single key with a modifier.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.SelectedKey">
            <summary>The currently selected key chord.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.Font">
            <summary>The font used to display the currently selected key.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.Margin">
            <summary>The amount of blank space around the text used to display the currently selected key.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.ColorAndOpacity">
            <summary>The color of the text used to display the currently selected key.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.KeySelectionText">
            <summary>Sets the text which is displayed while selecting keys.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.bAllowModifierKeys">
            <summary>input chord representing the selected key, if false modifier keys are ignored.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.OnKeySelected">
            <summary>Called whenever a new key is selected by the user.</summary>
        </member>
        <member name="P:UnrealEngine.UInputKeySelector.OnIsSelectingKeyChanged">
            <summary>Called whenever the key selection mode starts or stops.</summary>
        </member>
        <member name="T:UnrealEngine.UInputSettings">
            <summary>
            Project wide settings for input handling
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html
            </summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.AxisConfig">
            <summary>List of Axis Properties</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bUseMouseForTouch">
            <summary>Allow mouse to be used for touch</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bEnableMouseSmoothing">
            <summary>Mouse smoothing control</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bEnableFOVScaling">
            <summary>Scale the mouse based on the player camera manager's field of view</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.FOVScale">
            <summary>The scaling value to multiply the field of view by</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.DoubleClickTime">
            <summary>If a key is pressed twice in this amount of time it is considered a "double click"</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bCaptureMouseOnLaunch">
            <summary>Controls if the viewport will capture the mouse on Launch of the application</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bDefaultViewportMouseLock">
            <summary>The default mouse lock state when the viewport acquires capture</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.ActionMappings">
            <summary>List of Action Mappings</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.AxisMappings">
            <summary>List of Axis Mappings</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bAlwaysShowTouchInterface">
            <summary>Should the touch input interface be shown always, or only when the platform has a touch screen?</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.bShowConsoleOnFourFingerTap">
            <summary>Whether or not to show the console on 4 finger tap, on mobile platforms</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.DefaultTouchInterface">
            <summary>The default on-screen touch input interface for the game (can be null to disable the onscreen interface)</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.ConsoleKey">
            <summary>The key which opens the console.</summary>
        </member>
        <member name="P:UnrealEngine.UInputSettings.ConsoleKeys">
            <summary>The keys which open the console.</summary>
        </member>
        <member name="T:UnrealEngine.UInstancedStaticMeshComponent">
            <summary>A component that efficiently renders multiple instances of the same StaticMesh.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.PerInstanceSMData">
            <summary>Array of instances, bulk serialized.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.InstancingRandomSeed">
            <summary>
            Value used to seed the random number stream that generates random numbers for each of this mesh's instances.
                          The random number is stored in a buffer accessible to materials through the PerInstanceRandom expression. If
                          this is set to zero (default), it will be populated automatically by the editor.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.InstanceStartCullDistance">
            <summary>Distance from camera at which each instance begins to fade out.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.InstanceEndCullDistance">
            <summary>Distance from camera at which each instance completely fades out.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.InstanceReorderTable">
            <summary>Mapping from PerInstanceSMData order to instance render buffer order. If empty, the PerInstanceSMData order is used.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.RemovedInstances">
            <summary>The render indices of any removed items we should not render.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.PhysicsSerializer">
            <summary>Serialization of all the InstanceBodies. Helps speed up physics creation time.</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.NumPendingLightmaps">
            <summary>Number of pending lightmaps still to be calculated (Apply()'d).</summary>
        </member>
        <member name="P:UnrealEngine.UInstancedStaticMeshComponent.CachedMappings">
            <summary>The mappings for all the instances of this component.</summary>
        </member>
        <member name="T:UnrealEngine.UInterpData">
            <summary>
            Interpolation data, containing keyframe tracks, event tracks etc.
            This does not contain any  AActor  references or state, so can safely be stored in
            packages, shared between multiple MatineeActors etc.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.InterpLength">
            <summary>Duration of interpolation sequence - in seconds.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.PathBuildTime">
            <summary>Position in Interp to move things to for path-building in editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.InterpGroups">
            <summary>Actual interpolation data. Groups of InterpTracks.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.CurveEdSetup">
            <summary>Used for curve editor to remember curve-editing setup. Only loaded in editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.InterpFilters">
            <summary>Used for filtering which tracks are currently visible.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.SelectedFilter">
            <summary>The currently selected filter.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.DefaultFilters">
            <summary>Array of default filters.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.EdSectionStart">
            <summary>Used in editor for defining sections to loop, stretch etc.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.EdSectionEnd">
            <summary>Used in editor for defining sections to loop, stretch etc.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.bShouldBakeAndPrune">
            <summary>If true, then the matinee should be baked and pruned at cook time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.CachedDirectorGroup">
            <summary>Cached version of the director group, if any, for easy access while in game</summary>
        </member>
        <member name="P:UnrealEngine.UInterpData.AllEventNames">
            <summary>Unique names of all events contained across all event tracks</summary>
        </member>
        <member name="P:UnrealEngine.UInterpFilter_Custom.GroupsToInclude">
            <summary>Which groups are included in this filter.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.GroupName">
            <summary>
            Within an InterpData, all GroupNames must be unique.
            Used for naming Variable connectors on the Action in Kismet and finding each groups object.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.GroupColor">
            <summary>Colour used for drawing tracks etc. related to this group.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.bCollapsed">
            <summary>Whether or not this group is folded away in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.bVisible">
            <summary>Whether or not this group is visible in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.bIsFolder">
            <summary>When enabled, this group is treated like a folder in the editor, which should only be used for organization.  Folders are never associated with actors and don't have a presence in the Kismet graph.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.bIsParented">
            <summary>When true, this group is considered a 'visual child' of another group.  This doesn't at all affect the behavior of the group, it's only for visual organization.  Also, it's implied that the parent is the next prior group in the array that doesn't have a parent.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroup.bIsSelected">
            <summary>When enabled, this group will be selected in the interp editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroupCamera.Target">
            <summary>
            this is interaction property info for CameraAnim
            this information isn't really saved with it
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroupCamera.CompressTolerance">
            <summary>When compress, tolerance option *</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroupInst.Group">
            <summary>UInterpGroup within the InterpData that this is an instance of.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroupInst.GroupActor">
            <summary>
            Actor that this Group instance is acting upon.
            NB: that this may be set to NULL at any time as a result of the  AActor  being destroyed.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpGroupInst.TrackInst">
            <summary>Array if InterpTrack instances. TrackInst.Num() == UInterpGroup.InterpTrack.Num() must be true.</summary>
        </member>
        <member name="T:UnrealEngine.UInterpToMovementComponent">
            <summary>
            Move the root component between a series of points over a given time *
            @see UMovementComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.Duration">
            <summary>How long to take to move from the first point to the last (or vice versa)</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.bPauseOnImpact">
            <summary>If true, will pause movement on impact. If false it will behave as if the end of the movement range was reached based on the BehaviourType.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.bForceSubStepping">
            <summary>
            If true, forces sub-stepping to break up movement into discrete smaller steps to improve accuracy of the trajectory.
            Objects that move in a straight line typically do *not* need to set this, as movement always uses continuous collision detection (sweeps) so collision is not missed.
            Sub-stepping is automatically enabled when under the effects of gravity or when homing towards a target.
            @see MaxSimulationTimeStep, MaxSimulationIterations
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.OnInterpToReverse">
            <summary>Called when InterpTo impacts something and reverse is enabled.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.OnInterpToStop">
            <summary>Called when InterpTo has come to a stop.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.OnWaitBeginDelegate">
            <summary>Called when InterpTo has come to a stop but will resume when possible.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.OnWaitEndDelegate">
            <summary>Called when InterpTo has resumed following a stop.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.OnResetDelegate">
            <summary>Called when InterpTo reached the end and reset back to start .</summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.MaxSimulationTimeStep">
            <summary>
            Max time delta for each discrete simulation step.
            Lowering this value can address issues with fast-moving objects or complex collision scenarios, at the cost of performance.
            WARNING: if (MaxSimulationTimeStep * MaxSimulationIterations) is too low for the min framerate, the last simulation step may exceed MaxSimulationTimeStep to complete the simulation.
            @see MaxSimulationIterations, bForceSubStepping
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.MaxSimulationIterations">
            <summary>
            Max number of iterations used for each discrete simulation step.
            Increasing this value can address issues with fast-moving objects or complex collision scenarios, at the cost of performance.
            WARNING: if (MaxSimulationTimeStep * MaxSimulationIterations) is too low for the min framerate, the last simulation step may exceed MaxSimulationTimeStep to complete the simulation.
            @see MaxSimulationTimeStep, bForceSubStepping
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpToMovementComponent.ControlPoints">
            <summary>List of control points to visit.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.SubTracks">
            <summary>A list of subtracks that belong to this track</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.SubTrackGroups">
            <summary>A list of subtrack groups (for editor UI organization only)</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.SupportedSubTracks">
            <summary>A list of supported tracks that can be a subtrack of this track.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.ActiveCondition">
            <summary>Sets the condition that must be met for this track to be enabled</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.TrackTitle">
            <summary>Title of track type.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bOnePerGroup">
            <summary>Whether there may only be one of this track in an UInterpGroup.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bDirGroupOnly">
            <summary>If this track can only exist inside the Director group.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bDisableTrack">
            <summary>Whether or not this track should actually update the target actor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bIsSelected">
            <summary>Whether or not this track is selected in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bIsAnimControlTrack">
            <summary>If true, the  AActor  this track is working on will have BeginAnimControl/FinishAnimControl called on it.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bSubTrackOnly">
            <summary>If this track can only exist as a sub track.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bVisible">
            <summary>Whether or not this track is visible in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bIsRecording">
            <summary>Whether or not this track is recording in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrack.bIsCollapsed">
            <summary>If this track is collapsed. (Only applies  to tracks with subtracks).</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackAnimControl.SlotName">
            <summary>
            Name of slot to use when playing animation. Passed to Actor.
            When multiple tracks use the same slot name, they are each given a different ChannelIndex when SetAnimPosition is called.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackAnimControl.AnimSeqs">
            <summary>Track of different animations to play and when to start playing them.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackAnimControl.bSkipAnimNotifiers">
            <summary>Skip all anim notifiers *</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackBoolProp.BoolTrack">
            <summary>Array of booleans to set.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackBoolProp.PropertyName">
            <summary>Name of property in Group  AActor  which this track will modify over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackColorProp.PropertyName">
            <summary>Name of property in Group  AActor  which this track mill modify over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackDirector.CutTrack">
            <summary>Array of cuts between cameras.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackDirector.bSimulateCameraCutsOnClients">
            <summary>True to allow clients to simulate their own camera cuts.  Can help with latency-induced timing issues.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackDirector.PreviewCamera">
            <summary>The camera actor which the track is currently focused on. Only valid if this track or it's group is selected</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackEvent.EventTrack">
            <summary>Array of events to fire off.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackEvent.bFireEventsWhenForwards">
            <summary>If events should be fired when passed playing the sequence forwards.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackEvent.bFireEventsWhenBackwards">
            <summary>If events should be fired when passed playing the sequence backwards.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackEvent.bFireEventsWhenJumpingForwards">
            <summary>If true, events on this track are fired even when jumping forwads through a sequence - for example, skipping a cinematic.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackEvent.bUseCustomEventName">
            <summary>If checked each key's event name is the exact name of the custom event function in level script that will be called</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackFloatBase.FloatTrack">
            <summary>Actually track data containing keyframes of float as it varies over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackFloatBase.CurveTension">
            <summary>Tension of curve, used for keypoints using automatic tangents.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackFloatProp.PropertyName">
            <summary>Name of property in Group  AActor  which this track mill modify over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackInstEvent.LastUpdatePosition">
            <summary>
            Position we were in last time we evaluated Events.
            During UpdateTrack, events between this time and the current time will be fired.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackInstFloatProp.ResetFloat">
            <summary>Saved value for restoring state when exiting Matinee.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackInstMove.ResetLocation">
            <summary>Saved position. Used in editor for resetting when quitting Matinee.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackInstMove.ResetRotation">
            <summary>Saved rotation. Used in editor for resetting when quitting Matinee.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackLinearColorBase.LinearColorTrack">
            <summary>Actually track data containing keyframes of a FVector as it varies over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackLinearColorBase.CurveTension">
            <summary>Tension of curve, used for keypoints using automatic tangents.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackLinearColorProp.PropertyName">
            <summary>Name of property in Group  AActor  which this track mill modify over time.</summary>
        </member>
        <member name="T:UnrealEngine.UInterpTrackMove">
            <summary>Track containing data for moving an actor around over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.PosTrack">
            <summary>Actual position keyframe data.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.EulerTrack">
            <summary>Actual rotation keyframe data, stored as Euler angles in degrees, for easy editing on curve.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.LookAtGroupName">
            <summary>When using IMR_LookAtGroup, specifies the Group which this track should always point its actor at.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.LinCurveTension">
            <summary>Controls the tightness of the curve for the translation path.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.AngCurveTension">
            <summary>Controls the tightness of the curve for the rotation path.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.bUseQuatInterpolation">
            <summary>
            Use a Quaternion linear interpolation between keys.
            This is robust and will find the 'shortest' distance between keys, but does not support ease in/out.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.bShowArrowAtKeys">
            <summary>In the editor, show a small arrow at each keyframe indicating the rotation at that key.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.bDisableMovement">
            <summary>Disable previewing of this track - will always position  AActor  at Time=0.0. Useful when keyframing an object relative to this group.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.bShowTranslationOnCurveEd">
            <summary>If false, when this track is displayed on the Curve Editor in Matinee, do not show the Translation tracks.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.bShowRotationOnCurveEd">
            <summary>If false, when this track is displayed on the Curve Editor in Matinee, do not show the Rotation tracks.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMove.bHide3DTrack">
            <summary>If true, 3D representation of this track in the 3D viewport is disabled.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMoveAxis.MoveAxis">
            <summary>The axis which this track will use when transforming an actor</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackMoveAxis.LookupTrack">
            <summary>Lookup track to use when looking at different groups for transform information</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackParticleReplay.TrackKeys">
            <summary>Array of keys</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackParticleReplay.bIsCapturingReplay">
            <summary>True in the editor if track should be used to capture replay frames instead of play them back</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackParticleReplay.FixedTimeStep">
            <summary>Current replay fixed time quantum between frames (one over frame rate)</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackSound.Sounds">
            <summary>Array of sounds to play at specific times.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackSound.bPlayOnReverse">
            <summary>if set, sound plays only when playing the matinee in reverse instead of when the matinee plays forward</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackSound.bContinueSoundOnMatineeEnd">
            <summary>If true, sounds on this track will not be forced to finish when the matinee sequence finishes.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackSound.bSuppressSubtitles">
            <summary>If true, don't show subtitles for sounds played by this track.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackSound.bTreatAsDialogue">
            <summary>If true and track is controlling a pawn, makes the pawn "speak" the given audio.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackToggle.ToggleTrack">
            <summary>Array of events to fire off.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackToggle.bActivateSystemEachUpdate">
            <summary>
            If true, the track will call ActivateSystem on the emitter each update (the old 'incorrect' behavior).
            If false (the default), the System will only be activated if it was previously inactive.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackToggle.bActivateWithJustAttachedFlag">
            <summary>If true, the track will activate the system w/ the 'Just Attached' flag.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackToggle.bFireEventsWhenForwards">
            <summary>If events should be fired when passed playing the sequence forwards.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackToggle.bFireEventsWhenBackwards">
            <summary>If events should be fired when passed playing the sequence backwards.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackToggle.bFireEventsWhenJumpingForwards">
            <summary>If true, events on this track are fired even when jumping forwads through a sequence - for example, skipping a cinematic.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVectorBase.VectorTrack">
            <summary>Actually track data containing keyframes of a FVector as it varies over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVectorBase.CurveTension">
            <summary>Tension of curve, used for keypoints using automatic tangents.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVectorMaterialParam.TargetMaterials">
            <summary>Materials whose parameters we want to change and the references to those materials.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVectorMaterialParam.ParamName">
            <summary>Name of parameter in the MaterialInstance which this track will modify over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVectorProp.PropertyName">
            <summary>Name of property in Group  AActor  which this track mill modify over time.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVisibility.VisibilityTrack">
            <summary>Array of events to fire off.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVisibility.bFireEventsWhenForwards">
            <summary>If events should be fired when passed playing the sequence forwards.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVisibility.bFireEventsWhenBackwards">
            <summary>If events should be fired when passed playing the sequence backwards.</summary>
        </member>
        <member name="P:UnrealEngine.UInterpTrackVisibility.bFireEventsWhenJumpingForwards">
            <summary>If true, events on this track are fired even when jumping forwads through a sequence - for example, skipping a cinematic.</summary>
        </member>
        <member name="P:UnrealEngine.UIntSerialization.UnsignedInt16Variable">
            <summary>New types</summary>
        </member>
        <member name="P:UnrealEngine.UIntSerialization.UnsignedInt8Variable">
            <summary>Existing types</summary>
        </member>
        <member name="T:UnrealEngine.UInvalidationBox">
            <summary>
            Invalidate
            * Single Child
            * Caching / Performance
            </summary>
        </member>
        <member name="P:UnrealEngine.UInvalidationBox.bCanCache">
            <summary>
            Should the invalidation panel cache the widgets?  Making this false makes it so the invalidation
            panel stops acting like an invalidation panel, just becomes a simple container widget.
            </summary>
        </member>
        <member name="P:UnrealEngine.UInvalidationBox.CacheRelativeTransforms">
            <summary>
            Caches the locations for child draw elements relative to the invalidation box,
            this adds extra overhead to drawing them every frame.  However, in cases where
            the position of the invalidation boxes changes every frame this can be a big savings.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULayer.LayerName">
            <summary>The display name of the layer</summary>
        </member>
        <member name="P:UnrealEngine.ULayer.bIsVisible">
            <summary>Whether actors associated with the layer are visible in the viewport</summary>
        </member>
        <member name="P:UnrealEngine.ULayer.ActorStats">
            <summary>Basic stats regarding the number of Actors and their types currently assigned to the Layer</summary>
        </member>
        <member name="T:UnrealEngine.ULevel">
            <summary>
            A Level is a collection of Actors (lights, volumes, mesh instances etc.).
            Multiple Levels can be loaded and unloaded into the World to create a streaming experience.
            @see https://docs.unrealengine.com/latest/INT/Engine/Levels
            @see UActor
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.OwningWorld">
            <summary>
            The World that has this level in its Levels array.
            This is not the same as GetOuter(), because GetOuter() for a streaming level is a vestigial world that is not used.
            It should not be accessed during BeginDestroy(), just like any other UObject references, since GC may occur in any order.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.Model">
            <summary>BSP UModel.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.ModelComponents">
            <summary>BSP Model components used for rendering.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LevelScriptBlueprint">
            <summary>Reference to the blueprint for level scripting</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.TextureStreamingResourceGuids">
            <summary>The Guid list of all materials and meshes Guid used in the last texture streaming build. Used to know if the streaming data needs rebuild. Only used for the persistent level.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.NumTextureStreamingUnbuiltComponents">
            <summary>Num of components missing valid texture streaming data. Updated in map check.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.NumTextureStreamingDirtyResources">
            <summary>Num of resources that have changed since the last texture streaming build. Updated in map check.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LevelScriptActor">
            <summary>The level scripting actor, created by instantiating the class from LevelScriptBlueprint.  This handles all level scripting</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.NavListStart">
            <summary>
            Start and end of the navigation list for this level, used for quickly fixing up
            when streaming this level in/out. @TODO DEPRECATED - DELETE
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.NavDataChunks">
            <summary>Navigation related data that can be stored per level</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LightmapTotalSize">
            <summary>Total number of KB used for lightmap textures in the level.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.ShadowmapTotalSize">
            <summary>Total number of KB used for shadowmap textures in the level.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.StaticNavigableGeometry">
            <summary>
            threes of triangle vertices - AABB filtering friendly. Stored if there's a runtime need to rebuild navigation that accepts BSPs
                as well - it's a lot easier this way than retrieve this data at runtime
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.StreamingTextureGuids">
            <summary>The Guid of each texture refered by FStreamingTextureBuildInfo::TextureLevelIndex</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.bIsLightingScenario">
            <summary>
            Whether the level is a lighting scenario.  Lighting is built separately for each lighting scenario level with all other scenario levels hidden.
            Only one lighting scenario level should be visible at a time for correct rendering, and lightmaps from that level will be used on the rest of the world.
            Note: When a lighting scenario level is present, lightmaps for all streaming levels are placed in the scenario's _BuildData package.
                         This means that lightmaps for those streaming levels will not be streamed with them.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LevelBuildDataId">
            <summary>Identifies map build data specific to this level, eg lighting volume samples.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.MapBuildData">
            <summary>Registry for data from the map build.  This is stored in a separate package from the level to speed up saving / autosaving.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LightBuildLevelOffset">
            <summary>Level offset at time when lighting was built</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.bTextureStreamingRotationChanged">
            <summary>Whether a level transform rotation was applied since the texture streaming builds. Invalidates the precomputed streaming bounds.</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.bIsVisible">
            <summary>Whether the level is currently visible/ associated with the world</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.bLocked">
            <summary>
            Whether this level is locked; that is, its actors are read-only
                Used by WorldBrowser to lock a level when corresponding ULevelStreaming does not exist
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LevelSimplification">
            <summary>Level simplification settings for each LOD</summary>
        </member>
        <member name="P:UnrealEngine.ULevel.LevelColor">
            <summary>
            The level color used for visualization. (Show -> Advanced -> Level Coloration)
            Used only in world composition mode
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevel.AssetUserData">
            <summary>Array of user data stored with the asset</summary>
        </member>
        <member name="T:UnrealEngine.ULevelScriptBlueprint">
            <summary>
            A level blueprint is a specialized type of blueprint. It is used to house
            global, level-wide logic. In a level blueprint, you can operate on specific
            level-actor instances through blueprint's node-based interface. UE3 users
            should be familiar with this concept, as it is very similar to Kismet.
            @see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/UserGuide/Types/LevelBlueprint/index.html
            @see https://docs.unrealengine.com/latest/INT/Engine/Blueprints/index.html
            @see UBlueprint
            @see ALevelScriptActor
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevelScriptBlueprint.FriendlyName">
            <summary>The friendly name to use for UI</summary>
        </member>
        <member name="T:UnrealEngine.ULevelStreaming">
            <summary>
            Abstract base class of container object encapsulating data required for streaming and providing
            interface for when a level should be streamed in and out of memory.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.PackageName">
            <summary>Deprecated name of the package containing the level to load. Use GetWorldAsset() or GetWorldAssetPackageFName() instead.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.PackageNameToLoad">
            <summary>If this isn't Name_None, then we load from this package on disk to the new package named PackageName</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.LODPackageNames">
            <summary>LOD versions of this level</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.LevelTransform">
            <summary>Transform applied to actors after loading.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bShouldBeVisibleInEditor">
            <summary>Whether this level should be visible in the Editor</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bLocked">
            <summary>Whether this level is locked; that is, its actors are read-only.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bShouldBeLoaded">
            <summary>Whether the level should be loaded</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bShouldBeVisible">
            <summary>Whether the level should be visible if it is loaded</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bIsStatic">
            <summary>
            Whether this level only contains static actors that aren't affected by gameplay or replication.
            If true, the engine can make certain optimizations and will add this level to the StaticLevels collection.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bShouldBlockOnLoad">
            <summary>Whether we want to force a blocking load</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.LevelLODIndex">
            <summary>Requested LOD. Non LOD sub-levels have Index = -1</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bDisableDistanceStreaming">
            <summary>
            Whether this level streaming object should be ignored by world composition distance streaming,
            so streaming state can be controlled by other systems (ex: in blueprints)
            </summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.bDrawOnLevelStatusMap">
            <summary>If true, will be drawn on the 'level streaming status' map (STAT LEVELMAP console command)</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.DrawColor">
            <summary>Deprecated level color used for visualization.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.LevelColor">
            <summary>The level color used for visualization. (Show -> Advanced -> Level Coloration)</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.EditorStreamingVolumes">
            <summary>The level streaming volumes bound to this level.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.MinTimeBetweenVolumeUnloadRequests">
            <summary>Cooldown time in seconds between volume-based unload requests.  Used in preventing spurious unload requests.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.Keywords">
            <summary>List of keywords to filter on in the level browser</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.OnLevelLoaded">
            <summary>Called when level is streamed in</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.OnLevelUnloaded">
            <summary>Called when level is streamed out</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.OnLevelShown">
            <summary>Called when level is added to the world</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.OnLevelHidden">
            <summary>Called when level is removed from the world</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.LoadedLevel">
            <summary>Pointer to Level object if currently loaded/ streamed in.</summary>
        </member>
        <member name="P:UnrealEngine.ULevelStreaming.PendingUnloadLevel">
            <summary>Pointer to a Level object that was previously active and was replaced with a new LoadedLevel (for LOD switching)</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.Temperature">
            <summary>
            Color temperature in Kelvin of the blackbody illuminant.
            White (D65) is 6500K.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.bUseTemperature">
            <summary>false: use white (D65) as illuminant.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.ShadowMapChannel">
            <summary>Legacy shadowmap channel from the lighting build, now stored in FLightComponentMapBuildData.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.MinRoughness">
            <summary>Min roughness effective for this light. Used for softening specular highlights.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.ShadowResolutionScale">
            <summary>
            Scales the resolution of shadowmaps used to shadow this light.  By default shadowmap resolution is chosen based on screen size of the caster.
            Note: shadowmap resolution is still clamped by 'r.Shadow.MaxResolution'
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.ShadowBias">
            <summary>
            Controls how accurate self shadowing of whole scene shadows from this light are.
            At 0, shadows will start at the their caster surface, but there will be many self shadowing artifacts.
            larger values, shadows will start further from their caster, and there won't be self shadowing artifacts but object might appear to fly.
            around 0.5 seems to be a good tradeoff. This also affects the soft transition of shadows
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.ShadowSharpen">
            <summary>Amount to sharpen shadow filtering</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.ContactShadowLength">
            <summary>Length of screen space ray trace for sharp contact shadows. Zero is disabled.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.CastTranslucentShadows">
            <summary>Whether the light is allowed to cast dynamic shadows from translucency.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.bCastShadowsFromCinematicObjectsOnly">
            <summary>
            Whether the light should only cast shadows from components marked as bCastCinematicShadows.
            This is useful for setting up cinematic Movable spotlights aimed at characters and avoiding the shadow depth rendering costs of the background.
            Note: this only works with dynamic shadow maps, not with static shadowing or Ray Traced Distance Field shadows.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.bAffectDynamicIndirectLighting">
            <summary>Whether the light should be injected into the Light Propagation Volume</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.LightingChannels">
            <summary>
            Channels that this light should affect.
            These channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.LightFunctionMaterial">
            <summary>
            The light function material to be applied to this light.
            Note that only non-lightmapped lights (UseDirectLightMap=False) can have a light function.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.LightFunctionScale">
            <summary>Scales the light function projection.  X and Y scale in the directions perpendicular to the light's direction, Z scales along the light direction.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.IESTexture">
            <summary>IES texture (light profiles from real world measured data)</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.bUseIESBrightness">
            <summary>true: take light brightness from IES profile, false: use the light brightness - the maximum light in one direction is used to define no masking. Use with InverseSquareFalloff. Will be disabled if a valid IES profile texture is not supplied.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.IESBrightnessScale">
            <summary>Global scale for IES brightness contribution. Only available when "Use IES Brightness" is selected, and a valid IES profile texture is set</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.LightFunctionFadeDistance">
            <summary>
            Distance at which the light function should be completely faded to DisabledBrightness.
            This is useful for hiding aliasing from light functions applied in the distance.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.DisabledBrightness">
            <summary>
            Brightness factor applied to the light when the light function is specified but disabled, for example in scene captures that use SceneCapView_LitNoShadows.
            This should be set to the average brightness of the light function material's emissive input, which should be between 0 and 1.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.bEnableLightShaftBloom">
            <summary>
            Whether to render light shaft bloom from this light.
            For directional lights, the color around the light direction will be blurred radially and added back to the scene.
            for point lights, the color on pixels closer than the light's SourceRadius will be blurred radially and added back to the scene.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.BloomScale">
            <summary>Scales the additive color.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.BloomThreshold">
            <summary>Scene color must be larger than this to create bloom in the light shafts.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.BloomTint">
            <summary>Multiplies against scene color to create the bloom color.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.bUseRayTracedDistanceFieldShadows">
            <summary>
            Whether to use ray traced distance field area shadows.  The project setting bGenerateMeshDistanceFields must be enabled for this to have effect.
            Distance field shadows support area lights so they create soft shadows with sharp contacts.
            They have less aliasing artifacts than standard shadowmaps, but inherit all the limitations of distance field representations (only uniform scale, no deformation).
            These shadows have a low per-object cost (and don't depend on triangle count) so they are effective for distant shadows from a dynamic sun.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponent.RayStartOffsetDepthScale">
            <summary>
            Controls how large of an offset ray traced shadows have from the receiving surface as the camera gets further away.
            This can be useful to hide self-shadowing artifacts from low resolution distance fields on huge static meshes.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.LightGuid">
            <summary>
            GUID used to associate a light component with precomputed shadowing information across levels.
            The GUID changes whenever the light position changes.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.Intensity">
            <summary>
            Total energy that the light emits.
            For point/spot lights with inverse squared falloff, this is in units of lumens.  1700 lumens corresponds to a 100W lightbulb.
            For other lights, this is just a brightness multiplier.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.LightColor">
            <summary>
            Filter color of the light.
            Note that this can change the light's effective intensity.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.bAffectsWorld">
            <summary>
            Whether the light can affect the world, or whether it is disabled.
            A disabled light will not contribute to the scene in any way.  This setting cannot be changed at runtime and unbuilds lighting when changed.
            Setting this to false has the same effect as deleting the light, so it is useful for non-destructive experiments.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.CastShadows">
            <summary>Whether the light should cast any shadows.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.CastStaticShadows">
            <summary>Whether the light should cast shadows from static objects.  Also requires Cast Shadows to be set to True.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.CastDynamicShadows">
            <summary>Whether the light should cast shadows from dynamic objects.  Also requires Cast Shadows to be set to True.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.bAffectTranslucentLighting">
            <summary>Whether the light affects translucency or not.  Disabling this can save GPU time when there are many small lights.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.IndirectLightingIntensity">
            <summary>
            Scales the indirect lighting contribution from this light.
            A value of 0 disables any GI from this light. Default is 1.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.StaticEditorTexture">
            <summary>Sprite for static light in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.StaticEditorTextureScale">
            <summary>Sprite scaling for static light in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.DynamicEditorTexture">
            <summary>Sprite for dynamic light in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.ULightComponentBase.DynamicEditorTextureScale">
            <summary>Sprite scaling for dynamic light in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.ULightmappedSurfaceCollection.SourceModel">
            <summary>The UModel these surfaces come from.</summary>
        </member>
        <member name="P:UnrealEngine.ULightmappedSurfaceCollection.Surfaces">
            <summary>An array of the surface indices grouped into a single static lighting mapping.</summary>
        </member>
        <member name="T:UnrealEngine.UListView">
            <summary>Allows thousands of items to be displayed in a list.  Generates widgets dynamically for each item.</summary>
        </member>
        <member name="P:UnrealEngine.UListView.ItemHeight">
            <summary>The height of each widget</summary>
        </member>
        <member name="P:UnrealEngine.UListView.Items">
            <summary>The list of items to generate widgets for</summary>
        </member>
        <member name="P:UnrealEngine.UListView.SelectionMode">
            <summary>The selection method for the list</summary>
        </member>
        <member name="T:UnrealEngine.ULocalPlayer">
            <summary>
            Each player that is active on the current client has a LocalPlayer. It stays active across maps
            There may be several spawned in the case of splitscreen/coop.
            There may be 0 spawned on servers.
            </summary>
        </member>
        <member name="P:UnrealEngine.ULocalPlayer.ViewportClient">
            <summary>The master viewport containing this player's view.</summary>
        </member>
        <member name="P:UnrealEngine.ULocalPlayer.AspectRatioAxisConstraint">
            <summary>How to constrain perspective viewport FOV</summary>
        </member>
        <member name="P:UnrealEngine.ULocalPlayer.PendingLevelPlayerControllerClass">
            <summary>The class of PlayerController to spawn for players logging in.</summary>
        </member>
        <member name="P:UnrealEngine.ULocalPlayer.bSentSplitJoin">
            <summary>set when we've sent a split join request</summary>
        </member>
        <member name="P:UnrealEngine.UMapBuildDataRegistry.LevelLightingQuality">
            <summary>The lighting quality the level was last built with</summary>
        </member>
        <member name="T:UnrealEngine.UMaterial">
            <summary>
            A Material is an asset which can be applied to a mesh to control the visual look of the scene.
            When light from the scene hits the surface, the shading model of the material is used to calculate how that light interacts with the surface.
            Warning: Creating new materials directly increases shader compile times!  Consider creating a Material Instance off of an existing material instead.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.PhysMaterial">
            <summary>Physical material to use for this graphics material. Used for sounds, effects etc.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.DiffuseColor">
            <summary>Reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.EmissiveColor">
            <summary>Emission.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.Opacity">
            <summary>Transmission.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.MaterialDomain">
            <summary>
            The domain that the material's attributes will be evaluated in.
            Certain pieces of material functionality are only valid in certain domains, for example vertex normal is only valid on a surface.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.BlendMode">
            <summary>Determines how the material's color is blended with background colors.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.DecalBlendMode">
            <summary>Defines how the GBuffer chanels are getting manipulated by a decal material pass. (only with MaterialDomain == MD_DeferredDecal)</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.MaterialDecalResponse">
            <summary>
            Defines how the material reacts on DBuffer decals (Affects look, performance and texture/sample usage).
            Non DBuffer Decals can be disabled on the primitive (e.g. static mesh)
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.ShadingModel">
            <summary>Determines how inputs are combined to create the material's final color.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UMaterial.OpacityMaskClipValue" -->
        <member name="P:UnrealEngine.UMaterial.WorldPositionOffset">
            <summary>Adds to world position in the vertex shader.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.WorldDisplacement">
            <summary>Offset in world space applied to tessellated vertices.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TessellationMultiplier">
            <summary>Multiplies the tessellation factors applied when a tessellation mode is set.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.SubsurfaceColor">
            <summary>Inner material color, only used for ShadingModel=Subsurface</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.AmbientOcclusion">
            <summary>output ambient occlusion to the GBuffer</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.Refraction">
            <summary>
            output refraction index for translucent rendering
            Air:1.0 Water:1.333 Ice:1.3 Glass:~1.6 Diamond:2.42
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.CustomizedUVs">
            <summary>
            These inputs are evaluated in the vertex shader and allow artists to do arbitrary vertex shader operations and access them in the pixel shader.
            When unconnected or hidden they default to passing through the vertex UVs.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bEnableSeparateTranslucency">
            <summary>Indicates that the material should be rendered in the SeparateTranslucency Pass (not affected by DOF, requires bAllowSeparateTranslucency to be set in .ini).</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bEnableMobileSeparateTranslucency">
            <summary>Indicates that the translucent material should not be affected by bloom or DOF. (Note: Depth testing is not available)</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bEnableResponsiveAA">
            <summary>
            Indicates that the material should be rendered using responsive anti-aliasing. Improves sharpness of small moving particles such as sparks.
            Only use for small moving features because it will cause aliasing of the background.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bScreenSpaceReflections">
            <summary>SSR on translucency</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TwoSided">
            <summary>Indicates that the material should be rendered without backface culling and the normal should be flipped for backfaces.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.DitheredLODTransition">
            <summary>Whether meshes rendered with the material should support dithered LOD transitions.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.DitherOpacityMask">
            <summary>Dither opacity mask. When combined with Temporal AA this can be used as a form of limited translucency which supports all lighting features.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bAllowNegativeEmissiveColor">
            <summary>Whether the material should allow outputting negative emissive color values.  Only allowed on unlit materials.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.NumCustomizedUVs">
            <summary>Number of customized UV inputs to display.  Unconnected customized UV inputs will just pass through the vertex UVs.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucencyLightingMode">
            <summary>Sets the lighting mode that will be used on this material if it is translucent.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucencyDirectionalLightingIntensity">
            <summary>
            Useful for artificially increasing the influence of the normal on the lighting result for translucency.
            A value larger than 1 increases the influence of the normal, a value smaller than 1 makes the lighting more ambient.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.AllowTranslucentCustomDepthWrites">
            <summary>Allows a translucenct material to be used with custom depth writing by compiling additional shaders.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentShadowDensityScale">
            <summary>Scale used to make translucent shadows more or less opaque than the material's actual opacity.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentSelfShadowDensityScale">
            <summary>
            Scale used to make translucent self-shadowing more or less opaque than the material's shadow on other objects.
            This is only used when the object is casting a volumetric translucent shadow.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentSelfShadowSecondDensityScale">
            <summary>Used to make a second self shadow gradient, to add interesting shading in the shadow of the first.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentSelfShadowSecondOpacity">
            <summary>Controls the strength of the second self shadow gradient.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentBackscatteringExponent">
            <summary>
            Controls how diffuse the material's backscattering is when using the MSM_Subsurface shading model.
            Larger exponents give a less diffuse look (smaller, brighter backscattering highlight).
            This is only used when the object is casting a volumetric translucent shadow from a directional light.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentMultipleScatteringExtinction">
            <summary>
            Colored extinction factor used to approximate multiple scattering in dense volumes.
            This is only used when the object is casting a volumetric translucent shadow.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.TranslucentShadowStartOffset">
            <summary>Local space distance to bias the translucent shadow.  Positive values move the shadow away from the light.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bDisableDepthTest">
            <summary>Whether to draw on top of opaque pixels even if behind them. This only has meaning for translucency.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bGenerateSphericalParticleNormals">
            <summary>Whether to generate spherical normals for particles that use this material.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bTangentSpaceNormal">
            <summary>
            Whether the material takes a tangent space normal or a world space normal as input.
            (TangentSpace requires extra instructions but is often more convenient).
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUseEmissiveForDynamicAreaLighting">
            <summary>If enabled, the material's emissive colour is injected into the LightPropagationVolume</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bBlockGI">
            <summary>If enabled, the material's opacity defines how much GI is blocked when using the LightPropagationVolume feature</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedAsSpecialEngineMaterial">
            <summary>
            This is a special usage flag that allows a material to be assignable to any primitive type.
            This is useful for materials used by code to implement certain viewmodes, for example the default material or lighting only material.
            The cost is that nearly 20x more shaders will be compiled for the material than the average material, which will greatly increase shader compile time and memory usage.
            This flag should only be enabled when absolutely necessary, and is purposefully not exposed to the UI to prevent abuse.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithSkeletalMesh">
            <summary>
            Indicates that the material and its instances can be use with skeletal meshes.
            This will result in the shaders required to support skeletal meshes being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithEditorCompositing">
            <summary>
            Indicates that the material and its instances can be use with editor compositing
            This will result in the shaders required to support editor compositing being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithParticleSprites">
            <summary>
            Indicates that the material and its instances can be use with particle sprites
            This will result in the shaders required to support particle sprites being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithBeamTrails">
            <summary>
            Indicates that the material and its instances can be use with beam trails
            This will result in the shaders required to support beam trails being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithMeshParticles">
            <summary>
            Indicates that the material and its instances can be use with mesh particles
            This will result in the shaders required to support mesh particles being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithStaticLighting">
            <summary>
            Indicates that the material and its instances can be use with static lighting
            This will result in the shaders required to support static lighting being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithMorphTargets">
            <summary>
            Indicates that the material and its instances can be use with morph targets
            This will result in the shaders required to support morph targets being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithSplineMeshes">
            <summary>
            Indicates that the material and its instances can be use with spline meshes
            This will result in the shaders required to support spline meshes being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithInstancedStaticMeshes">
            <summary>
            Indicates that the material and its instances can be use with instanced static meshes
            This will result in the shaders required to support instanced static meshes being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsesDistortion">
            <summary>
            Indicates that the material and its instances can be use with distortion
            This will result in the shaders required to support distortion being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithClothing">
            <summary>
            Indicates that the material and its instances can be use with clothing
            This will result in the shaders required to support clothing being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsedWithUI">
            <summary>
            Indicates that the material and its instances can be use with Slate UI and UMG
            This will result in the shaders required to support UI materials being compiled which will increase shader compile time and memory usage.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bAutomaticallySetUsageInEditor">
            <summary>
            Whether to automatically set usage flags based on what the material is applied to in the editor.
            It can be useful to disable this on a base material with many instances, where adding another usage flag accidentally (eg bUsedWithSkeletalMeshes) can add a lot of shader permutations.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bFullyRough">
            <summary>Forces the material to be completely rough. Saves a number of instructions and one sampler.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUseFullPrecision">
            <summary>
            Forces this material to use full (highp) precision in the pixel shader.
            This is slower than the default (mediump) but can be used to work around precision-related rendering errors.
            This setting has no effect on older mobile devices that do not support high precision.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUseLightmapDirectionality">
            <summary>Use lightmap directionality and per pixel normals. If disabled, lighting from lightmaps will be flat but cheaper.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUseHQForwardReflections">
            <summary>
            * Forward renderer: enables multiple parallax-corrected reflection captures that blend together.
            * Mobile renderer: blend between nearest 3 reflection captures, but reduces the number of samplers available to the material as two more samplers will be used for reflection cubemaps.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUsePlanarForwardReflections">
            <summary>Enables planar reflection when using the forward renderer or mobile. Enabling this setting reduces the number of samplers available to the material as one more sampler will be used for the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bNormalCurvatureToRoughness">
            <summary>Reduce roughness based on screen space normal changes.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.D3D11TessellationMode">
            <summary>The type of tessellation to apply to this object.  Note D3D11 required for anything except MTM_NoTessellation.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bEnableCrackFreeDisplacement">
            <summary>Prevents cracks in the surface of the mesh when using tessellation.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bEnableAdaptiveTessellation">
            <summary>Enables adaptive tessellation, which tries to maintain a uniform number of pixels per triangle.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.Wireframe">
            <summary>Enables a wireframe view of the mesh the material is applied to.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bOutputVelocityOnBasePass">
            <summary>Skips outputting velocity during the base pass.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.Expressions">
            <summary>Array of material expressions, excluding Comments.  Used by the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.EditorComments">
            <summary>Array of comments associated with this material; viewed in the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.MaterialFunctionInfos">
            <summary>Array of all functions this material depends on.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.MaterialParameterCollectionInfos">
            <summary>Array of all parameter collections this material depends on.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bCanMaskedBeAssumedOpaque">
            <summary>true if this Material can be assumed Opaque when set to masked.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bIsMasked">
            <summary>true if Material is masked and uses custom opacity</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bIsPreviewMaterial">
            <summary>true if Material is the preview material used in the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUseMaterialAttributes">
            <summary>when true, the material attributes pin is used instead of the regular pins.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bUseTranslucencyVertexFog">
            <summary>When true, translucent materials are fogged. Defaults to true.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bAllowDevelopmentShaderCompile">
            <summary>If true the compilation environment will be changed to remove the global COMPILE_SHADERS_FOR_DEVELOPMENT flag.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.bIsMaterialEditorStatsMaterial">
            <summary>true if this is a special material used for stats by the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.UsageFlagWarnings">
            <summary>true if we have printed a warning about material usage for a given usage flag.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.BlendableLocation">
            <summary>Where the node is inserted in the (post processing) graph, only used if domain is PostProcess</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.BlendablePriority">
            <summary>If multiple nodes with the same  type are inserted at the same point, this defined order and if they get combined, only used if domain is PostProcess</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.BlendableOutputAlpha">
            <summary>If this is enabled, the blendable will output alpha</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.RefractionMode">
            <summary>Controls how the Refraction input is interpreted and how the refraction offset into scene color is computed for this material.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.RefractionDepthBias">
            <summary>This is the refraction depth bias, larger values offset distortion to prevent closer objects from rendering into the distorted surface at acute viewing angles but increases the disconnect between surface and where the refraction starts.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.StateId">
            <summary>
            Guid that uniquely identifies this material.
            Any changes to the state of the material that do not appear separately in the shadermap DDC keys must cause this guid to be regenerated!
            For example, a modification to the Expressions array.
            Code changes that cause the guid to be regenerated on load should be avoided, as that requires a resave of the content to stop recompiling every load.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterial.ExpressionTextureReferences">
            <summary>
            Cached texture references from all expressions in the material (including nested functions).
            This is used to link uniform texture expressions which were stored in the DDC with the UTextures that they reference.
            </summary>
        </member>
        <member name="T:UnrealEngine.UMaterialBillboardComponent">
            <summary>A 2d material that will be rendered always facing the camera.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialBillboardComponent.Elements">
            <summary>Current array of material billboard elements</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.GraphNode">
            <summary>Expression's Graph representation</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.MaterialExpressionGuid">
            <summary>GUID to uniquely identify this node, to help the tutorials out</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.Material">
            <summary>
            The material that this expression is currently being compiled in.
            This is not necessarily the object which owns this expression, for example a preview material compiling a material function's expressions.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.Function">
            <summary>
            The material function that this expression is being used with, if any.
            This will be NULL if the expression belongs to a function that is currently being edited,
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.Desc">
            <summary>A description that level designers can add (shows in the material editor UI).</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.BorderColor">
            <summary>Color of the expression's border outline.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bRealtimePreview">
            <summary>Set to true by RecursiveUpdateRealtimePreview() if the expression's preview needs to be updated in realtime in the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bNeedToUpdatePreview">
            <summary>If true, we should update the preview next render. This is set when changing bRealtimePreview.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bIsParameterExpression">
            <summary>Indicates that this is a 'parameter' type of expression and should always be loaded (ie not cooked away) because we might want the default parameter.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bCommentBubbleVisible">
            <summary>If true, the comment bubble will be visible in the graph editor</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bShowOutputNameOnPin">
            <summary>If true, use the output name as the label for the pin</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bHidePreviewWindow">
            <summary>If true, do not render the preview window for the expression</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bCollapsed">
            <summary>If true, show a collapsed version of the node</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bShaderInputData">
            <summary>Whether the node represents an input to the shader or not.  Used to color the node's background.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bShowInputs">
            <summary>Whether to draw the expression's inputs.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.bShowOutputs">
            <summary>Whether to draw the expression's outputs.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.MenuCategories">
            <summary>Localized categories to sort this expression into...</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpression.Outputs">
            <summary>The expression's outputs, which are set in default properties by derived classes.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionAdd.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionAdd.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionAdd.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionAdd.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionBlendMaterialAttributes.PixelAttributeBlendType">
            <summary>Optionally skip blending attributes of this type.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionBlendMaterialAttributes.VertexAttributeBlendType">
            <summary>Optionally skip blending attributes of this type.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionBumpOffset.Coordinate">
            <summary>Defaults to 'ConstCoordinate' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionBumpOffset.ReferencePlane">
            <summary>Perceived height as a fraction of width.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionBumpOffset.ConstCoordinate">
            <summary>only used if Coordinate is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionClamp.Min">
            <summary>Defaults to 'MinDefault' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionClamp.Max">
            <summary>Defaults to 'MaxDefault' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionCollectionParameter.Collection">
            <summary>The Parameter Collection to use.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionCollectionParameter.ParameterName">
            <summary>Name of the parameter being referenced.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionCollectionParameter.ParameterId">
            <summary>Id that is set from the name, and used to handle renaming of collection parameters.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionComment.CommentColor">
            <summary>Color to style comment with</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionDivide.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionDivide.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionDivide.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionDivide.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionDynamicParameter.ParamNames">
            <summary>
            The names of the parameters.
            These will show up in Cascade when editing a particle system
            that uses the material it is in...
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFeatureLevelSwitch.Default">
            <summary>Default connection, used when a certain feature level doesn't have an override.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFontSample.Font">
            <summary>font resource that will be sampled</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFontSample.FontTexturePage">
            <summary>allow access to the various font pages</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFontSampleParameter.ParameterName">
            <summary>name to be referenced when we want to find and set thsi parameter</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFontSampleParameter.ExpressionGUID">
            <summary>GUID that should be unique within the material, this is used for parameter renaming.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFontSampleParameter.Group">
            <summary>The name of the parameter Group to display in MaterialInstance Editor. Default is None group</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.Preview">
            <summary>Used for previewing when editing the function, or when bUsePreviewValueAsDefault is enabled.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.InputName">
            <summary>The input's name, which will be drawn on the connector in function call expressions that use this function.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.Description">
            <summary>The input's description, which will be used as a tooltip on the connector in function call expressions that use this function.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.Id">
            <summary>Id of this input, used to maintain references through name changes.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.InputType">
            <summary>
            Type of this input.
            Input code chunks will be cast to this type, and a compiler error will be emitted if the cast fails.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.PreviewValue">
            <summary>Value used to preview this input when editing the material function.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.bUsePreviewValueAsDefault">
            <summary>Whether to use the preview value or texture as the default value for this input.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.SortPriority">
            <summary>Controls where the input is displayed relative to the other inputs.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionInput.bCompilingFunctionPreview">
            <summary>
            true when this expression is being compiled in a function preview,
            false when this expression is being compiled into a material that uses the function.
            Only valid in Compile()
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionOutput.OutputName">
            <summary>The output's name, which will be drawn on the connector in function call expressions that use this function.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionOutput.Description">
            <summary>The output's description, which will be used as a tooltip on the connector in function call expressions that use this function.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionOutput.SortPriority">
            <summary>Controls where the output is displayed relative to the other outputs.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionOutput.A">
            <summary>Stores the expression in the material function connected to this output.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionOutput.bLastPreviewed">
            <summary>Whether this output was previewed the last time this function was edited.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionFunctionOutput.Id">
            <summary>Id of this input, used to maintain references through name changes.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionIf.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionIf.AEqualsB">
            <summary>Defaults to 'A > B' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionIf.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionLinearInterpolate.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionLinearInterpolate.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionLinearInterpolate.Alpha">
            <summary>Defaults to 'ConstAlpha' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionLinearInterpolate.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionLinearInterpolate.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionLinearInterpolate.ConstAlpha">
            <summary>only used if Alpha is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMaterialFunctionCall.MaterialFunction">
            <summary>The function to call.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMaterialFunctionCall.FunctionInputs">
            <summary>Array of all the function inputs that this function exposes.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMaterialFunctionCall.FunctionOutputs">
            <summary>Array of all the function outputs that this function exposes.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMax.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMax.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMax.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMax.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMin.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMin.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMin.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMin.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMultiply.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMultiply.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMultiply.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionMultiply.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.Position">
            <summary>2 to 3 dimensional vector</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.FilterWidth">
            <summary>scalar, to clamp the Levels at pixel level, can be computed like this: max(length(ddx(Position)), length(ddy(Position))</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.Scale">
            <summary>can also be done with a multiply on the Position</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.Quality">
            <summary>Lower numbers are faster and lower quality, higher numbers are slower and higher quality</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.NoiseFunction">
            <summary>Noise function, affects performance and look</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.bTurbulence">
            <summary>How multiple frequencies are getting combined</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.Levels">
            <summary>1 = fast but little detail, .. larger numbers cost more performance</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.LevelScale">
            <summary>usually 2 but higher values allow efficient use of few levels</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.bTiling">
            <summary>Whether to use tiling noise pattern, useful for baking to seam-free repeating textures</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionNoise.RepeatSize">
            <summary>How many units in each tile (if Tiling is on)</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPanner.Coordinate">
            <summary>Defaults to 'ConstCoordinate' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPanner.Time">
            <summary>Defaults to Game Time if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPanner.Speed">
            <summary>Vector2 speed scale, if specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPanner.ConstCoordinate">
            <summary>only used if Coordinate is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPanner.bFractionalPart">
            <summary>
            Output only the fractional part of the pan calculation for greater precision.
            Output is greater than or equal to 0 and less than 1.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionParameter.ParameterName">
            <summary>The name of the parameter</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionParameter.ExpressionGUID">
            <summary>GUID that should be unique within the material, this is used for parameter renaming.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionParameter.Group">
            <summary>The name of the parameter Group to display in MaterialInstance Editor. Default is None group</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPower.Exponent">
            <summary>Defaults to 'ConstExponent' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionPower.ConstExponent">
            <summary>only used if Exponent is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionQualitySwitch.Default">
            <summary>Default connection, used when a specific quality level input is missing.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionReflectionVectorWS.CustomWorldNormal">
            <summary>Defaults to Reflection Vector if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionReflectionVectorWS.bNormalizeCustomWorldNormal">
            <summary>(true): The specified world normal will be normalized. (false): WorldNormal will just be used as is, faster but possible artifacts if normal length isn't 1</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionReroute.Input">
            <summary>Link to the input expression to be evaluated</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionScalarParameter.SliderMin">
            <summary>Sets the lower bound for the slider on this parameter in the material instance editor.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UMaterialExpressionScalarParameter.SliderMax" -->
        <member name="P:UnrealEngine.UMaterialExpressionSpeedTree.GeometryType">
            <summary>The type of SpeedTree geometry on which this material will be used</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSpeedTree.WindType">
            <summary>The type of wind effect used on this tree. This can only go as high as it was in the SpeedTree Modeler, but you can set it to a lower option for lower quality wind and faster rendering.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSpeedTree.LODType">
            <summary>The type of LOD to use</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSpeedTree.BillboardThreshold">
            <summary>The threshold for triangles to be removed from the bilboard mesh when not facing the camera (0 = none pass, 1 = all pass).</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSpeedTree.bAccurateWindVelocities">
            <summary>Support accurate velocities from wind. This will incur extra cost per vertex.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionStaticSwitch.Value">
            <summary>Ignored if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSubtract.A">
            <summary>Defaults to 'ConstA' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSubtract.B">
            <summary>Defaults to 'ConstB' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSubtract.ConstA">
            <summary>only used if A is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionSubtract.ConstB">
            <summary>only used if B is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureBase.IsDefaultMeshpaintTexture">
            <summary>Is default selected texture when using mesh paint mode texture painting</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureCoordinate.CoordinateIndex">
            <summary>Texture coordinate index</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureCoordinate.UTiling">
            <summary>Controls how much the texture tiles horizontally, by scaling the U component of the vertex UVs by the specified amount.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureCoordinate.VTiling">
            <summary>Controls how much the texture tiles vertically, by scaling the V component of the vertex UVs by the specified amount.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureCoordinate.UnMirrorU">
            <summary>
            Would like to unmirror U or V
            - if the texture is mirrored and if you would like to undo mirroring for this texture sample, use this to unmirror
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureProperty.TextureObject">
            <summary>Texture Object to access the property from.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureProperty.Property">
            <summary>Texture property to be accessed</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.Coordinates">
            <summary>Defaults to 'ConstCoordinate' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.TextureObject">
            <summary>Defaults to 'Texture' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.MipValue">
            <summary>Defaults to 'ConstMipValue' if not specified</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.CoordinatesDX">
            <summary>Coordinates derivative over the X axis</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.CoordinatesDY">
            <summary>Coordinates derivative over the Y axis</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.MipValueMode">
            <summary>Defines how the MipValue property is applied to the texture lookup</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.SamplerSource">
            <summary>
            Controls where the sampler for this texture lookup will come from.
            Choose 'from texture asset' to make use of the UTexture addressing settings,
            Otherwise use one of the global samplers, which will not consume a sampler slot.
            This allows materials to use more than 16 unique textures on SM5 platforms.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.ConstCoordinate">
            <summary>only used if Coordinates is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSample.ConstMipValue">
            <summary>only used if MipValue is not hooked up</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSampleParameter.ExpressionGUID">
            <summary>GUID that should be unique within the material, this is used for parameter renaming.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTextureSampleParameter.Group">
            <summary>The name of the parameter Group to display in MaterialInstance Editor. Default is None group</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTransformPosition.Input">
            <summary>input expression for this transform</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTransformPosition.TransformSourceType">
            <summary>source format of the position that will be transformed</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionTransformPosition.TransformType">
            <summary>type of transform to apply to the input expression</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionVectorNoise.Position">
            <summary>2 to 3 dimensional vector</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionVectorNoise.NoiseFunction">
            <summary>Noise function, affects performance and look</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionVectorNoise.Quality">
            <summary>For noise functions where applicable, lower numbers are faster and lower quality, higher numbers are slower and higher quality</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionVectorNoise.bTiling">
            <summary>Whether tile the noise pattern, useful for baking to seam-free repeating textures</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionVectorNoise.TileSize">
            <summary>
            How many units in each tile (if Tiling is on)
            For Perlin noise functions, Tile Size must be a multiple of three
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialExpressionViewProperty.Property">
            <summary>View input property to be accessed</summary>
        </member>
        <member name="T:UnrealEngine.UMaterialFunction">
            <summary>A Material Function is a collection of material expressions that can be reused in different materials</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.StateId">
            <summary>Used by materials using this function to know when to recompile.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.ParentFunction">
            <summary>Used in the material editor, points to the function asset being edited, which this function is just a preview for.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.Description">
            <summary>Description of the function which will be displayed as a tooltip wherever the function is used.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.bExposeToLibrary">
            <summary>Whether to list this function in the material function library, which is a window in the material editor that lists categorized functions.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.LibraryCategories">
            <summary>
            Categories that this function belongs to in the material function library.
            Ideally categories should be chosen carefully so that there are not too many.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.LibraryCategoriesText">
            <summary>
            Categories that this function belongs to in the material function library.
            Ideally categories should be chosen carefully so that there are not too many.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.FunctionExpressions">
            <summary>Array of material expressions, excluding Comments.  Used by the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.FunctionEditorComments">
            <summary>Array of comments associated with this material; viewed in the material editor.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.bReentrantFlag">
            <summary>Transient flag used to track re-entrance in recursive functions like IsDependent.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialFunction.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.PhysMaterial">
            <summary>Physical material to use for this graphics material. Used for sounds, effects etc.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.Parent">
            <summary>Parent material.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.bHasStaticPermutationResource">
            <summary>
            Indicates whether the instance has static permutation resources (which are required when static parameters are present)
            Read directly from the rendering thread, can only be modified with the use of a FMaterialUpdateContext.
            When true, StaticPermutationMaterialResources will always be valid and non-null.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.bOverrideSubsurfaceProfile">
            <summary>Defines if SubsurfaceProfile from this instance is used or it uses the parent one.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.FontParameterValues">
            <summary>Font parameters.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.ScalarParameterValues">
            <summary>Scalar parameters.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.TextureParameterValues">
            <summary>Texture parameters.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstance.VectorParameterValues">
            <summary>Vector parameters.</summary>
        </member>
        <member name="T:UnrealEngine.UMaterialInstanceConstant">
            <summary>
            Material Instances may be used to change the appearance of a material without incurring an expensive recompilation of the material.
            General modification of the material cannot be supported without recompilation, so the instances are limited to changing the values of
            predefined material parameters. The parameters are statically defined in the compiled material by a unique name, type and default value.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInstanceConstant.ParameterStateId">
            <summary>
            Unique ID for this material instance's parameter set
            Updated on changes in the editor to allow those changes to be detected
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.SubsurfaceProfile">
            <summary>SubsurfaceProfile, for Screen Space Subsurface Scattering</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.LightmassSettings">
            <summary>The Lightmass settings for this object.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.bTextureStreamingDataSorted">
            <summary>Because of redirector, the texture names need to be resorted at each load in case they changed.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.TextureStreamingData">
            <summary>Data used by the texture streaming to know how each texture is sampled by the material. Sorted by names for quick access.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.PreviewMesh">
            <summary>The mesh used by the material editor to preview the material.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialInterface.LightingGuid">
            <summary>Unique ID for this material, used for caching during distributed lighting</summary>
        </member>
        <member name="T:UnrealEngine.UMaterialParameterCollection">
            <summary>
            Asset class that contains a list of parameter names and their default values.
            Any number of materials can reference these parameters and get new values when the parameter values are changed.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialParameterCollection.StateId">
            <summary>Used by materials using this collection to know when to recompile.</summary>
        </member>
        <member name="T:UnrealEngine.UMaterialParameterCollectionInstance">
            <summary>
            Class that stores per-world instance parameter data for a given UMaterialParameterCollection resource.
            Instances of this class are always transient.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMaterialParameterCollectionInstance.Collection">
            <summary>Collection resource this instance is based off of.</summary>
        </member>
        <member name="P:UnrealEngine.UMaterialParameterCollectionInstance.World">
            <summary>World that owns this instance.</summary>
        </member>
        <member name="T:UnrealEngine.UMenuAnchor">
            <summary>
            The Menu Anchor allows you to specify an location that a popup menu should be anchored to,
            and should be summoned from.
            * Single Child
            * Popup
            </summary>
        </member>
        <member name="P:UnrealEngine.UMenuAnchor.MenuClass">
            <summary>
            The widget class to spawn when the menu is required.  Creates the widget freshly each time.
            If you want to customize the creation of the popup, you should bind a function to OnGetMenuContentEvent
            instead.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMenuAnchor.Placement">
            <summary>The placement location of the summoned widget.</summary>
        </member>
        <member name="P:UnrealEngine.UMenuAnchor.UseApplicationMenuStack">
            <summary>Does this menu behave like a normal stacked menu? Set it to false to control the menu's lifetime yourself.</summary>
        </member>
        <member name="P:UnrealEngine.UMenuAnchor.OnMenuOpenChanged">
            <summary>Called when the opened state of the menu changes</summary>
        </member>
        <member name="T:UnrealEngine.UMeshComponent">
            <summary>
            MeshComponent is an abstract base for any component that is an instance of a renderable collection of triangles.
            @see UStaticMeshComponent
            @see USkeletalMeshComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.UMeshComponent.OverrideMaterials">
            <summary>Material overrides.</summary>
        </member>
        <member name="T:UnrealEngine.UModelComponent">
            <summary>
            ModelComponents are PrimitiveComponents that represent elements of BSP geometry in a ULevel object.
            They are used exclusively by ULevel and are not intended as general-purpose components.
            @see ULevel
            </summary>
        </member>
        <member name="P:UnrealEngine.UModelComponent.ModelBodySetup">
            <summary>Description of collision</summary>
        </member>
        <member name="P:UnrealEngine.UMorphTarget.BaseSkelMesh">
            <summary>USkeletalMesh that this vertex animation works on.</summary>
        </member>
        <member name="T:UnrealEngine.UMovementComponent">
            <summary>
            MovementComponent is an abstract component class that defines functionality for moving a PrimitiveComponent (our UpdatedComponent) each tick.
            Base functionality includes:
               - Restricting movement to a plane or axis.
               - Utility functions for special handling of collision results (SlideAlongSurface(), ComputeSlideVector(), TwoWallAdjust()).
               - Utility functions for moving when there may be initial penetration (SafeMoveUpdatedComponent(), ResolvePenetration()).
               - Automatically registering the component tick and finding a component to move on the owning Actor.
            Normally the root component of the owning actor is moved, however another component may be selected (see SetUpdatedComponent()).
            During swept (non-teleporting) movement only collision of UpdatedComponent is considered, attached components will teleport to the end location ignoring collision.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.UpdatedComponent">
            <summary>
            The component we move and update.
            If this is null at startup and bAutoRegisterUpdatedComponent is true, the owning Actor's root component will automatically be set as our UpdatedComponent at startup.
            @see bAutoRegisterUpdatedComponent, SetUpdatedComponent(), UpdatedPrimitive
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.UpdatedPrimitive">
            <summary>UpdatedComponent, cast as a UPrimitiveComponent. May be invalid if UpdatedComponent was null or not a UPrimitiveComponent.</summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.Velocity">
            <summary>Current velocity of updated component.</summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.bConstrainToPlane">
            <summary>
            If true, movement will be constrained to a plane.
            @see PlaneConstraintNormal, PlaneConstraintOrigin, PlaneConstraintAxisSetting
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.bSnapToPlaneAtStart">
            <summary>If true and plane constraints are enabled, then the updated component will be snapped to the plane when first attached.</summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.PlaneConstraintNormal">
            <summary>
            The normal or axis of the plane that constrains movement, if bConstrainToPlane is enabled.
            If for example you wanted to constrain movement to the X-Z plane (so that Y cannot change), the normal would be set to X=0 Y=1 Z=0.
            This is recalculated whenever PlaneConstraintAxisSetting changes. It is normalized once the component is registered with the game world.
            @see bConstrainToPlane, SetPlaneConstraintNormal(), SetPlaneConstraintFromVectors()
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.PlaneConstraintOrigin">
            <summary>
            The origin of the plane that constrains movement, if plane constraint is enabled.
            This defines the behavior of snapping a position to the plane, such as by SnapUpdatedComponentToPlane().
            @see bConstrainToPlane, SetPlaneConstraintOrigin().
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.bUpdateOnlyIfRendered">
            <summary>If true, skips TickComponent() if UpdatedComponent was not recently rendered.</summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.bAutoUpdateTickRegistration">
            <summary>
            If true, whenever the updated component is changed, this component will enable or disable its tick dependent on whether it has something to update.
            This will NOT enable tick at startup if bAutoActivate is false, because presumably you have a good reason for not wanting it to start ticking initially.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.bTickBeforeOwner">
            <summary>
            If true, after registration we will add a tick dependency to tick before our owner (if we can both tick).
            This is important when our tick causes an update in the owner's position, so that when the owner ticks it uses the most recent position without lag.
            Disabling this can improve performance if both objects tick but the order of ticks doesn't matter.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovementComponent.bAutoRegisterUpdatedComponent">
            <summary>If true, registers the owner's Root component as the UpdatedComponent if there is not one currently assigned.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene">
            <summary>Implements a movie scene asset.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.Spawnables">
            <summary>
            Data-only blueprints for all of the objects that we we're able to spawn.
            These describe objects and actors that we may instantiate at runtime,
            or create proxy objects for previewing in the editor.
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.Possessables">
            <summary>Typed slots for already-spawned objects that we are able to control with this MovieScene</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.ObjectBindings">
            <summary>Tracks bound to possessed or spawned objects</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.MasterTracks">
            <summary>Master tracks which are not bound to spawned or possessed objects</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.CameraCutTrack">
            <summary>The camera cut track is a specialized track for switching between cameras on a cinematic</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.SelectionRange">
            <summary>User-defined selection range.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.PlaybackRange">
            <summary>User-defined playback range for this movie scene. Must be a finite range. Relative to this movie-scene's 0-time origin.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.EditorData">
            <summary>Editor only data that needs to be saved between sessions for editing but has no runtime purpose</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene.RootFolders">
            <summary>The root folders for this movie scene.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene2DTransformSection">
            <summary>A transform section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene2DTransformSection.Translation">
            <summary>Translation curves</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene2DTransformSection.Rotation">
            <summary>Rotation curve</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene2DTransformSection.Scale">
            <summary>Scale curves</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene2DTransformSection.Shear">
            <summary>Shear curve</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene3DAttachSection">
            <summary>A 3D Attach section</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene3DConstraintSection">
            <summary>Base class for 3D constraint section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DConstraintSection.ConstraintId">
            <summary>The possessable guid that this constraint uses</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene3DConstraintTrack">
            <summary>Base class for constraint tracks (tracks that are dependent upon other objects).</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DConstraintTrack.ConstraintSections">
            <summary>List of all constraint sections.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene3DPathSection">
            <summary>A 3D Path section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DPathSection.TimingCurve">
            <summary>Timing Curve</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DPathSection.bFollow">
            <summary>Follow Curve</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DPathSection.bReverse">
            <summary>Reverse Timing</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DPathSection.bForceUpright">
            <summary>Force Upright</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScene3DTransformSection">
            <summary>A 3D transform section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DTransformSection.Translation">
            <summary>Translation curves</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DTransformSection.Rotation">
            <summary>Rotation curves</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScene3DTransformSection.Scale">
            <summary>Scale curves</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneActorReferenceSection">
            <summary>A single actor reference point section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneActorReferenceSection.ActorGuidIndexCurve">
            <summary>Curve data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneAudioSection">
            <summary>Audio section, for use in the master audio, or by attached audio objects</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.Sound">
            <summary>The sound cue or wave that this section plays</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.StartOffset">
            <summary>The offset into the beginning of the audio clip</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.AudioStartTime">
            <summary>The absolute time that the sound starts playing at</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.AudioDilationFactor">
            <summary>The amount which this audio is time dilated by</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.AudioVolume">
            <summary>The volume the sound will be played with.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.SoundVolume">
            <summary>The volume the sound will be played with.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.PitchMultiplier">
            <summary>The pitch multiplier the sound will be played with.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioSection.bShowIntensity">
            <summary>Whether to show the actual intensity of the wave on the thumbnail, as well as the smoothed RMS</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneAudioTrack">
            <summary>Handles manipulation of audio.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneAudioTrack.AudioSections">
            <summary>List of all master audio sections</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneBindingOverrides">
            <summary>A one-to-many definition of movie scene object binding IDs to overridden objects that should be bound to that binding.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneBindingOverrides.BindingData">
            <summary>The actual binding data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneBoolSection">
            <summary>A single bool section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneBoolSection.DefaultValue">
            <summary>The default value to use when no keys are present - use GetCurve().SetDefaultValue()</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneBoolSection.BoolCurve">
            <summary>
            Ordered curve data // @todo Sequencer This could be optimized by packing the bools separately
            // but that may not be worth the effort
            </summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneByteSection">
            <summary>A single byte section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneByteSection.ByteCurve">
            <summary>
            Ordered curve data // @todo Sequencer This could be optimized by packing the bytes separately
            // but that may not be worth the effort
            </summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneByteTrack">
            <summary>Handles manipulation of byte properties in a movie scene</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCameraAnimSection.CameraAnim">
            <summary>Deprecated members</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCameraAnimTrack.CameraAnimSections">
            <summary>List of all sections</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneCameraCutSection">
            <summary>Movie CameraCuts are sections on the CameraCuts track, that show what the viewer "sees"</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCameraCutSection.CameraGuid">
            <summary>The camera possessable or spawnable that this movie CameraCut uses</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCameraCutSection.ThumbnailReferenceOffset">
            <summary>The reference frame offset for single thumbnail rendering</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneCameraCutTrack">
            <summary>Handles manipulation of CameraCut properties in a movie scene.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCameraCutTrack.Sections">
            <summary>All movie scene sections.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCameraShakeTrack.CameraShakeSections">
            <summary>List of all sections</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneCinematicShotSection">
            <summary>Implements a cinematic shot section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCinematicShotSection.DisplayName">
            <summary>The Shot's display name</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneCinematicShotSection.ThumbnailReferenceOffset">
            <summary>The shot's reference frame offset for single thumbnail rendering</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneColorSection">
            <summary>A single floating point section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneColorSection.RedCurve">
            <summary>Red curve data</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneColorSection.GreenCurve">
            <summary>Green curve data</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneColorSection.BlueCurve">
            <summary>Blue curve data</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneColorSection.AlphaCurve">
            <summary>Alpha curve data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneColorTrack">
            <summary>Handles manipulation of float properties in a movie scene</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneComponentMaterialTrack">
            <summary>A material track which is specialized for animation materials which are owned by actor components.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneComponentMaterialTrack.MaterialIndex">
            <summary>The index of this material this track is animating.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneEnumSection">
            <summary>A single enum section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneEnumSection.EnumCurve">
            <summary>
            Ordered curve data // @todo Sequencer This could be optimized by packing the enums separately
            // but that may not be worth the effort
            </summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneEnumTrack">
            <summary>Handles manipulation of byte properties in a movie scene</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneEventSection">
            <summary>Implements a section in movie scene event tracks.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneEventTrack">
            <summary>Implements a movie scene track that triggers discrete events during playback.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneEventTrack.bFireEventsWhenForwards">
            <summary>If events should be fired when passed playing the sequence forwards.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneEventTrack.bFireEventsWhenBackwards">
            <summary>If events should be fired when passed playing the sequence backwards.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneEventTrack.Sections">
            <summary>The track's sections.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneFadeSection">
            <summary>A single floating point section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFadeSection.FadeColor">
            <summary>Fade color.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFadeSection.bFadeAudio">
            <summary>Fade audio.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneFloatSection">
            <summary>A single floating point section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFloatSection.FloatCurve">
            <summary>Curve data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneFolder">
            <summary>Reprents a folder used for organizing objects in tracks in a movie scene.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFolder.FolderName">
            <summary>The name of this folder.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFolder.ChildFolders">
            <summary>The folders contained by this folder.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFolder.ChildMasterTracks">
            <summary>The master tracks contained by this folder.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFolder.ChildObjectBindingStrings">
            <summary>The guid strings used to serialize the guids for the object bindings contained by this folder.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneFolder.FolderColor">
            <summary>This folder's color</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneIntegerSection">
            <summary>A single integer section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneIntegerSection.IntegerCurve">
            <summary>Ordered curve data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneLevelVisibilitySection">
            <summary>A section for use with the movie scene level visibility track, which controls streamed level visibility.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneLevelVisibilitySection.LevelNames">
            <summary>The short names of the levels who's visibility is controlled by this section.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneLevelVisibilityTrack">
            <summary>A track for controlling the visibility of streamed levels.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneMarginSection">
            <summary>A section in a Margin track</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneMarginSection.TopCurve">
            <summary>Red curve data</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneMarginSection.LeftCurve">
            <summary>Green curve data</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneMarginSection.RightCurve">
            <summary>Blue curve data</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneMarginSection.BottomCurve">
            <summary>Alpha curve data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneMaterialTrack">
            <summary>Handles manipulation of material parameters in a movie scene.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneMaterialTrack.Sections">
            <summary>The sections owned by this track .</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneNameableTrack">
            <summary>Base class for movie scene tracks that can be renamed by the user.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneNameableTrack.DisplayName">
            <summary>The track's human readable display name.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneParameterSection">
            <summary>A single movie scene section which can contain data for multiple named parameters.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneParameterSection.ScalarParameterNamesAndCurves">
            <summary>The scalar parameter names and their associated curves.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneParameterSection.VectorParameterNamesAndCurves">
            <summary>The vector parameter names and their associated curves.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneParameterSection.ColorParameterNamesAndCurves">
            <summary>The vector parameter names and their associated curves.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneParticleParameterTrack">
            <summary>Handles manipulation of material parameters in a movie scene.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneParticleParameterTrack.Sections">
            <summary>The sections owned by this track .</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneParticleSection">
            <summary>Particle section, for particle toggling and triggering.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneParticleSection.ParticleKeys">
            <summary>Curve containing the particle keys.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneParticleTrack">
            <summary>Handles triggering of particle emitters</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneParticleTrack.ParticleSections">
            <summary>List of all particle sections.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieScenePropertyTrack">
            <summary>Base class for tracks that animate an object property</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScenePropertyTrack.PropertyName">
            <summary>Name of the property being changed</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScenePropertyTrack.PropertyPath">
            <summary>Path to the property from the source object being changed</summary>
        </member>
        <member name="P:UnrealEngine.UMovieScenePropertyTrack.Sections">
            <summary>All the sections in this list</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSection">
            <summary>Base class for movie scene sections</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.StartTime">
            <summary>The start time of the section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.EndTime">
            <summary>The end time of the section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.RowIndex">
            <summary>The row index that this section sits on</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.OverlapPriority">
            <summary>This section's priority over overlapping sections</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.bIsActive">
            <summary>Toggle whether this section is active/inactive</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.bIsLocked">
            <summary>Toggle whether this section is locked/unlocked</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSection.bIsInfinite">
            <summary>Toggle to set this section to be infinite</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSequence">
            <summary>Abstract base class for movie scene animations (C++ version).</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequence.bParentContextsAreSignificant">
            <summary>
            true if the result of GetParentObject is significant in object resolution for LocateBoundObjects.
            When true, if GetParentObject returns nullptr, the PlaybackContext will be used for LocateBoundObjects, other wise the object's parent will be used
            When false, the PlaybackContext will always be used for LocateBoundObjects
            </summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSequencePlayer">
            <summary>Abstract class that provides consistent player behaviour for various animation players</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.OnPlay">
            <summary>Event triggered when the level sequence player is played</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.OnStop">
            <summary>Event triggered when the level sequence player is stopped</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.OnPause">
            <summary>Event triggered when the level sequence player is paused</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.bIsPlaying">
            <summary>Whether we're currently playing. If false, then sequence playback is paused or was never started.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.bReversePlayback">
            <summary>Whether we're currently playing in reverse.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.bPendingFirstUpdate">
            <summary>True where we're waiting for the first update of the sequence after calling StartPlayingNextTick.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.Sequence">
            <summary>The sequence to play back</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.TimeCursorPosition">
            <summary>The current time cursor position within the sequence (in seconds)</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.StartTime">
            <summary>Time time at which to start playing the sequence (defaults to the lower bound of the sequence's play range)</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.EndTime">
            <summary>Time time at which to end playing the sequence (defaults to the upper bound of the sequence's play range)</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.CurrentNumLoops">
            <summary>The number of times we have looped in the current playback</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSequencePlayer.PlaybackSettings">
            <summary>Specific playback settings for the animation.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSkeletalAnimationSection">
            <summary>Movie scene section that control skeletal animation</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSkeletalAnimationTrack">
            <summary>Handles animation of skeletal mesh actors</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSkeletalAnimationTrack.AnimationSections">
            <summary>List of all animation sections</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSpawnTrack">
            <summary>Handles when a spawnable should be spawned and destroyed</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSpawnTrack.Sections">
            <summary>All the sections in this track</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSpawnTrack.ObjectGuid">
            <summary>The guid relating to the object we are to spawn and destroy</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneStringSection">
            <summary>A single string section</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneStringSection.StringCurve">
            <summary>Curve data</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSubSection">
            <summary>Implements a section in sub-sequence tracks.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSubSection.SubSequence">
            <summary>
            Movie scene being played by this section.
            @todo Sequencer: Should this be lazy loaded?
            </summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSubSection.TargetSequenceName">
            <summary>Target name of sequence to try to record to (will record automatically to another if this already exists)</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSubSection.TargetPathToRecordTo">
            <summary>Target path of sequence to record to</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneSubTrack">
            <summary>A track that holds sub-sequences within a larger sequence.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneSubTrack.Sections">
            <summary>All movie scene sections.</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneTrack">
            <summary>Base class for a track in a Movie Scene</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneTrack.EvalOptions">
            <summary>General evaluation options for a given track</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneTrack.TrackTint">
            <summary>This track's tint color</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneVectorSection">
            <summary>A vector section.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneVectorSection.Curves">
            <summary>Vector t</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneVectorSection.ChannelsUsed">
            <summary>How many curves are actually used</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneVectorTrack">
            <summary>Handles manipulation of component transforms in a movie scene</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneVectorTrack.NumChannelsUsed">
            <summary>The number of channels used by the vector (2,3, or 4)</summary>
        </member>
        <member name="T:UnrealEngine.UMovieSceneWidgetMaterialTrack">
            <summary>A material track which is specialized for materials which are owned by widget brushes.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneWidgetMaterialTrack.BrushPropertyNamePath">
            <summary>The name of the brush property which will be animated by this track.</summary>
        </member>
        <member name="P:UnrealEngine.UMovieSceneWidgetMaterialTrack.TrackName">
            <summary>The name of this track, generated from the property name path.</summary>
        </member>
        <member name="T:UnrealEngine.UMultiLineEditableText">
            <summary>Editable text box widget</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.Text">
            <summary>The text content for this editable text box widget</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.HintText">
            <summary>Hint text that appears when there is no text in the text box</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.WidgetStyle">
            <summary>The style</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.Font">
            <summary>Font color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.AllowContextMenu">
            <summary>Whether the context menu can be opened</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.OnTextChanged">
            <summary>Called whenever the text is changed interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableText.OnTextCommitted">
            <summary>Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus.</summary>
        </member>
        <member name="T:UnrealEngine.UMultiLineEditableTextBox">
            <summary>Allows a user to enter multiple lines of text</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.Text">
            <summary>The text content for this editable text box widget</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.HintText">
            <summary>Hint text that appears when there is no text in the text box</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.WidgetStyle">
            <summary>The style</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.TextStyle">
            <summary>The text style</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.AllowContextMenu">
            <summary>Whether the context menu can be opened</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.Font">
            <summary>Font color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.ForegroundColor">
            <summary>Text color and opacity (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.BackgroundColor">
            <summary>The color of the background/border around the editable text (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.ReadOnlyForegroundColor">
            <summary>Text color and opacity when read-only (overrides Style)</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.OnTextChanged">
            <summary>Called whenever the text is changed interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UMultiLineEditableTextBox.OnTextCommitted">
            <summary>Called whenever the text is committed.  This happens when the user presses enter or the text box loses focus.</summary>
        </member>
        <member name="T:UnrealEngine.UNavArea">
            <summary>Class containing definition of a navigation area</summary>
        </member>
        <member name="P:UnrealEngine.UNavArea.DefaultCost">
            <summary>travel cost multiplier for path distance</summary>
        </member>
        <member name="P:UnrealEngine.UNavArea.FixedAreaEnteringCost">
            <summary>entering cost</summary>
        </member>
        <member name="P:UnrealEngine.UNavArea.DrawColor">
            <summary>area color in navigation view</summary>
        </member>
        <member name="P:UnrealEngine.UNavArea.SupportedAgents">
            <summary>restrict area only to specified agents</summary>
        </member>
        <member name="P:UnrealEngine.UNavArea.bSupportsAgent0">
            <summary>DEPRECATED AGENT CONFIG</summary>
        </member>
        <member name="T:UnrealEngine.UNavAreaMeta_SwitchByAgent">
            <summary>Class containing definition of a navigation area</summary>
        </member>
        <member name="P:UnrealEngine.UNavCollision.CylinderCollision">
            <summary>list of nav collision cylinders</summary>
        </member>
        <member name="P:UnrealEngine.UNavCollision.BoxCollision">
            <summary>list of nav collision boxes</summary>
        </member>
        <member name="P:UnrealEngine.UNavCollision.AreaClass">
            <summary>navigation area type (empty = default obstacle)</summary>
        </member>
        <member name="P:UnrealEngine.UNavCollision.bIsDynamicObstacle">
            <summary>If set, mesh will be used as dynamic obstacle (don't create navmesh on top, much faster adding/removing)</summary>
        </member>
        <member name="P:UnrealEngine.UNavCollision.bGatherConvexGeometry">
            <summary>If set, convex collisions will be exported offline for faster runtime navmesh building (increases memory usage)</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationDataChunk.NavigationDataName">
            <summary>Name of NavigationData actor that owns this chunk</summary>
        </member>
        <member name="T:UnrealEngine.UNavigationPath">
            <summary>UObject wrapper for FNavigationPath</summary>
        </member>
        <member name="T:UnrealEngine.UNavigationQueryFilter">
            <summary>Class containing definition of a navigation query filter</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationQueryFilter.Areas">
            <summary>list of overrides for navigation areas</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationQueryFilter.IncludeFlags">
            <summary>required flags of navigation nodes</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationQueryFilter.ExcludeFlags">
            <summary>forbidden flags of navigation nodes</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.AbstractNavData">
            <summary>special navigation data for managing direct paths, not part of NavDataSet!</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.bAutoCreateNavigationData">
            <summary>Should navigation system spawn default Navigation Data when there's none and there are navigation bounds present?</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.bSupportRebuilding">
            <summary>
            gets set to true if gathering navigation data (like in navoctree) is required due to the need of navigation generation
                Is always true in Editor Mode. In other modes it depends on bRebuildAtRuntime of every required NavigationData class' CDO
            </summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.bInitialBuildingLocked">
            <summary>
            if set to true will result navigation system not rebuild navigation until
                a call to ReleaseInitialBuildingLock() is called. Does not influence
                editor-time generation (i.e. does influence PIE and Game).
                Defaults to false.
            </summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.bSkipAgentHeightCheckWhenPickingNavData">
            <summary>
            false by default, if set to true will result in not caring about nav agent height
                when trying to match navigation data to passed in nav agent
            </summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.bGenerateNavigationOnlyAroundNavigationInvokers">
            <summary>
            If set to true navigation will be generated only around registered "navigation enforcers"
                 This has a range of consequences (including how navigation octree operates) so it needs to
                 be a conscious decision.
                 Once enabled results in whole world being navigable.
                 @see RegisterNavigationInvoker
            </summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.ActiveTilesUpdateInterval">
            <summary>Minimal time, in seconds, between active tiles set update</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.DirtyAreasUpdateFreq">
            <summary>update frequency for dirty areas on navmesh</summary>
        </member>
        <member name="P:UnrealEngine.UNavigationSystem.OnNavDataRegisteredEvent">
            <summary>BlueprintAssignable,</summary>
        </member>
        <member name="T:UnrealEngine.UNavLinkCustomComponent">
            <summary>
            Encapsulates NavLinkCustomInterface interface, can be used with Actors not relevant for navigation
            Additional functionality:
            - can be toggled
            - can create obstacle area for easier/forced separation of link end points
            - can broadcast state changes to nearby agents
            </summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.NavLinkUserId">
            <summary>link Id assigned by navigation system</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.EnabledAreaClass">
            <summary>area class to use when link is enabled</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.DisabledAreaClass">
            <summary>area class to use when link is disabled</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.LinkRelativeStart">
            <summary>start point, relative to owner</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.LinkRelativeEnd">
            <summary>end point, relative to owner</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.LinkDirection">
            <summary>direction of link</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.bLinkEnabled">
            <summary>is link currently in enabled state? (area class)</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.bNotifyWhenEnabled">
            <summary>should link notify nearby agents when it changes state to enabled</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.bNotifyWhenDisabled">
            <summary>should link notify nearby agents when it changes state to disabled</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.bCreateBoxObstacle">
            <summary>if set, box obstacle area will be added to generation</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.ObstacleOffset">
            <summary>offset of simple box obstacle</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.ObstacleExtent">
            <summary>extent of simple box obstacle</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.ObstacleAreaClass">
            <summary>area class for simple box obstacle</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.BroadcastRadius">
            <summary>radius of state change broadcast</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.BroadcastInterval">
            <summary>interval for state change broadcast (0 = single broadcast)</summary>
        </member>
        <member name="P:UnrealEngine.UNavLinkCustomComponent.BroadcastChannel">
            <summary>trace channel for state change broadcast</summary>
        </member>
        <member name="T:UnrealEngine.UNavLinkDefinition">
            <summary>Class containing definition of a navigation area</summary>
        </member>
        <member name="P:UnrealEngine.UNavModifierComponent.FailsafeExtent">
            <summary>box extent used ONLY when owning actor doesn't have collision component</summary>
        </member>
        <member name="T:UnrealEngine.UNavMovementComponent">
            <summary>NavMovementComponent defines base functionality for MovementComponents that move any 'agent' that may be involved in AI pathfinding.</summary>
        </member>
        <member name="P:UnrealEngine.UNavMovementComponent.NavAgentProps">
            <summary>Properties that define how the component can move.</summary>
        </member>
        <member name="P:UnrealEngine.UNavMovementComponent.FixedPathBrakingDistance">
            <summary>Braking distance override used with acceleration driven path following (bUseAccelerationForPaths)</summary>
        </member>
        <member name="P:UnrealEngine.UNavMovementComponent.bUpdateNavAgentWithOwnersCollision">
            <summary>If set to true NavAgentProps' radius and height will be updated with Owner's collision capsule size</summary>
        </member>
        <member name="P:UnrealEngine.UNavMovementComponent.bUseAccelerationForPaths">
            <summary>If set, pathfollowing will control character movement via acceleration values. If false, it will set velocities directly.</summary>
        </member>
        <member name="P:UnrealEngine.UNavMovementComponent.bUseFixedBrakingDistanceForPaths">
            <summary>If set, FixedPathBrakingDistance will be used for path following deceleration</summary>
        </member>
        <member name="P:UnrealEngine.UNavMovementComponent.MovementState">
            <summary>Expresses runtime state of character's movement. Put all temporal changes to movement properties here</summary>
        </member>
        <member name="P:UnrealEngine.UNavRelevantComponent.bAttachToOwnersRoot">
            <summary>attach navigation data to entry for owner's root component (depends on its relevancy)</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.Children">
            <summary>child connections for secondary viewports</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.Driver">
            <summary>Owning net driver</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.PackageMap">
            <summary>Package map between local and remote. (negotiates net serialization)</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.OpenChannels">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.SentTemporaries">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.ViewTarget">
            <summary>The actor that is currently being viewed/controlled by the owning controller</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.OwningActor">
            <summary>Reference to controlling actor (usually PlayerController)</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.InternalAck">
            <summary>Maximum packet size.</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.PlayerId">
            <summary>Net id of remote player on this connection. Only valid on client connections (server side).</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.LastReceiveTime">
            <summary>Internal.</summary>
        </member>
        <member name="P:UnrealEngine.UNetConnection.ChannelsToTick">
            <summary>
            The channels that need ticking. This will be a subset of OpenChannels, only including
            channels that need to process either dormancy or queued bunches. Should be a significant
            optimization over ticking and calling virtual functions on the potentially hundreds of
            OpenChannels every frame.
            </summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.NetConnectionClassName">
            <summary>Used to specify the class to use for connections</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.MaxDownloadSize">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.bClampListenServerTickRate">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.NetServerMaxTickRate">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.MaxInternetClientRate">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.MaxClientRate">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.ServerTravelPause">
            <summary>Amount of time a server will wait before traveling to next map, gives clients time to receive final RPCs on existing level @see NextSwitchCountdown</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.SpawnPrioritySeconds">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.RelevantTimeout">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.KeepAliveTime">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.InitialConnectTimeout">
            <summary>Amount of time to wait for a new net connection to be established before destroying the connection</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.ConnectionTimeout">
            <summary>
            Amount of time to wait before considering an established connection timed out.
            Typically shorter than the time to wait on a new connection because this connection
            should already have been setup and any interruption should be trapped quicker.
            </summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.bNoTimeouts">
            <summary>If true, ignore timeouts completely.  Should be used only in development</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.ServerConnection">
            <summary>Connection to the server (this net driver is a client)</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.ClientConnections">
            <summary>Array of connections to clients (this net driver is a host)</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.World">
            <summary>World this net driver is associated with</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.NetConnectionClass">
            <summary>The loaded UClass of the net connection type to use</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.RoleProperty">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.RemoteRoleProperty">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.NetDriverName">
            <summary>Used to specify the net driver to filter actors with (NAME_None || NAME_GameNetDriver is the default net driver)</summary>
        </member>
        <member name="P:UnrealEngine.UNetDriver.Time">
            <summary>Accumulated time for the net driver, updated by Tick</summary>
        </member>
        <member name="T:UnrealEngine.UNetworkSettings">
            <summary>Network settings.</summary>
        </member>
        <member name="P:UnrealEngine.UNetworkSettings.bVerifyPeer">
            <summary>If true, libcurl authenticates the peer's certificate. Disable to allow self-signed certificates.</summary>
        </member>
        <member name="P:UnrealEngine.UNetworkSettings.bEnableMultiplayerWorldOriginRebasing">
            <summary>If true, origin rebasing is enabled in multiplayer games, meaning that servers and clients can have different local world origins.</summary>
        </member>
        <member name="P:UnrealEngine.UNetworkSettings.MaxRepArraySize">
            <summary>Maximum allowable size for replicated dynamic arrays (in number of elements). Must be between 1 and 65535.</summary>
        </member>
        <member name="P:UnrealEngine.UNetworkSettings.MaxRepArrayMemory">
            <summary>Maximum allowable size for replicated dynamic arrays (in bytes).  Must be between 1 and 65535.</summary>
        </member>
        <member name="M:UnrealEngine.UObject.TypeClass(System.Type)">
            <summary>
            ·µ»ØÀàÐÍµÄUClassÀà
            </summary>
            <param name="type">±ØÐë¼Ì³ÐÓÚUObject</param>
            <returns></returns>
        </member>
        <member name="M:UnrealEngine.UObject.TypeClass``1">
            <summary>
            ·µ»Ø·ºÐÍTµÄUClass
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnrealEngine.UObject.Cast``1(UnrealEngine.UObject)">
            <summary>
            ÀàÐÍ×ª»»¡£
            ×¢Òâ£ºÈç¹ûT·ÇUMonoActorComponent×ÓÀà£¬Õâ¸ö·½·¨¿ÉÄÜ·µ»ØÐÂ¶ÔÏó¡£
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:UnrealEngine.UObjectLibrary">
            <summary>Class that holds a library of Objects</summary>
        </member>
        <member name="P:UnrealEngine.UObjectLibrary.ObjectBaseClass">
            <summary>Class that Objects must be of. If ContainsBlueprints is true, this is the native class that the blueprints are instances of and not UClass</summary>
        </member>
        <member name="P:UnrealEngine.UObjectLibrary.bHasBlueprintClasses">
            <summary>True if this library holds blueprint classes, false if it holds other objects</summary>
        </member>
        <member name="P:UnrealEngine.UObjectLibrary.Objects">
            <summary>List of Objects in library</summary>
        </member>
        <member name="P:UnrealEngine.UObjectLibrary.bUseWeakReferences">
            <summary>If this library should use weak pointers</summary>
        </member>
        <member name="P:UnrealEngine.UObjectLibrary.bIsFullyLoaded">
            <summary>True if we've already fully loaded this library, can't do it twice</summary>
        </member>
        <member name="T:UnrealEngine.UOverlaySlot">
            <summary>Slot for the UOverlay panel.  Allows content to be hover above other content.</summary>
        </member>
        <member name="P:UnrealEngine.UOverlaySlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UOverlaySlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UOverlaySlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UPanelSlot">
            <summary>The base class for all Slots in UMG.</summary>
        </member>
        <member name="T:UnrealEngine.UPanelWidget">
            <summary>The base class for all UMG panel widgets.  Panel widgets layout a collection of child widgets.</summary>
        </member>
        <member name="P:UnrealEngine.UPanelWidget.Slots">
            <summary>The slots in the widget holding the child widgets of this panel.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.EmitterName">
            <summary>The name of the emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.EmitterRenderMode">
            <summary>
            How to render the emitter particles. Can be one of the following:
                    ERM_Normal      - As the intended sprite/mesh
                    ERM_Point       - As a 2x2 pixel block with no scaling and the color set in EmitterEditorColor
                    ERM_Cross       - As a cross of lines, scaled to the size of the particle in EmitterEditorColor
                    ERM_None        - Do not render
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.EmitterEditorColor">
            <summary>The color of the emitter in the curve editor and debug rendering modes.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.LODLevels">
            <summary>'Private' data - not required by the editor</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.InitialAllocationCount">
            <summary>Initial allocation count - overrides calculated peak count if > 0</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.MediumDetailSpawnRateScale">
            <summary>
            Scales the spawn rate of this emitter when the engine is running in medium or low detail mode.
            This can be used to optimize particle draw cost in splitscreen.
            A value of 0 effectively disables this emitter outside of high detail mode,
            And this does not affect spawn per unit, unless the value is 0.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.DetailMode">
            <summary>If detail mode is >= system detail mode, primitive won't be rendered.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.bCollapsed">
            <summary>This value indicates the emitter should be drawn 'collapsed' in Cascade</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.bIsSoloing">
            <summary>If true, then show only this emitter in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.bCookedOut">
            <summary>
            If true, then this emitter was 'cooked out' by the cooker.
            This means it was completely disabled, but to preserve any
            indexing schemes, it is left in place.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.bDisabledLODsKeepEmitterAlive">
            <summary>When true, if the current LOD is disabled the emitter will be kept alive. Otherwise, the emitter will be considered complete if the current LOD is disabled.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleEmitter.bDisableWhenInsignficant">
            <summary>When true, emitters deemed insignificant will have their tick and render disabled Instantly. When false they will simple stop spawning new particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.Level">
            <summary>The index value of the LOD level</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.bEnabled">
            <summary>True if the LOD level is enabled, meaning it should be updated and rendered.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.RequiredModule">
            <summary>The required module for this LOD level</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.Modules">
            <summary>An array of particle modules that contain the adjusted data for the LOD level</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UParticleLODLevel.TypeDataModule" -->
        <member name="P:UnrealEngine.UParticleLODLevel.SpawnModule">
            <summary>The SpawnRate/Burst module - required by all emitters.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.EventGenerator">
            <summary>The optional EventGenerator module.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.SpawningModules">
            <summary>SpawningModules - These are called to determine how many particles to spawn.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.SpawnModules">
            <summary>SpawnModules - These are called when particles are spawned.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.UpdateModules">
            <summary>UpdateModules - These are called when particles are updated.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.OrbitModules">
            <summary>
            OrbitModules
                These are used to do offsets of the sprite from the particle location.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleLODLevel.EventReceiverModules">
            <summary>Event receiver modules only!</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bSpawnModule">
            <summary>If true, the module performs operations on particles during Spawning</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bUpdateModule">
            <summary>If true, the module performs operations on particles during Updating</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bFinalUpdateModule">
            <summary>If true, the module performs operations on particles during final update</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bUpdateForGPUEmitter">
            <summary>If true, the module performs operations on particles during update and/or final update for GPU emitters</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bCurvesAsColor">
            <summary>If true, the module displays FVector curves as colors</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.b3DDrawMode">
            <summary>If true, the module should render its 3D visualization helper</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bSupported3DDrawMode">
            <summary>If true, the module supports rendering a 3D visualization helper</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bEnabled">
            <summary>If true, the module is enabled</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bEditable">
            <summary>If true, the module has had editing enabled on it</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.LODDuplicate">
            <summary>
            If true, this flag indicates that auto-generation for LOD will result in
            an exact duplicate of the module, regardless of the percentage.
            If false, it will result in a module with different settings.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bSupportsRandomSeed">
            <summary>If true, the module supports RandomSeed setting</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModule.bRequiresLoopingNotification">
            <summary>If true, the module should be told when looping</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UParticleModule.LODValidity" -->
        <member name="P:UnrealEngine.UParticleModule.ModuleEditorColor">
            <summary>
            The color to draw the modules curves in the curve editor.
                If bCurvesAsColor is true, it overrides this value.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAcceleration.Acceleration">
            <summary>
            The initial acceleration of the particle.
            Value is obtained using the EmitterTime at particle spawn.
            Each frame, the current and base velocity of the particle
            is then updated using the formula
                    velocity += acceleration * DeltaTime
            where DeltaTime is the time passed since the last frame.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAcceleration.bApplyOwnerScale">
            <summary>
            If true, then apply the particle system components scale
            to the acceleration value.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAccelerationDrag.DragCoefficient">
            <summary>Per-particle drag coefficient. Evaluted using emitter time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAccelerationDrag.DragCoefficientRaw">
            <summary>Per-particle drag coefficient. Evaluted using emitter time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAccelerationDragScaleOverLife.DragScale">
            <summary>Per-particle drag scale. Evaluted using particle relative time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAccelerationDragScaleOverLife.DragScaleRaw">
            <summary>Per-particle drag scale. Evaluted using particle relative time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAccelerationOverLifetime.AccelOverLife">
            <summary>
            The acceleration of the particle over its lifetime.
            Value is obtained using the RelativeTime of the partice.
            The current and base velocity values of the particle
            are then updated using the formula
                    velocity += acceleration* DeltaTime
            where DeltaTime is the time passed since the last frame.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorLine.EndPoint0">
            <summary>The first endpoint of the line.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorLine.EndPoint1">
            <summary>The second endpoint of the line.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorLine.Range">
            <summary>The range of the line attractor.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorLine.Strength">
            <summary>The strength of the line attractor.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.EmitterName">
            <summary>The source emitter for attractors</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.Range">
            <summary>
            The radial range of the attraction around the source particle.
            Particle-life relative.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.bStrengthByDistance">
            <summary>The strength curve is a function of distance or of time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.Strength">
            <summary>
            The strength of the attraction (negative values repel).
            Particle-life relative if StrengthByDistance is false.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.bAffectBaseVelocity">
            <summary>If true, the velocity adjustment will be applied to the base velocity.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.SelectionMethod">
            <summary>
            The method to use when selecting an attractor target particle from the emitter.
            One of the following:
            Random          - Randomly select a particle from the source emitter.
            Sequential  - Select a particle using a sequential order.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.bRenewSource">
            <summary>Whether the particle should grab a new particle if it's source expires.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorParticle.bInheritSourceVel">
            <summary>Whether the particle should inherit the source veloctiy if it expires.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Position">
            <summary>The position of the point attractor from the source of the emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Range">
            <summary>The radial range of the attractor.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Strength">
            <summary>The strength of the point attractor.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.StrengthByDistance">
            <summary>The strength curve is a function of distance or of time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.bAffectBaseVelocity">
            <summary>If true, the velocity adjustment will be applied to the base velocity.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.bOverrideVelocity">
            <summary>If true, set the velocity.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.bUseWorldSpacePosition">
            <summary>If true, treat the position as world space.  So don't transform the the point to localspace.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Positive_X">
            <summary>Whether particles can move along the positive X axis.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Positive_Y">
            <summary>Whether particles can move along the positive Y axis.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Positive_Z">
            <summary>Whether particles can move along the positive Z axis.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Negative_X">
            <summary>Whether particles can move along the negative X axis.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Negative_Y">
            <summary>Whether particles can move along the negative Y axis.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleAttractorPoint.Negative_Z">
            <summary>Whether particles can move along the negative Z axis.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bLowFreq_Enabled">
            <summary>Is low frequency noise enabled.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.Frequency">
            <summary>The frequency of noise points.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.Frequency_LowRange">
            <summary>
            If not 0, then the frequency will select a random value in the range
                    [Frequency_LowRange..Frequency]
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseRange">
            <summary>The noise point ranges.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseRangeScale">
            <summary>A scale factor that will be applied to the noise range.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bNRScaleEmitterTime">
            <summary>
            If true,  the NoiseRangeScale will be grabbed based on the emitter time.
            If false, the NoiseRangeScale will be grabbed based on the particle time.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseSpeed">
            <summary>The speed with which to move each noise point.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bSmooth">
            <summary>Whether the noise movement should be smooth or 'jerky'.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseLockRadius">
            <summary>Default target-point information to use if the beam method is endpoint.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bNoiseLock">
            <summary>INTERNAL - Whether the noise points should be locked.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bOscillate">
            <summary>Whether the noise points should be oscillate.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseLockTime">
            <summary>How long the  noise points should be locked - 0.0 indicates forever.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseTension">
            <summary>The tension to apply to the tessellated noise line.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bUseNoiseTangents">
            <summary>If true, calculate tangents at each noise point.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseTangentStrength">
            <summary>The strength of noise tangents, if enabled.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseTessellation">
            <summary>The amount of tessellation between noise points.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bTargetNoise">
            <summary>
            Whether to apply noise to the target point (or end of line in distance mode...)
            If true, the beam could potentially 'leave' the target...
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.FrequencyDistance">
            <summary>
            The distance at which to deposit noise points.
            If 0.0, then use the static frequency value.
            If not, distribute noise points at the given distance, up to the static Frequency value.
            At that point, evenly distribute them along the beam.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.bApplyNoiseScale">
            <summary>If true, apply the noise scale to the beam.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamNoise.NoiseScale">
            <summary>
            The scale factor to apply to noise range.
            The lookup value is determined by dividing the number of noise points present by the
            maximum number of noise points (Frequency).
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.SourceMethod">
            <summary>The method flag.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.SourceName">
            <summary>The strength of the tangent from the source point for each beam.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.bSourceAbsolute">
            <summary>Whether to treat the as an absolute position in world space.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.Source">
            <summary>Default source-point to use.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.bLockSource">
            <summary>Whether to lock the source to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.SourceTangentMethod">
            <summary>The method to use for the source tangent.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.SourceTangent">
            <summary>The tangent for the source point for each beam.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.bLockSourceTangent">
            <summary>Whether to lock the source to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.SourceStrength">
            <summary>The strength of the tangent from the source point for each beam.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamSource.bLockSourceStength">
            <summary>Whether to lock the source to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.TargetMethod">
            <summary>The method flag.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.TargetName">
            <summary>The target point sources of each beam, when using the end point method.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.Target">
            <summary>Default target-point information to use if the beam method is endpoint.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.bTargetAbsolute">
            <summary>Whether to treat the as an absolute position in world space.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.bLockTarget">
            <summary>Whether to lock the Target to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.TargetTangentMethod">
            <summary>The method to use for the Target tangent.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.TargetTangent">
            <summary>The tangent for the Target point for each beam.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.bLockTargetTangent">
            <summary>Whether to lock the Target to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.TargetStrength">
            <summary>The strength of the tangent from the Target point for each beam.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.bLockTargetStength">
            <summary>Whether to lock the Target to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleBeamTarget.LockRadius">
            <summary>Default target-point information to use if the beam method is endpoint.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.DampingFactor">
            <summary>
            How much to `slow' the velocity of the particle after a collision.
            Value is obtained using the EmitterTime at particle spawn.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.DampingFactorRotation">
            <summary>
            How much to `slow' the rotation of the particle after a collision.
            Value is obtained using the EmitterTime at particle spawn.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.MaxCollisions">
            <summary>
            The maximum number of collisions a particle can have.
            Value is obtained using the EmitterTime at particle spawn.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.CollisionCompletionOption">
            <summary>
            What to do once a particles MaxCollisions is reached.
            One of the following:
            EPCC_Kill
                    Kill the particle when MaxCollisions is reached
            EPCC_Freeze
                    Freeze in place, NO MORE UPDATES
            EPCC_HaltCollisions,
                    Stop collision checks, keep updating everything
            EPCC_FreezeTranslation,
                    Stop translations, keep updating everything else
            EPCC_FreezeRotation,
                    Stop rotations, keep updating everything else
            EPCC_FreezeMovement
                    Stop all movement, keep updating
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.CollisionTypes">
            <summary>Which ObjectTypes to collide with</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bApplyPhysics">
            <summary>
            If true, physic will be applied between a particle and the
            object it collides with.
            This is one-way - particle --> object. The particle does
            not have physics applied to it - it just generates an
            impulse applied to the object it collides with.
            NOTE: having this on prevents the code from running off the game thread.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bIgnoreTriggerVolumes">
            <summary>
            Any trigger volumes that are hit will be ignored. NOTE: This can be turned off if the TrigerVolume physics object type is not in the CollisionTypes array.
            Turning this off is strongly recommended as having it on prevents the code from running off the game thread.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.ParticleMass">
            <summary>
            The mass of the particle - for use when bApplyPhysics is true.
            Value is obtained using the EmitterTime at particle spawn.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.DirScalar">
            <summary>
            The directional scalar value - used to scale the bounds to
            'assist' in avoiding inter-penetration or large gaps.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bPawnsDoNotDecrementCount">
            <summary>
            If true, then collisions with Pawns will still react, but
            the UsedMaxCollisions count will not be decremented.
            (ie., They don't 'count' as collisions)
            NOTE: Having this on prevents the code from running in parallel.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bOnlyVerticalNormalsDecrementCount">
            <summary>
            If true, then collisions that do not have a vertical hit
            normal will still react, but UsedMaxCollisions count will
            not be decremented. (ie., They don't 'count' as collisions)
            Useful for having particles come to rest on floors.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.VerticalFudgeFactor">
            <summary>
            The fudge factor to use to determine vertical.
            True vertical will have a Hit.Normal.Z == 1.0
            This will allow for Z components in the range of
            [1.0-VerticalFudgeFactor..1.0]
            to count as vertical collisions.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.DelayAmount">
            <summary>
            How long to delay before checking a particle for collisions.
            Value is retrieved using the EmitterTime.
            During update, the particle flag IgnoreCollisions will be
            set until the particle RelativeTime has surpassed the
            DelayAmount.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bDropDetail">
            <summary>If true, when the World->bDropDetail flag is set, the module will be ignored.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bCollideOnlyIfVisible">
            <summary>If true, Particle collision only if particle system is currently being rendered.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.bIgnoreSourceActor">
            <summary>
            If true, then the source actor is ignored in collision checks.
            Defaults to true.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollision.MaxCollisionDistance">
            <summary>Max distance at which particle collision will occur.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.Resilience">
            <summary>The bounciness of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.ResilienceScaleOverLife">
            <summary>Scales the bounciness of the particle over its life.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.Friction">
            <summary>
            Friction applied to all particles during a collision or while moving
            along a surface.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.RandomSpread">
            <summary>Controls how wide the bouncing particles are distributed (0 = disabled).</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.RandomDistribution">
            <summary>Controls bouncing particles distribution (1 = uniform distribution; 2 = squared distribution).</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.RadiusScale">
            <summary>Scale applied to the size of the particle to obtain the collision radius.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.RadiusBias">
            <summary>Bias applied to the collision radius.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleCollisionGPU.Response">
            <summary>How particles respond to a collision event.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColor.StartColor">
            <summary>Initial color for a particle as a function of Emitter time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColor.StartAlpha">
            <summary>Initial alpha for a particle as a function of Emitter time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColor.bClampAlpha">
            <summary>If true, the alpha value will be clamped to the [0..1] range.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColorOverLife.ColorOverLife">
            <summary>The color to apply to the particle, as a function of the particle RelativeTime.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColorOverLife.AlphaOverLife">
            <summary>The alpha to apply to the particle, as a function of the particle RelativeTime.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColorOverLife.bClampAlpha">
            <summary>If true, the alpha value will be clamped to the [0..1] range.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColorScaleOverLife.ColorScaleOverLife">
            <summary>The scale factor for the color.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColorScaleOverLife.AlphaScaleOverLife">
            <summary>The scale factor for the alpha.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleColorScaleOverLife.bEmitterTime">
            <summary>Whether it is EmitterTime or ParticleTime related.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLifetime.Lifetime">
            <summary>The lifetime of the particle, in seconds. Retrieved using the EmitterTime at the spawn of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.bUseInverseSquaredFalloff">
            <summary>Whether to use physically based inverse squared falloff from the light.  If unchecked, the LightExponent distribution will be used instead.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.bAffectsTranslucency">
            <summary>
            Whether lights from this module should affect translucency.
            Use with caution.  Modules enabling this should only make a few particle lights at most, and the smaller they are, the less they will cost.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.bPreviewLightRadius">
            <summary>
            Will draw wireframe spheres to preview the light radius if enabled.
            Note: this is intended for previewing and the value will not be saved, it will always revert to disabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.SpawnFraction">
            <summary>Fraction of particles in this emitter to create lights on.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.ColorScaleOverLife">
            <summary>Scale that is applied to the particle's color to calculate the light's color, and can be setup as a curve over the particle's lifetime.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.BrightnessOverLife">
            <summary>Brightness scale for the light, which can be setup as a curve over the particle's lifetime.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.RadiusScale">
            <summary>Scales the particle's radius, to calculate the light's radius.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.LightExponent">
            <summary>Provides the light's exponent when inverse squared falloff is disabled.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight.LightingChannels">
            <summary>
            Channels that this light should affect.
            Only affect high quality lights
            These channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLight_Seeded.RandomSeedInfo">
            <summary>The random seed(s) to use for looking up values in StartLocation</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocation.StartLocation">
            <summary>
            The location the particle should be emitted.
            Relative in local space to the emitter by default.
            Relative in world space as a WorldOffset module or when the emitter's UseLocalSpace is off.
            Retrieved using the EmitterTime at the spawn of the particle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocation.DistributeOverNPoints">
            <summary>
            When set to a non-zero value this will force the particles to only spawn on evenly distributed
            positions between the two points specified.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocation.DistributeThreshold">
            <summary>
            When DistributeOverNPoints is set to a non-zero value, this specifies the ratio of particles spawned
            that should use the distribution.  (For example setting this to 1 will cause all the particles to
            be distributed evenly whereas .75 would cause 1/4 of the particles to be randomly placed).
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.SourceType">
            <summary>
            Whether the module uses Bones or Sockets for locations.
            BONESOCKETSOURCE_Bones          - Use Bones as the source locations.
            BONESOCKETSOURCE_Sockets        - Use Sockets as the source locations.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.UniversalOffset">
            <summary>An offset to apply to each bone/socket</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.SourceLocations">
            <summary>The name(s) of the bone/socket(s) to position at. If this is empty, the module will attempt to spawn from all bones or sockets.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.SelectionMethod">
            <summary>
            The method by which to select the bone/socket to spawn at.
            SEL_Sequential                  - loop through the bone/socket array in order
            SEL_Random                              - randomly select a bone/socket from the array
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.bUpdatePositionEachFrame">
            <summary>If true, update the particle locations each frame with that of the bone/socket</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.bOrientMeshEmitters">
            <summary>If true, rotate mesh emitter meshes to orient w/ the socket</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.bInheritBoneVelocity">
            <summary>If true, particles inherit the associated bone velocity when spawned</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.InheritVelocityScale">
            <summary>A scale on how much of the bone's velocity a particle will inherit.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.SkelMeshActorParamName">
            <summary>The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.NumPreSelectedIndices">
            <summary>
            When we have no source locations and we need to track bone velocities due to bInheritBoneVelocity, we pre select a set of bones to use each frame. This property determines how big the list is.
            Too low and the randomness of selection may suffer, too high and memory will be wasted.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationBoneSocket.EditorSkelMesh">
            <summary>The name of the skeletal mesh to use in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationDirect.Location">
            <summary>
            The location of the particle at a give time. Retrieved using the particle RelativeTime.
            IMPORTANT: the particle location is set to this value, thereby over-writing any previous module impacts.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationDirect.LocationOffset">
            <summary>
            An offset to apply to the position retrieved from the Location calculation.
            The offset is retrieved using the EmitterTime.
            The offset will remain constant over the life of the particle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationDirect.ScaleFactor">
            <summary>Scales the velocity of the object at a given point in the time-line.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationDirect.Direction">
            <summary>Currently unused.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitter.EmitterName">
            <summary>The name of the emitter to use that the source location for particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitter.SelectionMethod">
            <summary>
            The method to use when selecting a spawn target particle from the emitter.
            Can be one of the following:
                    ELESM_Random            Randomly select a particle from the source emitter.
                    ELESM_Sequential        Step through each particle from the source emitter in order.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitter.InheritSourceVelocity">
            <summary>If true, the spawned particle should inherit the velocity of the source particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitter.InheritSourceVelocityScale">
            <summary>Amount to scale the source velocity by when inheriting it.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitter.bInheritSourceRotation">
            <summary>If true, the spawned particle should inherit the rotation of the source particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitter.InheritSourceRotationScale">
            <summary>Amount to scale the source rotation by when inheriting it.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationEmitterDirect.EmitterName">
            <summary>The name of the emitter to use as a source for the location of the particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Positive_X">
            <summary>Whether the positive X axis is valid for spawning.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Positive_Y">
            <summary>Whether the positive Y axis is valid for spawning.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Positive_Z">
            <summary>Whether the positive Z axis is valid for spawning.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Negative_X">
            <summary>Whether the negative X axis is valid for spawning.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Negative_Y">
            <summary>Whether the negative Y axis is valid for spawning.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Negative_Z">
            <summary>Whether the negative Zaxis is valid for spawning.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.SurfaceOnly">
            <summary>Whether particles will only spawn on the surface of the primitive.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.Velocity">
            <summary>Whether the particle should get its velocity from the position within the primitive.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.VelocityScale">
            <summary>The scale applied to the velocity. (Only used if 'Velocity' is checked).</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveBase.StartLocation">
            <summary>The location of the bounding primitive relative to the position of the emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveCylinder.RadialVelocity">
            <summary>If true, get the particle velocity form the radial distance inside the primitive.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveCylinder.StartRadius">
            <summary>The radius of the cylinder.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveCylinder.StartHeight">
            <summary>The height of the cylinder, centered about the location.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveCylinder.HeightAxis">
            <summary>
            Determine particle particle system axis that should represent the height of the cylinder.
            Can be one of the following:
              PMLPC_HEIGHTAXIS_X - Orient the height along the particle system X-axis.
              PMLPC_HEIGHTAXIS_Y - Orient the height along the particle system Y-axis.
              PMLPC_HEIGHTAXIS_Z - Orient the height along the particle system Z-axis.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveCylinder_Seeded.RandomSeedInfo">
            <summary>The random seed(s) to use for looking up values in StartLocation</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveSphere.StartRadius">
            <summary>The radius of the sphere. Retrieved using EmitterTime.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationPrimitiveSphere_Seeded.RandomSeedInfo">
            <summary>The random seed(s) to use for looking up values in StartLocation</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.SourceType">
            <summary>
            Whether the module uses Verts or Surfaces for locations.
            VERTSURFACESOURCE_Vert          - Use Verts as the source locations.
            VERTSURFACESOURCE_Surface       - Use Surfaces as the source locations.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.UniversalOffset">
            <summary>An offset to apply to each vert/surface</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.bUpdatePositionEachFrame">
            <summary>If true, update the particle locations each frame with that of the vert/surface</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.bOrientMeshEmitters">
            <summary>If true, rotate mesh emitter meshes to orient w/ the vert/surface</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.bInheritBoneVelocity">
            <summary>If true, particles inherit the associated bone velocity when spawned</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.InheritVelocityScale">
            <summary>A scale on how much of the bone's velocity a particle will inherit.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.SkelMeshActorParamName">
            <summary>The parameter name of the skeletal mesh actor that supplies the SkelMeshComponent for in-game.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.EditorSkelMesh">
            <summary>The name of the skeletal mesh to use in the editor</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.ValidAssociatedBones">
            <summary>This module will only spawn from verts or surfaces associated with the bones in this list</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.bEnforceNormalCheck">
            <summary>When true use the RestrictToNormal and NormalTolerance values to check surface normals</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.NormalToCompare">
            <summary>Use this normal to restrict spawning locations</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.NormalCheckToleranceDegrees">
            <summary>Normal tolerance.  0 degrees means it must be an exact match, 180 degrees means it can be any angle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.NormalCheckTolerance">
            <summary>
            Normal tolerance.  Value between 1.0 and -1.0 with 1.0 being exact match, 0.0 being everything up to
                          perpendicular and -1.0 being any direction or don't restrict at all.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.ValidMaterialIndices">
            <summary>
            Array of material indices that are valid materials to spawn from.
            If empty, any material will be considered valid
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.bInheritVertexColor">
            <summary>If true, particles inherit the associated vertex color on spawn. This feature is not supported for GPU particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.bInheritUV">
            <summary>If true, particles inherit the associated UV data on spawn. Accessed through dynamic parameter module X and Y, must be a "Spawn Time Only" parameter on "AutoSet" mode. This feature is not supported for GPU particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationSkelVertSurface.InheritUVChannel">
            <summary>UV channel to inherit from the spawn mesh, internally clamped to those available.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocationWorldOffset_Seeded.RandomSeedInfo">
            <summary>The random seed(s) to use for looking up values in StartLocation</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleLocation_Seeded.RandomSeedInfo">
            <summary>The random seed(s) to use for looking up values in StartLocation</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleMeshMaterial.MeshMaterials">
            <summary>The array of materials to apply to the mesh particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleMeshRotation.StartRotation">
            <summary>
            Initial rotation in ROTATIONS PER SECOND (1 = 360 degrees).
            The value is retrieved using the EmitterTime.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleMeshRotation.bInheritParent">
            <summary>If true, apply the parents rotation as well.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleMeshRotationRate.StartRotationRate">
            <summary>
            Initial rotation rate, in rotations per second.
            The value is retrieved using the EmitterTime.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.ChainMode">
            <summary>
            Orbit modules will chain together in the order they appear in the module stack.
            The combination of a module with the one prior to it is defined by using one
            of the following enumerations:
                    EOChainMode_Add         Add the values to the previous results
                    EOChainMode_Scale       Multiply the values by the previous results
                    EOChainMode_Link        'Break' the chain and apply the values from the previous results
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.OffsetAmount">
            <summary>The amount to offset the sprite from the particle position.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.OffsetOptions">
            <summary>The options associated with the OffsetAmount look-up.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.RotationAmount">
            <summary>
            The amount (in 'turns') to rotate the offset about the particle position.
                    0.0 = no rotation
                    0.5     = 180 degree rotation
                    1.0 = 360 degree rotation
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.RotationOptions">
            <summary>The options associated with the RotationAmount look-up.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.RotationRateAmount">
            <summary>
            The rate (in 'turns') at which to rotate the offset about the particle positon.
                    0.0 = no rotation
                    0.5     = 180 degree rotation
                    1.0 = 360 degree rotation
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrbit.RotationRateOptions">
            <summary>The options associated with the RotationRateAmount look-up.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleOrientationAxisLock.LockAxisFlags">
            <summary>
            The lock axis flag setting.
            Can be one of the following:
                    EPAL_NONE                       No locking to an axis.
                    EPAL_X                          Lock the sprite facing towards +X.
                    EPAL_Y                          Lock the sprite facing towards +Y.
                    EPAL_Z                          Lock the sprite facing towards +Z.
                    EPAL_NEGATIVE_X         Lock the sprite facing towards -X.
                    EPAL_NEGATIVE_Y         Lock the sprite facing towards -Y.
                    EPAL_NEGATIVE_Z         Lock the sprite facing towards -Z.
                    EPAL_ROTATE_X           Lock the sprite rotation on the X-axis.
                    EPAL_ROTATE_Y           Lock the sprite rotation on the Y-axis.
                    EPAL_ROTATE_Z           Lock the sprite rotation on the Z-axis.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleParameterDynamic.DynamicParams">
            <summary>The dynamic parameters this module uses.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleParameterDynamic.UpdateFlags">
            <summary>Flags for optimizing update</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModulePivotOffset.PivotOffset">
            <summary>Offset applied in UV space to the particle vertex positions. Defaults to (0.5,0.5) putting the pivot in the centre of the partilce.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.Material">
            <summary>The material to utilize for the emitter at this LOD level.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.ScreenAlignment">
            <summary>
            The screen alignment to utilize for the emitter at this LOD level.
            One of the following:
            PSA_FacingCameraPosition - Faces the camera position, but is not dependent on the camera rotation.
                                                                    This method produces more stable particles under camera rotation.
            PSA_Square                      - Uniform scale (via SizeX) facing the camera
            PSA_Rectangle           - Non-uniform scale (via SizeX and SizeY) facing the camera
            PSA_Velocity            - Orient the particle towards both the camera and the direction
                                                      the particle is moving. Non-uniform scaling is allowed.
            PSA_TypeSpecific        - Use the alignment method indicated in the type data module.
            PSA_FacingCameraDistanceBlend - Blends between PSA_FacingCameraPosition and PSA_Square over specified distance.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.MinFacingCameraBlendDistance">
            <summary>The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_Square</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.MaxFacingCameraBlendDistance">
            <summary>The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_FacingCameraPosition</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bUseLocalSpace">
            <summary>If true, update the emitter in local space</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bKillOnDeactivate">
            <summary>If true, kill the emitter when the particle system is deactivated</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bKillOnCompleted">
            <summary>If true, kill the emitter when it completes</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.SortMode">
            <summary>
            The sorting mode to use for this emitter.
            PSORTMODE_None                          - No sorting required.
            PSORTMODE_ViewProjDepth         - Sort by view projected depth of the particle.
            PSORTMODE_DistanceToView        - Sort by distance of particle to view in world space.
            PSORTMODE_Age_OldestFirst       - Sort by age, oldest drawn first.
            PSORTMODE_Age_NewestFirst       - Sort by age, newest drawn first.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bUseLegacyEmitterTime">
            <summary>
            If true, the EmitterTime for the emitter will be calculated by
            modulating the SecondsSinceCreation by the EmitterDuration. As
            this can lead to issues w/ looping and variable duration, a new
            approach has been implemented.
            If false, this new approach is utilized, and the EmitterTime is
            simply incremented by DeltaTime each tick. When the emitter
            loops, it adjusts the EmitterTime by the current EmitterDuration
            resulting in proper looping/delay behavior.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bRemoveHMDRoll">
            <summary>If true, removes the HMD view roll (e.g. in VR)</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.EmitterDuration">
            <summary>How long, in seconds, the emitter will run before looping.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.EmitterDurationLow">
            <summary>The low end of the emitter duration if using a range.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bEmitterDurationUseRange">
            <summary>
            If true, select the emitter duration from the range
                    [EmitterDurationLow..EmitterDuration]
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bDurationRecalcEachLoop">
            <summary>If true, recalculate the emitter duration on each loop.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.EmitterLoops">
            <summary>
            The number of times to loop the emitter.
                0 indicates loop continuously
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.SpawnRate">
            <summary>The rate at which to spawn particles</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.ParticleBurstMethod">
            <summary>The method to utilize when burst-emitting particles</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.BurstList">
            <summary>The array of burst entries.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.EmitterDelay">
            <summary>Indicates the time (in seconds) that this emitter should be delayed in the particle system.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.EmitterDelayLow">
            <summary>The low end of the emitter delay if using a range.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bEmitterDelayUseRange">
            <summary>
            If true, select the emitter delay from the range
                    [EmitterDelayLow..EmitterDelay]
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bDelayFirstLoopOnly">
            <summary>If true, the emitter will be delayed only on the first loop.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.InterpolationMethod">
            <summary>
            The interpolation method to used for the SubUV image selection.
            One of the following:
            PSUVIM_None                     - Do not apply SubUV modules to this emitter.
            PSUVIM_Linear           - Smoothly transition between sub-images in the given order,
                                                      with no blending between the current and the next
            PSUVIM_Linear_Blend     - Smoothly transition between sub-images in the given order,
                                                      blending between the current and the next
            PSUVIM_Random           - Pick the next image at random, with no blending between
                                                      the current and the next
            PSUVIM_Random_Blend     - Pick the next image at random, blending between the current
                                                      and the next
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.SubImages_Horizontal">
            <summary>The number of sub-images horizontally in the texture</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.SubImages_Vertical">
            <summary>The number of sub-images vertically in the texture</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bScaleUV">
            <summary>Whether to scale the UV or not - ie, the model wasn't setup with sub uvs</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.RandomImageTime">
            <summary>
            The amount of time (particle-relative, 0.0 to 1.0) to 'lock' on a random sub image
                0.0 = change every frame
            1.0 = select a random image at spawn and hold for the life of the particle
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.RandomImageChanges">
            <summary>The number of times to change a random image over the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bOverrideSystemMacroUV">
            <summary>Override the system MacroUV settings</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.MacroUVPosition">
            <summary>Local space position that UVs generated with the ParticleMacroUV material node will be centered on.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.MacroUVRadius">
            <summary>World space radius that UVs generated with the ParticleMacroUV material node will tile based on.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bUseMaxDrawCount">
            <summary>
            If true, use the MaxDrawCount to limit the number of particles rendered.
            NOTE: This does not limit the number spawned/updated, only what is drawn.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.MaxDrawCount">
            <summary>
            The maximum number of particles to DRAW for this emitter.
            If set to 0, it will use whatever number are present.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.CutoutTexture">
            <summary>Texture to generate bounding geometry from.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.BoundingMode">
            <summary>
            More bounding vertices results in reduced overdraw, but adds more triangle overhead.
            The eight vertex mode is best used when the SubUV texture has a lot of space to cut out that is not captured by the four vertex version,
            and when the particles using the texture will be few and large.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.AlphaThreshold">
            <summary>
            Alpha channel values larger than the threshold are considered occupied and will be contained in the bounding geometry.
            Raising this threshold slightly can reduce overdraw in particles using this animation asset.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.EmitterNormalsMode">
            <summary>Normal generation mode for this emitter LOD.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.NormalsSphereCenter">
            <summary>
            When EmitterNormalsMode is ENM_Spherical, particle normals are created to face away from NormalsSphereCenter.
            NormalsSphereCenter is in local space.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.NormalsCylinderDirection">
            <summary>
            When EmitterNormalsMode is ENM_Cylindrical,
            particle normals are created to face away from the cylinder going through NormalsSphereCenter in the direction NormalsCylinderDirection.
            NormalsCylinderDirection is in local space.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.bOrbitModuleAffectsVelocityAlignment">
            <summary>Ensures that movement generated from the orbit module is applied to velocity-aligned particles</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRequired.NamedMaterialOverrides">
            <summary>
            Named material overrides for this emitter.
            Overrides this emitter's material(s) with those in the correspondingly named slot(s) of the owning system.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRotation.StartRotation">
            <summary>
            Initial rotation of the particle (1 = 360 degrees).
            The value is retrieved using the EmitterTime.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRotationOverLifetime.RotationOverLife">
            <summary>
            The rotation of the particle (1.0 = 360 degrees).
            The value is retrieved using the RelativeTime of the particle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRotationOverLifetime.Scale">
            <summary>
            If true,  the particle rotation is multiplied by the value retrieved from RotationOverLife.
            If false, the particle rotation is incremented by the value retrieved from RotationOverLife.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRotationRate.StartRotationRate">
            <summary>
            Initial rotation rate, in rotations per second.
            The value is retrieved using the EmitterTime.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleRotationRateMultiplyLife.LifeMultiplier">
            <summary>
            The scale factor that should be applied to the rotation rate.
            The value is retrieved using the RelativeTime of the particle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSize.StartSize">
            <summary>
            The initial size that should be used for a particle.
            The value is retrieved using the EmitterTime during the spawn of a particle.
            It is added to the Size and BaseSize fields of the spawning particle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeMultiplyLife.LifeMultiplier">
            <summary>
            The scale factor for the size that should be used for a particle.
            The value is retrieved using the RelativeTime of the particle during its update.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeMultiplyLife.MultiplyX">
            <summary>
            If true, the X-component of the scale factor will be applied to the particle size X-component.
            If false, the X-component is left unaltered.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeMultiplyLife.MultiplyY">
            <summary>
            If true, the Y-component of the scale factor will be applied to the particle size Y-component.
            If false, the Y-component is left unaltered.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeMultiplyLife.MultiplyZ">
            <summary>
            If true, the Z-component of the scale factor will be applied to the particle size Z-component.
            If false, the Z-component is left unaltered.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeScale.SizeScale">
            <summary>
            The amount the BaseSize should be scaled before being used as the size of the particle.
            The value is retrieved using the RelativeTime of the particle during its update.
            NOTE: this module overrides any size adjustments made prior to this module in that frame.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeScale.EnableX">
            <summary>Ignored</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeScale.EnableY">
            <summary>Ignored</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSizeScale.EnableZ">
            <summary>Ignored</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSourceMovement.SourceMovementScale">
            <summary>
            The scale factor to apply to the source movement before adding to the particle location.
            The value is looked up using the particles RELATIVE time [0..1].
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawn.Rate">
            <summary>The rate at which to spawn particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawn.RateScale">
            <summary>The scalar to apply to the rate.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawn.ParticleBurstMethod">
            <summary>The method to utilize when burst-emitting particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawn.BurstList">
            <summary>The array of burst entries.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawn.BurstScale">
            <summary>Scale all burst entries by this amount.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawn.bApplyGlobalSpawnRateScale">
            <summary>If true, the SpawnRate will be scaled by the global CVar r.EmitterSpawnRateScale</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.UnitScalar">
            <summary>
            The scalar to apply to the distance traveled.
            The value from SpawnPerUnit is divided by this value to give the actual
            number of particles per unit.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.SpawnPerUnit">
            <summary>
            The amount to spawn per meter distribution.
            The value is retrieved using the EmitterTime.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.bIgnoreSpawnRateWhenMoving">
            <summary>
            If true, process the default spawn rate when not moving...
            When not moving, skip the default spawn rate.
            If false, return the bProcessSpawnRate setting.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UParticleModuleSpawnPerUnit.MovementTolerance" -->
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.MaxFrameDistance">
            <summary>
            The maximum valid movement for a single frame.
            If 0.0, then the check is not performed.
            Currently, if the distance moved between frames is greater than this
            then NO particles will be spawned.
            This is primiarily intended to cover cases where the PSystem is
            attached to teleporting objects.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.bIgnoreMovementAlongX">
            <summary>If true, ignore the X-component of the movement</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.bIgnoreMovementAlongY">
            <summary>If true, ignore the Y-component of the movement</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSpawnPerUnit.bIgnoreMovementAlongZ">
            <summary>If true, ignore the Z-component of the movement</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSubUV.Animation">
            <summary>
            SubUV animation asset to use.
            When specified, optimal bounding geometry for each SubUV frame will be used when rendering the sprites for this emitter instead of full quads.
            This reduction in overdraw can reduce the GPU cost of rendering the emitter by 2x or 3x, depending on how much unused space was in the texture.
            The bounding geometry is generated off of the texture alpha setup in the SubUV Animation asset, so that has to match what the material is using for opacity, or clipping will occur.
            When specified, SubImages_Horizontal and SubImages_Vertical will come from the asset instead of the Required Module.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSubUV.SubImageIndex">
            <summary>
            The index of the sub-image that should be used for the particle.
            The value is retrieved using the RelativeTime of the particles.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleSubUV.bUseRealTime">
            <summary>
            If true, use *real* time when updating the image index.
            The movie will update regardless of the slomo settings of the game.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTrailSource.SourceMethod">
            <summary>The source method for the trail.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTrailSource.SourceName">
            <summary>The name of the source - either the emitter or Actor.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTrailSource.SourceStrength">
            <summary>The strength of the tangent from the source point for each Trail.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTrailSource.bLockSourceStength">
            <summary>Whether to lock the source to the life of the particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTrailSource.SourceOffsetCount">
            <summary>
            SourceOffsetCount
            The number of source offsets that can be expected to be found on the instance.
            These must be named
                    TrailSourceOffset#
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UParticleModuleTrailSource.SourceOffsetDefaults" -->
        <member name="P:UnrealEngine.UParticleModuleTrailSource.SelectionMethod">
            <summary>Particle selection method, when using the SourceMethod of Particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTrailSource.bInheritRotation">
            <summary>Interhit particle rotation - only valid for SourceMethod of PET2SRCM_Particle.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.bDeadTrailsOnDeactivate">
            <summary>
            If true, when the system is deactivated, mark trails as dead.
            This means they will still render, but will not have more particles
            added to them, even if the system re-activates...
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.bEnablePreviousTangentRecalculation">
            <summary>If true, recalculate the previous tangent when a new particle is spawned</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.bTangentRecalculationEveryFrame">
            <summary>If true, recalculate tangents every frame to allow velocity/acceleration to be applied</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.TilingDistance">
            <summary>
            The (estimated) covered distance to tile the 2nd UV set at.
            If 0.0, a second UV set will not be passed in.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.DistanceTessellationStepSize">
            <summary>
            The distance step size for tessellation.
            # Tessellation Points = TruncToInt((Distance Between Spawned Particles) / DistanceTessellationStepSize)). If 0 then there is no distance tessellation.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.TangentTessellationStepSize">
            <summary>
            The tangent scalar for tessellation.
            This is the degree change in the tangent direction [0...180] required to warrant an additional tessellation point. If 0 then there is no tangent tessellation.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataAnimTrail.WidthTessellationStepSize">
            <summary>
            The width step size for tessellation.
            This is the number of world units change in the width required to warrant an additional tessellation point. If 0 then there is no width tessellation.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.BeamMethod">
            <summary>
            The method with which to form the beam(s). Must be one of the following:
                    PEB2M_Distance  - Use the distance property to emit a beam along the X-axis of the emitter.
                    PEB2M_Target    - Emit a beam from the source to the supplied target.
                    PEB2M_Branch    - Currently unimplemented.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.TextureTile">
            <summary>
            The number of times to tile the texture along each beam.
            Overridden by TextureTilingDistance if it is > 0.0.
                1st UV set only. 2nd UV set does not Tile.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.TextureTileDistance">
            <summary>
            The distance per texture tile.
                1st UV set only. 2nd UV set does not Tile.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.Sheets">
            <summary>The number of sheets to render</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.MaxBeamCount">
            <summary>The number of live beams</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.Speed">
            <summary>
            The speed at which the beam should move from source to target when firing up.
                '0' indicates instantaneous
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UParticleModuleTypeDataBeam2.InterpolationPoints" -->
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.bAlwaysOn">
            <summary>If true, there will ALWAYS be a beam...</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.UpVectorStepSize">
            <summary>
            The approach to use for determining the Up vector(s) for the beam.
            0 indicates that the Up FVector should be calculated at EVERY point in the beam.
            1 indicates a single Up FVector should be determined at the start of the beam and used at every point.
            N indicates an Up FVector should be calculated every N points of the beam and interpolated between them.
                [NOTE: This mode is currently unsupported.]
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.BranchParentName">
            <summary>
            The name of the emitter to branch from (if mode is PEB2M_Branch)
            MUST BE IN THE SAME PARTICLE SYSTEM!
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.Distance">
            <summary>
            The distance along the X-axis to stretch the beam
            Distance is only used if BeamMethod is PEB2M_Distance
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.TaperMethod">
            <summary>
            Tapering mode - one of the following:
            PEBTM_None              - No tapering is applied
            PEBTM_Full              - Taper the beam relative to source-->target, regardless of current beam length
            PEBTM_Partial   - Taper the beam relative to source-->location, 0=source,1=endpoint
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.TaperFactor">
            <summary>Tapering factor, 0 = source of beam, 1 = target</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.TaperScale">
            <summary>
            Tapering scaling
                This is intended to be either a constant, uniform or a ParticleParam.
                If a curve is used, 0/1 mapping of source/target... which could be integrated into
                the taper factor itself, and therefore makes no sense.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataBeam2.RenderGeometry">
            <summary>Beam Rendering Variables.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataGpu.EmitterInfo">
            <summary>Information for runtime simulation.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataGpu.ResourceData">
            <summary>Data used to initialize runtime resources.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataGpu.CameraMotionBlurAmount">
            <summary>TEMP: How much to stretch sprites based on camera motion blur.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataGpu.bClearExistingParticlesOnInit">
            <summary>When true, all existing partilces are cleared when the emitter is initialized.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.Mesh">
            <summary>The static mesh to render at the particle positions</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.CastShadows">
            <summary>If true, has the meshes cast shadows</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.DoCollisions">
            <summary>UNUSED (the collision module dictates doing collisions)</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.MeshAlignment">
            <summary>
            The alignment to use on the meshes emitted.
            The RequiredModule->ScreenAlignment MUST be set to PSA_TypeSpecific to use.
            One of the following:
            PSMA_MeshFaceCameraWithRoll
                    Face the camera allowing for rotation around the mesh-to-camera FVector
                    (amount provided by the standard particle sprite rotation).
            PSMA_MeshFaceCameraWithSpin
                    Face the camera allowing for the mesh to rotate about the tangential axis.
            PSMA_MeshFaceCameraWithLockedAxis
                    Face the camera while maintaining the up FVector as the locked direction.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.bOverrideMaterial">
            <summary>
            If true, use the emitter material when rendering rather than the one applied
            to the static mesh model.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.Pitch">
            <summary>deprecated properties for initial orientation</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.RollPitchYawRange">
            <summary>The 'pre' rotation pitch (in degrees) to apply to the static mesh used.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.AxisLockOption">
            <summary>
            The axis to lock the mesh on. This overrides TypeSpecific mesh alignment as well as the LockAxis module.
                    EPAL_NONE                -      No locking to an axis.
                    EPAL_X                   -      Lock the mesh X-axis facing towards +X.
                    EPAL_Y                   -      Lock the mesh X-axis facing towards +Y.
                    EPAL_Z                   -      Lock the mesh X-axis facing towards +Z.
                    EPAL_NEGATIVE_X  -      Lock the mesh X-axis facing towards -X.
                    EPAL_NEGATIVE_Y  -      Lock the mesh X-axis facing towards -Y.
                    EPAL_NEGATIVE_Z  -      Lock the mesh X-axis facing towards -Z.
                    EPAL_ROTATE_X    -      Ignored for mesh emitters. Treated as EPAL_NONE.
                    EPAL_ROTATE_Y    -      Ignored for mesh emitters. Treated as EPAL_NONE.
                    EPAL_ROTATE_Z    -      Ignored for mesh emitters. Treated as EPAL_NONE.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.bCameraFacing">
            <summary>
            If true, then point the X-axis of the mesh towards the camera.
            When set, AxisLockOption as well as all other locked axis/screen alignment settings are ignored.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.CameraFacingUpAxisOption">
            <summary>
            The axis of the mesh to point up when camera facing the X-axis.
                    CameraFacing_NoneUP                     No attempt to face an axis up or down.
                    CameraFacing_ZUp                        Z-axis of the mesh should attempt to point up.
                    CameraFacing_NegativeZUp        Z-axis of the mesh should attempt to point down.
                    CameraFacing_YUp                        Y-axis of the mesh should attempt to point up.
                    CameraFacing_NegativeYUp        Y-axis of the mesh should attempt to point down.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.CameraFacingOption">
            <summary>
            The camera facing option to use:
            All camera facing options without locked axis assume X-axis will be facing the camera.
                    XAxisFacing_NoUp                                - X-axis camera facing, no attempt to face an axis up or down.
                    XAxisFacing_ZUp                                 - X-axis camera facing, Z-axis of the mesh should attempt to point up.
                    XAxisFacing_NegativeZUp                 - X-axis camera facing, Z-axis of the mesh should attempt to point down.
                    XAxisFacing_YUp                                 - X-axis camera facing, Y-axis of the mesh should attempt to point up.
                    XAxisFacing_NegativeYUp                 - X-axis camera facing, Y-axis of the mesh should attempt to point down.
            All axis-locked camera facing options assume the AxisLockOption is set. EPAL_NONE will be treated as EPAL_X.
                    LockedAxis_ZAxisFacing                  - X-axis locked on AxisLockOption axis, rotate Z-axis of the mesh to face towards camera.
                    LockedAxis_NegativeZAxisFacing  - X-axis locked on AxisLockOption axis, rotate Z-axis of the mesh to face away from camera.
                    LockedAxis_YAxisFacing                  - X-axis locked on AxisLockOption axis, rotate Y-axis of the mesh to face towards camera.
                    LockedAxis_NegativeYAxisFacing  - X-axis locked on AxisLockOption axis, rotate Y-axis of the mesh to face away from camera.
            All velocity-aligned options do NOT require the ScreenAlignment be set to PSA_Velocity.
            Doing so will result in additional work being performed... (it will orient the mesh twice).
                    VelocityAligned_ZAxisFacing         - X-axis aligned to the velocity, rotate the Z-axis of the mesh to face towards camera.
                    VelocityAligned_NegativeZAxisFacing - X-axis aligned to the velocity, rotate the Z-axis of the mesh to face away from camera.
                    VelocityAligned_YAxisFacing         - X-axis aligned to the velocity, rotate the Y-axis of the mesh to face towards camera.
                    VelocityAligned_NegativeYAxisFacing - X-axis aligned to the velocity, rotate the Y-axis of the mesh to face away from camera.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.bApplyParticleRotationAsSpin">
            <summary>
            If true, apply 'sprite' particle rotation about the orientation axis (direction mesh is pointing).
            If false, apply 'sprite' particle rotation about the camera facing axis.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.bFaceCameraDirectionRatherThanPosition">
            <summary>
            If true, all camera facing options will point the mesh against the camera's view direction rather than pointing at the cameras location.
            If false, the camera facing will point to the cameras position as normal.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataMesh.bCollisionsConsiderPartilceSize">
            <summary>
            If true, all collisions for mesh particle on this emitter will take the particle size into account.
            If false, particle size will be ignored in collision checks.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.MaxTessellationBetweenParticles">
            <summary>
            The maximum amount to tessellate between two particles of the trail.
            Depending on the distance between the particles and the tangent change, the
            system will select a number of tessellation points
                    [0..MaxTessellationBetweenParticles]
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.SheetsPerTrail">
            <summary>The number of sheets to render for the trail.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.MaxTrailCount">
            <summary>The number of live trails</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.MaxParticleInTrailCount">
            <summary>Max particles per trail</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bDeadTrailsOnDeactivate">
            <summary>
            If true, when the system is deactivated, mark trails as dead.
            This means they will still render, but will not have more particles
            added to them, even if the system re-activates...
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bDeadTrailsOnSourceLoss">
            <summary>
            If true, when the source of a trail is 'lost' (ie, the source particle
            dies), mark the current trail as dead.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bClipSourceSegement">
            <summary>If true, do not join the trail to the source position</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bEnablePreviousTangentRecalculation">
            <summary>If true, recalculate the previous tangent when a new particle is spawned</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bTangentRecalculationEveryFrame">
            <summary>If true, recalculate tangents every frame to allow velocity/acceleration to be applied</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bSpawnInitialParticle">
            <summary>If true, ribbon will spawn a particle when it first starts moving</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.RenderAxis">
            <summary>
            The 'render' axis for the trail (what axis the trail is stretched out on)
                    Trails_CameraUp - Traditional camera-facing trail.
                    Trails_SourceUp - Use the up axis of the source for each spawned particle.
                    Trails_WorldUp  - Use the world up axis.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.TangentSpawningScalar">
            <summary>
            The tangent scalar for spawning.
            Angles between tangent A and B are mapped to [0.0f .. 1.0f]
            This is then multiplied by TangentTessellationScalar to give the number of particles to spawn
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bRenderGeometry">
            <summary>If true, render the trail geometry (this should typically be on)</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bRenderSpawnPoints">
            <summary>If true, render stars at each spawned particle point along the trail</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bRenderTangents">
            <summary>If true, render a line showing the tangent at each spawned particle point along the trail</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bRenderTessellation">
            <summary>If true, render the tessellated path between spawned particles</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.TilingDistance">
            <summary>
            The (estimated) covered distance to tile the 2nd UV set at.
            If 0.0, a second UV set will not be passed in.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.DistanceTessellationStepSize">
            <summary>
            The distance step size for tessellation.
            # Tessellation Points = TruncToInt((Distance Between Spawned Particles) / DistanceTessellationStepSize))
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.bEnableTangentDiffInterpScale">
            <summary>
            If this flag is enabled, the system will scale the number of interpolated vertices
            based on the difference in the tangents of neighboring particles.
            Each pair of neighboring particles will compute the following CheckTangent value:
                    CheckTangent = ((ParticleA Tangent DOT ParticleB Tangent) - 1.0f) * 0.5f
            If CheckTangent is LESS THAN 0.5, then the DistanceTessellationStepSize will be
            scaled based on the result. This will map so that from parallel to orthogonal
            (0..90 degrees) will scale from [0..1]. Anything greater than 90 degrees will clamp
            at a scale of 1.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleTypeDataRibbon.TangentTessellationScalar">
            <summary>
            The tangent scalar for tessellation.
            Angles between tangent A and B are mapped to [0.0f .. 1.0f]
            This is then multiplied by TangentTessellationScalar to give the number of points to tessellate
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.VectorField">
            <summary>Vector field asset to use.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.RelativeTranslation">
            <summary>Translation of the vector field relative to the emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.RelativeRotation">
            <summary>Rotation of the vector field relative to the emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.RelativeScale3D">
            <summary>Scale of the vector field relative to the emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.Intensity">
            <summary>Intensity of the local vector field.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.Tightness">
            <summary>Tightness tweak value: 0: Force 1: Velocity.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.bIgnoreComponentTransform">
            <summary>Ignore component transform.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.bTileX">
            <summary>Tile vector field in x axis?</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.bTileY">
            <summary>Tile vector field in y axis?</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.bTileZ">
            <summary>Tile vector field in z axis?</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldLocal.bUseFixDT">
            <summary>Use fix delta time in the simulation?</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldScale.VectorFieldScale">
            <summary>Per-particle vector field scale. Evaluated using emitter time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldScale.VectorFieldScaleRaw">
            <summary>Per-particle vector field scale. Evaluated using emitter time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldScaleOverLife.VectorFieldScaleOverLife">
            <summary>Per-particle vector field scale. Evaluated using particle relative time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVectorFieldScaleOverLife.VectorFieldScaleOverLifeRaw">
            <summary>Per-particle vector field scale. Evaluated using particle relative time.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocity.StartVelocity">
            <summary>
            The velocity to apply to a particle when it is spawned.
            Value is retrieved using the EmitterTime of the emitter.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocity.StartVelocityRadial">
            <summary>
            The velocity to apply to a particle along its radial direction.
            Direction is determined by subtracting the location of the emitter from the particle location at spawn.
            Value is retrieved using the EmitterTime of the emitter.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocityCone.Angle">
            <summary>The Min value represents the inner cone angle value and the Max value represents the outer cone angle value.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocityCone.Velocity">
            <summary>The initial velocity of the particles.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocityCone.Direction">
            <summary>The direction FVector of the cone.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocityInheritParent.Scale">
            <summary>
            The scale to apply tot he parent velocity prior to adding it to the particle velocity during spawn.
            Value is retrieved using the EmitterTime of the emitter.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocityOverLifetime.VelOverLife">
            <summary>
            The scaling  value applied to the velocity.
            Value is retrieved using the RelativeTime of the particle.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleModuleVelocityOverLifetime.Absolute">
            <summary>
            If true, the velocity will be SET to the value from the above dist.
            If false, the velocity will be scaled by the above dist.
            </summary>
        </member>
        <member name="T:UnrealEngine.UParticleSystem">
            <summary>
            A ParticleSystem is a complete particle effect that contains any number of ParticleEmitters. By allowing multiple emitters
            in a system, the designer can create elaborate particle effects that are held in a single system. Once created using
            Cascade, a ParticleSystem can then be inserted into a level or created in script.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.UpdateTime_FPS">
            <summary>UpdateTime_FPS - the frame per second to update at in FixedTime mode</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.UpdateTime_Delta">
            <summary>UpdateTime_Delta       - internal</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.WarmupTime">
            <summary>WarmupTime     - the time to warm-up the particle system when first rendered</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.WarmupTickRate">
            <summary>
            WarmupTickRate - the time step for each tick during warm up.
                   Increasing this improves performance. Decreasing, improves accuracy.
                   Set to 0 to use the default tick time.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.Emitters">
            <summary>Emitters       - internal - the array of emitters in the system</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.PreviewComponent">
            <summary>The component used to preview the particle system in Cascade</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.ThumbnailAngle">
            <summary>The angle to use when rendering the thumbnail image</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.ThumbnailDistance">
            <summary>The distance to place the system when rendering the thumbnail image</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.ThumbnailWarmup">
            <summary>The time to warm-up the system for the thumbnail image</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.CurveEdSetup">
            <summary>Used for curve editor to remember curve-editing setup.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bOrientZAxisTowardCamera">
            <summary>If true, the system's Z axis will be oriented toward the camera</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.LODDistanceCheckTime">
            <summary>How often (in seconds) the system should perform the LOD distance check.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.LODMethod">
            <summary>
            The method of LOD level determination to utilize for this particle system
              PARTICLESYSTEMLODMETHOD_Automatic - Automatically set the LOD level, checking every LODDistanceCheckTime seconds.
            PARTICLESYSTEMLODMETHOD_DirectSet - LOD level is directly set by the game code.
            PARTICLESYSTEMLODMETHOD_ActivateAutomatic - LOD level is determined at Activation time, then left alone unless directly set by game code.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.LODDistances">
            <summary>
            The array of distances for each LOD level in the system.
            Used when LODMethod is set to PARTICLESYSTEMLODMETHOD_Automatic.
            Example: System with 3 LOD levels
                    LODDistances(0) = 0.0
                    LODDistances(1) = 2500.0
                    LODDistances(2) = 5000.0
                    In this case, when the system is [   0.0 ..   2499.9] from the camera, LOD level 0 will be used.
                                                                                     [2500.0 ..   4999.9] from the camera, LOD level 1 will be used.
                                                                                     [5000.0 .. INFINITY] from the camera, LOD level 2 will be used.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.EditorLODSetting">
            <summary>LOD setting for intepolation (set by Cascade) Range [0..100]</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bRegenerateLODDuplicate">
            <summary>
            Internal value that tracks the regenerate LOD levels preference.
            If true, when autoregenerating LOD levels in code, the low level will
            be a duplicate of the high.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bUseFixedRelativeBoundingBox">
            <summary>Whether to use the fixed relative bounding box or calculate it every frame.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.FixedRelativeBoundingBox">
            <summary>Fixed relative bounding box for particle system.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.SecondsBeforeInactive">
            <summary>
            Number of seconds of emitter not being rendered that need to pass before it
            no longer gets ticked/ becomes inactive.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.FloorMesh">
            <summary>Cascade 'floor' mesh information.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.BackgroundColor">
            <summary>The background color to display in Cascade</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bShouldResetPeakCounts">
            <summary>EDITOR ONLY: Indicates that Cascade would like to have the PeakActiveParticles count reset</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bHasPhysics">
            <summary>Set during load time to indicate that physics is used...</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bUseRealtimeThumbnail">
            <summary>Inidicates the old 'real-time' thumbnail rendering should be used</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.ThumbnailImageOutOfDate">
            <summary>Internal: Indicates the PSys thumbnail image is out of date</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.ThumbnailImage">
            <summary>Internal: The PSys thumbnail image</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.Delay">
            <summary>How long this Particle system should delay when ActivateSystem is called on it.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.DelayLow">
            <summary>The low end of the emitter delay if using a range.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bUseDelayRange">
            <summary>
            If true, select the emitter delay from the range
                    [DelayLow..Delay]
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.bAutoDeactivate">
            <summary>Auto-deactivate system if all emitters are determined to not spawn particles again, regardless of lifetime.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.MinTimeBetweenTicks">
            <summary>Minimum duration between ticks; 33=tick at max. 30FPS, 16=60FPS, 8=120FPS</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.InsignificanceDelay">
            <summary>Time delay between all emitters becoming insignificant and the systems insignificant reaction.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.MacroUVPosition">
            <summary>Local space position that UVs generated with the ParticleMacroUV material node will be centered on.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.MacroUVRadius">
            <summary>World space radius that UVs generated with the ParticleMacroUV material node will tile based on.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.OcclusionBoundsMethod">
            <summary>
            Which occlusion bounds method to use for this particle system.
            EPSOBM_None - Don't determine occlusion for this system.
            EPSOBM_ParticleBounds - Use the bounds of the component when determining occlusion.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.CustomOcclusionBounds">
            <summary>The occlusion bounds to use if OcclusionBoundsMethod is set to EPSOBM_CustomBounds</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystem.NamedMaterialSlots">
            <summary>
            Array of named material slots for use by emitters of this system.
            Emitters can use these instead of their own materials by providing the name to the NamedMaterialOverrides property of their required module.
            These materials can be overridden using CreateNamedDynamicMaterialInstance() on a ParticleSystemComponent.
            </summary>
        </member>
        <member name="T:UnrealEngine.UParticleSystemComponent">
            <summary>A particle emitter.</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.SkelMeshComponents">
            <summary>
            The skeletal mesh components used with the socket location module.
            This is to prevent them from being garbage collected.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.bUpdateOnDedicatedServer">
            <summary>whether to update the particle system on dedicated servers</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.bAllowRecycling">
            <summary>
            If true, this Particle System will be available for recycling after it has completed. Auto-destroyed systems cannot be recycled.
            Some systems (currently particle trail effects) can recycle components to avoid respawning them to play new effects.
            This is only an optimization and does not change particle system behavior, aside from not triggering normal component initialization events more than once.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.bAutoManageAttachment">
            <summary>
            True if we should automatically attach to AutoAttachParent when activated, and detach from our parent when completed.
            This overrides any current attachment that may be present at the time of activation (deferring initial attachment until activation, if AutoAttachParent is null).
            When enabled, detachment occurs regardless of whether AutoAttachParent is assigned, and the relative transform from the time of activation is restored.
            This also disables attachment on dedicated servers, where we don't actually activate even if bAutoActivate is true.
            @see AutoAttachParent, AutoAttachSocketName, AutoAttachLocationType
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.InstanceParameters">
            <summary>
            Array holding name instance parameters for this ParticleSystemComponent.
            Parameters can be used in Cascade using DistributionFloat/VectorParticleParameters.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.SecondsBeforeInactive">
            <summary>
            Number of seconds of emitter not being rendered that need to pass before it
            no longer gets ticked/ becomes inactive.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.MaxTimeBeforeForceUpdateTransform">
            <summary>
            Time between forced UpdateTransforms for systems that use dynamically calculated bounds,
            Which is effectively how often the bounds are shrunk.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.EditorLODLevel">
            <summary>INTERNAL. Used by the editor to set the LODLevel</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.EditorDetailMode">
            <summary>Used for applying Cascade's detail mode setting to in-level particle systems</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.bOverrideLODMethod">
            <summary>indicates that the component's LODMethod overrides the Template's</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.LODMethod">
            <summary>The method of LOD level determination to utilize for this particle system</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.bSkipUpdateDynamicDataDuringTick">
            <summary>
            Flag indicating that dynamic updating of render data should NOT occur during Tick.
            This is used primarily to allow for warming up and simulated effects to a certain state.
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.ReplayClips">
            <summary>Array of replay clips for this particle system component.  These are serialized to disk.  You really should never add anything to this in the editor.  It's exposed so that you can delete clips if you need to, but be careful when doing so!</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.CustomTimeDilation">
            <summary>Scales DeltaTime in UParticleSystemComponent::Tick(...)</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.OnSystemFinished">
            <summary>Called when the particle system is done</summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.AutoAttachSocketName">
            <summary>
            Socket we automatically attach to on the AutoAttachParent, if bAutoManageAttachment is true.
            @see bAutoManageAttachment
            </summary>
        </member>
        <member name="P:UnrealEngine.UParticleSystemComponent.AutoAttachLocationType">
            <summary>
            DEPRECATED: Options for how we handle our location when we attach to the AutoAttachParent, if bAutoManageAttachment is true.
            @see bAutoManageAttachment, EAttachLocation::Type
            </summary>
        </member>
        <member name="T:UnrealEngine.UPawnMovementComponent">
            <summary>
            PawnMovementComponent can be used to update movement for an associated Pawn.
            It also provides ways to accumulate and read directional input in a generic way (with AddInputVector(), ConsumeInputVector(), etc).
            @see APawn
            </summary>
        </member>
        <member name="P:UnrealEngine.UPawnMovementComponent.PawnOwner">
            <summary>Pawn that owns this component.</summary>
        </member>
        <member name="T:UnrealEngine.UPawnNoiseEmitterComponent">
            <summary>
            PawnNoiseEmitterComponent tracks noise event data used by SensingComponents to hear a Pawn.
            This component is intended to exist on either a Pawn or its Controller. It does nothing on network clients.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.bAIPerceptionSystemCompatibilityMode">
            <summary>
            If set to true (default value) will notify AIPerceptionSystem about noise events
            otherwise only PawnSensingComponents will be able to pick up noises generated by this component
            </summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.LastRemoteNoisePosition">
            <summary>Most recent noise made by this pawn not at its own location</summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.NoiseLifetime">
            <summary>After this amount of time, new sound events will overwrite previous sounds even if they are not louder (allows old sounds to decay)</summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.LastRemoteNoiseVolume">
            <summary>Most recent volume of noise made by this pawn not at its own location</summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.LastRemoteNoiseTime">
            <summary>Time of last remote noise update</summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.LastLocalNoiseVolume">
            <summary>Most recent noise made by this pawn at its own location</summary>
        </member>
        <member name="P:UnrealEngine.UPawnNoiseEmitterComponent.LastLocalNoiseTime">
            <summary>Time of last local noise update</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalAnimationComponent.StrengthMultiplyer">
            <summary>Muliplies the strength of any active motors. (can blend from 0-1 for example)</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicalMaterial">
            <summary>Physical materials are used to define the response of a physical object when interacting dynamically with the world.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.Friction">
            <summary>Friction value of surface, controls how easily things can slide on this surface</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.FrictionCombineMode">
            <summary>Friction combine mode, controls how friction is computed for multiple materials.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.bOverrideFrictionCombineMode">
            <summary>If set we will use the FrictionCombineMode of this material, instead of the FrictionCombineMode found in the project settings.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.Restitution">
            <summary>Restitution or 'bounciness' of this surface, between 0 (no bounce) and 1 (outgoing velocity is same as incoming).</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.RestitutionCombineMode">
            <summary>Restitution combine mode, controls how restitution is computed for multiple materials.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.bOverrideRestitutionCombineMode">
            <summary>If set we will use the RestitutionCombineMode of this material, instead of the RestitutionCombineMode found in the project settings.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.Density">
            <summary>Used with the shape of the object to calculate its mass properties. The higher the number, the heavier the object. g per cubic cm.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.RaiseMassToPower">
            <summary>
            Used to adjust the way that mass increases as objects get larger. This is applied to the mass as calculated based on a 'solid' object.
            In actuality, larger objects do not tend to be solid, and become more like 'shells' (e.g. a car is not a solid piece of metal).
            Values are clamped to 1 or less.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.DestructibleDamageThresholdScale">
            <summary>How much to scale the damage threshold by on any destructible we are applied to</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.PhysicalMaterialProperty">
            <summary>deprecated</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.SurfaceType">
            <summary>To edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.TireFrictionScale">
            <summary>DEPRECATED - Overall tire friction scalar for every type of tire. This value is multiplied against our parents' values.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicalMaterial.TireFrictionScales">
            <summary>DEPRECATED - Tire friction scales for specific types of tires. These values are multiplied against our parents' values.</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicsAsset">
            <summary>
            PhysicsAsset contains a set of rigid bodies and constraints that make up a single ragdoll.
            The asset is not limited to human ragdolls, and can be used for any physical simulation using bodies and constraints.
            A SkeletalMesh has a single PhysicsAsset, which allows for easily turning ragdoll physics on or off for many SkeletalMeshComponents
            The asset can be configured inside the Physics Asset Editor (PhAT).
            @see https://docs.unrealengine.com/latest/INT/Engine/Physics/PhAT/Reference/index.html
            @see USkeletalMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsAsset.DefaultSkelMesh">
            <summary>
            Default skeletal mesh to use when previewing this PhysicsAsset etc.
            Is the one that was used as the basis for creating this Asset.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsAsset.BoundsBodies">
            <summary>Index of bodies that are marked bConsiderForBounds</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsAsset.SkeletalBodySetups">
            <summary>
            Array of SkeletalBodySetup objects. Stores information about collision shape etc. for each body.
            Does not include body position - those are taken from mesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsAsset.ConstraintSetup">
            <summary>
            Array of RB_ConstraintSetup objects.
            Stores information about a joint between two bodies, such as position relative to each body, joint limits etc.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsAsset.bUseAsyncScene">
            <summary>If true, bodies of the physics asset will be put into the asynchronous physics scene. If false, they will be put into the synchronous physics scene.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsCollisionHandler.ImpactThreshold">
            <summary>How hard an impact must be to trigger effect/sound</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsCollisionHandler.ImpactReFireDelay">
            <summary>Min time between effect/sound being triggered</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsCollisionHandler.DefaultImpactSound">
            <summary>Sound to play</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsCollisionHandler.LastImpactSoundTime">
            <summary>Time since last impact sound</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicsConstraintComponent">
            <summary>This is effectively a joint that allows you to connect 2 rigid bodies together. You can create different types of joints using the various parameters of this component.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintComponent.ConstraintActor1">
            <summary>Pointer to first Actor to constrain.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintComponent.ComponentName1">
            <summary>
            Name of first component property to constrain. If Actor1 is NULL, will look within Owner.
            If this is NULL, will use RootComponent of Actor1
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintComponent.ConstraintActor2">
            <summary>Pointer to second Actor to constrain.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintComponent.ComponentName2">
            <summary>
            Name of second component property to constrain. If Actor2 is NULL, will look within Owner.
            If this is NULL, will use RootComponent of Actor2
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintComponent.OnConstraintBroken">
            <summary>Notification when constraint is broken.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintComponent.ConstraintInstance">
            <summary>All constraint settings</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintTemplate.ProfileHandles">
            <summary>Handles to the constraint profiles applicable to this constraint</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsConstraintTemplate.DefaultProfile">
            <summary>When no profile is selected, use these settings. Only needed in editor as we serialize it into DefaultInstance on save</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicsHandleComponent">
            <summary>Utility object for moving physics objects around.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsHandleComponent.GrabbedComponent">
            <summary>Component we are currently holding</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsHandleComponent.LinearDamping">
            <summary>Linear damping of the handle spring.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsHandleComponent.LinearStiffness">
            <summary>Linear stiffness of the handle spring</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsHandleComponent.AngularDamping">
            <summary>Angular stiffness of the handle spring</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsHandleComponent.AngularStiffness">
            <summary>Angular stiffness of the handle spring</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsHandleComponent.InterpolationSpeed">
            <summary>How quickly we interpolate the physics target transform</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicsSettings">
            <summary>Default physics settings.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.DefaultGravityZ">
            <summary>Default gravity.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.DefaultTerminalVelocity">
            <summary>Default terminal velocity for Physics Volumes.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.DefaultFluidFriction">
            <summary>Default fluid friction for Physics Volumes.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.SimulateScratchMemorySize">
            <summary>Amount of memory to reserve for PhysX simulate(), this is per pxscene and will be rounded up to the next 16K boundary</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.RagdollAggregateThreshold">
            <summary>Threshold for ragdoll bodies above which they will be added to an aggregate before being added to the scene</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.TriangleMeshTriangleMinAreaThreshold">
            <summary>Triangles from triangle meshes (BSP) with an area less than or equal to this value will be removed from physics collision data. Set to less than 0 to disable.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bEnableAsyncScene">
            <summary>Enables the use of an async scene</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bEnableShapeSharing">
            <summary>Enables shape sharing between sync and async scene for static rigid actors</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bEnablePCM">
            <summary>Enables persistent contact manifolds. This will generate fewer contact points, but with more accuracy. Reduces stability of stacking, but can help energy conservation.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bWarnMissingLocks">
            <summary>Whether to warn when physics locks are used incorrectly. Turning this off is not recommended and should only be used by very advanced users.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bEnable2DPhysics">
            <summary>Can 2D physics be used (Box2D)?</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.DefaultDegreesOfFreedom">
            <summary>Useful for constraining all objects in the world, for example if you are making a 2D game using 3D environments.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.BounceThresholdVelocity">
            <summary>Minimum relative velocity required for an object to bounce. A typical value for simulation stability is about 0.2 * gravity</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.FrictionCombineMode">
            <summary>Friction combine mode, controls how friction is computed for multiple materials.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.RestitutionCombineMode">
            <summary>Restitution combine mode, controls how restitution is computed for multiple materials.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MaxAngularVelocity">
            <summary>Max angular velocity that a simulated object can achieve.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MaxDepenetrationVelocity">
            <summary>Max velocity which may be used to depenetrate simulated physics objects. 0 means no maximum.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.ContactOffsetMultiplier">
            <summary>Contact offset multiplier. When creating a physics shape we look at its bounding volume and multiply its minimum value by this multiplier. A bigger number will generate contact points earlier which results in higher stability at the cost of performance.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MinContactOffset">
            <summary>Min Contact offset.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MaxContactOffset">
            <summary>Max Contact offset.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bSimulateSkeletalMeshOnDedicatedServer">
            <summary>
            If true, simulate physics for this component on a dedicated server.
            This should be set if simulating physics and replicating with a dedicated server.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.DefaultShapeComplexity">
            <summary>Determines the default physics shape complexity.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bDefaultHasComplexCollision">
            <summary>If true, static meshes will use per poly collision as complex collision by default. If false the default behavior is the same as UseSimpleAsComplex.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bSuppressFaceRemapTable">
            <summary>If true, the internal physx face to UE face mapping will not be generated. This is a memory optimization available if you do not rely on face indices returned by scene queries.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bSupportUVFromHitResults">
            <summary>If true, store extra information to allow FindCollisionUV to derive UV info from a line trace hit result, using the FindCollisionUV utility</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bDisableActiveActors">
            <summary>If true, physx will not update unreal with any bodies that have moved during the simulation. This should only be used if you have no physx simulation or you are manually updating the unreal data via polling physx.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bDisableCCD">
            <summary>If true CCD will be ignored. This is an optimization when CCD is never used which removes the need for physx to check it internally.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MaxPhysicsDeltaTime">
            <summary>Max Physics Delta Time to be clamped.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bSubstepping">
            <summary>Whether to substep the physics simulation. This feature is still experimental. Certain functionality might not work correctly</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.bSubsteppingAsync">
            <summary>Whether to substep the async physics simulation. This feature is still experimental. Certain functionality might not work correctly</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MaxSubstepDeltaTime">
            <summary>Max delta time (in seconds) for an individual simulation substep.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.MaxSubsteps">
            <summary>Max number of substeps for physics simulation.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.SyncSceneSmoothingFactor">
            <summary>Physics delta time smoothing factor for sync scene.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.AsyncSceneSmoothingFactor">
            <summary>Physics delta time smoothing factor for async scene.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.InitialAverageFrameRate">
            <summary>Physics delta time initial average.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSettings.PhysicalSurfaces">
            <summary>PhysicalMaterial Surface Types</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicsSpringComponent">
            <summary>
            Note: this component is still work in progress. Uses raycast springs for simple vehicle forces
               Used with objects that have physics to create a spring down the X direction
               ie. point X in the direction you want generate spring.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.SpringStiffness">
            <summary>Specifies how much strength the spring has. The higher the SpringStiffness the more force the spring can push on a body with.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.SpringDamping">
            <summary>Specifies how quickly the spring can absorb energy of a body. The higher the damping the less oscillation</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.SpringLengthAtRest">
            <summary>Determines how long the spring will be along the X-axis at rest. The spring will apply 0 force on a body when it's at rest.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.SpringRadius">
            <summary>Determines the radius of the spring.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.SpringChannel">
            <summary>Strength of thrust force applied to the base object.</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.bIgnoreSelf">
            <summary>If true, the spring will ignore all components in its own actor</summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsSpringComponent.SpringCompression">
            <summary>The current compression of the spring. A spring at rest will have SpringCompression 0.</summary>
        </member>
        <member name="T:UnrealEngine.UPhysicsThrusterComponent">
            <summary>
            Used with objects that have physics to apply a force down the negative-X direction
            ie. point X in the direction you want the thrust in.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPhysicsThrusterComponent.ThrustStrength">
            <summary>Strength of thrust force applied to the base object.</summary>
        </member>
        <member name="T:UnrealEngine.UPlanarReflectionComponent">
            <summary>UPlanarReflectionComponent</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.NormalDistortionStrength">
            <summary>Controls the strength of normals when distorting the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.PrefilterRoughness">
            <summary>The roughness value to prefilter the planar reflection texture with, useful for hiding low resolution.  Larger values have larger GPU cost.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.PrefilterRoughnessDistance">
            <summary>The distance at which the prefilter roughness value will be achieved.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.ScreenPercentage">
            <summary>Downsample percent, can be used to reduce GPU time rendering the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.ExtraFOV">
            <summary>
            Additional FOV used when rendering to the reflection texture.
            This is useful when normal distortion is causing reads outside the reflection texture.
            Larger values increase rendering thread and GPU cost, as more objects and triangles have to be rendered into the planar reflection.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.DistanceFromPlaneFadeoutStart">
            <summary>Receiving pixels at this distance from the reflection plane will begin to fade out the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.DistanceFromPlaneFadeoutEnd">
            <summary>Receiving pixels at this distance from the reflection plane will have completely faded out the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.AngleFromPlaneFadeStart">
            <summary>Receiving pixels whose normal is at this angle from the reflection plane will begin to fade out the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.AngleFromPlaneFadeEnd">
            <summary>Receiving pixels whose normal is at this angle from the reflection plane will have completely faded out the planar reflection.</summary>
        </member>
        <member name="P:UnrealEngine.UPlanarReflectionComponent.bRenderSceneTwoSided">
            <summary>
            Whether to render the scene as two-sided, which can be useful to hide artifacts where normal distortion would read 'under' an object that has been clipped by the reflection plane.
            With this setting enabled, the backfaces of a mesh would be displayed in the clipped region instead of the background which is potentially a bright sky.
            Be sure to add the water plane to HiddenActors if enabling this, as the water plane will now block the reflection.
            </summary>
        </member>
        <member name="T:UnrealEngine.UPlaneReflectionCaptureComponent">
            <summary>-> will be exported to EngineDecalClasses.h</summary>
        </member>
        <member name="P:UnrealEngine.UPlaneReflectionCaptureComponent.InfluenceRadiusScale">
            <summary>Radius of the area that can receive reflections from this capture.</summary>
        </member>
        <member name="T:UnrealEngine.UPlatformEventsComponent">
            <summary>Component to handle receiving notifications from the OS about platform events.</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformEventsComponent.PlatformChangedToLaptopModeDelegate">
            <summary>This is called when a convertible laptop changed into laptop mode.</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformEventsComponent.PlatformChangedToTabletModeDelegate">
            <summary>This is called when a convertible laptop changed into tablet mode.</summary>
        </member>
        <member name="T:UnrealEngine.UPlatformGameInstance">
            <summary>UObject based class for handling mobile events. Having this object as an option gives the app lifetime access to these global delegates. The component UApplicationLifecycleComponent is destroyed at level loads</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationWillDeactivateDelegate">
            <summary>
            This is called when the application is about to be deactivated (e.g., due to a phone call or SMS or the sleep button).
            The game should be paused if possible, etc...
            </summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationHasReactivatedDelegate">
            <summary>Called when the application has been reactivated (reverse any processing done in the Deactivate delegate)</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationWillEnterBackgroundDelegate">
            <summary>
            This is called when the application is being backgrounded (e.g., due to switching
            to another app or closing it via the home button)
            The game should release shared resources, save state, etc..., since it can be
            terminated from the background state without any further warning.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationHasEnteredForegroundDelegate">
            <summary>Called when the application is returning to the foreground (reverse any processing done in the EnterBackground delegate)</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationWillTerminateDelegate">
            <summary>
            This *may* be called when the application is getting terminated by the OS.
            There is no guarantee that this will ever be called on a mobile device,
            save state when ApplicationWillEnterBackgroundDelegate is called instead.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationRegisteredForRemoteNotificationsDelegate">
            <summary>called when the user grants permission to register for remote notifications</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationRegisteredForUserNotificationsDelegate">
            <summary>called when the user grants permission to register for notifications</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationFailedToRegisterForRemoteNotificationsDelegate">
            <summary>called when the application fails to register for remote notifications</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationReceivedRemoteNotificationDelegate">
            <summary>called when the application receives a remote notification</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationReceivedLocalNotificationDelegate">
            <summary>called when the application receives a local notification</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformGameInstance.ApplicationReceivedScreenOrientationChangedNotificationDelegate">
            <summary>called when the application receives a screen orientation change notification</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformInterfaceBase.AllDelegates">
            <summary>Array of delegate arrays. Only add and remove via helper functions, and call via the helper delegate call function</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformInterfaceWebResponse.OriginalURL">
            <summary>This holds the original requested URL</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformInterfaceWebResponse.ResponseCode">
            <summary>Result code from the response (200=OK, 404=Not Found, etc)</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformInterfaceWebResponse.Tag">
            <summary>A user-specified tag specified with the request</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformInterfaceWebResponse.StringResponse">
            <summary>For string results, this is the response</summary>
        </member>
        <member name="P:UnrealEngine.UPlatformInterfaceWebResponse.BinaryResponse">
            <summary>For non-string results, this is the response</summary>
        </member>
        <member name="P:UnrealEngine.UPlayer.PlayerController">
            <summary>The actor this player controls.</summary>
        </member>
        <member name="P:UnrealEngine.UPlayer.CurrentNetSpeed">
            <summary>the current speed of the connection</summary>
        </member>
        <member name="P:UnrealEngine.UPlayer.ConfiguredInternetSpeed">
            <summary>@todo document</summary>
        </member>
        <member name="P:UnrealEngine.UPlayer.ConfiguredLanSpeed">
            <summary>@todo document</summary>
        </member>
        <member name="T:UnrealEngine.UPlayerInput">
            <summary>
            Object within PlayerController that processes player input.
            Only exists on the client in network games.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html
            </summary>
        </member>
        <member name="P:UnrealEngine.UPlayerInput.DebugExecBindings">
            <summary>Generic bindings of keys to Exec()-compatible strings for development purposes only</summary>
        </member>
        <member name="P:UnrealEngine.UPlayerInput.InvertedAxis">
            <summary>List of Axis Mappings that have been inverted</summary>
        </member>
        <member name="T:UnrealEngine.UPointLightComponent">
            <summary>A light component which emits light from a single point equally in all directions.</summary>
        </member>
        <member name="P:UnrealEngine.UPointLightComponent.AttenuationRadius">
            <summary>
            Bounds the light's visible influence.
            This clamping of the light's influence is not physically correct but very important for performance, larger lights cost more.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPointLightComponent.bUseInverseSquaredFalloff">
            <summary>
            Whether to use physically based inverse squared distance falloff, where AttenuationRadius is only clamping the light's contribution.
            Disabling inverse squared falloff can be useful when placing fill lights (don't want a super bright spot near the light).
            When enabled, the light's Intensity is in units of lumens, where 1700 lumens is a 100W lightbulb.
            When disabled, the light's Intensity is a brightness scale.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPointLightComponent.LightFalloffExponent">
            <summary>
            Controls the radial falloff of the light when UseInverseSquaredFalloff is disabled.
            2 is almost linear and very unrealistic and around 8 it looks reasonable.
            With large exponents, the light has contribution to only a small area of its influence radius but still costs the same as low exponents.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPointLightComponent.SourceRadius">
            <summary>
            Radius of light source shape.
            Note that light sources shapes which intersect shadow casting geometry can cause shadowing artifacts.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPointLightComponent.SourceLength">
            <summary>
            Length of light source shape.
            Note that light sources shapes which intersect shadow casting geometry can cause shadowing artifacts.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPointLightComponent.LightmassSettings">
            <summary>The Lightmass settings for this object.</summary>
        </member>
        <member name="T:UnrealEngine.UPoseAsset">
            <summary>* Pose Asset that can be blended by weight of curves</summary>
        </member>
        <member name="P:UnrealEngine.UPoseAsset.PoseContainer">
            <summary>Animation Pose Data</summary>
        </member>
        <member name="P:UnrealEngine.UPoseAsset.bAdditivePose">
            <summary>Whether or not Additive Pose or not - these are property that needs post process, so</summary>
        </member>
        <member name="P:UnrealEngine.UPoseAsset.BasePoseIndex">
            <summary>if -1, use ref pose</summary>
        </member>
        <member name="P:UnrealEngine.UPoseAsset.RetargetSource">
            <summary>Base pose to use when retargeting</summary>
        </member>
        <member name="P:UnrealEngine.UPoseWatch.Node">
            <summary>Node that we are trying to watch</summary>
        </member>
        <member name="T:UnrealEngine.UPostProcessComponent">
            <summary>
            PostProcessComponent. Enables Post process controls for blueprints.
               Will use a parent UShapeComponent to provide volume data if available.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPostProcessComponent.Settings">
            <summary>Post process settings to use for this volume.</summary>
        </member>
        <member name="P:UnrealEngine.UPostProcessComponent.Priority">
            <summary>
            Priority of this volume. In the case of overlapping volumes the one with the highest priority
            overrides the lower priority ones. The order is undefined if two or more overlapping volumes have the same priority.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPostProcessComponent.BlendRadius">
            <summary>World space radius around the volume that is used for blending (only if not unbound).</summary>
        </member>
        <member name="P:UnrealEngine.UPostProcessComponent.BlendWeight">
            <summary>0:no effect, 1:full effect</summary>
        </member>
        <member name="P:UnrealEngine.UPostProcessComponent.bEnabled">
            <summary>Whether this volume is enabled or not.</summary>
        </member>
        <member name="P:UnrealEngine.UPostProcessComponent.bUnbound">
            <summary>set this to false to use the parent shape component as volume bounds. True affects the whole world regardless.</summary>
        </member>
        <member name="T:UnrealEngine.UPreviewMeshCollection">
            <summary>A simple collection of skeletal meshes used for in-editor preview</summary>
        </member>
        <member name="P:UnrealEngine.UPreviewMeshCollection.SkeletalMeshes">
            <summary>The skeletal meshes that this collection contains</summary>
        </member>
        <member name="T:UnrealEngine.UPrimitiveComponent">
            <summary>
            PrimitiveComponents are SceneComponents that contain or generate some sort of geometry, generally to be rendered or used as collision data.
            There are several subclasses for the various types of geometry, but the most common by far are the ShapeComponents (Capsule, Sphere, Box), StaticMeshComponent, and SkeletalMeshComponent.
            ShapeComponents generate geometry that is used for collision detection but are not rendered, while StaticMeshComponents and SkeletalMeshComponents contain pre-built geometry that is rendered, but can also be used for collision detection.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.MinDrawDistance">
            <summary>
            The minimum distance at which the primitive should be rendered,
            measured in world space units from the center of the primitive's bounding sphere to the camera position.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.LDMaxDrawDistance">
            <summary>Max draw distance exposed to LDs. The real max draw distance is the min (disregarding 0) of this and volumes affecting this object.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.CachedMaxDrawDistance">
            <summary>
            The distance to cull this primitive at.
            A CachedMaxDrawDistance of 0 indicates that the primitive should not be culled by distance.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.DepthPriorityGroup">
            <summary>The scene depth priority group to draw the primitive in.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.ViewOwnerDepthPriorityGroup">
            <summary>The scene depth priority group to draw the primitive in, if it's being viewed by its owner.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bAlwaysCreatePhysicsState">
            <summary>
            Indicates if we'd like to create physics state all the time (for collision and simulation).
            If you set this to false, it still will create physics state if collision or simulation activated.
            This can help performance if you'd like to avoid overhead of creating physics state when triggers
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bGenerateOverlapEvents">
            <summary>
            If true, this component will generate overlap events when it is overlapping other components (eg Begin Overlap).
            Both components (this and the other) must have this enabled for overlap events to occur.
            @see [Overlap Events](https://docs.unrealengine.com/latest/INT/Engine/Physics/Collision/index.html#overlapandgenerateoverlapevents)
            @see UpdateOverlaps(), BeginComponentOverlap(), EndComponentOverlap()
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bMultiBodyOverlap">
            <summary>
            If true, this component will generate individual overlaps for each overlapping physics body if it is a multi-body component. When false, this component will
            generate only one overlap, regardless of how many physics bodies it has and how many of them are overlapping another component/body. This flag has no
            influence on single body components.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCheckAsyncSceneOnMove">
            <summary>
            If true, this component will look for collisions on both physic scenes during movement.
            Only required if the asynchronous physics scene is enabled and has geometry in it, and you wish to test for collisions with objects in that scene.
            @see MoveComponent()
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bTraceComplexOnMove">
            <summary>
            If true, component sweeps with this component should trace against complex collision during movement (for example, each triangle of a mesh).
            If false, collision will be resolved against simple collision bounds instead.
            @see MoveComponent()
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bReturnMaterialOnMove">
            <summary>
            If true, component sweeps will return the material in their hit result.
            @see MoveComponent(), FHitResult
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bUseViewOwnerDepthPriorityGroup">
            <summary>True if the primitive should be rendered using ViewOwnerDepthPriorityGroup if viewed by its owner.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bAllowCullDistanceVolume">
            <summary>Whether to accept cull distance volumes to modify cached cull distance.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bHasMotionBlurVelocityMeshes">
            <summary>true if the primitive has motion blur velocity meshes</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bVisibleInReflectionCaptures">
            <summary>If true, this component will be visible in reflection captures.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bRenderInMainPass">
            <summary>If true, this component will be rendered in the main pass (z prepass, basepass, transparency)</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bRenderInMono">
            <summary>If true, this component will be rendered in mono only if an HMD is connected and monoscopic far field rendering is activated.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bReceivesDecals">
            <summary>Whether the primitive receives decals.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bOwnerNoSee">
            <summary>If this is True, this component won't be visible when the view actor is the component's owner, directly or indirectly.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bOnlyOwnerSee">
            <summary>If this is True, this component will only be visible when the view actor is the component's owner, directly or indirectly.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bTreatAsBackgroundForOcclusion">
            <summary>Treat this primitive as part of the background for occlusion purposes. This can be used as an optimization to reduce the cost of rendering skyboxes, large ground planes that are part of the vista, etc.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bUseAsOccluder">
            <summary>
            Whether to render the primitive in the depth only pass.
            This should generally be true for all objects, and let the renderer make decisions about whether to render objects in the depth only pass.
            @todo - if any rendering features rely on a complete depth only pass, this variable needs to go away.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bSelectable">
            <summary>If this is True, this component can be selected in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bForceMipStreaming">
            <summary>If true, forces mips for textures used by this component to be resident when this component's level is loaded.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bHasPerInstanceHitProxies">
            <summary>If true a hit-proxy will be generated for each instance of instanced static meshes</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.CastShadow">
            <summary>
            Controls whether the primitive component should cast a shadow or not.
            This flag is ignored (no shadows will be generated) if all materials on this component have an Unlit shading model.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bAffectDynamicIndirectLighting">
            <summary>Controls whether the primitive should inject light into the Light Propagation Volume.  This flag is only used if CastShadow is true. *</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bAffectDistanceFieldLighting">
            <summary>Controls whether the primitive should affect dynamic distance field lighting methods.  This flag is only used if CastShadow is true. *</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastDynamicShadow">
            <summary>Controls whether the primitive should cast shadows in the case of non precomputed shadowing.  This flag is only used if CastShadow is true. *</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastStaticShadow">
            <summary>Whether the object should cast a static shadow from shadow casting lights.  This flag is only used if CastShadow is true.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastVolumetricTranslucentShadow">
            <summary>
            Whether the object should cast a volumetric translucent shadow.
            Volumetric translucent shadows are useful for primitives with smoothly changing opacity like particles representing a volume,
            But have artifacts when used on highly opaque surfaces.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bSelfShadowOnly">
            <summary>
            When enabled, the component will only cast a shadow on itself and not other components in the world.
            This is especially useful for first person weapons, and forces bCastInsetShadow to be enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastFarShadow">
            <summary>When enabled, the component will be rendering into the far shadow cascades (only for directional lights).</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastInsetShadow">
            <summary>
            Whether this component should create a per-object shadow that gives higher effective shadow resolution.
            Useful for cinematic character shadowing. Assumed to be enabled if bSelfShadowOnly is enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastCinematicShadow">
            <summary>
            Whether this component should cast shadows from lights that have bCastShadowsFromCinematicObjectsOnly enabled.
            This is useful for characters in a cinematic with special cinematic lights, where the cost of shadowmap rendering of the environment is undesired.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastHiddenShadow">
            <summary>
            If true, the primitive will cast shadows even if bHidden is true.
            Controls whether the primitive should cast shadows when hidden.
            This flag is only used if CastShadow is true.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bCastShadowAsTwoSided">
            <summary>Whether this primitive should cast dynamic shadows as if it were a two sided material.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bLightAsIfStatic">
            <summary>
            Whether to light this primitive as if it were static, including generating lightmaps.
            This only has an effect for component types that can bake lighting, like static mesh components.
            This is useful for moving meshes that don't change significantly.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bLightAttachmentsAsGroup">
            <summary>
            Whether to light this component and any attachments as a group.  This only has effect on the root component of an attachment tree.
            When enabled, attached component shadowing settings like bCastInsetShadow, bCastVolumetricTranslucentShadow, etc, will be ignored.
            This is useful for improving performance when multiple movable components are attached together.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.IndirectLightingCacheQuality">
            <summary>Quality of indirect lighting for Movable primitives.  This has a large effect on Indirect Lighting Cache update time.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bReceiveCombinedCSMAndStaticShadowsFromStationaryLights">
            <summary>
            Mobile only:
            If enabled this component can receive combined static and CSM shadows from a stationary light. (Enabling will increase shading cost.)
            If disabled this component will only receive static shadows from stationary lights.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bSingleSampleShadowFromStationaryLights">
            <summary>
            Whether the whole component should be shadowed as one from stationary lights, which makes shadow receiving much cheaper.
            When enabled shadowing data comes from the volume lighting samples precomputed by Lightmass, which are very sparse.
            This is currently only used on stationary directional lights.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.LightingChannels">
            <summary>
            Channels that this component should be in.  Lights with matching channels will affect the component.
            These channels only apply to opaque materials, direct lighting, and dynamic lighting and shadowing.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bIgnoreRadialImpulse">
            <summary>Will ignore radial impulses applied to this component.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bIgnoreRadialForce">
            <summary>Will ignore radial forces applied to this component.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.AlwaysLoadOnClient">
            <summary>If this is True, this component must always be loaded on clients, even if Hidden and CollisionEnabled is NoCollision.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.AlwaysLoadOnServer">
            <summary>If this is True, this component must always be loaded on servers, even if Hidden and CollisionEnabled is NoCollision</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bUseEditorCompositing">
            <summary>Composite the drawing of this component onto the scene after post processing (only applies to editor drawing)</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bRenderCustomDepth">
            <summary>If true, this component will be rendered in the CustomDepth pass (usually used for outlines)</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.CustomDepthStencilValue">
            <summary>Optionally write this 0-255 value to the stencil buffer in CustomDepth pass (Requires project setting or r.CustomDepth == 3)</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.TranslucencySortPriority">
            <summary>
            Translucent objects with a lower sort priority draw behind objects with a higher priority.
            Translucent objects with the same priority are rendered from back-to-front based on their bounds origin.
            Ignored if the object is not translucent.  The default priority is zero.
            Warning: This should never be set to a non-default value unless you know what you are doing, as it will prevent the renderer from sorting correctly.
            It is especially problematic on dynamic gameplay effects.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.VisibilityId">
            <summary>Used for precomputed visibility</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.LpvBiasMultiplier">
            <summary>
            Multiplier used to scale the Light Propagation Volume light injection bias, to reduce light bleeding.
            Set to 0 for no bias, 1 for default or higher for increased biasing (e.g. for
            thin geometry such as walls)
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.BodyInstance">
            <summary>Physics scene information for this component, holds a single rigid body with multiple shapes.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.bHasCustomNavigableGeometry">
            <summary>If true then DoCustomNavigableGeometryExport will be called to collect navigable geometry of this component.</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.BoundsScale">
            <summary>
            Scales the bounds of the object.
            This is useful when using World Position Offset to animate the vertices of the object outside of its bounds.
            Warning: Increasing the bounds of an object will reduce performance and shadow quality!
            Currently only used by StaticMeshComponent and SkeletalMeshComponent.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.LastSubmitTime">
            <summary>Last time the component was submitted for rendering (called FScene::AddPrimitive).</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.LastRenderTime">
            <summary>
            The value of WorldSettings->TimeSeconds for the frame when this component was last rendered.  This is written
            from the render thread, which is up to a frame behind the game thread, so you should allow this time to
            be at least a frame behind the game thread's world time before you consider the actor non-visible.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.CanCharacterStepUpOn">
            <summary>
            Determine whether a Character can step up onto this component.
            This controls whether they can try to step up on it when they bump in to it, not whether they can walk on it after landing on it.
            @see FWalkableSlopeOverride
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.MoveIgnoreActors">
            <summary>
            Set of actors to ignore during component sweeps in MoveComponent().
            All components owned by these actors will be ignored when this component moves or updates overlaps.
            Components on the other Actor may also need to be told to do the same when they move.
            Does not affect movement of this component when simulating physics.
            @see IgnoreActorWhenMoving()
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.MoveIgnoreComponents">
            <summary>
            Set of components to ignore during component sweeps in MoveComponent().
            These components will be ignored when this component moves or updates overlaps.
            The other components may also need to be told to do the same when they move.
            Does not affect movement of this component when simulating physics.
            @see IgnoreComponentWhenMoving()
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnComponentHit">
            <summary>
            Event called when a component hits (or is hit by) something solid. This could happen due to things like Character movement, using Set Location with 'sweep' enabled, or physics simulation.
            For events when objects overlap (e.g. walking into a trigger) see the 'Overlap' event.
            @note For collisions during physics simulation to generate hit events, 'Simulation Generates Hit Events' must be enabled for this component.
            @note When receiving a hit from another object's movement, the directions of 'Hit.Normal' and 'Hit.ImpactNormal'
            will be adjusted to indicate force from the other object against this object.
            @note NormalImpulse will be filled in for physics-simulating bodies, but will be zero for swept-component blocking collisions.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnComponentBeginOverlap">
            <summary>
            Event called when something starts to overlaps this component, for example a player walking into a trigger.
            For events when objects have a blocking collision, for example a player hitting a wall, see 'Hit' events.
            @note Both this component and the other one must have bGenerateOverlapEvents set to true to generate overlap events.
            @note When receiving an overlap from another object's movement, the directions of 'Hit.Normal' and 'Hit.ImpactNormal'
            will be adjusted to indicate force from the other object against this object.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnComponentEndOverlap">
            <summary>
            Event called when something stops overlapping this component
            @note Both this component and the other one must have bGenerateOverlapEvents set to true to generate overlap events.
            </summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnComponentWake">
            <summary>Event called when the underlying physics objects is woken up</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnComponentSleep">
            <summary>Event called when the underlying physics objects is put to sleep</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnBeginCursorOver">
            <summary>Event called when the mouse cursor is moved over this component and mouse over events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnEndCursorOver">
            <summary>Event called when the mouse cursor is moved off this component and mouse over events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnClicked">
            <summary>Event called when the left mouse button is clicked while the mouse is over this component and click events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnReleased">
            <summary>Event called when the left mouse button is released while the mouse is over this component click events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnInputTouchBegin">
            <summary>Event called when a touch input is received over this component when touch events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnInputTouchEnd">
            <summary>Event called when a touch input is released over this component when touch events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnInputTouchEnter">
            <summary>Event called when a finger is moved over this component when touch over events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.OnInputTouchLeave">
            <summary>Event called when a finger is moved off this component when touch over events are enabled in the player controller</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.LODParentPrimitive">
            <summary>LOD parent primitive to draw instead of this one (multiple UPrim's will point to the same LODParent )</summary>
        </member>
        <member name="P:UnrealEngine.UPrimitiveComponent.PostPhysicsComponentTick">
            <summary>Tick function for physics ticking *</summary>
        </member>
        <member name="T:UnrealEngine.UProgressBar">
            <summary>
            The progress bar widget is a simple bar that fills up that can be restyled to fit any number of uses.
            * No Children
            </summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.WidgetStyle">
            <summary>The progress bar style</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.Style">
            <summary>Style used for the progress bar</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.BackgroundImage">
            <summary>The brush to use as the background of the progress bar</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.FillImage">
            <summary>The brush to use as the fill image</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.MarqueeImage">
            <summary>The brush to use as the marquee image</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.Percent">
            <summary>Used to determine the fill position of the progress bar ranging 0..1</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.BarFillType">
            <summary>Defines if this progress bar fills Left to right or right to left</summary>
        </member>
        <member name="P:UnrealEngine.UProgressBar.FillColorAndOpacity">
            <summary>Fill Color and Opacity</summary>
        </member>
        <member name="T:UnrealEngine.UProjectileMovementComponent">
            <summary>
            ProjectileMovementComponent updates the position of another component during its tick.
            Behavior such as bouncing after impacts and homing toward a target are supported.
            Normally the root component of the owning actor is moved, however another component may be selected (see SetUpdatedComponent()).
            If the updated component is simulating physics, only the initial launch parameters (when initial velocity is non-zero)
            will affect the projectile, and the physics sim will take over from there.
            @see UMovementComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.InitialSpeed">
            <summary>Initial speed of projectile. If greater than zero, this will override the initial Velocity value and instead treat Velocity as a direction.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.MaxSpeed">
            <summary>Limit on speed of projectile (0 means no limit).</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bRotationFollowsVelocity">
            <summary>If true, this projectile will have its rotation updated each frame to match the direction of its velocity.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bShouldBounce">
            <summary>If true, simple bounces will be simulated. Set this to false to stop simulating on contact.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bInitialVelocityInLocalSpace">
            <summary>
            If true, the initial Velocity is interpreted as being in local space upon startup.
            @see SetVelocityInLocalSpace()
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bForceSubStepping">
            <summary>
            If true, forces sub-stepping to break up movement into discrete smaller steps to improve accuracy of the trajectory.
            Objects that move in a straight line typically do *not* need to set this, as movement always uses continuous collision detection (sweeps) so collision is not missed.
            Sub-stepping is automatically enabled when under the effects of gravity or when homing towards a target.
            @see MaxSimulationTimeStep, MaxSimulationIterations
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bIsHomingProjectile">
            <summary>
            If true, we will accelerate toward our homing target. HomingTargetComponent must be set after the projectile is spawned.
            @see HomingTargetComponent, HomingAccelerationMagnitude
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bBounceAngleAffectsFriction">
            <summary>
            Controls the effects of friction on velocity parallel to the impact surface when bouncing.
            If true, friction will be modified based on the angle of impact, making friction higher for perpendicular impacts and lower for glancing impacts.
            If false, a bounce will retain a proportion of tangential velocity equal to (1.0 - Friction), acting as a "horizontal restitution".
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.bIsSliding">
            <summary>If true, projectile is sliding / rolling along a surface.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.PreviousHitTime">
            <summary>Saved HitResult Time (0 to 1) from previous simulation step. Equal to 1.0 when there was no impact.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.PreviousHitNormal">
            <summary>Saved HitResult Normal from previous simulation step that resulted in an impact. If PreviousHitTime is 1.0, then the hit was not in the last step.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.ProjectileGravityScale">
            <summary>Custom gravity scale for this projectile. Set to 0 for no gravity.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.Buoyancy">
            <summary>Buoyancy of UpdatedComponent in fluid. 0.0=sinks as fast as in air, 1.0=neutral buoyancy</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.Bounciness">
            <summary>
            Percentage of velocity maintained after the bounce in the direction of the normal of impact (coefficient of restitution).
            1.0 = no velocity lost, 0.0 = no bounce. Ignored if bShouldBounce is false.
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.Friction">
            <summary>
            Coefficient of friction, affecting the resistance to sliding along a surface.
            Normal range is [0,1] : 0.0 = no friction, 1.0+ = very high friction.
            Also affects the percentage of velocity maintained after the bounce in the direction tangent to the normal of impact.
            Ignored if bShouldBounce is false.
            @see bBounceAngleAffectsFriction
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.BounceVelocityStopSimulatingThreshold">
            <summary>
            If velocity is below this threshold after a bounce, stops simulating and triggers the OnProjectileStop event.
            Ignored if bShouldBounce is false, in which case the projectile stops simulating on the first impact.
            @see StopSimulating(), OnProjectileStop
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.OnProjectileBounce">
            <summary>Called when projectile impacts something and bounces are enabled.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.OnProjectileStop">
            <summary>Called when projectile has come to a stop (velocity is below simulation threshold, bounces are disabled, or it is forcibly stopped).</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.HomingAccelerationMagnitude">
            <summary>The magnitude of our acceleration towards the homing target. Overall velocity magnitude will still be limited by MaxSpeed.</summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.MaxSimulationTimeStep">
            <summary>
            Max time delta for each discrete simulation step.
            Lowering this value can address issues with fast-moving objects or complex collision scenarios, at the cost of performance.
            WARNING: if (MaxSimulationTimeStep * MaxSimulationIterations) is too low for the min framerate, the last simulation step may exceed MaxSimulationTimeStep to complete the simulation.
            @see MaxSimulationIterations, bForceSubStepping
            </summary>
        </member>
        <member name="P:UnrealEngine.UProjectileMovementComponent.MaxSimulationIterations">
            <summary>
            Max number of iterations used for each discrete simulation step.
            Increasing this value can address issues with fast-moving objects or complex collision scenarios, at the cost of performance.
            WARNING: if (MaxSimulationTimeStep * MaxSimulationIterations) is too low for the min framerate, the last simulation step may exceed MaxSimulationTimeStep to complete the simulation.
            @see MaxSimulationTimeStep, bForceSubStepping
            </summary>
        </member>
        <member name="P:UnrealEngine.UPropertyBinding.SourcePath">
            <summary>The property path to trace to resolve this binding on the Source Object</summary>
        </member>
        <member name="P:UnrealEngine.UPropertyBinding.DestinationProperty">
            <summary>Used to determine if a binding already exists on the object and if this binding can be safely removed.</summary>
        </member>
        <member name="T:UnrealEngine.URadialForceComponent">
            <summary>Used to emit a radial force or impulse that can affect physics objects and or destructible objects.</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.Radius">
            <summary>The radius to apply the force or impulse in</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.Falloff">
            <summary>How the force or impulse should fall off as object are further away from the center</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.ImpulseStrength">
            <summary>How strong the impulse should be</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.bImpulseVelChange">
            <summary>If true, the impulse will ignore mass of objects and will always result in a fixed velocity change</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.bIgnoreOwningActor">
            <summary>If true, do not apply force/impulse to any physics objects that are part of the Actor that owns this component.</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.ForceStrength">
            <summary>How strong the force should be</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.DestructibleDamage">
            <summary>If > 0.f, will cause damage to destructible meshes as well</summary>
        </member>
        <member name="P:UnrealEngine.URadialForceComponent.ObjectTypesToAffect">
            <summary>The object types that are affected by this radial force</summary>
        </member>
        <member name="T:UnrealEngine.UReflectionCaptureComponent">
            <summary>-> will be exported to EngineDecalClasses.h</summary>
        </member>
        <member name="P:UnrealEngine.UReflectionCaptureComponent.Cubemap">
            <summary>Cubemap to use for reflection if ReflectionSourceType is set to RS_SpecifiedCubemap.</summary>
        </member>
        <member name="P:UnrealEngine.UReflectionCaptureComponent.SourceCubemapAngle">
            <summary>Angle to rotate the source cubemap when SourceType is set to SLS_SpecifiedCubemap.</summary>
        </member>
        <member name="P:UnrealEngine.UReflectionCaptureComponent.Brightness">
            <summary>A brightness control to scale the captured scene's reflection intensity.</summary>
        </member>
        <member name="P:UnrealEngine.UReflectionCaptureComponent.CaptureOffset">
            <summary>World space offset to apply before capturing.</summary>
        </member>
        <member name="P:UnrealEngine.URendererOverrideSettings.bSupportAllShaderPermutations">
            <summary>"Enabling will locally override all ShaderPermutationReduction settings from the Renderer section to be enabled.  Saved to local user config only.."</summary>
        </member>
        <member name="T:UnrealEngine.URendererSettings">
            <summary>Rendering settings.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileHDR">
            <summary>If true, mobile renders in full HDR. Disable this setting for games that do not require lighting features for better performance on slow devices. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileDisableVertexFog">
            <summary>If true, vertex fog will be omitted from all mobile shaders. If your game does not use fog, you should choose this setting to increase shading performance.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.MaxMobileCascades">
            <summary>The maximum number of cascades with which to render dynamic directional light shadows when using the mobile renderer.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.MobileMSAASampleCount">
            <summary>
            Multi-sample anti-aliasing setting to use on mobile. MSAA is currently supported using Metal on iOS, and on Android devices with the required support using ES 2 or ES 3.1.
            If MSAA is not available, the current default AA method will be used.
            </summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDiscardUnusedQualityLevels">
            <summary>
            When running in game mode, whether to keep shaders for all quality levels in memory or only those needed for the current quality level.
            Unchecked: Keep all quality levels in memory allowing a runtime quality level change. (default)
            Checked: Discard unused quality levels when loading content for the game, saving some memory.
            </summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bOcclusionCulling">
            <summary>Allows occluded meshes to be culled and no rendered.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.MinScreenRadiusForLights">
            <summary>Screen radius at which lights are culled. Larger values can improve performance but causes lights to pop off when they affect a small area of the screen.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.MinScreenRadiusForEarlyZPass">
            <summary>Screen radius at which objects are culled for the early Z pass. Larger values can improve performance but very large values can degrade performance if large occluders are not rendered.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.MinScreenRadiusForCSMdepth">
            <summary>Screen radius at which objects are culled for cascaded shadow map depth passes. Larger values can improve performance but can cause artifacts as objects stop casting shadows.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bPrecomputedVisibilityWarning">
            <summary>Displays a warning when no precomputed visibility data is available for the current camera location. This can be helpful if you are making a game that relies on precomputed visibility, e.g. a first person mobile game.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bTextureStreaming">
            <summary>When enabled textures will stream in based on what is visible on screen.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bUseDXT5NormalMaps">
            <summary>Whether to use DXT5 for normal maps, otherwise BC5 will be used, which is not supported on all hardware. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bClearCoatEnableSecondNormal">
            <summary>Use a separate normal map for the bottom layer of a clear coat material. This is a higher quality feature that is expensive.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.ReflectionCaptureResolution">
            <summary>The cubemap resolution for all reflection capture probes. Must be power of 2. Note that for very high values the memory and performance impact may be severe.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.ReflectionEnvironmentLightmapMixBasedOnRoughness">
            <summary>Whether to reduce lightmap mixing with reflection captures for very smooth surfaces.  This is useful to make sure reflection captures match SSR / planar reflections in brightness.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bForwardShading">
            <summary>Whether to use forward shading on desktop platforms, requires Shader Model 5 hardware.  Forward shading supports MSAA and has lower default cost, but fewer features supported overall.  Materials have to opt-in to more expensive features like high quality reflections.  Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bVertexFoggingForOpaque">
            <summary>Causes opaque materials to use per-vertex fogging, which costs less and integrates properly with MSAA.  Only supported with forward shading. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bAllowStaticLighting">
            <summary>Whether to allow any static lighting to be generated and used, like lightmaps and shadowmaps. Games that only use dynamic lighting should set this to 0 to save some static lighting overhead. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bUseNormalMapsForStaticLighting">
            <summary>Whether to allow any static lighting to use normal maps for lighting computations.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bGenerateMeshDistanceFields">
            <summary>Whether to build distance fields of static meshes, needed for distance field AO, which is used to implement Movable SkyLight shadows, and ray traced distance field shadows on directional lights.  Enabling will increase mesh build times and memory usage.  Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bGenerateLandscapeGIData">
            <summary>Whether to generate a low-resolution base color texture for landscapes for rendering real-time global illumination.  This feature requires GenerateMeshDistanceFields is also enabled, and will increase mesh build times and memory usage.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.TessellationAdaptivePixelsPerTriangle">
            <summary>When adaptive tessellation is enabled it will try to tessellate a mesh so that each triangle contains the specified number of pixels. The tessellation multiplier specified in the material can increase or decrease the amount of tessellation.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSeparateTranslucency">
            <summary>Allow translucency to be rendered to a separate render targeted and composited after depth of field. Prevents translucency from appearing out of focus.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.TranslucentSortPolicy">
            <summary>The sort mode for translucent primitives, affecting how they are ordered and how they change order as the camera moves.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.TranslucentSortAxis">
            <summary>The axis that sorting will occur along when Translucent Sort Policy is set to SortAlongAxis.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.CustomDepthStencil">
            <summary>Whether the custom depth pass for tagging primitives for postprocessing passes is enabled. Enabling it on demand can save memory but may cause a hitch the first time the feature is used.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bCustomDepthTaaJitter">
            <summary>Whether the custom depth pass has the TemporalAA jitter enabled. Disabling this can be useful when the result of the CustomDepth Pass is used after TAA (e.g. after Tonemapping)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultFeatureBloom">
            <summary>Whether the default for Bloom is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultFeatureAmbientOcclusion">
            <summary>Whether the default for AmbientOcclusion is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultFeatureAmbientOcclusionStaticFraction">
            <summary>Whether the default for AmbientOcclusionStaticFraction is enabled or not (only useful for baked lighting and if AO is on, allows to have SSAO affect baked lighting as well, costs performance, postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultFeatureAutoExposure">
            <summary>Whether the default for AutoExposure is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.DefaultFeatureAutoExposure">
            <summary>The default method for AutoExposure(postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultFeatureMotionBlur">
            <summary>Whether the default for MotionBlur is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultFeatureLensFlare">
            <summary>Whether the default for LensFlare is enabled or not (postprocess volume/camera/game setting can still override and enable or disable it independently)</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.DefaultFeatureAntiAliasing">
            <summary>What anti-aliasing mode is used by default</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bStencilForLODDither">
            <summary>Whether to use stencil for LOD dither fading.  This saves GPU time in the base pass for materials with dither fading enabled, but forces a full prepass. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.EarlyZPass">
            <summary>Whether to use a depth only pass to initialize Z culling for the base pass.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bEarlyZPassMovable">
            <summary>Whether to render movable objects in the early Z pass. Need to reload the level!</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bEarlyZPassOnlyMaterialMasking">
            <summary>Whether to compute materials' mask opacity only in early Z pass. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDBuffer">
            <summary>Whether to accumulate decal properties to a buffer before the base pass.  DBuffer decals correctly affect lightmap and sky lighting, unlike regular deferred decals.  DBuffer enabled forces a full prepass.  Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.ClearSceneMethod">
            <summary>Select how the g-buffer is cleared in game mode (only affects deferred shading).</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bBasePassOutputsVelocity">
            <summary>Enables materials with time-based World Position Offset and/or World Displacement to output accurate velocities. This incurs a performance cost. If this is disabled, those materials will not output velocities. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSelectiveBasePassOutputs">
            <summary>Enables not exporting to the GBuffer rendertargets that are not relevant. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bDefaultParticleCutouts">
            <summary>When enabled, after changing the material on a Required particle module a Particle Cutout texture will be chosen automatically from the Opacity Mask texture if it exists, if not the Opacity Texture will be used if it exists.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bGlobalClipPlane">
            <summary>Whether to support the global clip plane needed for planar reflections.  Enabling this increases BasePass triangle cost by ~15% regardless of whether planar reflections are active. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.GBufferFormat">
            <summary>Selects which GBuffer format should be used. Affects performance primarily via how much GPU memory bandwidth used.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bUseGPUMorphTargets">
            <summary>Whether to use original CPU method (loop per morph then by vertex) or use a GPU-based method on Shader Model 5 hardware.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bInstancedStereo">
            <summary>Enable instanced stereo rendering (only available for D3D SM5 or PS4).</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMultiView">
            <summary>Enable multi-view for instanced stereo rendering (only available on the PS4).</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileMultiView">
            <summary>Enable mobile multi-view rendering (only available on some GearVR Android devices using OpenGL ES 3.1).</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMonoscopicFarField">
            <summary>Enable monoscopic far field rendering (only available for mobile).</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.WireframeCullThreshold">
            <summary>Screen radius at which wireframe objects are culled. Larger values can improve performance when viewing a scene in wireframe.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSupportStationarySkylight">
            <summary>"Stationary skylight requires permutations of the basepass shaders.  Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSupportLowQualityLightmaps">
            <summary>"Low quality lightmap requires permutations of the lightmap rendering shaders.  Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSupportPointLightWholeSceneShadows">
            <summary>PointLight WholeSceneShadows requires many vertex and geometry shader permutations for cubemap rendering. Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSupportAtmosphericFog">
            <summary>"Atmospheric fog requires permutations of the basepass shaders.  Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bSupportSkinCacheShaders">
            <summary>"Skincache allows a compute shader to skin once each vertex, save those results into a new buffer and reuse those calculations when later running the depth, base and velocity passes. This also allows opting into the 'recompute tangents' for skinned mesh instance feature. Disabling will reduce the number of shader permutations required per material. Changing this setting requires restarting the editor."</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileEnableStaticAndCSMShadowReceivers">
            <summary>Allow primitives to receive both static and CSM shadows from a stationary light. Disabling will free a mobile texture sampler and reduce shader permutations. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileAllowDistanceFieldShadows">
            <summary>Generate shaders for primitives to receive distance field shadows from stationary directional lights. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileAllowMovableDirectionalLights">
            <summary>Generate shaders for primitives to receive movable directional lights. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.MobileNumDynamicPointLights">
            <summary>The number of dynamic point lights to support on mobile devices. Setting this to 0 for games which do not require dynamic point lights will reduce the number of shaders generated. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="P:UnrealEngine.URendererSettings.bMobileDynamicPointLightsUseStaticBranch">
            <summary>If this setting is enabled, the same shader will be used for any number of dynamic point lights (up to the maximum specified above) hitting a surface. This is slightly slower but reduces the number of shaders generated. Changing this setting requires restarting the editor.</summary>
        </member>
        <member name="T:UnrealEngine.URetainerBox">
            <summary>
            The Retainer Box renders children widgets to a render target first before
            later rendering that render target to the screen.  This allows both frequency
            and phase to be controlled so that the UI can actually render less often than the
            frequency of the main game render.  It also has the side benefit of allow materials
            to be applied to the render target after drawing the widgets to apply a simple post process.
            * Single Child
            * Caching / Performance
            </summary>
        </member>
        <member name="P:UnrealEngine.URetainerBox.Phase">
            <summary>
            The Phase this widget will draw on.
            If the Phase is 0, and the PhaseCount is 1, the widget will be drawn fresh every frame.
            If the Phase were 0, and the PhaseCount were 2, this retainer would draw a fresh frame every
            other frame.  So in a 60Hz game, the UI would render at 30Hz.
            </summary>
        </member>
        <member name="P:UnrealEngine.URetainerBox.PhaseCount">
            <summary>
            The PhaseCount controls how many phases are possible know what to modulus the current frame
            count by to determine if this is the current frame to draw the widget on.
            If the Phase is 0, and the PhaseCount is 1, the widget will be drawn fresh every frame.
            If the Phase were 0, and the PhaseCount were 2, this retainer would draw a fresh frame every
            other frame.  So in a 60Hz game, the UI would render at 30Hz.
            </summary>
        </member>
        <member name="P:UnrealEngine.URetainerBox.EffectMaterial">
            <summary>
            The effect to optionally apply to the render target.  We will set the texture sampler based on the name
            set in the @TextureParameter property.
            If you want to adjust transparency of the final image, make sure you set Blend Mode to AlphaComposite (Pre-Multiplied Alpha)
            and make sure to multiply the alpha you're apply across the surface to the color and the alpha of the render target, otherwise
            you won't see the expected color.
            </summary>
        </member>
        <member name="P:UnrealEngine.URetainerBox.TextureParameter">
            <summary>The texture sampler parameter of the @EffectMaterial, that we'll set to the render target.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.Density" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.Diffusion" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.Gain" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.GainHF" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.DecayTime" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.DecayHFRatio" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.ReflectionsGain" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.ReflectionsDelay" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.LateGain" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.LateDelay" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.AirAbsorptionGainHF" -->
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UReverbEffect.RoomRolloffFactor" -->
        <member name="P:UnrealEngine.UReverbEffect.bChanged">
            <summary>Transient property used to trigger real-time updates of the reverb for real-time editor previewing</summary>
        </member>
        <member name="T:UnrealEngine.URichTextBlock">
            <summary>
            The rich text block
            * Fancy Text
            * No Children
            </summary>
        </member>
        <member name="P:UnrealEngine.URichTextBlock.Text">
            <summary>The text to display</summary>
        </member>
        <member name="P:UnrealEngine.URichTextBlock.Font">
            <summary>The default font for the text.</summary>
        </member>
        <member name="P:UnrealEngine.URichTextBlock.Color">
            <summary>The default color for the text.</summary>
        </member>
        <member name="T:UnrealEngine.URig">
            <summary>
            URig : that has rigging data for skeleton
                    - used for retargeting
                    - support to share different animations
            </summary>
        </member>
        <member name="P:UnrealEngine.URig.TransformBases">
            <summary>Skeleton bone tree - each contains name and parent index*</summary>
        </member>
        <member name="P:UnrealEngine.URig.Nodes">
            <summary>Skeleton bone tree - each contains name and parent index*</summary>
        </member>
        <member name="T:UnrealEngine.URotatingMovementComponent">
            <summary>
            Performs continuous rotation of a component at a specific rotation rate.
            Rotation can optionally be offset around a pivot point.
            Collision testing is not performed during movement.
            </summary>
        </member>
        <member name="P:UnrealEngine.URotatingMovementComponent.RotationRate">
            <summary>How fast to update roll/pitch/yaw of the component we update.</summary>
        </member>
        <member name="P:UnrealEngine.URotatingMovementComponent.PivotTranslation">
            <summary>
            Translation of pivot point around which we rotate, relative to current rotation.
            For instance, with PivotTranslation set to (X=+100, Y=0, Z=0), rotation will occur
            around the point +100 units along the local X axis from the center of the object,
            rather than around the object's origin (the default).
            </summary>
        </member>
        <member name="P:UnrealEngine.URotatingMovementComponent.bRotationInLocalSpace">
            <summary>Whether rotation is applied in local or world space.</summary>
        </member>
        <member name="P:UnrealEngine.USafeZone.PadLeft">
            <summary>If this safe zone should pad for the left side of the screen's safe zone</summary>
        </member>
        <member name="P:UnrealEngine.USafeZone.PadRight">
            <summary>If this safe zone should pad for the right side of the screen's safe zone</summary>
        </member>
        <member name="P:UnrealEngine.USafeZone.PadTop">
            <summary>If this safe zone should pad for the top side of the screen's safe zone</summary>
        </member>
        <member name="P:UnrealEngine.USafeZone.PadBottom">
            <summary>If this safe zone should pad for the bottom side of the screen's safe zone</summary>
        </member>
        <member name="T:UnrealEngine.UScaleBox">
            <summary>
            Allows you to place content with a desired size and have it scale to meet the constraints placed on this box's alloted area.  If
            you needed to have a background image scale to fill an area but not become distorted with different aspect ratios, or if you need
            to auto fit some text to an area, this is the control for you.
            * Single Child
            * Aspect Ratio
            </summary>
        </member>
        <member name="P:UnrealEngine.UScaleBox.Stretch">
            <summary>The stretching rule to apply when content is stretched</summary>
        </member>
        <member name="P:UnrealEngine.UScaleBox.StretchDirection">
            <summary>Controls in what direction content can be scaled</summary>
        </member>
        <member name="P:UnrealEngine.UScaleBox.UserSpecifiedScale">
            <summary>Optional scale that can be specified by the User. Used only for UserSpecified stretching.</summary>
        </member>
        <member name="P:UnrealEngine.UScaleBox.IgnoreInheritedScale">
            <summary>Optional bool to ignore the inherited scale. Applies inverse scaling to counteract parents before applying the local scale operation.</summary>
        </member>
        <member name="T:UnrealEngine.UScaleBoxSlot">
            <summary>The Slot for the UScaleBoxSlot, contains the widget displayed in a button's single slot</summary>
        </member>
        <member name="P:UnrealEngine.UScaleBoxSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UScaleBoxSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UScaleBoxSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.USceneCaptureComponent">
            <summary>-> will be exported to EngineDecalClasses.h</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent.HiddenActors">
            <summary>The actors to hide in the scene capture.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent.ShowOnlyActors">
            <summary>The only actors to be rendered by this scene capture, if present.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent.bCaptureEveryFrame">
            <summary>Whether to update the capture's contents every frame.  If disabled, the component will render once on load and then only when moved.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent.bCaptureOnMovement">
            <summary>Whether to update the capture's contents on movement.  Disable if you are going to capture manually from blueprint.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent.MaxViewDistanceOverride">
            <summary>if > 0, sets a maximum render distance override.  Can be used to cull distant objects from a reflection if the reflecting plane is in an enclosed area like a hallway or room</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent.ShowFlagSettings">
            <summary>ShowFlags for the SceneCapture's ViewFamily, to control rendering settings for this view. Hidden but accessible through details customization</summary>
        </member>
        <member name="T:UnrealEngine.USceneCaptureComponent2D">
            <summary>Used to capture a 'snapshot' of the scene from a single plane and feed it to a render target.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.FOVAngle">
            <summary>Camera field of view (in degrees).</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.OrthoWidth">
            <summary>The desired width (in world units) of the orthographic view (ignored in Perspective mode)</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.TextureTarget">
            <summary>Output render target of the scene capture that can be read in materals.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.CompositeMode">
            <summary>When enabled, the scene capture will composite into the render target instead of overwriting its contents.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.PostProcessBlendWeight">
            <summary>Range (0.0, 1.0) where 0 indicates no effect, 1 indicates full effect.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.bUseCustomProjectionMatrix">
            <summary>Whether a custom projection matrix will be used during rendering. Use with caution. Does not currently affect culling</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.CustomProjectionMatrix">
            <summary>The custom projection matrix to use</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.bEnableClipPlane">
            <summary>
            Enables a clip plane while rendering the scene capture which is useful for portals.
            The global clip plane must be enabled in the renderer project settings for this to work.
            </summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.ClipPlaneBase">
            <summary>Base position for the clip plane, can be any position on the plane.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponent2D.ClipPlaneNormal">
            <summary>Normal for the plane.</summary>
        </member>
        <member name="T:UnrealEngine.USceneCaptureComponentCube">
            <summary>Used to capture a 'snapshot' of the scene from a 6 planes and feed it to a render target.</summary>
        </member>
        <member name="P:UnrealEngine.USceneCaptureComponentCube.TextureTarget">
            <summary>Temporary render target that can be used by the editor.</summary>
        </member>
        <member name="T:UnrealEngine.USceneComponent">
            <summary>
            A SceneComponent has a transform and supports attachment, but has no rendering or collision capabilities.
            Useful as a 'dummy' component in the hierarchy to offset others.
            @see [Scene Components](https://docs.unrealengine.com/latest/INT/Programming/UnrealArchitecture/Actors/Components/index.html#scenecomponents)
            </summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.AttachChildren">
            <summary>List of child SceneComponents that are attached to us.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.AttachSocketName">
            <summary>Optional socket name on AttachParent that we are attached to.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bWorldToComponentUpdated">
            <summary>True if we have ever updated ComponentToWorld based on RelativeLocation/Rotation/Scale. Used at startup to make sure it is initialized.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bAbsoluteLocation">
            <summary>If RelativeLocation should be considered relative to the world, rather than the parent</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bAbsoluteRotation">
            <summary>If RelativeRotation should be considered relative to the world, rather than the parent</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bAbsoluteScale">
            <summary>If RelativeScale3D should be considered relative to the world, rather than the parent</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bVisible">
            <summary>Whether to completely draw the primitive; if false, the primitive is not drawn, does not cast a shadow.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bHiddenInGame">
            <summary>Whether to hide the primitive in game, if the primitive is Visible.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bShouldUpdatePhysicsVolume">
            <summary>
            Whether or not the cached PhysicsVolume this component overlaps should be updated when the component is moved.
            @see GetPhysicsVolume()
            </summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bBoundsChangeTriggersStreamingDataRebuild">
            <summary>If true, a change in the bounds of the component will call trigger a streaming data rebuild</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bUseAttachParentBound">
            <summary>
            If true, this component uses its parents bounds when attached.
            This can be a significant optimization with many components attached together.
            </summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.bAbsoluteTranslation">
            <summary>DEPRECATED</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.RelativeLocation">
            <summary>Location of the component relative to its parent</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.RelativeRotation">
            <summary>Rotation of the component relative to its parent</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.RelativeScale3D">
            <summary>
            Non-uniform scaling of the component relative to its parent.
            Note that scaling is always applied in local space (no shearing etc)
            </summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.Mobility">
            <summary>How often this component is allowed to move, used to make various optimizations. Only safe to set in constructor.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.DetailMode">
            <summary>If detail mode is >= system detail mode, primitive won't be rendered.</summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.ComponentVelocity">
            <summary>
            Velocity of the component.
            @see GetComponentVelocity()
            </summary>
        </member>
        <member name="P:UnrealEngine.USceneComponent.PhysicsVolumeChangedDelegate">
            <summary>Delegate that will be called when PhysicsVolume has been changed *</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBar.WidgetStyle">
            <summary>Style of the scrollbar</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBar.Thickness">
            <summary>The thickness of the scrollbar thumb</summary>
        </member>
        <member name="T:UnrealEngine.UScrollBox">
            <summary>An arbitrary scrollable collection of widgets.  Great for presenting 10-100 widgets in a list.  Doesn't support virtualization.</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBox.WidgetStyle">
            <summary>The style</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBox.WidgetBarStyle">
            <summary>The bar style</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBox.Orientation">
            <summary>The orientation of the scrolling and stacking in the box.</summary>
        </member>
        <member name="T:UnrealEngine.UScrollBoxSlot">
            <summary>The Slot for the UScrollBox, contains the widget that are scrollable</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBoxSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UScrollBoxSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.ComponentClass">
            <summary>Component class</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.ComponentTemplate">
            <summary>Template for the component to create</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.CookedComponentInstancingData">
            <summary>Cached data for faster runtime instancing (only used in cooked builds)</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.CategoryName">
            <summary>If non-None, the assigned category name</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.AttachToName">
            <summary>Socket/Bone that Node might attach to</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.ParentComponentOrVariableName">
            <summary>Component template or variable that Node might be parented to</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.ParentComponentOwnerClassName">
            <summary>If the node is attached to another node inherited from a parent Blueprint, this contains the name of the Blueprint parent class that owns the component template //@TODO: We can potentially remove this if/when inherited SCS component template instances are included in subobject serialization, as we could then infer that the owner class is always the same as the BP class.</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.bIsParentComponentNative">
            <summary>If the node is parented, this indicates whether or not the template is found in the CDO's Components array</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.ChildNodes">
            <summary>Set of child nodes</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.MetaDataArray">
            <summary>Metadata information for this Node</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.bIsFalseRoot">
            <summary>(DEPRECATED)</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.bIsNative">
            <summary>(DEPRECATED) Indicates if this is a native component or not</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.NativeComponentName">
            <summary>(DEPRECATED) If this is a native component, this is the name of the UActorComponent</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.bVariableNameAutoGenerated">
            <summary>(DEPRECATED) If true, the variable name was a autogenerated and is not presented to the user</summary>
        </member>
        <member name="P:UnrealEngine.USCS_Node.InternalVariableName">
            <summary>
            Internal variable name. This is used for:
                                  a) Generating the component template (archetype) object name.
                                  b) A UObjectProperty in the generated Blueprint class. This holds a reference to the component instance created at Actor construction time.
                                  c) Archetype lookup through the generated Blueprint class. All instances route back to the archetype through the variable name (i.e. not the template name).
            </summary>
        </member>
        <member name="P:UnrealEngine.UShadowMapTexture2D.ShadowmapFlags">
            <summary>Bit-field with shadowmap flags.</summary>
        </member>
        <member name="T:UnrealEngine.UShapeComponent">
            <summary>ShapeComponent is a PrimitiveComponent that is represented by a simple geometrical shape (sphere, capsule, box, etc).</summary>
        </member>
        <member name="P:UnrealEngine.UShapeComponent.ShapeColor">
            <summary>Color used to draw the shape.</summary>
        </member>
        <member name="P:UnrealEngine.UShapeComponent.ShapeBodySetup">
            <summary>Description of collision</summary>
        </member>
        <member name="P:UnrealEngine.UShapeComponent.bDrawOnlyIfSelected">
            <summary>Only show this component if the actor is selected</summary>
        </member>
        <member name="P:UnrealEngine.UShapeComponent.bShouldCollideWhenPlacing">
            <summary>If true it allows Collision when placing even if collision is not enabled</summary>
        </member>
        <member name="P:UnrealEngine.UShapeComponent.bDynamicObstacle">
            <summary>If set, shape will be exported for navigation as dynamic modifier instead of using regular collision data</summary>
        </member>
        <member name="P:UnrealEngine.UShapeComponent.AreaClass">
            <summary>Navigation area type (empty = default obstacle)</summary>
        </member>
        <member name="P:UnrealEngine.USimpleConstructionScript.RootNodes">
            <summary>Root nodes of the construction script</summary>
        </member>
        <member name="P:UnrealEngine.USimpleConstructionScript.AllNodes">
            <summary>All nodes that exist in the hierarchy of this SimpleConstructionScript</summary>
        </member>
        <member name="P:UnrealEngine.USimpleConstructionScript.DefaultSceneRootNode">
            <summary>Default scene root node; used when no other nodes are available to use as the root</summary>
        </member>
        <member name="P:UnrealEngine.USimpleConstructionScript.RootNode">
            <summary>(DEPRECATED) Root node of the construction script</summary>
        </member>
        <member name="P:UnrealEngine.USimpleConstructionScript.ActorComponentNodes">
            <summary>(DEPRECATED) Actor Component based nodes are stored here.  They cannot be in the tree hierarchy</summary>
        </member>
        <member name="T:UnrealEngine.USizeBox">
            <summary>
            A widget that allows you to specify the size it reports to have and desire.  Not all widgets report a desired size
            that you actually desire.  Wrapping them in a SizeBox lets you have the Size Box force them to be a particular size.
            * Single Child
            * Fixed Size
            </summary>
        </member>
        <member name="P:UnrealEngine.USizeBox.WidthOverride">
            <summary>When specified, ignore the content's desired size and report the WidthOverride as the Box's desired width.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBox.HeightOverride">
            <summary>When specified, ignore the content's desired size and report the HeightOverride as the Box's desired height.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBox.MinDesiredWidth">
            <summary>When specified, will report the MinDesiredWidth if larger than the content's desired width.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBox.MinDesiredHeight">
            <summary>When specified, will report the MinDesiredHeight if larger than the content's desired height.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBox.MaxDesiredWidth">
            <summary>When specified, will report the MaxDesiredWidth if smaller than the content's desired width.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBox.MaxDesiredHeight">
            <summary>When specified, will report the MaxDesiredHeight if smaller than the content's desired height.</summary>
        </member>
        <member name="T:UnrealEngine.USizeBoxSlot">
            <summary>The Slot for the USizeBoxSlot, contains the widget displayed in a button's single slot</summary>
        </member>
        <member name="P:UnrealEngine.USizeBoxSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBoxSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.USizeBoxSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalBodySetup.CurrentPhysicalAnimationProfile">
            <summary>dummy place for customization inside phat. Profiles are ordered dynamically and we need a static place for detail customization</summary>
        </member>
        <member name="T:UnrealEngine.USkeletalMesh">
            <summary>
            SkeletalMesh is geometry bound to a hierarchical skeleton of bones which can be animated for the purpose of deforming the mesh.
            Skeletal Meshes are built up of two parts; a set of polygons composed to make up the surface of the mesh, and a hierarchical skeleton which can be used to animate the polygons.
            The 3D models, rigging, and animations are created in an external modeling and animation application (3DSMax, Maya, Softimage, etc).
            @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/SkeletalMeshes/
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.Skeleton">
            <summary>Skeleton of this skeletal mesh *</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.ImportedBounds">
            <summary>Original imported mesh bounds</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.ExtendedBounds">
            <summary>Bounds extended by user values below</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.PositiveBoundsExtension">
            <summary>
            Bound extension values in addition to imported bound in the positive direction of XYZ,
                positive value increases bound size and negative value decreases bound size.
                The final bound would be from [Imported Bound - Negative Bound] to [Imported Bound + Positive Bound].
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.NegativeBoundsExtension">
            <summary>
            Bound extension values in addition to imported bound in the negative direction of XYZ,
                positive value increases bound size and negative value decreases bound size.
                The final bound would be from [Imported Bound - Negative Bound] to [Imported Bound + Positive Bound].
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.Materials">
            <summary>List of materials applied to this mesh.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.SkelMirrorTable">
            <summary>List of bones that should be mirrored.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.LODInfo">
            <summary>Struct containing information for each LOD level, such as materials to use, and when use the LOD.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.bUseFullPrecisionUVs">
            <summary>If true, use 32 bit UVs. If false, use 16 bit UVs to save memory</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.bHasBeenSimplified">
            <summary>true if this mesh has ever been simplified with Simplygon.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.bHasVertexColors">
            <summary>Whether or not the mesh has vertex colors</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.bEnablePerPolyCollision">
            <summary>Uses skinned data for collision data. Per poly collision cannot be used for simulation, in most cases you are better off using the physics asset</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.BodySetup">
            <summary>Physics data for the per poly collision case. In 99% of cases you will not need this and are better off using simple ragdoll collision (physics asset)</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.PhysicsAsset">
            <summary>
            Physics and collision information used for this USkeletalMesh, set up in PhAT.
            This is used for per-bone hit detection, accurate bounding box calculation and ragdoll physics for example.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.ShadowPhysicsAsset">
            <summary>
            Physics asset whose shapes will be used for shadowing when components have bCastCharacterCapsuleDirectShadow or bCastCharacterCapsuleIndirectShadow enabled.
            Only spheres and sphyl shapes in the physics asset can be supported.  The more shapes used, the higher the cost of the capsule shadows will be.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.AssetImportData">
            <summary>Importing data and options used for this mesh</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.SourceFilePath">
            <summary>Path to the resource used to construct this skeletal mesh</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.SourceFileTimestamp">
            <summary>Date/Time-stamp of the file from the last import</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.OptimizationSettings">
            <summary>Optimization settings used to simplify LODs of this mesh.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.PreviewAttachedAssetContainer">
            <summary>Attached assets component for this mesh</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.SelectedEditorSection">
            <summary>The section currently selected in the Editor. Used for highlighting</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.SelectedClothingSection">
            <summary>The section currently selected for clothing. need to remember this index for reimporting cloth</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.FloorOffset">
            <summary>Height offset for the floor mesh in the editor</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.RetargetBasePose">
            <summary>This is buffer that saves pose that is used by retargeting</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.ClothingAssets">
            <summary>Clothing asset data</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.PostProcessAnimBlueprint">
            <summary>
            Animation Blueprint class to run as a post process for this mesh.
            This blueprint will be ran before physics, but after the main
            anim instance for any skeletal mesh component using this mesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.AssetUserData">
            <summary>Array of user data stored with the asset</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMesh.Sockets">
            <summary>
            Array of named socket locations, set up in editor and used as a shortcut instead of specifying
            everything explicitly to AttachComponent in the SkeletalMeshComponent.
            </summary>
        </member>
        <member name="T:UnrealEngine.USkeletalMeshComponent">
            <summary>
            SkeletalMeshComponent is used to create an instance of an animated SkeletalMesh asset.
            @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/SkeletalMeshes/
            @see USkeletalMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.AnimationMode">
            <summary>Whether to use Animation Blueprint or play Single Animation Asset.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.AnimationBlueprint">
            <summary>The blueprint for creating an AnimationScript.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.AnimClass">
            <summary>The AnimBlueprint class to use. Use 'SetAnimInstanceClass' to change at runtime.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.AnimScriptInstance">
            <summary>The active animation graph program instance.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.SubInstances">
            <summary>Any running sub anim instances that need to be updates on the game thread</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.PostProcessAnimInstance">
            <summary>
            An instance created from the PostPhysicsBlueprint property of the skeletal mesh we're using,
            Runs after physics has been blended
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.CachedBoneSpaceTransforms">
            <summary>Cached BoneSpaceTransforms for Update Rate optimization.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.CachedComponentSpaceTransforms">
            <summary>Cached SpaceBases for Update Rate optimization.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.GlobalAnimRateScale">
            <summary>Used to scale speed of all animations on this skeletal mesh.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bHasValidBodies">
            <summary>If true, there is at least one body in the current PhysicsAsset with a valid bone in the current SkeletalMesh</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.KinematicBonesUpdateType">
            <summary>If we are running physics, should we update non-simulated bones based on the animation bone positions.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.PhysicsTransformUpdateMode">
            <summary>Whether physics simulation updates component transform.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bBlendPhysics">
            <summary>Enables blending in of physics bodies whether Simulate or not</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bEnablePhysicsOnDedicatedServer">
            <summary>
            If true, simulate physics for this component on a dedicated server.
            This should be set if simulating physics and replicating with a dedicated server.
                Note: This property cannot be changed at runtime.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bUpdateJointsFromAnimation">
            <summary>
            If we should pass joint position to joints each frame, so that they can be used by motorized joints to drive the
            ragdoll based on the animation.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bDisableClothSimulation">
            <summary>Disable cloth simulation and play original animation without simulation</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bCollideWithEnvironment">
            <summary>can't collide with part of environment if total collision volumes exceed 16 capsules or 32 planes per convex</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bCollideWithAttachedChildren">
            <summary>can't collide with part of attached children if total collision volumes exceed 16 capsules or 32 planes per convex</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bLocalSpaceSimulation">
            <summary>
            It's worth trying this option when you feel that the current cloth simulation is unstable.
            The scale of the actor is maintained during the simulation.
            It is possible to add the inertia effects to the simulation, through the inertiaScale parameter of the clothing material.
            So with an inertiaScale of 1.0 there should be no visible difference between local space and global space simulation.
            Known issues: - Currently there's simulation issues when this feature is used in 3.x (DE4076) So if localSpaceSim is enabled there's no inertia effect when the global pose of the clothing actor changes.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bClothMorphTarget">
            <summary>
            cloth morph target option
            This option will be applied only before playing because should do pre-calculation to reduce computation time for run-time play
            so it's impossible to change this option in run-time
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bResetAfterTeleport">
            <summary>reset the clothing after moving the clothing position (called teleport)</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.TeleportDistanceThreshold">
            <summary>
            conduct teleportation if the character's movement is greater than this threshold in 1 frame.
            Zero or negative values will skip the check
            you can also do force teleport manually using ForceNextUpdateTeleport() / ForceNextUpdateTeleportAndReset()
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.TeleportRotationThreshold">
            <summary>
            rotation threshold in degree, ranging from 0 to 180
            conduct teleportation if the character's rotation is greater than this threshold in 1 frame.
            Zero or negative values will skip the check
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.ClothBlendWeight">
            <summary>
            weight to blend between simulated results and key-framed positions
            if weight is 1.0, shows only cloth simulation results and 0.0 will show only skinned results
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.RootBoneTranslation">
            <summary>Offset of the root bone from the reference pose. Used to offset bounding box.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bNoSkeletonUpdate">
            <summary>Skips Ticking and Bone Refresh.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bPauseAnims">
            <summary>pauses this component's animations (doesn't tick them, but still refreshes bones)</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bUseRefPoseOnInitAnim">
            <summary>On InitAnim should we set to ref pose (if false use first tick of animation data)</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bEnablePerPolyCollision">
            <summary>Uses skinned data for collision data.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.BodySetup">
            <summary>
            Used for per poly collision. In 99% of cases you will be better off using a Physics Asset.
            This BodySetup is per instance because all modification of vertices is done in place
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bOnlyAllowAutonomousTickPose">
            <summary>
            If true TickPose() will not be called from the Component's TickComponent function.
            It will instead be called from Autonomous networking updates. See ACharacter.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bIsAutonomousTickPose">
            <summary>True if calling TickPose() from Autonomous networking updates. See ACharacter.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bForceRefpose">
            <summary>If true, force the mesh into the reference pose - is an optimization.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bOldForceRefPose">
            <summary>If bForceRefPose was set last tick.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bShowPrePhysBones">
            <summary>Bool that enables debug drawing of the skeleton before it is passed to the physics. Useful for debugging animation-driven physics.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bRequiredBonesUpToDate">
            <summary>If false, indicates that on the next call to UpdateSkelPose the RequiredBones array should be recalculated.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bAnimTreeInitialised">
            <summary>If true, AnimTree has been initialised.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bIncludeComponentLocationIntoBounds">
            <summary>
            If true, the Location of this Component will be included into its bounds calculation
            (this can be useful when using SMU_OnlyTickPoseWhenRendered on a character that moves away from the root and no bones are left near the origin of the component)
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bEnableLineCheckWithBounds">
            <summary>If true, line checks will test against the bounding box of this skeletal mesh component and return a hit if there is a collision.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bUpdateAnimationInEditor">
            <summary>If true, this will Tick until disabled</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.CachedAnimCurveUidVersion">
            <summary>Cache AnimCurveUidVersion from Skeleton and this will be used to identify if it needs to be updated</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.LineCheckBoundsScale">
            <summary>If bEnableLineCheckWithBounds is true, scale the bounds by this value before doing line check.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.OnConstraintBroken">
            <summary>Notification when constraint is broken.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.SequenceToPlay">
            <summary>
            these are deprecated variables from removing SingleAnimSkeletalComponent
            remove if this version goes away : VER_UE4_REMOVE_SINGLENODEINSTANCE
            deprecated variable to be re-save
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.AnimToPlay">
            <summary>The default sequence to play on this skeletal mesh</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bDefaultLooping">
            <summary>Default setting for looping for SequenceToPlay. This is not current state of looping.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.bDefaultPlaying">
            <summary>Default setting for playing for SequenceToPlay. This is not current state of playing.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.DefaultPosition">
            <summary>Default setting for position of SequenceToPlay to play.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.DefaultPlayRate">
            <summary>Default setting for playrate of SequenceToPlay to play.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshComponent.LastPoseTickTime">
            <summary>Keep track of when animation has been ticked to ensure it is ticked only once per frame.</summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshSocket.SocketName">
            <summary>
            Defines a named attachment location on the USkeletalMesh.
            These are set up in editor and used as a shortcut instead of specifying
            everything explicitly to AttachComponent in the SkeletalMeshComponent.
            The Outer of a SkeletalMeshSocket should always be the USkeletalMesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeletalMeshSocket.bForceAlwaysAnimated">
            <summary>
            If true then the hierarchy of bones this socket is attached to will always be
                      evaluated, even if it had previously been removed due to the current lod setting
            </summary>
        </member>
        <member name="T:UnrealEngine.USkeleton">
            <summary>
            USkeleton : that links between mesh and animation
                    - Bone hierarchy for animations
                    - Bone/track linkup between mesh and animation
                    - Retargetting related
                    - Mirror table
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.BoneTree">
            <summary>Skeleton bone tree - each contains name and parent index*</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.RefLocalPoses">
            <summary>Reference skeleton poses in local space</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.VirtualBoneGuid">
            <summary>
            Guid for virtual bones.
            Separate so that we don't have to dirty the original guid when only changing virtual bones
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.VirtualBones">
            <summary>
            Array of this skeletons virtual bones. These are new bones are links between two existing bones
            and are baked into all the skeletons animations
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.LinkupCache">
            <summary>Non-serialised cache of linkups between different skeletal meshes and this Skeleton.</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.Sockets">
            <summary>
            Array of named socket locations, set up in editor and used as a shortcut instead of specifying
            everything explicitly to AttachComponent in the SkeletalMeshComponent.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.SmartNames">
            <summary>Container for smart name mappings</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.BlendProfiles">
            <summary>List of blend profiles available in this skeleton</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.SlotGroups">
            <summary>serialized slot groups and slot names.</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.AnimationNotifies">
            <summary>AnimNotifiers that has been created. Right now there is no delete step for this, but in the future we'll supply delete*</summary>
        </member>
        <member name="P:UnrealEngine.USkeleton.PreviewAttachedAssetContainer">
            <summary>Attached assets component for this skeleton</summary>
        </member>
        <member name="T:UnrealEngine.USkinnedMeshComponent">
            <summary>
            Skinned mesh component that supports bone skinned mesh rendering.
            This class does not support animation.
            @see USkeletalMeshComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.SkeletalMesh">
            <summary>The skeletal mesh used by this component.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bUseBoundsFromMasterPoseComponent">
            <summary>
            When true, we will just using the bounds from our MasterPoseComponent.  This is useful for when we have a Mesh Parented
            to the main SkelMesh (e.g. outline mesh or a full body overdraw effect that is toggled) that is always going to be the same
            bounds as parent.  We want to do no calculations in that case.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.ChunkIndexPreview">
            <summary>Index of the chunk to preview... If set to -1, all chunks will be rendered</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.SectionIndexPreview">
            <summary>Index of the section to preview... If set to -1, all section will be rendered</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.PhysicsAssetOverride">
            <summary>PhysicsAsset is set in SkeletalMesh by default, but you can override with this value</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.ForcedLodModel">
            <summary>If 0, auto-select LOD level. if >0, force to (ForcedLodModel-1).</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.MinLodModel">
            <summary>
            This is the min LOD that this component will use.  (e.g. if set to 2 then only 2+ LOD Models will be used.) This is useful to set on
            meshes which are known to be a certain distance away and still want to have better LODs when zoomed in on them.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.LODInfo">
            <summary>LOD array info. Each index will correspond to the LOD index *</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.USkinnedMeshComponent.StreamingDistanceMultiplier" -->
        <member name="P:UnrealEngine.USkinnedMeshComponent.WireframeColor">
            <summary>Wireframe color</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bForceWireframe">
            <summary>Forces the mesh to draw in wireframe mode.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bDisplayBones">
            <summary>Draw the skeleton hierarchy for this skel mesh.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bDisableMorphTarget">
            <summary>Disable Morphtarget for this component.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bHideSkin">
            <summary>Don't bother rendering the skin.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bPerBoneMotionBlur">
            <summary>If true, use per-bone motion blur on this skeletal mesh (requires additional rendering, can be disabled to save performance).</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bComponentUseFixedSkelBounds">
            <summary>When true, skip using the physics asset etc. and always use the fixed bounds defined in the SkeletalMesh.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bConsiderAllBodiesForBounds">
            <summary>If true, when updating bounds from a PhysicsAsset, consider _all_ BodySetups, not just those flagged with bConsiderForBounds.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.MeshComponentUpdateFlag">
            <summary>
            This is update frequency flag even when our Owner has not been rendered recently
            SMU_AlwaysTickPoseAndRefreshBones,                   // Always Tick and Refresh BoneTransforms whether rendered or not
            SMU_AlwaysTickPose,                                                  // Always Tick, but Refresh BoneTransforms only when rendered
            SMU_OnlyTickPoseWhenRendered,                                // Tick only when rendered, and it will only RefreshBoneTransforms when rendered
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bForceMeshObjectUpdate">
            <summary>If true, UpdateTransform will always result in a call to MeshObject->Update.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bCanHighlightSelectedSections">
            <summary>Whether or not we can highlight selected sections - this should really only be done in the editor</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bRecentlyRendered">
            <summary>true if mesh has been recently rendered, false otherwise</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.USkinnedMeshComponent.ProgressiveDrawingFraction" -->
        <member name="P:UnrealEngine.USkinnedMeshComponent.CustomSortAlternateIndexMode">
            <summary>
            Editor only. Used for manually selecting the alternate indices for
            TRISORT_CustomLeftRight sections.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bCastCapsuleDirectShadow">
            <summary>
            Whether to use the capsule representation (when present) from a skeletal mesh's ShadowPhysicsAsset for direct shadowing from lights.
            This type of shadowing is approximate but handles extremely wide area shadowing well.  The softness of the shadow depends on the light's LightSourceAngle / SourceRadius.
            This flag will force bCastInsetShadow to be enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bCastCapsuleIndirectShadow">
            <summary>Whether to use the capsule representation (when present) from a skeletal mesh's ShadowPhysicsAsset for shadowing indirect lighting (from lightmaps or skylight).</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.CapsuleIndirectShadowMinVisibility">
            <summary>Controls how dark the capsule indirect shadow can be.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bCPUSkinning">
            <summary>CPU skinning rendering - only for previewing in Persona and conversion tools</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.CachedLocalBounds">
            <summary>LocalBounds cached, so they're computed just once.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bCachedLocalBoundsUpToDate">
            <summary>true when CachedLocalBounds is up to date.</summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bEnableUpdateRateOptimizations">
            <summary>
            if TRUE, Owner will determine how often animation will be updated and evaluated. See AnimUpdateRateTick()
            This allows to skip frames for performance. (For example based on visibility and size on screen).
            </summary>
        </member>
        <member name="P:UnrealEngine.USkinnedMeshComponent.bDisplayDebugUpdateRateOptimizations">
            <summary>
            Enable on screen debugging of update rate optimization.
            Red = Skipping 0 frames, Green = skipping 1 frame, Blue = skipping 2 frames, black = skipping more than 2 frames.
            @todo: turn this into a console command.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.SourceType">
            <summary>Indicates where to get the light contribution from.</summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.Cubemap">
            <summary>Cubemap to use for sky lighting if SourceType is set to SLS_SpecifiedCubemap.</summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.SourceCubemapAngle">
            <summary>Angle to rotate the source cubemap when SourceType is set to SLS_SpecifiedCubemap.</summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.CubemapResolution">
            <summary>Maximum resolution for the very top processed cubemap mip. Must be a power of 2.</summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.SkyDistanceThreshold">
            <summary>
            Distance from the sky light at which any geometry should be treated as part of the sky.
            This is also used by reflection captures, so update reflection captures to see the impact.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.bLowerHemisphereIsBlack">
            <summary>
            Whether all distant lighting from the lower hemisphere should be set to LowerHemisphereColor.
            Enabling this is accurate when lighting a scene on a planet where the ground blocks the sky,
            However disabling it can be useful to approximate skylight bounce lighting (eg Movable light).
            </summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.OcclusionMaxDistance">
            <summary>
            Max distance that the occlusion of one point will affect another.
            Higher values increase the cost of Distance Field AO exponentially.
            </summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.Contrast">
            <summary>Contrast S-curve applied to the computed AO.  A value of 0 means no contrast increase, 1 is a significant contrast increase.</summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.MinOcclusion">
            <summary>Controls the darkest that a fully occluded area can get.</summary>
        </member>
        <member name="P:UnrealEngine.USkyLightComponent.OcclusionTint">
            <summary>Tint color on occluded areas, artistic control.</summary>
        </member>
        <member name="T:UnrealEngine.USlateBrushAsset">
            <summary>
            An asset describing how a texture can exist in slate's DPI-aware environment
            and how this texture responds to resizing. e.g. Scale9-stretching? Tiling?
            </summary>
        </member>
        <member name="P:UnrealEngine.USlateBrushAsset.Brush">
            <summary>The slate brush resource describing the texture's behavior.</summary>
        </member>
        <member name="T:UnrealEngine.USlateDataSheet">
            <summary>
            A texture used for communicating data to the GPU.
            Used in combination with SlateVectorArtData and SlateVectorArtInstanceData to
            pass data to UI materials.
            </summary>
        </member>
        <member name="T:UnrealEngine.USlateVectorArtData">
            <summary>Turn static mesh data into Slate's simple vector art format.</summary>
        </member>
        <member name="P:UnrealEngine.USlateVectorArtData.MeshAsset">
            <summary>The mesh data asset from which the vector art is sourced</summary>
        </member>
        <member name="P:UnrealEngine.USlateVectorArtData.SourceMaterial">
            <summary>The material which we are using, or the material from with the MIC was constructed.</summary>
        </member>
        <member name="P:UnrealEngine.USlateVectorArtData.VertexData">
            <summary>@see GetVertexData()</summary>
        </member>
        <member name="P:UnrealEngine.USlateVectorArtData.IndexData">
            <summary>@see GetIndexData()</summary>
        </member>
        <member name="P:UnrealEngine.USlateVectorArtData.Material">
            <summary>@see GetMaterial()</summary>
        </member>
        <member name="T:UnrealEngine.USlateWidgetStyleAsset">
            <summary>Just a wrapper for the struct with real data in it.</summary>
        </member>
        <member name="T:UnrealEngine.USlider">
            <summary>
            A simple widget that shows a sliding bar with a handle that allows you to control the value between 0..1.
            * No Children
            </summary>
        </member>
        <member name="P:UnrealEngine.USlider.Value">
            <summary>The volume value to display.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.WidgetStyle">
            <summary>The progress bar style</summary>
        </member>
        <member name="P:UnrealEngine.USlider.Orientation">
            <summary>The slider's orientation.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.SliderBarColor">
            <summary>The color to draw the slider bar in.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.SliderHandleColor">
            <summary>The color to draw the slider handle in.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.IndentHandle">
            <summary>Whether the slidable area should be indented to fit the handle.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.Locked">
            <summary>Whether the handle is interactive or fixed.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.StepSize">
            <summary>The amount to adjust the value by, when using a controller or keyboard</summary>
        </member>
        <member name="P:UnrealEngine.USlider.IsFocusable">
            <summary>Should the slider be focusable?</summary>
        </member>
        <member name="P:UnrealEngine.USlider.OnMouseCaptureBegin">
            <summary>Invoked when the mouse is pressed and a capture begins.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.OnMouseCaptureEnd">
            <summary>Invoked when the mouse is released and a capture ends.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.OnControllerCaptureBegin">
            <summary>Invoked when the controller capture begins.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.OnControllerCaptureEnd">
            <summary>Invoked when the controller capture ends.</summary>
        </member>
        <member name="P:UnrealEngine.USlider.OnValueChanged">
            <summary>Called when the value is changed by slider or typing.</summary>
        </member>
        <member name="T:UnrealEngine.USoundAttenuation">
            <summary>Defines how a sound changes volume with distance to the listener</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.SoundClassObject">
            <summary>Sound class this sound belongs to</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.SoundSubmixObject">
            <summary>Sound submix this sound belongs to</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.bDebug">
            <summary>When "stat sounds -debug" has been specified, draw this sound's attenuation shape when the sound is audible. For debugging purpose only.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.bOverrideConcurrency">
            <summary>Whether or not to override the sound concurrency object with local concurrency settings.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.bIgnoreFocus">
            <summary>Whether or not to ignore focus on this sound.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.SoundConcurrencySettings">
            <summary>If bOverridePlayback is false, the sound concurrency settings to use for this sound.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.ConcurrencyOverrides">
            <summary>If bOverridePlayback is true, concurrency settings to use.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.MaxConcurrentPlayCount">
            <summary>Maximum number of times this sound can be played concurrently.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.Duration">
            <summary>Duration of sound in seconds.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.AttenuationSettings">
            <summary>Attenuation settings package for the sound</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.Priority">
            <summary>Sound priority (higher value is higher priority) used for concurrency resolution. This priority value is weighted against the final volume of the sound.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.SourceEffectChain">
            <summary>The source effect chain to use for this sound.</summary>
        </member>
        <member name="P:UnrealEngine.USoundBase.DefaultMasterReverbSendAmount">
            <summary>The default amount of audio to send to the master reverb effect for this sound if reverb is enabled for the sound. This can be overridden by sound attenuation settings for 3d sounds.</summary>
        </member>
        <member name="P:UnrealEngine.USoundClass.Properties">
            <summary>Configurable properties like volume and priority.</summary>
        </member>
        <member name="P:UnrealEngine.USoundClass.PassiveSoundMixModifiers">
            <summary>SoundMix Modifiers to activate automatically when a sound of this class is playing.</summary>
        </member>
        <member name="T:UnrealEngine.USoundCue">
            <summary>The behavior of audio playback is defined within Sound Cues.</summary>
        </member>
        <member name="P:UnrealEngine.USoundCue.bOverrideAttenuation">
            <summary>Indicates whether attenuation should use the Attenuation Overrides or the Attenuation Settings asset</summary>
        </member>
        <member name="P:UnrealEngine.USoundCue.VolumeMultiplier">
            <summary>Volume multiplier for the Sound Cue</summary>
        </member>
        <member name="P:UnrealEngine.USoundCue.PitchMultiplier">
            <summary>Pitch multiplier for the Sound Cue</summary>
        </member>
        <member name="P:UnrealEngine.USoundCue.AttenuationOverrides">
            <summary>Attenuation settings to use if Override Attenuation is set to true</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.bApplyEQ">
            <summary>Whether to apply the EQ effect</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.SoundClassEffects">
            <summary>Array of changes to be applied to groups.</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.InitialDelay">
            <summary>Initial delay in seconds before the the mix is applied.</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.FadeInTime">
            <summary>Time taken in seconds for the mix to fade in.</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.Duration">
            <summary>Duration of mix, negative means it will be applied until another mix is set.</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.FadeOutTime">
            <summary>Time taken in seconds for the mix to fade out.</summary>
        </member>
        <member name="P:UnrealEngine.USoundMix.bChanged">
            <summary>Transient property used to trigger real-time updates of the active EQ filter for editor previewing</summary>
        </member>
        <member name="P:UnrealEngine.USoundNode.GraphNode">
            <summary>Node's Graph representation, used to get position.</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeAttenuation">
            <summary>Defines how a sound's volume changes based on distance to the listener</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeBranch">
            <summary>Selects a child node based on the value of a boolean parameter</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeBranch.BoolParameterName">
            <summary>The name of the boolean parameter to use to determine which branch we should take</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeConcatenator">
            <summary>Plays child nodes sequentially</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeConcatenator.InputVolume">
            <summary>Volume multiplier for each input.</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeDelay">
            <summary>Defines a delay</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeDelay.DelayMin">
            <summary>The lower bound of delay time in seconds.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeDelay.DelayMax">
            <summary>The upper bound of delay time in seconds.</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeDialoguePlayer">
            <summary>Sound node that contains a reference to the dialogue table to pull from and be played</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeDialoguePlayer.bLooping">
            <summary>Whether the dialogue line should be played looping</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:UnrealEngine.USoundNodeDistanceCrossFade" -->
        <member name="P:UnrealEngine.USoundNodeDistanceCrossFade.CrossFadeInput">
            <summary>
            Each input needs to have the correct data filled in so the SoundNodeDistanceCrossFade is able
            to determine which sounds to play
            </summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeEnveloper">
            <summary>Allows manipulation of volume and pitch over a set time period</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.LoopStart">
            <summary>The time in seconds where the envelope's loop begins.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.LoopEnd">
            <summary>The time in seconds where the envelope's loop ends.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.DurationAfterLoop">
            <summary>The time in seconds it takes the evelope to fade out after the last loop is completed.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.LoopCount">
            <summary>The number of times the envelope should loop if looping is enabled and the envelope is not set to loop indefinitely.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.bLoopIndefinitely">
            <summary>If enabled, the envelope will continue to loop indefenitely regardless of the Loop Count value.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.bLoop">
            <summary>If enabled, the envelope will loop using the loop settings.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.VolumeCurve">
            <summary>The distribution defining the volume envelope.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.PitchCurve">
            <summary>The distribution defining the pitch envelope.</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.PitchMin">
            <summary>The lower bound of pitch (1.0 is no change)</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.PitchMax">
            <summary>The upper bound of pitch (1.0 is no change)</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.VolumeMin">
            <summary>The lower bound of volume (1.0 is no change)</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeEnveloper.VolumeMax">
            <summary>The upper bound of volume (1.0 is no change)</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeGroupControl">
            <summary>
            Plays different sounds depending on the number of active sounds
            Any time a new sound is played, the first group that has an available slot will be chosen
            </summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeGroupControl.GroupSizes">
            <summary>How many active sounds are allowed for each group</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeLooping">
            <summary>
            Defines how a sound loops; either indefinitely, or for a set number of times.
            Note: The Looping node should only be used for logical or procedural looping such as introducing a delay.
            These sounds will not be played seamlessly. If you want a sound to loop seamlessly and indefinitely,
            use the Looping flag on the Wave Player node for that sound.
            </summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeLooping.LoopCount">
            <summary>The amount of times to loop</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeLooping.bLoopIndefinitely">
            <summary>If enabled, the node will continue to loop indefinitely regardless of the Loop Count value.</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeMixer">
            <summary>Defines how concurrent sounds are mixed together</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeMixer.InputVolume">
            <summary>A volume for each input.  Automatically sized.</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeModulator">
            <summary>Defines a random volume and pitch modification when a sound starts</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeModulator.PitchMin">
            <summary>The lower bound of pitch (1.0 is no change).</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeModulator.PitchMax">
            <summary>The upper bound of pitch (1.0 is no change).</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeModulator.VolumeMin">
            <summary>The lower bound of volume (1.0 is no change).</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeModulator.VolumeMax">
            <summary>The upper bound of volume (1.0 is no change).</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeParamCrossFade">
            <summary>Crossfades between different sounds based on a parameter</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeParamCrossFade.ParamName">
            <summary>Parameter controlling cross fades.</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeRandom">
            <summary>Selects sounds from a random set</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeRandom.PreselectAtLevelLoad">
            <summary>
            If greater than 0, then upon each level load such a number of inputs will be randomly selected
            and the rest will be removed. This can be used to cut down the memory usage of large randomizing
            cues.
            </summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeRandom.bRandomizeWithoutReplacement">
            <summary>
            Determines whether or not this SoundNodeRandom should randomize with or without
            replacement.
            WithoutReplacement means that only nodes left will be valid for
            selection.  So with that, you are guarenteed to have only one occurrence of the
            sound played until all of the other sounds in the set have all been played.
            WithReplacement means that a node will be chosen and then placed back into the set.
            So one could play the same sound over and over if the probabilities don't go your way :-)
            </summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeRandom.HasBeenUsed">
            <summary>
            Internal state of which sounds have been played.  This is only used at runtime
            to keep track of which sounds have been played
            </summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeRandom.NumRandomUsed">
            <summary>Counter var so we don't have to count all of the used sounds each time we choose a sound *</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeRandom.PIEHiddenNodes">
            <summary>Editor only list of nodes hidden to duplicate behavior of PreselectAtLevelLoad</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeSoundClass">
            <summary>Remaps the SoundClass of SoundWaves underneath this</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeSwitch">
            <summary>Selects a child node based on the value of a integer parameter</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeSwitch.IntParameterName">
            <summary>The name of the integer parameter to use to determine which branch we should take</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeWaveParam">
            <summary>Sound node that takes a runtime parameter for the wave to play</summary>
        </member>
        <member name="P:UnrealEngine.USoundNodeWaveParam.WaveParameterName">
            <summary>The name of the wave parameter to use to look up the SoundWave we should play</summary>
        </member>
        <member name="T:UnrealEngine.USoundNodeWavePlayer">
            <summary>Sound node that contains a reference to the raw wave file to be played</summary>
        </member>
        <member name="P:UnrealEngine.USoundSubmix.ChildSubmixes">
            <summary>Child submixes to this sound mix</summary>
        </member>
        <member name="P:UnrealEngine.USoundSubmix.OutputWetLevel">
            <summary>The output wet level to use for the output of this submix in parent submixes</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.CompressionQuality">
            <summary>Platform agnostic compression quality. 1..100 with 1 being best compression and 100 being best quality.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.bLooping">
            <summary>If set, when played directly (not through a sound cue) the wave will be played looping.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.bStreaming">
            <summary>Whether this sound can be streamed to avoid increased memory usage</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.StreamingPriority">
            <summary>Priority of this sound when streaming (lower priority streams may not always play)</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.bMature">
            <summary>If set to true if this sound is considered to contain mature/adult content.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.bManualWordWrap">
            <summary>If set to true will disable automatic generation of line breaks - use if the subtitles have been split manually.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.bSingleLine">
            <summary>If set to true the subtitles display as a sequence of single lines as opposed to multiline.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.bVirtualizeWhenSilent">
            <summary>Allows sound to play at 0 volume, otherwise will stop the sound when the sound is silent.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.SpokenText">
            <summary>A localized version of the text that is actually spoken phonetically in the audio.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.SubtitlePriority">
            <summary>The priority of the subtitle.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.Volume">
            <summary>Playback volume of sound 0 to 1 - Default is 1.0.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.Pitch">
            <summary>Playback pitch for sound.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.NumChannels">
            <summary>Number of channels of multichannel data; 1 or 2 for regular mono and stereo files</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.SampleRate">
            <summary>Cached sample rate for displaying in the tools</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.ChannelOffsets">
            <summary>Offsets into the bulk data for the source wav data</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.ChannelSizes">
            <summary>Sizes of the bulk data for the source wav data</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.RawPCMDataSize">
            <summary>Size of RawPCMData, or what RawPCMData would be if the sound was fully decompressed</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.Subtitles">
            <summary>
            Subtitle cues.  If empty, use SpokenText as the subtitle.  Will often be empty,
            as the contents of the subtitle is commonly identical to what is spoken.
            </summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.Comment">
            <summary>Provides contextual information for the sound to the translator.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.LocalizedSubtitles">
            <summary>The array of the subtitles for each language. Generated at cook time.</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.Curves">
            <summary>Curves associated with this sound wave</summary>
        </member>
        <member name="P:UnrealEngine.USoundWave.InternalCurves">
            <summary>Hold a reference to our internal curve so we can switch back to it if we want to</summary>
        </member>
        <member name="T:UnrealEngine.USpacer">
            <summary>
            A spacer widget; it does not have a visual representation, and just provides padding between other widgets.
            * No Children
            </summary>
        </member>
        <member name="P:UnrealEngine.USpacer.Size">
            <summary>The size of the spacer</summary>
        </member>
        <member name="P:UnrealEngine.USpectatorPawnMovement.bIgnoreTimeDilation">
            <summary>If true, component moves at full speed no matter the time dilation. Default is false.</summary>
        </member>
        <member name="T:UnrealEngine.USphereComponent">
            <summary>A sphere generally used for simple collision. Bounds are rendered as lines in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.USphereComponent.SphereRadius">
            <summary>The radius of the sphere *</summary>
        </member>
        <member name="T:UnrealEngine.USphereReflectionCaptureComponent">
            <summary>-> will be exported to EngineDecalClasses.h</summary>
        </member>
        <member name="P:UnrealEngine.USphereReflectionCaptureComponent.InfluenceRadius">
            <summary>Radius of the area that can receive reflections from this capture.</summary>
        </member>
        <member name="P:UnrealEngine.USphereReflectionCaptureComponent.CaptureDistanceScale">
            <summary>Not needed anymore, not yet removed in case the artist setup values are needed in the future</summary>
        </member>
        <member name="T:UnrealEngine.USpinBox">
            <summary>A numerical entry box that allows for direct entry of the number or allows the user to click and slide the number.</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.Value">
            <summary>Value stored in this spin box</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.WidgetStyle">
            <summary>The Style</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.Delta">
            <summary>The amount by which to change the spin box value as the slider moves.</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.SliderExponent">
            <summary>The exponent by which to increase the delta as the mouse moves. 1 is constant (never increases the delta).</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.Font">
            <summary>Font color and opacity (overrides style)</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.MinDesiredWidth">
            <summary>The minimum width of the spin box</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.ClearKeyboardFocusOnCommit">
            <summary>Whether to remove the keyboard focus from the spin box when the value is committed</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.SelectAllTextOnCommit">
            <summary>Whether to select the text in the spin box when the value is committed</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.OnValueChanged">
            <summary>Called when the value is changed interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.OnValueCommitted">
            <summary>Called when the value is committed. Occurs when the user presses Enter or the text box loses focus.</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.OnBeginSliderMovement">
            <summary>Called right before the slider begins to move</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.OnEndSliderMovement">
            <summary>Called right after the slider handle is released by the user</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.bOverride_MinValue">
            <summary>Whether the optional MinValue attribute of the widget is set</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.bOverride_MaxValue">
            <summary>Whether the optional MaxValue attribute of the widget is set</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.bOverride_MinSliderValue">
            <summary>Whether the optional MinSliderValue attribute of the widget is set</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.bOverride_MaxSliderValue">
            <summary>Whether the optional MaxSliderValue attribute of the widget is set</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.MinValue">
            <summary>The minimum allowable value that can be manually entered into the spin box</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.MaxValue">
            <summary>The maximum allowable value that can be manually entered into the spin box</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.MinSliderValue">
            <summary>The minimum allowable value that can be specified using the slider</summary>
        </member>
        <member name="P:UnrealEngine.USpinBox.MaxSliderValue">
            <summary>The maximum allowable value that can be specified using the slider</summary>
        </member>
        <member name="T:UnrealEngine.USplineComponent">
            <summary>
            A spline component is a spline shape which can be used for other purposes (e.g. animating objects). It contains debug rendering capabilities.
            @see https://docs.unrealengine.com/latest/INT/Resources/ContentExamples/Blueprint_Splines
            </summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.SplineInfo">
            <summary>Deprecated - please use GetSplinePointsPosition() to fetch this FInterpCurve</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.SplineRotInfo">
            <summary>Deprecated - please use GetSplinePointsRotation() to fetch this FInterpCurve</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.SplineScaleInfo">
            <summary>Deprecated - please use GetSplinePointsScale() to fetch this FInterpCurve</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.ReparamStepsPerSegment">
            <summary>Number of steps per spline segment to place in the reparameterization table</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.Duration">
            <summary>Specifies the duration of the spline in seconds</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bStationaryEndpoints">
            <summary>Whether the endpoints of the spline are considered stationary when traversing the spline at non-constant velocity.  Essentially this sets the endpoints' tangents to zero vectors.</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bSplineHasBeenEdited">
            <summary>Whether the spline has been edited from its default by the spline component visualizer</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bModifiedByConstructionScript">
            <summary>Whether the UCS has made changes to the spline points</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bInputSplinePointsToConstructionScript">
            <summary>
            Whether the spline points should be passed to the User Construction Script so they can be further manipulated by it.
            If false, they will not be visible to it, and it will not be able to influence the per-instance positions set in the editor.
            </summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bDrawDebug">
            <summary>If true, the spline will be rendered if the Splines showflag is set.</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bClosedLoop">
            <summary>
            Whether the spline is to be considered as a closed loop.
            Use SetClosedLoop() to set this property, and IsClosedLoop() to read it.
            </summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.DefaultUpVector">
            <summary>Default up vector in local space to be used when calculating transforms along the spline</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.EditorUnselectedSplineSegmentColor">
            <summary>Color of an unselected spline component segment in the editor</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.EditorSelectedSplineSegmentColor">
            <summary>Color of a selected spline component segment in the editor</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bAllowDiscontinuousSpline">
            <summary>Whether the spline's leave and arrive tangents can be different</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.bShouldVisualizeScale">
            <summary>Whether scale visualization should be displayed</summary>
        </member>
        <member name="P:UnrealEngine.USplineComponent.ScaleVisualizationWidth">
            <summary>Width of spline in editor for use with scale visualization</summary>
        </member>
        <member name="T:UnrealEngine.USplineMeshComponent">
            <summary>
            A Spline Mesh Component is a derivation of a Static Mesh Component which can be deformed using a spline. Only a start and end position (and tangent) can be specified.
            @see https://docs.unrealengine.com/latest/INT/Resources/ContentExamples/Blueprint_Splines
            </summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.SplineParams">
            <summary>Spline that is used to deform mesh</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.SplineUpDir">
            <summary>Axis (in component space) that is used to determine X axis for co-ordinates along spline</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.bAllowSplineEditingPerInstance">
            <summary>If true, spline keys may be edited per instance in the level viewport. Otherwise, the spline should be initialized in the construction script.</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.bSmoothInterpRollScale">
            <summary>If true, will use smooth interpolation (ease in/out) for Scale, Roll, and Offset along this section of spline. If false, uses linear</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.ForwardAxis">
            <summary>Chooses the forward axis for the spline mesh orientation</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.SplineBoundaryMin">
            <summary>Minimum coordinate along the spline forward axis which corresponds to start of spline. If set to 0.0, will use bounding box to determine bounds</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.SplineBoundaryMax">
            <summary>Maximum coordinate along the spline forward axis which corresponds to end of spline. If set to 0.0, will use bounding box to determine bounds</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.BodySetup">
            <summary>Physics data.</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.CachedMeshBodySetupGuid">
            <summary>Used to automatically trigger rebuild of collision data</summary>
        </member>
        <member name="P:UnrealEngine.USplineMeshComponent.bMeshDirty">
            <summary>Indicates that the mesh needs updating</summary>
        </member>
        <member name="T:UnrealEngine.USpotLightComponent">
            <summary>A spot light component emits a directional cone shaped light (Eg a Torch).</summary>
        </member>
        <member name="P:UnrealEngine.USpotLightComponent.InnerConeAngle">
            <summary>Degrees.</summary>
        </member>
        <member name="P:UnrealEngine.USpotLightComponent.OuterConeAngle">
            <summary>Degrees.</summary>
        </member>
        <member name="P:UnrealEngine.USpotLightComponent.LightShaftConeAngle">
            <summary>EditAnywhere, BlueprintReadOnly, Category=LightShaft, meta=(UIMin = "1.0", UIMax = "180.0")</summary>
        </member>
        <member name="T:UnrealEngine.USpringArmComponent">
            <summary>
            This component tries to maintain its children at a fixed distance from the parent,
            but will retract the children if there is a collision, and spring back when there is no collision.
            Example: Use as a 'camera boom' to keep the follow camera for a player from colliding into the world.
            </summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.TargetArmLength">
            <summary>Natural length of the spring arm when there are no collisions</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.SocketOffset">
            <summary>offset at end of spring arm; use this instead of the relative offset of the attached component to ensure the line trace works as desired</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.TargetOffset">
            <summary>Offset at start of spring, applied in world space. Use this if you want a world-space offset from the parent component instead of the usual relative-space offset.</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.ProbeSize">
            <summary>How big should the query probe sphere be (in unreal units)</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.ProbeChannel">
            <summary>Collision channel of the query probe (defaults to ECC_Camera)</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bDoCollisionTest">
            <summary>If true, do a collision test using ProbeChannel and ProbeSize to prevent camera clipping into level.</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bUsePawnControlRotation">
            <summary>
            If this component is placed on a pawn, should it use the view/control rotation of the pawn where possible?
            @see APawn::GetViewRotation()
            </summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bInheritPitch">
            <summary>Should we inherit pitch from parent component. Does nothing if using Absolute Rotation.</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bInheritYaw">
            <summary>Should we inherit yaw from parent component. Does nothing if using Absolute Rotation.</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bInheritRoll">
            <summary>Should we inherit roll from parent component. Does nothing if using Absolute Rotation.</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bEnableCameraLag">
            <summary>
            If true, camera lags behind target position to smooth its movement.
            @see CameraLagSpeed
            </summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bEnableCameraRotationLag">
            <summary>
            If true, camera lags behind target rotation to smooth its movement.
            @see CameraRotationLagSpeed
            </summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bUseCameraLagSubstepping">
            <summary>
            If bUseCameraLagSubstepping is true, sub-step camera damping so that it handles fluctuating frame rates well (though this comes at a cost).
            @see CameraLagMaxTimeStep
            </summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.bDrawDebugLagMarkers">
            <summary>
            If true and camera location lag is enabled, draws markers at the camera target (in green) and the lagged position (in yellow).
            A line is drawn between the two locations, in green normally but in red if the distance to the lag target has been clamped (by CameraLagMaxDistance).
            </summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.CameraLagSpeed">
            <summary>If bEnableCameraLag is true, controls how quickly camera reaches target position. Low values are slower (more lag), high values are faster (less lag), while zero is instant (no lag).</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.CameraRotationLagSpeed">
            <summary>If bEnableCameraRotationLag is true, controls how quickly camera reaches target position. Low values are slower (more lag), high values are faster (less lag), while zero is instant (no lag).</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.CameraLagMaxTimeStep">
            <summary>Max time step used when sub-stepping camera lag.</summary>
        </member>
        <member name="P:UnrealEngine.USpringArmComponent.CameraLagMaxDistance">
            <summary>Max distance the camera target may lag behind the current location. If set to zero, no max distance is enforced.</summary>
        </member>
        <member name="T:UnrealEngine.UStaticMesh">
            <summary>
            A StaticMesh is a piece of geometry that consists of a static set of polygons.
            Static Meshes can be translated, rotated, and scaled, but they cannot have their vertices animated in any way. As such, they are more efficient
            to render than other types of geometry such as USkeletalMesh, and they are often the basic building block of levels created in the engine.
            @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/
            @see AStaticMeshActor, UStaticMeshComponent
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.SourceModels">
            <summary>Imported raw mesh bulk data.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.SectionInfoMap">
            <summary>Map of LOD+Section index to per-section info.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.LODGroup">
            <summary>The LOD group to which this mesh belongs.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.bAutoComputeLODScreenSize">
            <summary>If true, the screen sizees at which LODs swap are computed automatically.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.ImportVersion">
            <summary>The last import version</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.MinLOD">
            <summary>Minimum LOD to use for rendering.  This is the default setting for the mesh and can be overridden by component settings.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.Materials">
            <summary>Materials used by this static mesh. Individual sections index in to this array.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.LightMapResolution">
            <summary>The light map resolution</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.LightMapCoordinateIndex">
            <summary>The light map coordinate index</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.bGenerateMeshDistanceField">
            <summary>
            Whether to generate a distance field for this mesh, which can be used by DistanceField Indirect Shadows.
            This is ignored if the project's 'Generate Mesh Distance Fields' setting is enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.BodySetup">
            <summary>Physics data.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.LODForCollision">
            <summary>
            Specifies which mesh LOD to use for complex (per-poly) collision.
            Sometimes it can be desirable to use a lower poly representation for collision to reduce memory usage, improve performance and behaviour.
            Collision representation does not change based on distance to camera.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.bStripComplexCollisionForConsole">
            <summary>
            If true, strips unwanted complex collision data aka kDOP tree when cooking for consoles.
                          On the Playstation 3 data of this mesh will be stored in video memory.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.bHasNavigationData">
            <summary>
            If true, mesh will have NavCollision property with additional data for navmesh generation and usage.
                      Set to false for distant meshes (always outside navigation bounds) to save memory on collision data.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.LpvBiasMultiplier">
            <summary>Bias multiplier for Light Propagation Volume lighting</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.bAllowCPUAccess">
            <summary>
            If true, will keep geometry data CPU-accessible in cooked builds, rather than uploading to GPU memory and releasing it from CPU memory.
            This is required if you wish to access StaticMesh geometry data on the CPU at runtime in cooked builds (e.g. to convert StaticMesh to ProceduralMeshComponent)
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.AssetImportData">
            <summary>Importing data and options used for this mesh</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.SourceFilePath">
            <summary>Path to the resource used to construct this static mesh</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.SourceFileTimestamp">
            <summary>Date/Time-stamp of the file from the last import</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.EditorCameraPosition">
            <summary>The stored camera position to use as a default for the static mesh editor</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.bCustomizedCollision">
            <summary>If the user has modified collision in any way or has custom collision imported. Used for determining if to auto generate collision on import</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.Sockets">
            <summary>
            Array of named socket locations, set up in editor and used as a shortcut instead of specifying
            everything explicitly to AttachComponent in the StaticMeshComponent.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.PositiveBoundsExtension">
            <summary>Bound extension values in the positive direction of XYZ, positive value increases bound size</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.NegativeBoundsExtension">
            <summary>Bound extension values in the negative direction of XYZ, positive value increases bound size</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.ExtendedBounds">
            <summary>Original mesh bounds extended with Positive/NegativeBoundsExtension</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.ElementToIgnoreForTexFactor">
            <summary>
            Index of an element to ignore while gathering streaming texture factors.
            This is useful to disregard automatically generated vertex data which breaks texture factor heuristics.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.AssetUserData">
            <summary>Array of user data stored with the asset</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMesh.NavCollision">
            <summary>Pre-build navigation collision</summary>
        </member>
        <member name="T:UnrealEngine.UStaticMeshComponent">
            <summary>
            StaticMeshComponent is used to create an instance of a UStaticMesh.
            A static mesh is a piece of geometry that consists of a static set of polygons.
            @see https://docs.unrealengine.com/latest/INT/Engine/Content/Types/StaticMeshes/
            @see UStaticMesh
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.ForcedLodModel">
            <summary>If 0, auto-select LOD level. if >0, force to (ForcedLodModel-1).</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.PreviousLODLevel">
            <summary>LOD that was desired for rendering this StaticMeshComponent last frame.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bOverrideMinLOD">
            <summary>Whether to override the MinLOD setting of the static mesh asset with the MinLOD of this component.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.MinLOD">
            <summary>
            Specifies the smallest LOD that will be used for this component.
            This is ignored if ForcedLodModel is enabled.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bOverrideWireframeColor">
            <summary>If true, WireframeColorOverride will be used. If false, color is determined based on mobility and physics simulation settings</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.WireframeColorOverride">
            <summary>Wireframe color to use if bOverrideWireframeColor is true</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.SelectedEditorSection">
            <summary>The section currently selected in the Editor. Used for highlighting</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.SectionIndexPreview">
            <summary>Index of the section to preview. If set to INDEX_NONE, all section will be rendered. Used for isolating in Static Mesh Tool *</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.StaticMeshImportVersion">
            <summary>
            * The import version of the static mesh when it was assign this is update when:
            * - The user assign a new staticmesh to the component
            * - The component is serialize (IsSaving)
            * - Default value is BeforeImportStaticMeshVersionWasAdded
            *
            * If when the component get load (PostLoad) the version of the attach staticmesh is newer
            * then this value, we will remap the material override because the order of the materials list
            * in the staticmesh can be changed. Hopefully there is a remap table save in the staticmesh.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bOverrideNavigationExport">
            <summary>If true, bForceNavigationObstacle flag will take priority over navigation data stored in StaticMesh</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bForceNavigationObstacle">
            <summary>Allows overriding navigation export behavior per component: full collisions or dynamic obstacle</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bDisallowMeshPaintPerInstance">
            <summary>If true, mesh painting is disallowed on this instance. Set if vertex colors are overridden in a construction script.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bIgnoreInstanceForTextureStreaming">
            <summary>
            Ignore this instance of this static mesh when calculating streaming information.
            This can be useful when doing things like applying character textures to static geometry,
            to avoid them using distance-based streaming.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bOverrideLightMapRes">
            <summary>Whether to override the lightmap resolution defined in the static mesh.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.OverriddenLightMapRes">
            <summary>Light map resolution to use on this component, used if bOverrideLightMapRes is true and there is a valid StaticMesh.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bCastDistanceFieldIndirectShadow">
            <summary>
            Whether to use the mesh distance field representation (when present) for shadowing indirect lighting (from lightmaps or skylight) on Movable components.
            This works like capsule shadows on skeletal meshes, except using the mesh distance field so no physics asset is required.
            The StaticMesh must have 'Generate Mesh Distance Field' enabled, or the project must have 'Generate Mesh Distance Fields' enabled for this feature to work.
            </summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.DistanceFieldIndirectShadowMinVisibility">
            <summary>Controls how dark the dynamic indirect shadow can be.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.StreamingDistanceMultiplier">
            <summary>Allows adjusting the desired resolution of streaming textures that uses UV 0.  1.0 is the default, whereas a higher value increases the streamed-in resolution.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.SubDivisionStepSize">
            <summary>Subdivision step size for static vertex lighting.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bUseSubDivisions">
            <summary>Whether to use subdivisions or just the triangle's vertices.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.LODData">
            <summary>Static mesh LOD data.  Contains static lighting data along with instanced mesh vertex colors.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.StreamingTextureData">
            <summary>The list of texture, bounds and scales. As computed in the texture streaming build process.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bUseDefaultCollision">
            <summary>Use the collision profile specified in the StaticMesh asset.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.StaticMeshDerivedDataKey">
            <summary>Derived data key of the static mesh, used to determine if an update from the source static mesh is required.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.MaterialStreamingRelativeBoxes">
            <summary>Material Bounds used for texture streaming.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.bCustomOverrideVertexColorPerLOD">
            <summary>The component has some custom painting on LODs or not.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshComponent.LightmassSettings">
            <summary>The Lightmass settings for this object.</summary>
        </member>
        <member name="P:UnrealEngine.UStaticMeshSocket.SocketName">
            <summary>
            Defines a named attachment location on the UStaticMesh.
            These are set up in editor and used as a shortcut instead of specifying
            everything explicitly to AttachComponent in the StaticMeshComponent.
            The Outer of a StaticMeshSocket should always be the UStaticMesh.
            </summary>
        </member>
        <member name="T:UnrealEngine.UStereoLayerComponent">
            <summary>A geometry layer within the stereo rendered viewport.</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.bLiveTexture">
            <summary>True if the stereo layer texture needs to update itself every frame(scene capture, video, etc.)</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.bSupportsDepth">
            <summary>True if the stereo layer needs to support depth intersections with the scene geometry, if available on the platform</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.bNoAlphaChannel">
            <summary>True if the texture should not use its own alpha channel (1.0 will be substituted)</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.Texture">
            <summary>Texture displayed on the stereo layer (is stereocopic textures are supported on the platfrom and more than one texture is provided, this will be the right eye) *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.LeftTexture">
            <summary>Texture displayed on the stereo layer for left eye, if stereoscopic textures are supported on the platform *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.bQuadPreserveTextureRatio">
            <summary>True if the quad should internally set it's Y value based on the set texture's dimensions</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.QuadSize">
            <summary>Size of the rendered stereo layer quad *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.UVRect">
            <summary>UV coordinates mapped to the quad face *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.CylinderRadius">
            <summary>Radial size of the rendered stereo layer cylinder *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.CylinderOverlayArc">
            <summary>Arc angle for the stereo layer cylinder *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.CylinderHeight">
            <summary>Height of the stereo layer cylinder *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.StereoLayerType">
            <summary>Specifies how and where the quad is rendered to the screen *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.StereoLayerShape">
            <summary>Specifies which type of layer it is.  Note that some shapes will be supported only on certain platforms! *</summary>
        </member>
        <member name="P:UnrealEngine.UStereoLayerComponent.Priority">
            <summary>Render priority among all stereo layers, higher priority render on top of lower priority *</summary>
        </member>
        <member name="T:UnrealEngine.UStreamingSettings">
            <summary>Rendering settings.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.AsyncLoadingThreadEnabled">
            <summary>Enables separate thread for package streaming. Requires restart to take effect.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.WarnIfTimeLimitExceeded">
            <summary>Enables log warning if time limit for time-sliced package streaming has been exceeded.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.TimeLimitExceededMultiplier">
            <summary>Multiplier for time limit exceeded warning time threshold.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.TimeLimitExceededMinTime">
            <summary>Minimum time the time limit exceeded warning will be triggered by.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.MinBulkDataSizeForAsyncLoading">
            <summary>Minimum time the time limit exceeded warning will be triggered by.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.AsyncIOBandwidthLimit">
            <summary>Constrain bandwidth if wanted. Value is in MByte/ sec.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.UseBackgroundLevelStreaming">
            <summary>Whether to allow background level streaming.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.AsyncLoadingUseFullTimeLimit">
            <summary>Whether to use the entire time limit even if blocked on I/O.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.AsyncLoadingTimeLimit">
            <summary>Maximum amount of time to spend doing asynchronous loading (ms per frame).</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.PriorityAsyncLoadingExtraTime">
            <summary>Additional time to spend asynchronous loading during a high priority load.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.LevelStreamingActorsUpdateTimeLimit">
            <summary>Maximum allowed time to spend for actor registration steps during level streaming (ms per frame).</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.LevelStreamingComponentsRegistrationGranularity">
            <summary>Batching granularity used to register actor components during level streaming.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.LevelStreamingUnregisterComponentsTimeLimit">
            <summary>Maximum allowed time to spend while unregistering components during level streaming (ms per frame).</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.LevelStreamingComponentsUnregistrationGranularity">
            <summary>Batching granularity used to unregister actor components during level streaming.</summary>
        </member>
        <member name="P:UnrealEngine.UStreamingSettings.EventDrivenLoaderEnabled">
            <summary>Enables the event driven loader in cooked builds.</summary>
        </member>
        <member name="T:UnrealEngine.USubDSurface">
            <summary>Subdivision Surface Asset (Experimental, Early work in progress)</summary>
        </member>
        <member name="P:UnrealEngine.USubDSurface.VertexCountPerFace">
            <summary>
            becomes TopologyDescriptor::numVertsPerFace, TopologyDescriptor::numFaces = .Num()
            32bit for OpenSubDiv TopologyDescriptor but it could be limited to 4 bits
            </summary>
        </member>
        <member name="P:UnrealEngine.USubDSurface.IndicesPerFace">
            <summary>becomes TopologyDescriptor::vertIndicesPerFace e.g. two triangles: 0,1,2, 2,3,0</summary>
        </member>
        <member name="P:UnrealEngine.USubDSurface.VertexAttributeStreams">
            <summary>various streams e.g "Position"</summary>
        </member>
        <member name="P:UnrealEngine.USubDSurface.Materials">
            <summary>Materials used by this mesh. Individual sections index in to this array.</summary>
        </member>
        <member name="T:UnrealEngine.USubDSurfaceComponent">
            <summary>Subdivision Surface Component (Experimental, Early work in progress)</summary>
        </member>
        <member name="M:UnrealEngine.USubDSurfaceComponent.SetMesh(UnrealEngine.USubDSurface)">
            <summary>Change the SubDSurface used by this instance.</summary>
        </member>
        <member name="P:UnrealEngine.USubDSurfaceComponent.DebugLevel">
            <summary>Refinement Level of the SubD mesh</summary>
        </member>
        <member name="T:UnrealEngine.USubsurfaceProfile">
            <summary>
            Subsurface Scattering profile asset, can be specified at the material. Only for "Subsurface Profile" materials, is use during Screenspace Subsurface Scattering
            Don't change at runtime. All properties in here are per material - texture like variations need to come from properties that are in the GBuffer.
            </summary>
        </member>
        <member name="T:UnrealEngine.USubUVAnimation">
            <summary>
            SubUV animation asset, which caches bounding geometry for regions in the SubUVTexture with non-zero opacity.
            Particle emitters with a SubUV module which use this asset leverage the optimal bounding geometry to reduce overdraw.
            </summary>
        </member>
        <member name="P:UnrealEngine.USubUVAnimation.SubUVTexture">
            <summary>Texture to generate bounding geometry from.</summary>
        </member>
        <member name="P:UnrealEngine.USubUVAnimation.SubImages_Horizontal">
            <summary>The number of sub-images horizontally in the texture</summary>
        </member>
        <member name="P:UnrealEngine.USubUVAnimation.SubImages_Vertical">
            <summary>The number of sub-images vertically in the texture</summary>
        </member>
        <member name="P:UnrealEngine.USubUVAnimation.BoundingMode">
            <summary>
            More bounding vertices results in reduced overdraw, but adds more triangle overhead.
            The eight vertex mode is best used when the SubUV texture has a lot of space to cut out that is not captured by the four vertex version,
            and when the particles using the texture will be few and large.
            </summary>
        </member>
        <member name="P:UnrealEngine.USubUVAnimation.AlphaThreshold">
            <summary>
            Alpha channel values larger than the threshold are considered occupied and will be contained in the bounding geometry.
            Raising this threshold slightly can reduce overdraw in particles using this animation asset.
            </summary>
        </member>
        <member name="T:UnrealEngine.UTextBlock">
            <summary>
            A simple static text widget.
            * No Children
            * Text
            </summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.Text">
            <summary>The text to display</summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.ColorAndOpacity">
            <summary>The color of the text</summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.Font">
            <summary>The font to render the text with</summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.ShadowOffset">
            <summary>The direction the shadow is cast</summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.ShadowColorAndOpacity">
            <summary>The color of the shadow</summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.MinDesiredWidth">
            <summary>The minimum desired size for the text</summary>
        </member>
        <member name="P:UnrealEngine.UTextBlock.bWrapWithInvalidationPanel">
            <summary>If true, it will automatically wrap this text widget with an invalidation panel</summary>
        </member>
        <member name="T:UnrealEngine.UTextLayoutWidget">
            <summary>
            Base class for all widgets that use a text layout.
            Contains the common options that should be exposed for the underlying Slate widget.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTextLayoutWidget.ShapedTextOptions">
            <summary>Controls how the text within this widget should be shaped.</summary>
        </member>
        <member name="P:UnrealEngine.UTextLayoutWidget.Justification">
            <summary>How the text should be aligned with the margin.</summary>
        </member>
        <member name="P:UnrealEngine.UTextLayoutWidget.AutoWrapText">
            <summary>True if we're wrapping text automatically based on the computed horizontal space for this widget.</summary>
        </member>
        <member name="P:UnrealEngine.UTextLayoutWidget.WrapTextAt">
            <summary>Whether text wraps onto a new line when it's length exceeds this width; if this value is zero or negative, no wrapping occurs.</summary>
        </member>
        <member name="P:UnrealEngine.UTextLayoutWidget.Margin">
            <summary>The amount of blank space left around the edges of text area.</summary>
        </member>
        <member name="P:UnrealEngine.UTextLayoutWidget.LineHeightPercentage">
            <summary>The amount to scale each lines height by.</summary>
        </member>
        <member name="T:UnrealEngine.UTextRenderComponent">
            <summary>Renders text in the world with given font. Contains usual font related attributes such as Scale, Alignment, Color etc.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UTextRenderComponent.Text" -->
        <member name="P:UnrealEngine.UTextRenderComponent.TextMaterial">
            <summary>Text material</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.Font">
            <summary>Text font</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.HorizontalAlignment">
            <summary>Horizontal text alignment</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.VerticalAlignment">
            <summary>Vertical text alignment</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.TextRenderColor">
            <summary>Color of the text, can be accessed as vertex color</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.XScale">
            <summary>Horizontal scale, default is 1.0</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.YScale">
            <summary>Vertical scale, default is 1.0</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.WorldSize">
            <summary>Vertical size of the fonts largest character in world units. Transform, XScale and YScale will affect final size.</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.InvDefaultSize">
            <summary>The inverse of the Font's character height.</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.HorizSpacingAdjust">
            <summary>Horizontal adjustment per character, default is 0.0</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.VertSpacingAdjust">
            <summary>Vertical adjustment per character, default is 0.0</summary>
        </member>
        <member name="P:UnrealEngine.UTextRenderComponent.bAlwaysRenderAsText">
            <summary>Allows text to draw unmodified when using debug visualization modes. *</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.LightingGuid">
            <summary>Unique ID for this material, used for caching during distributed lighting</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustBrightness">
            <summary>Static texture brightness adjustment (scales HSV value.)  (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustBrightnessCurve">
            <summary>Static texture curve adjustment (raises HSV value to the specified power.)  (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustVibrance">
            <summary>Static texture "vibrance" adjustment (0 - 1) (HSV saturation algorithm adjustment.)  (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustSaturation">
            <summary>Static texture saturation adjustment (scales HSV saturation.)  (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustRGBCurve">
            <summary>Static texture RGB curve adjustment (raises linear-space RGB color to the specified power.)  (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustHue">
            <summary>Static texture hue adjustment (0 - 360) (offsets HSV hue by value in degrees.)  (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustMinAlpha">
            <summary>Remaps the alpha to the specified min/max range, defines the new value of 0 (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AdjustMaxAlpha">
            <summary>Remaps the alpha to the specified min/max range, defines the new value of 1 (Non-destructive; Requires texture source art to be available.)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.CompressionNoAlpha">
            <summary>If enabled, the texture's alpha channel will be discarded during compression</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.DeferCompression">
            <summary>If enabled, defer compression of the texture until save.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.MaxTextureSize">
            <summary>The maximum resolution for generated textures. A value of 0 means the maximum size for the format on each platform, except HDR long/lat cubemaps, which default to a resolution of 512.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bDitherMipMapAlpha">
            <summary>When true, the alpha channel of mip-maps and the base image are dithered for smooth LOD transitions.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AlphaCoverageThresholds">
            <summary>Alpha values per channel to compare to when preserving alpha coverage.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bPreserveBorder">
            <summary>When true the texture's border will be preserved during mipmap generation.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bFlipGreenChannel">
            <summary>When true the texture's green channel will be inverted. This is useful for some normal maps.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bForcePVRTC4">
            <summary>For DXT1 textures, setting this will cause the texture to be twice the size, but better looking, on iPhone</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.PowerOfTwoMode">
            <summary>How to pad the texture to a power of 2 size (if necessary)</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.PaddingColor">
            <summary>The color used to pad the texture out if it is resized due to PowerOfTwoMode</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bChromaKeyTexture">
            <summary>Whether to chroma key the image, replacing any pixels that match ChromaKeyColor with transparent black</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UTexture.ChromaKeyThreshold" -->
        <member name="P:UnrealEngine.UTexture.ChromaKeyColor">
            <summary>The color that will be replaced with transparent black if chroma keying is enabled</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.MipGenSettings">
            <summary>Per asset specific setting to define the mip-map generation properties like sharpening and kernel size.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.CompositeTexture">
            <summary>
            Can be defined to modify the roughness based on the normal map variation (mostly from mip maps).
            MaxAlpha comes in handy to define a base roughness if no source alpha was there.
            Make sure the normal map has at least as many mips as this texture.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTexture.CompositeTextureMode">
            <summary>defines how the CompositeTexture is applied, e.g. CTM_RoughnessFromNormalAlpha</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.CompositePower">
            <summary>
            default 1, high values result in a stronger effect e.g 1, 2, 4, 8
            this is no slider because the texture update would not be fast enough
            </summary>
        </member>
        <member name="P:UnrealEngine.UTexture.LODBias">
            <summary>A bias to the index of the top mip level to use.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.NumCinematicMipLevels">
            <summary>Number of mip-levels to use for cinematic quality.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.SRGB">
            <summary>This should be unchecked if using alpha channels individually as masks.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bUseLegacyGamma">
            <summary>A flag for using the simplified legacy gamma space e.g pow(color,1/2.2) for converting from FColor to FLinearColor, if we're doing sRGB.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bNoTiling">
            <summary>If true, the RHI texture will be created using TexCreate_NoTiling</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bUseCinematicMipLevels">
            <summary>Whether to use the extra cinematic quality mip-levels, when we're forcing mip-levels to be resident.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.AssetUserData">
            <summary>Array of user data stored with the asset</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.CachedCombinedLODBias">
            <summary>Cached combined group and texture LOD bias to use.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.bAsyncResourceReleaseHasBeenStarted">
            <summary>Whether the async resource release process has already been kicked off or not</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.CompressionSettings">
            <summary>Compression settings to use when building the texture.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.Filter">
            <summary>The texture filtering mode to use when sampling this texture.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture.LODGroup">
            <summary>Texture group this texture belongs to</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.RequestedMips">
            <summary>Number of miplevels the texture should have resident.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.ResidentMips">
            <summary>Number of miplevels currently resident.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.StreamingIndex">
            <summary>FStreamingTexture index used by the texture streaming system.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.LevelIndex">
            <summary>
            * Level scope index of this texture. It is used to reduce the amount of lookup to map a texture to its level index.
            * Useful when building texture streaming data, as well as when filling the texture streamer with precomputed data.
            * It relates to FStreamingTextureBuildInfo::TextureLevelIndex and also the index in ULevel::StreamingTextureGuids.
            * Default value of -1, indicates that the texture has an unknown index (not yet processed). At level load time,
            * -2 is also used to indicate that the texture has been processed but no entry were found in the level table.
            * After any of these processes, the LevelIndex is reset to INDEX_NONE. Making it ready for the next level task.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.FirstResourceMemMip">
            <summary>keep track of first mip level used for ResourceMem creation</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.ImportedSize">
            <summary>
            The imported size of the texture. Only valid on cooked builds when texture source is not
            available. Access ONLY via the GetImportedSize() accessor!
            </summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.ForceMipLevelsToBeResidentTimestamp">
            <summary>WorldSettings timestamp that tells the streamer to force all miplevels to be resident up until that time.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bTemporarilyDisableStreaming">
            <summary>
            True if streaming is temporarily disabled so we can update subregions of this texture's resource
                  without streaming clobbering it. Automatically cleared before saving.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bIsStreamable">
            <summary>Whether the texture is currently streamable or not.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bHasStreamingUpdatePending">
            <summary>Whether some mips might be streamed soon. If false, the texture is not planned resolution will be stable.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bHasCancelationPending">
            <summary>Whether the current texture mip change request is pending cancellation.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bForceMiplevelsToBeResident">
            <summary>Override whether to fully stream even if texture hasn't been rendered.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bIgnoreStreamingMipBias">
            <summary>Ignores the streaming mip bias used to accommodate memory constraints.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bGlobalForceMipLevelsToBeResident">
            <summary>Global and serialized version of ForceMiplevelsToBeResident.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.bHasBeenPaintedInEditor">
            <summary>Whether the texture has been painted in the editor.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.AddressX">
            <summary>The addressing mode to use for the X axis.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2D.AddressY">
            <summary>The addressing mode to use for the Y axis.</summary>
        </member>
        <member name="P:UnrealEngine.UTexture2DDynamic.Format">
            <summary>The format of the texture.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UTextureLightProfile.Brightness" -->
        <member name="P:UnrealEngine.UTextureLightProfile.TextureMultiplier">
            <summary>Multiplier to map texture value to result to integrate over the sphere to 1.0f</summary>
        </member>
        <member name="T:UnrealEngine.UTextureLODSettings">
            <summary>
            Structure containing all information related to an LOD group and providing helper functions to calculate
            the LOD bias of a given group.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTextureLODSettings.TextureLODGroups">
            <summary>Array of LOD settings with entries per group.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget.TargetGamma">
            <summary>Will override FTextureRenderTarget2DResource::GetDisplayGamma if > 0.</summary>
        </member>
        <member name="T:UnrealEngine.UTextureRenderTarget2D">
            <summary>
            TextureRenderTarget2D
            2D render target texture resource. This can be used as a target
            for rendering as well as rendered as a regular 2D texture resource.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.SizeX">
            <summary>The width of the texture.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.SizeY">
            <summary>The height of the texture.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.ClearColor">
            <summary>the color the texture is cleared to</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.AddressX">
            <summary>The addressing mode to use for the X axis.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.AddressY">
            <summary>The addressing mode to use for the Y axis.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.bForceLinearGamma">
            <summary>True to force linear gamma space for this render target</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.bHDR">
            <summary>Whether to support storing HDR values, which requires more memory.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.bGPUSharedFlag">
            <summary>Whether to support GPU sharing of the underlying native texture resource.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.bAutoGenerateMips">
            <summary>Whether to support Mip maps for this render target texture</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTarget2D.OverrideFormat">
            <summary>Normally the format is derived from bHDR, this allows code to set the format explicitly.</summary>
        </member>
        <member name="T:UnrealEngine.UTextureRenderTargetCube">
            <summary>
            TextureRenderTargetCube
            Cube render target texture resource. This can be used as a target
            for rendering as well as rendered as a regular cube texture resource.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTargetCube.SizeX">
            <summary>The width of the texture.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTargetCube.ClearColor">
            <summary>the color the texture is cleared to</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTargetCube.OverrideFormat">
            <summary>Normally the format is derived from bHDR, this allows code to set the format explicitly.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTargetCube.bHDR">
            <summary>Whether to support storing HDR values, which requires more memory.</summary>
        </member>
        <member name="P:UnrealEngine.UTextureRenderTargetCube.bForceLinearGamma">
            <summary>True to force linear gamma space for this render target</summary>
        </member>
        <member name="T:UnrealEngine.UThrobber">
            <summary>A Throbber widget that shows several zooming circles in a row.</summary>
        </member>
        <member name="P:UnrealEngine.UThrobber.NumberOfPieces">
            <summary>How many pieces there are</summary>
        </member>
        <member name="P:UnrealEngine.UThrobber.bAnimateHorizontally">
            <summary>Should the pieces animate horizontally?</summary>
        </member>
        <member name="P:UnrealEngine.UThrobber.bAnimateVertically">
            <summary>Should the pieces animate vertically?</summary>
        </member>
        <member name="P:UnrealEngine.UThrobber.bAnimateOpacity">
            <summary>Should the pieces animate their opacity?</summary>
        </member>
        <member name="P:UnrealEngine.UThrobber.PieceImage">
            <summary>Image to use for each segment of the throbber</summary>
        </member>
        <member name="T:UnrealEngine.UTileView">
            <summary>A flow panel that presents the contents as a set of tiles all uniformly sized.</summary>
        </member>
        <member name="T:UnrealEngine.UTimelineComponent">
            <summary>
            TimelineComponent holds a series of events, floats, vectors or colors with associated keyframes.
            Events can be triggered at keyframes along the timeline.
            Floats, vectors, and colors are interpolated between keyframes along the timeline.
            </summary>
        </member>
        <member name="P:UnrealEngine.UTimelineComponent.TheTimeline">
            <summary>The actual timeline structure</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineComponent.bIgnoreTimeDilation">
            <summary>True if global time dilation should be ignored by this timeline, false otherwise.</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.TimelineLength">
            <summary>Length of this timeline</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.LengthMode">
            <summary>How we want the timeline to determine its own length (e.g. specified length, last keyframe)</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.bAutoPlay">
            <summary>If we want the timeline to auto-play</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.bLoop">
            <summary>If we want the timeline to loop</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.bReplicated">
            <summary>If we want the timeline to loop</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.bValidatedAsWired">
            <summary>Compiler Validated As Wired up</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.bIgnoreTimeDilation">
            <summary>If we want the timeline to ignore global time dilation</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.EventTracks">
            <summary>Set of event tracks</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.FloatTracks">
            <summary>Set of float interpolation tracks</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.VectorTracks">
            <summary>Set of vector interpolation tracks</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.LinearColorTracks">
            <summary>Set of linear color interpolation tracks</summary>
        </member>
        <member name="P:UnrealEngine.UTimelineTemplate.MetaDataArray">
            <summary>Metadata information for this timeline</summary>
        </member>
        <member name="T:UnrealEngine.UTireType">
            <summary>DEPRECATED - Only used to allow conversion to new TireConfig in PhysXVehicles plugin</summary>
        </member>
        <member name="T:UnrealEngine.UTouchInterface">
            <summary>Defines an interface by which touch input can be controlled using any number of buttons and virtual joysticks</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.ActiveOpacity">
            <summary>Opacity (0.0 - 1.0) of all controls while any control is active</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.InactiveOpacity">
            <summary>Opacity (0.0 - 1.0) of all controls while no controls are active</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.TimeUntilDeactive">
            <summary>How long after user interaction will all controls fade out to Inactive Opacity</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.TimeUntilReset">
            <summary>How long after going inactive will controls reset/recenter themselves (0.0 will disable this feature)</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.ActivationDelay">
            <summary>How long after joystick enabled for touch (0.0 will disable this feature)</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.bPreventRecenter">
            <summary>Whether to prevent joystick re-center</summary>
        </member>
        <member name="P:UnrealEngine.UTouchInterface.StartupDelay">
            <summary>Delay at startup before virtual joystick is drawn</summary>
        </member>
        <member name="P:UnrealEngine.UUMGSequencePlayer.Animation">
            <summary>Animation being played</summary>
        </member>
        <member name="T:UnrealEngine.UUniformGridPanel">
            <summary>A panel that evenly divides up available space between all of its children.</summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridPanel.SlotPadding">
            <summary>Padding given to each slot</summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridPanel.MinDesiredSlotWidth">
            <summary>The minimum desired width of the slots</summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridPanel.MinDesiredSlotHeight">
            <summary>The minimum desired height of the slots</summary>
        </member>
        <member name="T:UnrealEngine.UUniformGridSlot">
            <summary>
            A slot for UUniformGridPanel, these slots all share the same size as the largest slot
            in the grid.
            </summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridSlot.Row">
            <summary>The row index of the cell this slot is in</summary>
        </member>
        <member name="P:UnrealEngine.UUniformGridSlot.Column">
            <summary>The column index of the cell this slot is in</summary>
        </member>
        <member name="T:UnrealEngine.UUserDefinedEnum">
            <summary>An Enumeration is a list of named values.</summary>
        </member>
        <member name="T:UnrealEngine.UUserInterfaceSettings">
            <summary>User Interface settings that control Slate and UMG.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.DefaultCursor">
            <summary>Widget to use when the Default Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.TextEditBeamCursor">
            <summary>Widget to use when the TextEditBeam Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.CrosshairsCursor">
            <summary>Widget to use when the Crosshairs Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.HandCursor">
            <summary>Widget to use when the Hand Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.GrabHandCursor">
            <summary>Widget to use when the GrabHand Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.GrabHandClosedCursor">
            <summary>Widget to use when the GrabHandClosed Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.SlashedCircleCursor">
            <summary>Widget to use when the SlashedCircle Cursor is requested.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.ApplicationScale">
            <summary>An optional application scale to apply on top of the custom scaling rules.  So if you want to expose a property in your game title, you can modify this underlying value to scale the entire UI.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.CustomScalingRuleClass">
            <summary>Set DPI Scale Rule to Custom, and this class will be used instead of any of the built-in rules.</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.UIScaleCurve">
            <summary>Controls how the UI is scaled at different resolutions based on the DPI Scale Rule</summary>
        </member>
        <member name="P:UnrealEngine.UUserInterfaceSettings.bLoadWidgetsOnDedicatedServer">
            <summary>If false, widget references will be stripped during cook for server builds and not loaded at runtime.</summary>
        </member>
        <member name="T:UnrealEngine.UUserWidget">
            <summary>The user widget is extensible by users through the WidgetBlueprint.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.ColorAndOpacity">
            <summary>The color and opacity of this widget.  Tints all child widgets.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.ForegroundColor">
            <summary>
            The foreground color of the widget, this is inherited by sub widgets.  Any color property
            that is marked as inherit will use this color.
            </summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.Padding">
            <summary>The padding area around the content.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.bIsFocusable">
            <summary>Setting this flag to true, allows this widget to accept focus when clicked, or when navigated to.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.WidgetTree">
            <summary>The widget tree contained inside this user widget initialized by the blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.ActiveSequencePlayers">
            <summary>All the sequence players currently playing</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.StoppedSequencePlayers">
            <summary>List of sequence players to cache and clean up when safe</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.NamedSlotBindings">
            <summary>Stores the widgets being assigned to named slots</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.DesignTimeSize">
            <summary>Stores the design time desired size of the user widget</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.bUseDesignTimeSize">
            <summary>A flag that determines if the design time size is used for previewing the widget in the designer.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.bUseDesiredSizeAtDesignTime">
            <summary>A flag that determines if the widget's desired size is used for previewing the widget in the designer.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.PaletteCategory">
            <summary>The category this widget appears in the palette.</summary>
        </member>
        <member name="P:UnrealEngine.UUserWidget.PreviewBackground">
            <summary>
            A preview background that you can use when designing the UI to get a sense of scale on the screen.  Use
            a texture with a screenshot of your game in it, for example if you were designing a HUD.
            </summary>
        </member>
        <member name="P:UnrealEngine.UVectorField.Bounds">
            <summary>Bounds of the volume in local space.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorField.Intensity">
            <summary>The intensity with which to multiplie vectors in this field.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.Texture">
            <summary>The texture from which to create the vector field.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.ConstructionOp">
            <summary>The operation used to construct the vector field.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.VolumeSizeX">
            <summary>The size of the volume. Valid sizes: 16, 32, 64.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.VolumeSizeY">
            <summary>The size of the volume. Valid sizes: 16, 32, 64.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.VolumeSizeZ">
            <summary>The size of the volume. Valid sizes: 16, 32, 64.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.SubImagesX">
            <summary>The number of horizontal subimages in the texture atlas.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.SubImagesY">
            <summary>The number of vertical subimages in the texture atlas.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.FrameCount">
            <summary>The number of frames in the atlas.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.FramesPerSecond">
            <summary>The rate at which to interpolate between frames.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.bLoop">
            <summary>Whether or not the simulation should loop.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.NoiseField">
            <summary>A static vector field used to add noise.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.NoiseScale">
            <summary>Scale to apply to vectors in the noise field.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldAnimated.NoiseMax">
            <summary>The maximum magnitude of noise vectors to apply.</summary>
        </member>
        <member name="T:UnrealEngine.UVectorFieldComponent">
            <summary>A Component referencing a vector field.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldComponent.VectorField">
            <summary>The vector field asset.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldComponent.Intensity">
            <summary>The intensity at which the vector field is applied.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldComponent.Tightness">
            <summary>How tightly particles follow the vector field.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldComponent.bPreviewVectorField">
            <summary>If true, the vector field is only used for preview visualizations.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldStatic.SizeX">
            <summary>Size of the vector field volume.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldStatic.SizeY">
            <summary>Size of the vector field volume.</summary>
        </member>
        <member name="P:UnrealEngine.UVectorFieldStatic.SizeZ">
            <summary>Size of the vector field volume.</summary>
        </member>
        <member name="P:UnrealEngine.UVertexAttributeStream.Usage">
            <summary>e.g. FName(TEXT("Position"))</summary>
        </member>
        <member name="P:UnrealEngine.UVertexAttributeStream.AttributeType">
            <summary>e.g. VAST_unknown</summary>
        </member>
        <member name="P:UnrealEngine.UVertexAttributeStream.Data">
            <summary>actual type depends on AttributeType, position is indexed by IndicesPerFace, other attributes by CornerID (e.g. 10 quads result in 40 attributes)</summary>
        </member>
        <member name="T:UnrealEngine.UVerticalBoxSlot">
            <summary>The Slot for the UVerticalBox, contains the widget that is flowed vertically</summary>
        </member>
        <member name="P:UnrealEngine.UVerticalBoxSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UVerticalBoxSlot.Size">
            <summary>How much space this slot should occupy in the direction of the panel.</summary>
        </member>
        <member name="P:UnrealEngine.UVerticalBoxSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UVerticalBoxSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UWidget">
            <summary>This is the base class for all wrapped Slate controls that are exposed to UObjects.</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.bIsVariable">
            <summary>
            Allows controls to be exposed as variables in a blueprint.  Not all controls need to be exposed
            as variables, so this allows only the most useful ones to end up being exposed.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidget.bCreatedByConstructionScript">
            <summary>Flag if the Widget was created from a blueprint</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.Slot">
            <summary>The parent slot of the UWidget.  Allows us to easily inline edit the layout controlling this widget.</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.bIsEnabled">
            <summary>Sets whether this widget can be modified interactively by the user</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.ToolTipText">
            <summary>Tooltip text to show when the user hovers over the widget with the mouse</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.ToolTipWidget">
            <summary>Tooltip widget to show when the user hovers over the widget with the mouse</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.Cursor">
            <summary>The cursor to show when the mouse is over the widget</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.bIsVolatile">
            <summary>
            If true prevents the widget or its child's geometry or layout information from being cached.  If this widget
            changes every frame, but you want it to still be in an invalidation panel you should make it as volatile
            instead of invalidating it every frame, which would prevent the invalidation panel from actually
            ever caching anything.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidget.RenderTransform">
            <summary>The render transform of the widget allows for arbitrary 2D transforms to be applied to the widget.</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.RenderTransformPivot">
            <summary>
            The render transform pivot controls the location about which transforms are applied.
            This value is a normalized coordinate about which things like rotations will occur.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidget.Navigation">
            <summary>
            The navigation object for this widget is optionally created if the user has configured custom
            navigation rules for this widget in the widget designer.  Those rules determine how navigation transitions
            can occur between widgets.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidget.bHiddenInDesigner">
            <summary>Stores the design time flag setting if the widget is hidden inside the designer</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.bExpandedInDesigner">
            <summary>Stores the design time flag setting if the widget is expanded inside the designer</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.NativeBindings">
            <summary>Native property bindings.</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.DesignerFlags">
            <summary>Any flags used by the designer at edit time.</summary>
        </member>
        <member name="P:UnrealEngine.UWidget.DisplayLabel">
            <summary>The friendly name for this widget displayed in the designer and BP graph.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetAnimation.OnAnimationStarted">
            <summary>Fires when the widget animation starts playing.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetAnimation.OnAnimationFinished">
            <summary>Fires when the widget animation is finished.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetAnimation.MovieScene">
            <summary>Pointer to the movie scene that controls this animation.</summary>
        </member>
        <member name="T:UnrealEngine.UWidgetBlueprintGeneratedClass">
            <summary>
            The widget blueprint generated class allows us to create blueprint-able widgets for UMG at runtime.
            All WBPGC's are of UUserWidget classes, and they perform special post initialization using this class
            to give themselves many of the same capabilities as AActor blueprints, like dynamic delegate binding for
            widgets.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetBlueprintGeneratedClass.WidgetTree">
            <summary>A tree of the widget templates to be created</summary>
        </member>
        <member name="T:UnrealEngine.UWidgetComponent">
            <summary>
            The widget component provides a surface in the 3D environment on which to render widgets normally rendered to the screen.
            Widgets are first rendered to a render target, then that render target is displayed in the world.
            Material Properties set by this component on whatever material overrides the default.
            SlateUI [Texture]
            BackColor [Vector]
            TintColorAndOpacity [Vector]
            OpacityFromTexture [Scalar]
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.WidgetClass">
            <summary>The class of User Widget to create and display an instance of</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.DrawSize">
            <summary>The size of the displayed quad.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bManuallyRedraw">
            <summary>Should we wait to be told to redraw to actually draw?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bRedrawRequested">
            <summary>Has anyone requested we redraw?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.RedrawTime">
            <summary>
            The time in between draws, if 0 - we would redraw every frame.  If 1, we would redraw every second.
            This will work with bManuallyRedraw as well.  So you can say, manually redraw, but only redraw at this
            maximum rate.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.CurrentDrawSize">
            <summary>
            The actual draw size, this changes based on DrawSize - or the desired size of the widget if
            bDrawAtDesiredSize is true.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bDrawAtDesiredSize">
            <summary>
            Causes the render target to automatically match the desired size.
            WARNING: If you change this every frame, it will be very expensive.  If you need
               that effect, you should keep the outer widget's sized locked and dynamically
               scale or resize some inner widget.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.Pivot">
            <summary>The Alignment/Pivot point that the widget is placed at relative to the position.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bReceiveHardwareInput">
            <summary>
            Register with the viewport for hardware input from the true mouse and keyboard.  These widgets
            will more or less react like regular 2D widgets in the viewport, e.g. they can and will steal focus
            from the viewport.
            WARNING: If you are making a VR game, definitely do not change this to true.  This option should ONLY be used
            if you're making what would otherwise be a normal menu for a game, just in 3D.  If you also need the game to
            remain responsive and for the player to be able to interact with UI and move around the world (such as a keypad on a door),
            use the WidgetInteractionComponent instead.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bWindowFocusable">
            <summary>Is the virtual window created to host the widget focusable?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.OwnerPlayer">
            <summary>
            The owner player for a widget component, if this widget is drawn on the screen, this controls
            what player's screen it appears on for split screen, if not set, users player 0.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.BackgroundColor">
            <summary>The background color of the component</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.TintColorAndOpacity">
            <summary>Tint color and opacity for this component</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.OpacityFromTexture">
            <summary>Sets the amount of opacity from the widget's UI texture to use when rendering the translucent or masked UI to the viewport (0.0-1.0)</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bIsTwoSided">
            <summary>Is the component visible from behind?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.TickWhenOffscreen">
            <summary>Should the component tick the widget when it's off screen?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.Widget">
            <summary>The User Widget object displayed and managed by this component</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.BodySetup">
            <summary>The body setup of the displayed quad</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.TranslucentMaterial">
            <summary>The material instance for translucent widget components</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.TranslucentMaterial_OneSided">
            <summary>The material instance for translucent, one-sided widget components</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.OpaqueMaterial">
            <summary>The material instance for opaque widget components</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.OpaqueMaterial_OneSided">
            <summary>The material instance for opaque, one-sided widget components</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.MaskedMaterial">
            <summary>The material instance for masked widget components.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.MaskedMaterial_OneSided">
            <summary>The material instance for masked, one-sided widget components.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.RenderTarget">
            <summary>The target to which the user widget is rendered</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.MaterialInstance">
            <summary>The dynamic instance of the material that the render target is attached to</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.bEditTimeUsable">
            <summary>Allows the widget component to be used at editor time.  For use in the VR-Editor.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.SharedLayerName">
            <summary>Layer Name the widget will live on</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.LayerZOrder">
            <summary>ZOrder the layer will be created on, note this only matters on the first time a new layer is created, subsequent additions to the same layer will use the initially defined ZOrder</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetComponent.CylinderArcAngle">
            <summary>Curvature of a cylindrical widget in degrees.</summary>
        </member>
        <member name="T:UnrealEngine.UWidgetInteractionComponent">
            <summary>
            This is a component to allow interaction with the Widget Component.  This class allows you to
            simulate a sort of laser pointer device, when it hovers over widgets it will send the basic signals
            to show as if the mouse were moving on top of it.  You'll then tell the component to simulate key presses,
            like Left Mouse, down and up, to simulate a mouse click.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.OnHoveredWidgetChanged">
            <summary>
            Called when the hovered Widget Component changes.  The interaction component functions at the Slate
            level - so it's unable to report anything about what UWidget is under the hit result.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.VirtualUserIndex">
            <summary>
            Represents the Virtual User Index.  Each virtual user should be represented by a different
            index number, this will maintain separate capture and focus states for them.  Each
            controller or finger-tip should get a unique PointerIndex.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.PointerIndex">
            <summary>Each user virtual controller or virtual finger tips being simulated should use a different pointer index.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.TraceChannel">
            <summary>The trace channel to use when tracing for widget components in the world.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.InteractionDistance">
            <summary>The distance in game units the component should be able to interact with a widget component.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.bEnableHitTesting">
            <summary>
            Should the interaction component perform hit testing (Automatic or Custom) and attempt to
            simulate hover - if you were going to emulate a keyboard you would want to turn this option off
            if the virtual keyboard was separate from the virtual pointer device and used a second interaction
            component.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.bShowDebug">
            <summary>Shows some debugging lines and a hit sphere to help you debug interactions.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.DebugColor">
            <summary>Determines the color of the debug lines.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.CustomHitResult">
            <summary>Stores the custom hit result set by the player.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.LocalHitLocation">
            <summary>The 2D location on the widget component that was hit.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.LastLocalHitLocation">
            <summary>The last 2D location on the widget component that was hit.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.HoveredWidgetComponent">
            <summary>The widget component we're currently hovering over.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.LastHitResult">
            <summary>The last hit result we used.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.bIsHoveredWidgetInteractable">
            <summary>Are we hovering over any interactive widgets.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.bIsHoveredWidgetFocusable">
            <summary>Are we hovering over any focusable widget?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.bIsHoveredWidgetHitTestVisible">
            <summary>Are we hovered over a widget that is hit test visible?</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetInteractionComponent.ArrowComponent">
            <summary>The arrow component we show at editor time.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetNavigation.Up">
            <summary>Happens when the user presses up arrow, joystick, d-pad.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetNavigation.Down">
            <summary>Happens when the user presses down arrow, joystick, d-pad.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetNavigation.Left">
            <summary>Happens when the user presses left arrow, joystick, d-pad.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetNavigation.Right">
            <summary>Happens when the user presses right arrow, joystick, d-pad.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetNavigation.Next">
            <summary>Happens when the user presses Tab.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetNavigation.Previous">
            <summary>Happens when the user presses Shift+Tab.</summary>
        </member>
        <member name="T:UnrealEngine.UWidgetSwitcher">
            <summary>A widget switcher is like a tab control, but without tabs. At most one widget is visible at time.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetSwitcher.ActiveWidgetIndex">
            <summary>The slot index to display</summary>
        </member>
        <member name="T:UnrealEngine.UWidgetSwitcherSlot">
            <summary>The Slot for the UWidgetSwitcher, contains the widget that is flowed vertically</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetSwitcherSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetSwitcherSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetSwitcherSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UWidgetTree">
            <summary>The widget tree manages the collection of widgets in a blueprint widget.</summary>
        </member>
        <member name="P:UnrealEngine.UWidgetTree.RootWidget">
            <summary>The root widget of the tree</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetTree.FindWidget(System.IntPtr,System.String)">
            Finds the widget in the tree by name. 
        </member>
        <member name="M:UnrealEngine.UWidgetTree.RemoveWidget(System.IntPtr,System.IntPtr)">
            Removes the widget from the hierarchy and all sub widgets. 
        </member>
        <member name="M:UnrealEngine.UWidgetTree.FindWidgetParent(System.IntPtr,System.IntPtr,System.Int32@)">
            Gets the parent widget of a given widget, and potentially the child index. 
        </member>
        <member name="M:UnrealEngine.UWidgetTree.GetAllWidgets(System.IntPtr,System.IntPtr[]@)">
            Gathers all the widgets in the tree recursively 
        </member>
        <member name="T:UnrealEngine.UWindowTitleBarArea">
            <summary>A panel for defining a region of the UI that should allow users to drag the window on desktop platforms.</summary>
        </member>
        <member name="P:UnrealEngine.UWindowTitleBarArea.bDoubleClickTogglesFullscreen">
            <summary>Should double clicking the title bar area toggle fullscreen instead of maximizing the window.</summary>
        </member>
        <member name="T:UnrealEngine.UWindowTitleBarAreaSlot">
            <summary>The Slot for the UWindowTitleBarArea</summary>
        </member>
        <member name="P:UnrealEngine.UWindowTitleBarAreaSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UWindowTitleBarAreaSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UWindowTitleBarAreaSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.UWorld">
            <summary>
            The World is the top level object representing a map or a sandbox in which Actors and Components will exist and be rendered.
            A World can be a single Persistent Level with an optional list of streaming levels that are loaded and unloaded via volumes and blueprint functions
            or it can be a collection of levels organized with a World Composition.
            In a standalone game, generally only a single World exists except during seamless area transitions when both a destination and current world exists.
            In the editor many Worlds exist: The level being edited, each PIE instance, each editor tool which has an interactive rendered viewport, and many more.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWorld.Layers">
            <summary>List of all the layers referenced by the world's actors</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.ActiveGroupActors">
            <summary>Group actors currently "active"</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.ThumbnailInfo">
            <summary>Information for thumbnail rendering</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.PersistentLevel">
            <summary>Persistent level containing the world info, default brush and actors spawned during gameplay among other things</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.NetDriver">
            <summary>The NAME_GameNetDriver game connection(s) for client/server communication</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.LineBatcher">
            <summary>Line Batchers. All lines to be drawn in the world.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.PersistentLineBatcher">
            <summary>Persistent Line Batchers. They don't get flushed every frame.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.ForegroundLineBatcher">
            <summary>Foreground Line Batchers. This can't be Persistent.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.NetworkManager">
            <summary>Instance of this world's game-specific networking management</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.PhysicsCollisionHandler">
            <summary>Instance of this world's game-specific physics collision handler</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.ExtraReferencedObjects">
            <summary>Array of any additional objects that need to be referenced by this world, to make sure they aren't GC'd</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.PerModuleDataObjects">
            <summary>
            External modules can have additional data associated with this UWorld.
            This is a list of per module world data objects. These aren't
            loaded/saved by default.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWorld.StreamingLevels">
            <summary>Level collection. ULevels are referenced by FName (Package name) to avoid serialized references. Also contains offsets in world units</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.StreamingLevelsPrefix">
            <summary>Prefix we used to rename streaming levels, non empty in PIE and standalone preview</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.CurrentLevelPendingVisibility">
            <summary>Pointer to the current level in the queue to be made visible, NULL if none are pending.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.CurrentLevelPendingInvisibility">
            <summary>Pointer to the current level in the queue to be made invisible, NULL if none are pending.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.DemoNetDriver">
            <summary>Fake NetDriver for capturing network traffic to record demos</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.MyParticleEventManager">
            <summary>Particle event manager *</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.DefaultPhysicsVolume">
            <summary>DefaultPhysicsVolume used for whole game *</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.NavigationSystem">
            <summary>The world's navmesh</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.AuthorityGameMode">
            <summary>The current GameMode, valid only on the server</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:UnrealEngine.UWorld.GameState" -->
        <member name="P:UnrealEngine.UWorld.AISystem">
            <summary>The AI System handles generating pathing information and AI behavior</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.AvoidanceManager">
            <summary>RVO avoidance manager used by game</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.Levels">
            <summary>Array of levels currently in this world. Not serialized to disk to avoid hard references.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.LevelCollections">
            <summary>Array of level collections currently in this world.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.CurrentLevel">
            <summary>Pointer to the current level being edited. Level has to be in the Levels array and == PersistentLevel in the game.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.ParameterCollectionInstances">
            <summary>Parameter collection instances that hold parameter overrides for this world.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.CanvasForRenderingToTarget">
            <summary>
            Canvas object used for drawing to render targets from blueprint functions eg DrawMaterialToRenderTarget.
            This is cached as UCanvas creation takes >100ms.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWorld.EditorViews">
            <summary>Saved editor viewport states - one for each view type. Indexed using ELevelViewportType from UnrealEdTypes.h.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.SelectedLevels">
            <summary>Array of selected levels currently in this world. Not serialized to disk to avoid hard references.</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.WorldComposition">
            <summary>All levels information from which our world is composed</summary>
        </member>
        <member name="P:UnrealEngine.UWorld.bAreConstraintsDirty">
            <summary>Keeps track whether actors moved via PostEditMove and therefore constraint syncup should be performed.</summary>
        </member>
        <member name="T:UnrealEngine.UWorldComposition">
            <summary>
            WorldComposition represents world structure:
                - Holds list of all level packages participating in this world and theirs base parameters (bounding boxes, offset from origin)
                - Holds list of streaming level objects to stream in and out based on distance from current view point
             - Handles properly levels repositioning during level loading and saving
            </summary>
        </member>
        <member name="P:UnrealEngine.UWorldComposition.TilesStreaming">
            <summary>Streaming level objects for each tile</summary>
        </member>
        <member name="P:UnrealEngine.UWorldComposition.TilesStreamingTimeThreshold">
            <summary>Time threshold between tile streaming state changes</summary>
        </member>
        <member name="P:UnrealEngine.UWorldComposition.bLoadAllTilesDuringCinematic">
            <summary>Whether all distance dependent tiles should be loaded and visible during cinematic</summary>
        </member>
        <member name="P:UnrealEngine.UWorldComposition.bRebaseOriginIn3DSpace">
            <summary>Whether to rebase origin in 3D space, otherwise only on XY plane</summary>
        </member>
        <member name="P:UnrealEngine.UWorldComposition.RebaseOriginDistance">
            <summary>Maximum distance to current view point where we should initiate origin rebasing</summary>
        </member>
        <member name="T:UnrealEngine.UWrapBox">
            <summary>
            Arranges widgets left-to-right.  When the widgets exceed the Width it will place widgets on the next line.
            * Many Children
            * Flows
            * Wraps
            </summary>
        </member>
        <member name="P:UnrealEngine.UWrapBox.InnerSlotPadding">
            <summary>The inner slot padding goes between slots sharing borders</summary>
        </member>
        <member name="P:UnrealEngine.UWrapBox.WrapWidth">
            <summary>When this width is exceeded, elements will start appearing on the next line.</summary>
        </member>
        <member name="P:UnrealEngine.UWrapBox.bExplicitWrapWidth">
            <summary>Use explicit wrap width whenever possible. It greatly simplifies layout calculations and reduces likelihood of "wiggling UI"</summary>
        </member>
        <member name="T:UnrealEngine.UWrapBoxSlot">
            <summary>The Slot for the UWrapBox, contains the widget that is flowed vertically</summary>
        </member>
        <member name="P:UnrealEngine.UWrapBoxSlot.Padding">
            <summary>The padding area between the slot and the content it contains.</summary>
        </member>
        <member name="P:UnrealEngine.UWrapBoxSlot.bFillEmptySpace">
            <summary>Should this slot fill the remaining space on the line?</summary>
        </member>
        <member name="P:UnrealEngine.UWrapBoxSlot.FillSpanWhenLessThan">
            <summary>
            If the total available space in the wrap panel drops below this threshold, this slot will attempt to fill an entire line.
            NOTE: A value of 0, denotes no filling will occur.
            </summary>
        </member>
        <member name="P:UnrealEngine.UWrapBoxSlot.HorizontalAlignment">
            <summary>The alignment of the object horizontally.</summary>
        </member>
        <member name="P:UnrealEngine.UWrapBoxSlot.VerticalAlignment">
            <summary>The alignment of the object vertically.</summary>
        </member>
        <member name="T:UnrealEngine.FActorComponentTickFunction">
            <summary>Tick function that calls UActorComponent::ConditionalTick</summary>
        </member>
        <member name="F:UnrealEngine.FActorComponentTickFunction.TickGroup">
            <summary>
            Defines the minimum tick group for this tick function. These groups determine the relative order of when objects tick during a frame update.
            Given prerequisites, the tick may be delayed.
            @see ETickingGroup
            @see FTickFunction::AddPrerequisite()
            </summary>
        </member>
        <member name="F:UnrealEngine.FActorComponentTickFunction.EndTickGroup">
            <summary>
            Defines the tick group that this tick function must finish in. These groups determine the relative order of when objects tick during a frame update.
            @see ETickingGroup
            </summary>
        </member>
        <member name="P:UnrealEngine.FActorComponentTickFunction.bTickEvenWhenPaused">
            <summary>Bool indicating that this function should execute even if the game is paused. Pause ticks are very limited in capabilities. *</summary>
        </member>
        <member name="P:UnrealEngine.FActorComponentTickFunction.bCanEverTick">
            <summary>If false, this tick function will never be registered and will never tick. Only settable in defaults.</summary>
        </member>
        <member name="P:UnrealEngine.FActorComponentTickFunction.bStartWithTickEnabled">
            <summary>If true, this tick function will start enabled, but can be disabled later on.</summary>
        </member>
        <member name="P:UnrealEngine.FActorComponentTickFunction.bAllowTickOnDedicatedServer">
            <summary>If we allow this tick to run on a dedicated server</summary>
        </member>
        <member name="F:UnrealEngine.FActorComponentTickFunction.TickInterval">
            <summary>The frequency in seconds at which this tick function will be executed.  If less than or equal to 0 then it will tick every frame</summary>
        </member>
        <member name="T:UnrealEngine.FActorTickFunction">
            <summary>Tick function that calls AActor::TickActor</summary>
        </member>
        <member name="F:UnrealEngine.FActorTickFunction.TickGroup">
            <summary>
            Defines the minimum tick group for this tick function. These groups determine the relative order of when objects tick during a frame update.
            Given prerequisites, the tick may be delayed.
            @see ETickingGroup
            @see FTickFunction::AddPrerequisite()
            </summary>
        </member>
        <member name="F:UnrealEngine.FActorTickFunction.EndTickGroup">
            <summary>
            Defines the tick group that this tick function must finish in. These groups determine the relative order of when objects tick during a frame update.
            @see ETickingGroup
            </summary>
        </member>
        <member name="P:UnrealEngine.FActorTickFunction.bTickEvenWhenPaused">
            <summary>Bool indicating that this function should execute even if the game is paused. Pause ticks are very limited in capabilities. *</summary>
        </member>
        <member name="P:UnrealEngine.FActorTickFunction.bCanEverTick">
            <summary>If false, this tick function will never be registered and will never tick. Only settable in defaults.</summary>
        </member>
        <member name="P:UnrealEngine.FActorTickFunction.bStartWithTickEnabled">
            <summary>If true, this tick function will start enabled, but can be disabled later on.</summary>
        </member>
        <member name="P:UnrealEngine.FActorTickFunction.bAllowTickOnDedicatedServer">
            <summary>If we allow this tick to run on a dedicated server</summary>
        </member>
        <member name="F:UnrealEngine.FActorTickFunction.TickInterval">
            <summary>The frequency in seconds at which this tick function will be executed.  If less than or equal to 0 then it will tick every frame</summary>
        </member>
        <member name="T:UnrealEngine.FAggregateGeometry2D">
            <summary>Container for an aggregate of 2D collision shapes</summary>
        </member>
        <member name="T:UnrealEngine.FAlphaBlend">
            <summary>Alpha Blend class that supports different blend options as well as custom curves</summary>
        </member>
        <member name="F:UnrealEngine.FAlphaBlend.BlendTime">
            <summary>If you're using Custom BlendOption, you can specify curve</summary>
            <summary>Blend Time</summary>
        </member>
        <member name="T:UnrealEngine.FAnalogInputEvent">
            <summary>
            FAnalogEvent describes a analog key value.
            It is passed to event handlers dealing with analog keys.
            </summary>
        </member>
        <member name="F:UnrealEngine.FAnchorData.Offsets">
            <summary>Offset.</summary>
        </member>
        <member name="F:UnrealEngine.FAnchorData.Anchors">
            <summary>Anchors.</summary>
        </member>
        <member name="F:UnrealEngine.FAnchorData.Alignment">
            <summary>
            Alignment is the pivot point of the widget.  Starting in the upper left at (0,0),
            ending in the lower right at (1,1).  Moving the alignment point allows you to move
            the origin of the widget.
            </summary>
        </member>
        <member name="T:UnrealEngine.FAnchors">
            <summary>Describes how a widget is anchored.</summary>
        </member>
        <member name="F:UnrealEngine.FAnchors.Minimum">
            <summary>Holds the minimum anchors, left + top.</summary>
        </member>
        <member name="F:UnrealEngine.FAnchors.Maximum">
            <summary>Holds the maximum anchors, right + bottom.</summary>
        </member>
        <member name="T:UnrealEngine.FAngularDriveConstraint">
            <summary>Angular Drive</summary>
        </member>
        <member name="F:UnrealEngine.FAngularDriveConstraint.TwistDrive">
            <summary>Controls the twist (roll) constraint drive between current orientation/velocity and target orientation/velocity. This is available as long as the twist limit is set to free or limited.</summary>
        </member>
        <member name="F:UnrealEngine.FAngularDriveConstraint.SwingDrive">
            <summary>Controls the cone constraint drive between current orientation/velocity and target orientation/velocity. This is available as long as there is at least one swing limit set to free or limited.</summary>
        </member>
        <member name="F:UnrealEngine.FAngularDriveConstraint.SlerpDrive">
            <summary>Controls the SLERP (spherical lerp) drive between current orientation/velocity and target orientation/velocity. NOTE: This is only available when all three angular limits are either free or limited. Locking any angular limit will turn off the drive implicitly.</summary>
        </member>
        <member name="F:UnrealEngine.FAngularDriveConstraint.OrientationTarget">
            <summary>Target orientation relative to the the body reference frame.</summary>
        </member>
        <member name="F:UnrealEngine.FAngularDriveConstraint.AngularVelocityTarget">
            <summary>Target angular velocity relative to the body reference frame.</summary>
        </member>
        <member name="F:UnrealEngine.FAngularDriveConstraint.AngularDriveMode">
            <summary>Whether motors use SLERP (spherical lerp) or decompose into a Swing motor (cone constraints) and Twist motor (roll constraints). NOTE: SLERP will NOT work if any of the angular constraints are locked.</summary>
        </member>
        <member name="T:UnrealEngine.FAnimationTransitionBetweenStates">
            <summary>This represents a baked transition</summary>
        </member>
        <member name="F:UnrealEngine.FAnimationTransitionBetweenStates.PreviousState">
            <summary>Transition-only: State being transitioned from</summary>
        </member>
        <member name="F:UnrealEngine.FAnimationTransitionBetweenStates.NextState">
            <summary>Transition-only: State being transitioned to</summary>
        </member>
        <member name="F:UnrealEngine.FAnimationTransitionBetweenStates.StateName">
            <summary>The name of this state</summary>
        </member>
        <member name="T:UnrealEngine.FAnimControlTrackKey">
            <summary>Structure used for holding information for one animation played on the Anim Control track.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimControlTrackKey.StartTime">
            <summary>Position in the Matinee sequence to start playing this animation.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimControlTrackKey.AnimStartOffset">
            <summary>Animation Sequence to play</summary>
            <summary>Time to start playing AnimSequence at.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimControlTrackKey.AnimEndOffset">
            <summary>Time to end playing the AnimSequence at.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimControlTrackKey.AnimPlayRate">
            <summary>Playback speed of this animation.</summary>
        </member>
        <member name="P:UnrealEngine.FAnimControlTrackKey.bLooping">
            <summary>Should this animation loop.</summary>
        </member>
        <member name="P:UnrealEngine.FAnimControlTrackKey.bReverse">
            <summary>Whether to play the animation in reverse or not.</summary>
        </member>
        <member name="T:UnrealEngine.FAnimCurveBase">
            <summary>Float curve data for one track</summary>
        </member>
        <member name="F:UnrealEngine.FAnimCurveBase.LastObservedName">
            <summary>
            Last observed name of the curve. We store this so we can recover from situations that
            mean the skeleton doesn't have a mapped name for our UID (such as a user saving the an
            animation but not the skeleton).
            </summary>
        </member>
        <member name="F:UnrealEngine.FAnimCurveBase.CurveTypeFlags">
            <summary>Curve Type Flags</summary>
        </member>
        <member name="T:UnrealEngine.FAnimLinkableElement">
            <summary>
            Used to describe an element that can be linked to a segment in a montage or sequence.
               Usage:
                       Inherit from FAnimLinkableElement and make sure to call LinkMontage or LinkSequence
                       both on creation and on loading the element. From there SetTime and GetTime should be
                       used to control where this element is in the montage or sequence.
                       For more advanced usage, see this implementation used in FAnimNotifyEvent where
                       we have a secondary link to handle a duration
                       @see FAnimNotifyEvent
            </summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.SlotIndex">
            <summary>The montage that this element is currently linked to</summary>
            <summary>The slot index we are currently using within LinkedMontage</summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.SegmentIndex">
            <summary>The index of the segment we are linked to within the slot we are using</summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.LinkMethod">
            <summary>The method we are using to calculate our times</summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.CachedLinkMethod">
            <summary>Cached link method used to transform the time when LinkMethod changes, always relates to the currently stored time</summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.SegmentBeginTime">
            <summary>The absolute time in the montage that our currently linked segment begins</summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.SegmentLength">
            <summary>The absolute length of our currently linked segment</summary>
        </member>
        <member name="F:UnrealEngine.FAnimLinkableElement.LinkValue">
            <summary>The time of this montage. This will differ depending upon the method we are using to link the time for this element</summary>
        </member>
        <member name="T:UnrealEngine.FAnimNotifyEvent">
            <summary>
            Triggers an animation notify.  Each AnimNotifyEvent contains an AnimNotify object
            which has its Notify method called and passed to the animation.
            </summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.DisplayTime">
            <summary>The user requested time for this notify</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.TriggerTimeOffset">
            <summary>An offset from the DisplayTime to the actual time we will trigger the notify, as we cannot always trigger it exactly at the time the user wants</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.EndTriggerTimeOffset">
            <summary>An offset similar to TriggerTimeOffset but used for the end scrub handle of a notify state's duration</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.EndLink">
            <summary>Linkable element to use for the end handle representing a notify state duration</summary>
        </member>
        <member name="P:UnrealEngine.FAnimNotifyEvent.bConvertedFromBranchingPoint">
            <summary>If TRUE, this notify has been converted from an old BranchingPoint.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.NotifyTriggerChance">
            <summary>Defines the chance of of this notify triggering, 0 = No Chance, 1 = Always triggers</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.NotifyFilterType">
            <summary>Defines a method for filtering notifies (stopping them triggering) e.g. by looking at the meshes current LOD</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.NotifyFilterLOD">
            <summary>LOD to start filtering this notify from.</summary>
        </member>
        <member name="P:UnrealEngine.FAnimNotifyEvent.bTriggerOnDedicatedServer">
            <summary>If disabled this notify will be skipped on dedicated servers</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.NotifyColor">
            <summary>Color of Notify in editor</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.TrackIndex">
            <summary>'Track' that the notify exists on, used for visual placement in editor and sorting priority in runtime</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.SlotIndex">
            <summary>The montage that this element is currently linked to</summary>
            <summary>The slot index we are currently using within LinkedMontage</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.SegmentIndex">
            <summary>The index of the segment we are linked to within the slot we are using</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.LinkMethod">
            <summary>The method we are using to calculate our times</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.CachedLinkMethod">
            <summary>Cached link method used to transform the time when LinkMethod changes, always relates to the currently stored time</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.SegmentBeginTime">
            <summary>The absolute time in the montage that our currently linked segment begins</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.SegmentLength">
            <summary>The absolute length of our currently linked segment</summary>
        </member>
        <member name="F:UnrealEngine.FAnimNotifyEvent.LinkValue">
            <summary>The time of this montage. This will differ depending upon the method we are using to link the time for this element</summary>
        </member>
        <member name="T:UnrealEngine.FAnimNotifyTrack">
            <summary>Keyframe position data for one track.  Pos(i) occurs at Time(i).  Pos.Num() always equals Time.Num().</summary>
        </member>
        <member name="T:UnrealEngine.FAnimSegment">
            <summary>this is anim segment that defines what animation and how *</summary>
        </member>
        <member name="F:UnrealEngine.FAnimSegment.StartPos">
            <summary>Anim Reference to play - only allow AnimSequence or AnimComposite *</summary>
            <summary>Start Pos within this AnimCompositeBase</summary>
        </member>
        <member name="F:UnrealEngine.FAnimSegment.AnimStartTime">
            <summary>Time to start playing AnimSequence at.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimSegment.AnimEndTime">
            <summary>Time to end playing the AnimSequence at.</summary>
        </member>
        <member name="F:UnrealEngine.FAnimSegment.AnimPlayRate">
            <summary>Playback speed of this animation. If you'd like to reverse, set -1</summary>
        </member>
        <member name="T:UnrealEngine.FAnimSetMeshLinkup">
            <summary>This is a mapping table between each bone in a particular skeletal mesh and the tracks of this animation set.</summary>
        </member>
        <member name="P:UnrealEngine.FAnimSetMeshLinkup.BoneToTrackTable">
            <summary>
            Mapping table. Size must be same as size of SkelMesh reference skeleton.
            No index should be more than the number of tracks in this AnimSet.
            -1 indicates no track for this bone - will use reference pose instead.
            </summary>
        </member>
        <member name="F:UnrealEngine.FAnimSyncMarker.MarkerName">
            <summary>The name of this marker</summary>
        </member>
        <member name="F:UnrealEngine.FAnimSyncMarker.Time">
            <summary>Time in seconds of this marker</summary>
        </member>
        <member name="F:UnrealEngine.FAnimSyncMarker.TrackIndex">
            <summary>The editor track this marker sits on</summary>
        </member>
        <member name="T:UnrealEngine.FAnimTrack">
            <summary>
            This is list of anim segments for this track
            For now this is only one TArray, but in the future
            we should define more transition/blending behaviors
            </summary>
        </member>
        <member name="P:UnrealEngine.FAssetEditorOrbitCameraPosition.bIsSet">
            <summary>Whether or not this has been set to a valid value</summary>
        </member>
        <member name="F:UnrealEngine.FAssetEditorOrbitCameraPosition.CamOrbitPoint">
            <summary>The position to orbit the camera around</summary>
        </member>
        <member name="F:UnrealEngine.FAssetEditorOrbitCameraPosition.CamOrbitZoom">
            <summary>The distance of the camera from the orbit point</summary>
        </member>
        <member name="F:UnrealEngine.FAssetEditorOrbitCameraPosition.CamOrbitRotation">
            <summary>The rotation to apply around the orbit point</summary>
        </member>
        <member name="T:UnrealEngine.FAssetImportInfo">
            <summary>Struct that is used to store an array of asset import data as an asset registry tag</summary>
        </member>
        <member name="T:UnrealEngine.FAssetMapping">
            <summary>This defines one asset mapping</summary>
        </member>
        <member name="T:UnrealEngine.FAtmospherePrecomputeParameters">
            <summary>Structure storing Data for pre-computation</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.DensityHeight">
            <summary>Rayleigh scattering density height scale, ranges from [0...1]</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.MaxScatteringOrder">
            <summary>Maximum scattering order</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.TransmittanceTexWidth">
            <summary>Transmittance Texture Width</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.TransmittanceTexHeight">
            <summary>Transmittance Texture Height</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.IrradianceTexWidth">
            <summary>Irradiance Texture Width</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.IrradianceTexHeight">
            <summary>Irradiance Texture Height</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.InscatterAltitudeSampleNum">
            <summary>Number of different altitudes at which to sample inscatter color (size of 3D texture Z dimension)</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.InscatterMuNum">
            <summary>Inscatter Texture Height</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.InscatterMuSNum">
            <summary>Inscatter Texture Width</summary>
        </member>
        <member name="F:UnrealEngine.FAtmospherePrecomputeParameters.InscatterNuNum">
            <summary>Inscatter Texture Width</summary>
        </member>
        <member name="T:UnrealEngine.FAudioComponentParam">
            <summary>
            Struct used for storing one per-instance named parameter for this AudioComponent.
            Certain nodes in the SoundCue may reference parameters by name so they can be adjusted per-instance.
            </summary>
        </member>
        <member name="F:UnrealEngine.FAudioComponentParam.ParamName">
            <summary>Name of the parameter</summary>
        </member>
        <member name="F:UnrealEngine.FAudioComponentParam.FloatParam">
            <summary>Value of the parameter when used as a float</summary>
        </member>
        <member name="P:UnrealEngine.FAudioComponentParam.BoolParam">
            <summary>Value of the parameter when used as a boolean</summary>
        </member>
        <member name="F:UnrealEngine.FAudioComponentParam.IntParam">
            <summary>Value of the parameter when used as an integer</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.FrequencyCenter0">
            <summary>Center frequency in Hz for band 0</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Gain0">
            <summary>Boost/cut of band 0</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Bandwidth0">
            <summary>Bandwidth of band 0. Region is center frequency +/- Bandwidth /2</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.FrequencyCenter1">
            <summary>Center frequency in Hz for band 1</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Gain1">
            <summary>Boost/cut of band 1</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Bandwidth1">
            <summary>Bandwidth of band 1. Region is center frequency +/- Bandwidth /2</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.FrequencyCenter2">
            <summary>Center frequency in Hz for band 2</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Gain2">
            <summary>Boost/cut of band 2</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Bandwidth2">
            <summary>Bandwidth of band 2. Region is center frequency +/- Bandwidth /2</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.FrequencyCenter3">
            <summary>Center frequency in Hz for band 3</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Gain3">
            <summary>Boost/cut of band 3</summary>
        </member>
        <member name="F:UnrealEngine.FAudioEQEffect.Bandwidth3">
            <summary>Bandwidth of band 3. Region is center frequency +/- Bandwidth /2</summary>
        </member>
        <member name="F:UnrealEngine.FAudioQualitySettings.MaxChannels">
            <summary>
            The number of audio channels that can be used at once
            NOTE: Some platforms may cap this value to a lower setting regardless of what the settings request
            </summary>
        </member>
        <member name="F:UnrealEngine.FBakedAnimationState.StateName">
            <summary>The name of this state</summary>
        </member>
        <member name="P:UnrealEngine.FBakedAnimationState.Transitions">
            <summary>Set of legal transitions out of this state; already in priority order</summary>
        </member>
        <member name="F:UnrealEngine.FBakedAnimationState.StateRootNodeIndex">
            <summary>The root node index (into the AnimNodeProperties array of the UAnimBlueprintGeneratedClass)</summary>
        </member>
        <member name="P:UnrealEngine.FBakedAnimationState.PlayerNodeIndices">
            <summary>Indices into the property array for player nodes in the state</summary>
        </member>
        <member name="P:UnrealEngine.FBakedAnimationState.bAlwaysResetOnEntry">
            <summary>Whether or not this state will ALWAYS reset it's state on reentry, regardless of remaining weight</summary>
        </member>
        <member name="F:UnrealEngine.FBakedAnimationStateMachine.MachineName">
            <summary>Name of this machine (primarily for debugging purposes)</summary>
        </member>
        <member name="F:UnrealEngine.FBakedAnimationStateMachine.InitialState">
            <summary>Index of the initial state that the machine will start in</summary>
        </member>
        <member name="P:UnrealEngine.FBakedAnimationStateMachine.States">
            <summary>List of all states this machine can be in</summary>
        </member>
        <member name="P:UnrealEngine.FBakedAnimationStateMachine.Transitions">
            <summary>List of all transitions between states</summary>
        </member>
        <member name="F:UnrealEngine.FBakedStateExitTransition.CanTakeDelegateIndex">
            <summary>The node property index for this rule</summary>
        </member>
        <member name="F:UnrealEngine.FBakedStateExitTransition.CustomResultNodeIndex">
            <summary>The blend graph result node index</summary>
        </member>
        <member name="F:UnrealEngine.FBakedStateExitTransition.TransitionIndex">
            <summary>The index into the machine table of transitions</summary>
        </member>
        <member name="P:UnrealEngine.FBakedStateExitTransition.bDesiredTransitionReturnValue">
            <summary>What the transition rule node needs to return to take this transition (for bidirectional transitions)</summary>
        </member>
        <member name="P:UnrealEngine.FBakedStateExitTransition.bAutomaticRemainingTimeRule">
            <summary>Automatic Transition Rule based on animation remaining time.</summary>
        </member>
        <member name="T:UnrealEngine.FBasedMovementInfo">
            <summary>Struct to hold information about the "base" object the character is standing on.</summary>
        </member>
        <member name="F:UnrealEngine.FBasedMovementInfo.BoneName">
            <summary>Component we are based on</summary>
            <summary>Bone name on component, for skeletal meshes. NAME_None if not a skeletal mesh or if bone is invalid.</summary>
        </member>
        <member name="F:UnrealEngine.FBasedMovementInfo.Location">
            <summary>Location relative to MovementBase. Only valid if HasRelativeLocation() is true.</summary>
        </member>
        <member name="F:UnrealEngine.FBasedMovementInfo.Rotation">
            <summary>Rotation: relative to MovementBase if HasRelativeRotation() is true, absolute otherwise.</summary>
        </member>
        <member name="P:UnrealEngine.FBasedMovementInfo.bServerHasBaseComponent">
            <summary>Whether the server says that there is a base. On clients, the component may not have resolved yet.</summary>
        </member>
        <member name="P:UnrealEngine.FBasedMovementInfo.bRelativeRotation">
            <summary>Whether rotation is relative to the base or absolute. It can only be relative if location is also relative.</summary>
        </member>
        <member name="P:UnrealEngine.FBasedMovementInfo.bServerHasVelocity">
            <summary>Whether there is a velocity on the server. Used for forcing replication when velocity goes to zero.</summary>
        </member>
        <member name="F:UnrealEngine.FBlendParameter.Min">
            <summary>Min value for this parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FBlendParameter.Max">
            <summary>Max value for this parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FBlendParameter.GridNum">
            <summary>The number of grid divisions for this parameter (axis).</summary>
        </member>
        <member name="T:UnrealEngine.FBlendProfileBoneEntry">
            <summary>A single entry for a blend scale within a profile, mapping a bone to a blendscale</summary>
        </member>
        <member name="T:UnrealEngine.FBlendSample">
            <summary>Sample data</summary>
        </member>
        <member name="F:UnrealEngine.FBlendSample.SampleValue">
            <summary>blend 0->x, blend 1->y, blend 2->z</summary>
        </member>
        <member name="T:UnrealEngine.FBlueprintComponentChangedPropertyInfo">
            <summary>A single changed Blueprint component property.</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintComponentChangedPropertyInfo.PropertyName">
            <summary>The name of the changed property.</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintComponentChangedPropertyInfo.ArrayIndex">
            <summary>The array index of the changed property.</summary>
        </member>
        <member name="T:UnrealEngine.FBlueprintComponentDelegateBinding">
            <summary>Entry for a delegate to assign after a blueprint has been instanced</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintComponentDelegateBinding.ComponentPropertyName">
            <summary>Name of component property that contains delegate we want to assign to.</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintComponentDelegateBinding.DelegatePropertyName">
            <summary>Name of property on the component that we want to assign to.</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintComponentDelegateBinding.FunctionNameToBind">
            <summary>Name of function that we want to bind to the delegate.</summary>
        </member>
        <member name="T:UnrealEngine.FBlueprintCookedComponentInstancingData">
            <summary>Cooked data for a Blueprint component template.</summary>
        </member>
        <member name="P:UnrealEngine.FBlueprintCookedComponentInstancingData.bIsValid">
            <summary>Flag indicating whether or not this contains valid cooked data. Note that an empty changed property list can also be a valid template data context.</summary>
        </member>
        <member name="P:UnrealEngine.FBlueprintCookedComponentInstancingData.ChangedPropertyList">
            <summary>List of property info records with values that differ between the template and the component class CDO. This list will be generated at cook time.</summary>
        </member>
        <member name="T:UnrealEngine.FBlueprintEditorPromotionSettings">
            <summary>Holds settings for the blueprint editor build promotion tests</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintEditorPromotionSettings.FirstMeshPath">
            <summary>The starting mesh for the blueprint *</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintEditorPromotionSettings.SecondMeshPath">
            <summary>The mesh to set on the blueprint after the delay *</summary>
        </member>
        <member name="F:UnrealEngine.FBlueprintEditorPromotionSettings.DefaultParticleAsset">
            <summary>Default particle asset to use for tests</summary>
        </member>
        <member name="T:UnrealEngine.FBodyInstance">
            <summary>Container for a physics representation of an object</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.ResponseToChannels">
            <summary>
            @todo : make this to be transient, so that it doesn't have to save anymore
            we have to still load them until resave
            </summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.CollisionProfileName">
            <summary>Collision Profile Name *</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.CollisionResponses">
            <summary>Custom Channels for Responses</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bUseCCD">
            <summary>If true Continuous Collision Detection (CCD) will be used for this component</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bNotifyRigidBodyCollision">
            <summary>Should 'Hit' events fire when this object collides during physics simulation.</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bSimulatePhysics">
            <summary>
            If true, this body will use simulation. If false, will be 'fixed' (ie kinematic) and move where it is told.
            For a Skeletal Mesh Component, simulating requires a physics asset setup and assigned on the SkeletalMesh asset.
            For a Static Mesh Component, simulating requires simple collision to be setup on the StaticMesh asset.
            </summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bOverrideMass">
            <summary>If true, mass will not be automatically computed and you must set it directly</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bEnableGravity">
            <summary>If object should have the force of gravity applied</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bAutoWeld">
            <summary>If true and is attached to a parent, the two bodies will be joined into a single rigid body. Physical settings like collision profile and body settings are determined by the root</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bStartAwake">
            <summary>If object should start awake, or if it should initially be sleeping</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bGenerateWakeEvents">
            <summary>Should 'wake/sleep' events fire when this object is woken up or put to sleep by the physics simulation.</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bUpdateMassWhenScaleChanges">
            <summary>If true, it will update mass when scale changes *</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockTranslation">
            <summary>When a Locked Axis Mode is selected, will lock translation on the specified axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockRotation">
            <summary>When a Locked Axis Mode is selected, will lock rotation to the specified axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockXTranslation">
            <summary>Lock translation along the X-axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockYTranslation">
            <summary>Lock translation along the Y-axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockZTranslation">
            <summary>Lock translation along the Z-axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockXRotation">
            <summary>Lock rotation about the X-axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockYRotation">
            <summary>Lock rotation about the Y-axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bLockZRotation">
            <summary>Lock rotation about the Z-axis</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bOverrideMaxAngularVelocity">
            <summary>Override the default max angular velocity</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bUseAsyncScene">
            <summary>
            If true, this body will be put into the asynchronous physics scene. If false, it will be put into the synchronous physics scene.
            If the body is static, it will be placed into both scenes regardless of the value of bUseAsyncScene.
            </summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bOverrideMaxDepenetrationVelocity">
            <summary>Whether this body instance has its own custom MaxDepenetrationVelocity</summary>
        </member>
        <member name="P:UnrealEngine.FBodyInstance.bOverrideWalkableSlopeOnInstance">
            <summary>Whether this instance of the object has its own custom walkable slope override setting.</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.MaxDepenetrationVelocity">
            <summary>The maximum velocity used to depenetrate this object</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.MassInKgOverride">
            <summary>
            Mass of the body in KG. By default we compute this based on physical material and mass scale.
            @see bOverrideMass to set this directly
            </summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.LinearDamping">
            <summary>'Drag' force added to reduce linear movement</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.AngularDamping">
            <summary>'Drag' force added to reduce angular movement</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.CustomDOFPlaneNormal">
            <summary>Locks physical movement along a custom plane for a given normal.</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.COMNudge">
            <summary>User specified offset for the center of mass of this object, from the calculated location</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.MassScale">
            <summary>Per-instance scaling of mass</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.WalkableSlopeOverride">
            <summary>
            Custom walkable slope override setting for this instance.
            @see GetWalkableSlopeOverride(), SetWalkableSlopeOverride()
            </summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.MaxAngularVelocity">
            <summary>Allows you to override the PhysicalMaterial to use for simple collision on this body.</summary>
            <summary>The maximum angular velocity for this instance</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.CustomSleepThresholdMultiplier">
            <summary>If the SleepFamily is set to custom, multiply the natural sleep threshold by this amount. A higher number will cause the body to sleep sooner.</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.PhysicsBlendWeight">
            <summary>Provide appropriate interface for doing this instead of allowing BlueprintReadWrite *</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.PositionSolverIterationCount">
            <summary>This physics body's solver iteration count for position. Increasing this will be more CPU intensive, but better stabilized.</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.RigidActorSyncId">
            <summary>Internal use. Physics-engine id of the actor used during serialization. Needs to be outside the ifdef for serialization purposes</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.RigidActorAsyncId">
            <summary>Internal use. Physics-engine id of the actor used during serialization.  Needs to be outside the ifdef for serialization purposes</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.VelocitySolverIterationCount">
            <summary>This physics body's solver iteration count for velocity. Increasing this will be more CPU intensive, but better stabilized.</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.DOFMode">
            <summary>Locks physical movement along specified axis.</summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.CollisionEnabled">
            <summary>
            Type of collision enabled.
                 No Collision      : Will not create any representation in the physics engine. Cannot be used for spatial queries (raycasts, sweeps, overlaps) or simulation (rigid body, constraints). Best performance possible (especially for moving objects)
                 Query Only        : Only used for spatial queries (raycasts, sweeps, and overlaps). Cannot be used for simulation (rigid body, constraints). Useful for character movement and things that do not need physical simulation. Performance gains by keeping data out of simulation tree.
                 Physics Only      : Only used only for physics simulation (rigid body, constraints). Cannot be used for spatial queries (raycasts, sweeps, overlaps). Useful for jiggly bits on characters that do not need per bone detection. Performance gains by keeping data out of query tree
                 Collision Enabled : Can be used for both spatial queries (raycasts, sweeps, overlaps) and simulation (rigid body, constraints).
            </summary>
        </member>
        <member name="F:UnrealEngine.FBodyInstance.ObjectType">
            <summary>Enum indicating what type of object this should be considered as when it moves</summary>
        </member>
        <member name="F:UnrealEngine.FBoneMirrorInfo.SourceIndex">
            <summary>The bone to mirror.</summary>
        </member>
        <member name="F:UnrealEngine.FBoneMirrorInfo.BoneFlipAxis">
            <summary>Axis the bone is mirrored across.</summary>
        </member>
        <member name="T:UnrealEngine.FBoneNode">
            <summary>Each Bone node in BoneTree</summary>
        </member>
        <member name="F:UnrealEngine.FBoneNode.Name">
            <summary>Name of bone, this is the search criteria to match with mesh bone. This will be NAME_None if deleted.</summary>
        </member>
        <member name="F:UnrealEngine.FBoneNode.ParentIndex">
            <summary>Parent Index. -1 if not used. The root has 0 as its parent. Do not delete the element but set this to -1. If it is revived by other reason, fix up this link.</summary>
        </member>
        <member name="F:UnrealEngine.FBoneNode.TranslationRetargetingMode">
            <summary>Retargeting Mode for Translation Component.</summary>
        </member>
        <member name="F:UnrealEngine.FBoneReference.BoneName">
            <summary>Name of bone to control. This is the main bone chain to modify from. *</summary>
        </member>
        <member name="T:UnrealEngine.FBoolTrackKey">
            <summary>Information for one event in the track.</summary>
        </member>
        <member name="T:UnrealEngine.FBox">
            <summary>
            A bounding box.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Box.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FBox2D">
            <summary>
            A rectangular 2D Box.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Box2D.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FBoxElement2D">
            <summary>Box shape used for collision</summary>
        </member>
        <member name="F:UnrealEngine.FBoxElement2D.Center">
            <summary>Center of the box</summary>
        </member>
        <member name="F:UnrealEngine.FBoxElement2D.Width">
            <summary>Width of the box</summary>
        </member>
        <member name="F:UnrealEngine.FBoxElement2D.Height">
            <summary>Height of the box</summary>
        </member>
        <member name="F:UnrealEngine.FBoxElement2D.Angle">
            <summary>Rotation of the box (in degrees)</summary>
        </member>
        <member name="T:UnrealEngine.FBoxSphereBounds">
            <summary>
            A bounding box and bounding sphere with the same origin.
            The full C++ class is located here : Engine\Source\Runtime\Core\Public\Math\BoxSphereBounds.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FBPInterfaceDescription">
            <summary>Struct containing information about what interfaces are implemented in this blueprint</summary>
        </member>
        <member name="P:UnrealEngine.FBPInterfaceDescription.Graphs">
            <summary>Reference to the interface class we're adding to this blueprint</summary>
            <summary>References to the graphs associated with the required functions for this interface</summary>
        </member>
        <member name="T:UnrealEngine.FBPVariableDescription">
            <summary>Struct indicating a variable in the generated class</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.VarName">
            <summary>Name of the variable</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.VarGuid">
            <summary>A Guid that will remain constant even if the VarName changes</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.VarType">
            <summary>Type of the variable</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.FriendlyName">
            <summary>Friendly name of the variable</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.Category">
            <summary>Category this variable should be in</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.PropertyFlags">
            <summary>Property flags for this variable - Changed from int32 to uint64</summary>
        </member>
        <member name="P:UnrealEngine.FBPVariableDescription.MetaDataArray">
            <summary>Metadata information for this variable</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableDescription.DefaultValue">
            <summary>Optional new default value stored as string</summary>
        </member>
        <member name="T:UnrealEngine.FBPVariableMetaDataEntry">
            <summary>One metadata entry for a variable</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableMetaDataEntry.DataKey">
            <summary>Name of metadata key</summary>
        </member>
        <member name="F:UnrealEngine.FBPVariableMetaDataEntry.DataValue">
            <summary>Name of metadata value</summary>
        </member>
        <member name="F:UnrealEngine.FBranchFilter.BoneName">
            <summary>Bone Name to filter *</summary>
        </member>
        <member name="F:UnrealEngine.FBranchFilter.BlendDepth">
            <summary>Blend Depth *</summary>
        </member>
        <member name="T:UnrealEngine.FBranchingPoint">
            <summary>Remove FBranchingPoint when VER_UE4_MONTAGE_BRANCHING_POINT_REMOVAL is removed.</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.TriggerTimeOffset">
            <summary>An offset from the DisplayTime to the actual time we will trigger the notify, as we cannot always trigger it exactly at the time the user wants</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.SlotIndex">
            <summary>The montage that this element is currently linked to</summary>
            <summary>The slot index we are currently using within LinkedMontage</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.SegmentIndex">
            <summary>The index of the segment we are linked to within the slot we are using</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.LinkMethod">
            <summary>The method we are using to calculate our times</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.CachedLinkMethod">
            <summary>Cached link method used to transform the time when LinkMethod changes, always relates to the currently stored time</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.SegmentBeginTime">
            <summary>The absolute time in the montage that our currently linked segment begins</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.SegmentLength">
            <summary>The absolute length of our currently linked segment</summary>
        </member>
        <member name="F:UnrealEngine.FBranchingPoint.LinkValue">
            <summary>The time of this montage. This will differ depending upon the method we are using to link the time for this element</summary>
        </member>
        <member name="T:UnrealEngine.FBranchingPointMarker">
            <summary>
            AnimNotifies marked as BranchingPoints will create these markers on their Begin/End times.
                  They create stopping points when the Montage is being ticked to dispatch events.
            </summary>
        </member>
        <member name="T:UnrealEngine.FBuilderPoly">
            <summary>Internal state, not accessible to script.</summary>
        </member>
        <member name="T:UnrealEngine.FBuildPromotionImportWorkflowSettings">
            <summary>Holds settings for the import workflow stage of the build promotion test</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.Diffuse">
            <summary>Import settings for the Diffuse texture</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.Normal">
            <summary>Import settings for the Normalmap texture</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.StaticMesh">
            <summary>Import settings for the static mesh</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.ReimportStaticMesh">
            <summary>Import settings for the static mesh to re-import</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.BlendShapeMesh">
            <summary>Import settings for the blend shape</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.MorphMesh">
            <summary>Import settings for the morph mesh</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.SkeletalMesh">
            <summary>Import settings for the skeletal mesh</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.Animation">
            <summary>Import settings for the animation asset.  (Will automatically use the skeleton of the skeletal mesh above)</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.Sound">
            <summary>Import settings for the sound</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionImportWorkflowSettings.SurroundSound">
            <summary>Import settings for the surround sound (Select any of the channels.  It will auto import the rest)</summary>
        </member>
        <member name="P:UnrealEngine.FBuildPromotionImportWorkflowSettings.OtherAssetsToImport">
            <summary>Import settings for any other assets you may want to import</summary>
        </member>
        <member name="T:UnrealEngine.FBuildPromotionNewProjectSettings">
            <summary>Holds settings for the new project stage of the build promotion test</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionNewProjectSettings.NewProjectFolderOverride">
            <summary>The path for the new project</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionNewProjectSettings.NewProjectNameOverride">
            <summary>The name of the project *</summary>
        </member>
        <member name="T:UnrealEngine.FBuildPromotionOpenAssetSettings">
            <summary>Holds settings for the open assets stage of the build promotion test</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionOpenAssetSettings.BlueprintAsset">
            <summary>The blueprint asset to open</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionOpenAssetSettings.MaterialAsset">
            <summary>The material asset to open</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionOpenAssetSettings.ParticleSystemAsset">
            <summary>The particle system asset to open</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionOpenAssetSettings.SkeletalMeshAsset">
            <summary>The skeletal mesh asset to open</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionOpenAssetSettings.StaticMeshAsset">
            <summary>The static mesh asset to open</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionOpenAssetSettings.TextureAsset">
            <summary>The texture asset to open</summary>
        </member>
        <member name="T:UnrealEngine.FBuildPromotionTestSettings">
            <summary>Holds settings for the editor build promotion test</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionTestSettings.DefaultStaticMeshAsset">
            <summary>Default static mesh asset to apply materials to *</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionTestSettings.ImportWorkflow">
            <summary>Import workflow settings *</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionTestSettings.OpenAssets">
            <summary>Open assets settings *</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionTestSettings.NewProjectSettings">
            <summary>New project settings *</summary>
        </member>
        <member name="F:UnrealEngine.FBuildPromotionTestSettings.SourceControlMaterial">
            <summary>Material to modify for the content browser step *</summary>
        </member>
        <member name="T:UnrealEngine.FButtonStyle">
            <summary>Represents the appearance of an SButton</summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.Normal">
            <summary>Button appearance when the button is not hovered or pressed</summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.Hovered">
            <summary>Button appearance when hovered</summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.Pressed">
            <summary>Button appearance when pressed</summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.Disabled">
            <summary>Button appearance when disabled, by default this is set to an invalid resource when that is the case default disabled drawing is used.</summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.NormalPadding">
            <summary>
            Padding that accounts for the border in the button's background image.
            When this is applied, the content of the button should appear flush
            with the button's border. Use this padding when the button is not pressed.
            </summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.PressedPadding">
            <summary>
            Same as NormalPadding but used when the button is pressed. Allows for moving the content to match
            any "movement" in the button's border image.
            </summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.PressedSlateSound">
            <summary>The sound the button should play when pressed</summary>
        </member>
        <member name="F:UnrealEngine.FButtonStyle.HoveredSlateSound">
            <summary>The sound the button should play when initially hovered over</summary>
        </member>
        <member name="F:UnrealEngine.FCachedMovieSceneEvaluationTemplate.EvaluationField">
            <summary>Evaluation field for efficient runtime evaluation</summary>
        </member>
        <member name="F:UnrealEngine.FCachedMovieSceneEvaluationTemplate.Hierarchy">
            <summary>Map of all sequences found in this template (recursively)</summary>
        </member>
        <member name="P:UnrealEngine.FCachedMovieSceneEvaluationTemplate.bHasLegacyTrackInstances">
            <summary>When set, this template contains legacy track instances that require the initialization of a legacy sequence instance</summary>
        </member>
        <member name="P:UnrealEngine.FCachedMovieSceneEvaluationTemplate.bKeepStaleTracks">
            <summary>Primarily used in editor to keep stale tracks around during template regeneration to ensure we can call OnEndEvaluation on them.</summary>
        </member>
        <member name="T:UnrealEngine.FCameraCacheEntry">
            <summary>
            Cached camera POV info, stored as optimization so we only
            need to do a full camera update once per tick.
            </summary>
        </member>
        <member name="F:UnrealEngine.FCameraCacheEntry.TimeStamp">
            <summary>World time this entry was created.</summary>
        </member>
        <member name="F:UnrealEngine.FCameraCacheEntry.POV">
            <summary>Camera POV to cache.</summary>
        </member>
        <member name="T:UnrealEngine.FCameraCutInfo">
            <summary>Helper struct for storing the camera world-position for each camera cut in the cinematic.</summary>
        </member>
        <member name="T:UnrealEngine.FCameraPreviewInfo">
            <summary>Preview APawn class for this track</summary>
        </member>
        <member name="F:UnrealEngine.FCameraPreviewInfo.Location">
            <summary>for now this is read-only. It has maintenance issue to be resolved if I enable this.</summary>
        </member>
        <member name="T:UnrealEngine.FCanvasUVTri">
            <summary>Simple 2d triangle with UVs</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V0_Pos">
            <summary>Position of first vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V0_UV">
            <summary>UV of first vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V0_Color">
            <summary>Color of first vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V1_Pos">
            <summary>Position of second vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V1_UV">
            <summary>UV of second vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V1_Color">
            <summary>Color of second vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V2_Pos">
            <summary>Position of third vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V2_UV">
            <summary>UV of third vertex</summary>
        </member>
        <member name="F:UnrealEngine.FCanvasUVTri.V2_Color">
            <summary>Color of third vertex</summary>
        </member>
        <member name="T:UnrealEngine.FCharacterEvent">
            <summary>FCharacterEvent describes a keyboard action where the utf-16 code is given.  Used for OnKeyChar messages</summary>
        </member>
        <member name="T:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction">
            <summary>Tick function that calls UCharacterMovementComponent::PostPhysicsTickComponent</summary>
        </member>
        <member name="F:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.TickGroup">
            <summary>
            Defines the minimum tick group for this tick function. These groups determine the relative order of when objects tick during a frame update.
            Given prerequisites, the tick may be delayed.
            @see ETickingGroup
            @see FTickFunction::AddPrerequisite()
            </summary>
        </member>
        <member name="F:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.EndTickGroup">
            <summary>
            Defines the tick group that this tick function must finish in. These groups determine the relative order of when objects tick during a frame update.
            @see ETickingGroup
            </summary>
        </member>
        <member name="P:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.bTickEvenWhenPaused">
            <summary>Bool indicating that this function should execute even if the game is paused. Pause ticks are very limited in capabilities. *</summary>
        </member>
        <member name="P:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.bCanEverTick">
            <summary>If false, this tick function will never be registered and will never tick. Only settable in defaults.</summary>
        </member>
        <member name="P:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.bStartWithTickEnabled">
            <summary>If true, this tick function will start enabled, but can be disabled later on.</summary>
        </member>
        <member name="P:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.bAllowTickOnDedicatedServer">
            <summary>If we allow this tick to run on a dedicated server</summary>
        </member>
        <member name="F:UnrealEngine.FCharacterMovementComponentPostPhysicsTickFunction.TickInterval">
            <summary>The frequency in seconds at which this tick function will be executed.  If less than or equal to 0 then it will tick every frame</summary>
        </member>
        <member name="T:UnrealEngine.FCheckBoxStyle">
            <summary>Represents the appearance of an SCheckBox</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.CheckBoxType">
            <summary>The visual type of the checkbox</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UncheckedImage">
            <summary>CheckBox appearance when the CheckBox is unchecked (normal)</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UncheckedHoveredImage">
            <summary>CheckBox appearance when the CheckBox is unchecked and hovered</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UncheckedPressedImage">
            <summary>CheckBox appearance when the CheckBox is unchecked and hovered</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.CheckedImage">
            <summary>CheckBox appearance when the CheckBox is checked</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.CheckedHoveredImage">
            <summary>CheckBox appearance when checked and hovered</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.CheckedPressedImage">
            <summary>CheckBox appearance when checked and pressed</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UndeterminedImage">
            <summary>CheckBox appearance when the CheckBox is undetermined</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UndeterminedHoveredImage">
            <summary>CheckBox appearance when CheckBox is undetermined and hovered</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UndeterminedPressedImage">
            <summary>CheckBox appearance when CheckBox is undetermined and pressed</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.Padding">
            <summary>Padding</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.ForegroundColor">
            <summary>The foreground color</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.BorderBackgroundColor">
            <summary>BorderBackgroundColor refers to the actual color and opacity of the supplied border image on toggle buttons</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.CheckedSlateSound">
            <summary>The sound the check box should play when checked</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.UncheckedSlateSound">
            <summary>The sound the check box should play when unchecked</summary>
        </member>
        <member name="F:UnrealEngine.FCheckBoxStyle.HoveredSlateSound">
            <summary>The sound the check box should play when initially hovered over</summary>
        </member>
        <member name="T:UnrealEngine.FCircleElement2D">
            <summary>Sphere shape used for collision</summary>
        </member>
        <member name="F:UnrealEngine.FClothingAssetData.AssetName">
            <summary>User-defined asset name</summary>
        </member>
        <member name="P:UnrealEngine.FClothingAssetData.bClothPropertiesChanged">
            <summary>the flag whether cloth physics properties are changed from UE4 editor or not</summary>
        </member>
        <member name="P:UnrealEngine.FClothingAssetData.ApexToUnrealBoneMapping">
            <summary>Apex stores only the bones that cloth needs. We need a mapping from apex bone index to UE bone index.</summary>
        </member>
        <member name="T:UnrealEngine.FClothPhysicsProperties">
            <summary>
            now exposed a part of properties based on 3DS Max plug-in
            property names are also changed into 3DS Max plug-in's one
            </summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.VerticalResistance">
            <summary>vertical stiffness of the cloth in the range [0, 1].   usually set to 1.0</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.HorizontalResistance">
            <summary>Horizontal stiffness of the cloth in the range [0, 1].  usually set to 1.0</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.BendResistance">
            <summary>Bending stiffness of the cloth in the range [0, 1].</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.ShearResistance">
            <summary>Shearing stiffness of the cloth in the range [0, 1].</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.Friction">
            <summary>Friction coefficient in the range[0, 1]</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.Damping">
            <summary>Spring damping of the cloth in the range[0, 1]</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.TetherStiffness">
            <summary>Tether stiffness of the cloth in the range[0, 1].  Equivalent to 1.0-Relax in autodesk plugin.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.TetherLimit">
            <summary>Tether Limit, corresponds to 1.0+StretchLimit parameter on Autodesk plugin.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.Drag">
            <summary>Drag coefficient n the range [0, 1]</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.StiffnessFrequency">
            <summary>Frequency for stiffness</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.GravityScale">
            <summary>Gravity multiplier for this cloth.  Also called Density in Autodesk plugin.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.MassScale">
            <summary>A mass scaling that is applied to the cloth.   Corresponds to 100X the MotionAdaptation parameter in autodesk plugin.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.InertiaBlend">
            <summary>Amount of inertia that is kept when using local space simulation. Internal name is inertia scale</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.SelfCollisionThickness">
            <summary>Minimal amount of distance particles will keep of each other.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.SelfCollisionSquashScale">
            <summary>unclear what this actually does.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.SelfCollisionStiffness">
            <summary>Self collision stiffness.  0 off, 1 for on.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.SolverFrequency">
            <summary>A computation parameter for the Solver.   Along with frame rate this probably specifies the number of solver iterations</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.FiberCompression">
            <summary>Lower (compression) Limit of SoftZone (relative to rest length).  Applied for all fiber types.  If both compression and expansion are 1.0 then there is no deadzone.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.FiberExpansion">
            <summary>Upper (expansion) Limit of SoftZone (relative to rest length).  Applied to all fiber types.   Also referred to as "stretch" range by apex internally.</summary>
        </member>
        <member name="F:UnrealEngine.FClothPhysicsProperties.FiberResistance">
            <summary>Resistance Multiplier that's applied to within SoftZone amount for all fiber types.  0.0 for a complete deadzone (no force).  At 1.0 the spring response within the softzone is as stiff it is elsewhere.  This parameter also known as scale by Apex internally.</summary>
        </member>
        <member name="T:UnrealEngine.FCollectionScalarParameter">
            <summary>A scalar parameter</summary>
        </member>
        <member name="F:UnrealEngine.FCollectionScalarParameter.ParameterName">
            <summary>The name of the parameter.  Changing this name will break any blueprints that reference the parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FCollectionScalarParameter.Id">
            <summary>Uniquely identifies the parameter, used for fixing up materials that reference this parameter when renaming.</summary>
        </member>
        <member name="T:UnrealEngine.FCollectionVectorParameter">
            <summary>A vector parameter</summary>
        </member>
        <member name="F:UnrealEngine.FCollectionVectorParameter.ParameterName">
            <summary>The name of the parameter.  Changing this name will break any blueprints that reference the parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FCollectionVectorParameter.Id">
            <summary>Uniquely identifies the parameter, used for fixing up materials that reference this parameter when renaming.</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponse.ResponseToChannels">
            <summary>
            Types of objects that this physics objects will collide with. // @todo : make this to be transient, so that it doesn't have to save anymore
            // we have to still load them until resave
            </summary>
        </member>
        <member name="P:UnrealEngine.FCollisionResponse.ResponseArray">
            <summary>Custom Channels for Responses</summary>
        </member>
        <member name="T:UnrealEngine.FCollisionResponseContainer">
            <summary>Container for indicating a set of collision channels that this object will collide with.</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.WorldStatic">
            <summary>
            Reserved Engine Trace Channels
            Note -        If you change this (add/remove/modify)
                                  you should make sure it matches with ECollisionChannel (including DisplayName)
                                  They has to be mirrored if serialized
            </summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.WorldDynamic">
            <summary>0</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.Pawn">
            <summary>1.</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.Visibility">
            <summary>2</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.Camera">
            <summary>3</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.PhysicsBody">
            <summary>4</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.Vehicle">
            <summary>5</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.Destructible">
            <summary>6</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.EngineTraceChannel1">
            <summary>Unspecified Engine Trace Channels</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.EngineTraceChannel2">
            <summary>8</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.EngineTraceChannel3">
            <summary>9</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.EngineTraceChannel4">
            <summary>10</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.EngineTraceChannel5">
            <summary>11</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.EngineTraceChannel6">
            <summary>12</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel1">
            <summary>
            in order to use this custom channels
            we recommend to define in your local file
            - i.e. #define COLLISION_WEAPON               ECC_GameTraceChannel1
            and make sure you customize these it in INI file by
            in DefaultEngine.ini
            [/Script/Engine.CollisionProfile]
            GameTraceChannel1="Weapon"
            also in the INI file, you can override collision profiles that are defined by simply redefining
            note that Weapon isn't defined in the BaseEngine.ini file, but "Trigger" is defined in Engine
            +Profiles=(Name="Trigger",CollisionEnabled=QueryOnly,ObjectTypeName=WorldDynamic, DefaultResponse=ECR_Overlap, CustomResponses=((Channel=Visibility, Response=ECR_Ignore), (Channel=Weapon, Response=ECR_Ignore)))
            </summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel2">
            <summary>14</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel3">
            <summary>15</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel4">
            <summary>16</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel5">
            <summary>17</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel6">
            <summary>18</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel7">
            <summary>19</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel8">
            <summary>20</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel9">
            <summary>21</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel10">
            <summary>22</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel11">
            <summary>23</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel12">
            <summary>24</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel13">
            <summary>25</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel14">
            <summary>26</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel15">
            <summary>27</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel16">
            <summary>28</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel17">
            <summary>28</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseContainer.GameTraceChannel18">
            <summary>30</summary>
        </member>
        <member name="T:UnrealEngine.FCollisionResponseTemplate">
            <summary>Structure for collision response templates.</summary>
        </member>
        <member name="P:UnrealEngine.FCollisionResponseTemplate.CustomResponses">
            <summary>Types of objects that this physics objects will collide with.</summary>
        </member>
        <member name="F:UnrealEngine.FCollisionResponseTemplate.HelpMessage">
            <summary>Help message for collision profile *</summary>
        </member>
        <member name="P:UnrealEngine.FCollisionResponseTemplate.bCanModify">
            <summary>Help message for collision profile *</summary>
        </member>
        <member name="T:UnrealEngine.FColor">
            <summary>
            A Color (BGRA).
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Color.h
            </summary>
        </member>
        <member name="F:UnrealEngine.FColor.White">
            Some pre-inited colors, useful for debug code 
        </member>
        <member name="F:UnrealEngine.FColorMaterialInput.OutputIndex">
            <summary>Material expression that this input is connected to, or NULL if not connected.</summary>
            <summary>Index into Expression's outputs array that this input is connected to.</summary>
        </member>
        <member name="F:UnrealEngine.FColorMaterialInput.InputName">
            <summary>
            Optional name of the input.
            Note that this is the only member which is not derived from the output currently connected.
            </summary>
        </member>
        <member name="F:UnrealEngine.FColorMaterialInput.ExpressionName">
            <summary>Material expression name that this input is connected to, or None if not connected. Used only in cooked builds</summary>
        </member>
        <member name="T:UnrealEngine.FColorParameterNameAndCurves">
            <summary>Structure representing an animated vector parameter and it's associated animation curve.</summary>
        </member>
        <member name="F:UnrealEngine.FColorParameterNameAndCurves.ParameterName">
            <summary>The name of the vector parameter which is being animated.</summary>
        </member>
        <member name="F:UnrealEngine.FColorParameterNameAndCurves.RedCurve">
            <summary>The curve which contains the animation data for the red component of the color parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FColorParameterNameAndCurves.GreenCurve">
            <summary>The curve which contains the animation data for the green component of the color parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FColorParameterNameAndCurves.BlueCurve">
            <summary>The curve which contains the animation data for the blue component of the color parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FColorParameterNameAndCurves.AlphaCurve">
            <summary>The curve which contains the animation data for the alpha component of the color parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FComboBoxStyle">
            <summary>Represents the appearance of an SComboBox</summary>
        </member>
        <member name="F:UnrealEngine.FComboBoxStyle.ComboButtonStyle">
            <summary>The style to use for our SComboButton</summary>
        </member>
        <member name="F:UnrealEngine.FComboBoxStyle.PressedSlateSound">
            <summary>The sound the button should play when pressed</summary>
        </member>
        <member name="F:UnrealEngine.FComboBoxStyle.SelectionChangeSlateSound">
            <summary>The Sound to play when the selection is changed</summary>
        </member>
        <member name="T:UnrealEngine.FComboButtonStyle">
            <summary>Represents the appearance of an SComboButton</summary>
        </member>
        <member name="F:UnrealEngine.FComboButtonStyle.ButtonStyle">
            <summary>The style to use for our SButton</summary>
        </member>
        <member name="F:UnrealEngine.FComboButtonStyle.DownArrowImage">
            <summary>Image to use for the down arrow</summary>
        </member>
        <member name="F:UnrealEngine.FComboButtonStyle.MenuBorderBrush">
            <summary>Brush to use to add a "menu border" around the drop-down content</summary>
        </member>
        <member name="F:UnrealEngine.FComboButtonStyle.MenuBorderPadding">
            <summary>Padding to use to add a "menu border" around the drop-down content</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeFont.DefaultTypeface">
            <summary>The default typeface that will be used when not overridden by a sub-typeface</summary>
        </member>
        <member name="P:UnrealEngine.FCompositeFont.SubTypefaces">
            <summary>Sub-typefaces to use for a specific set of characters</summary>
        </member>
        <member name="T:UnrealEngine.FCompositeSection">
            <summary>
            Section data for each track. Reference of data will be stored in the child class for the way they want
            AnimComposite vs AnimMontage have different requirement for the actual data reference
            This only contains composite section information. (vertical sequences)
            </summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.SectionName">
            <summary>Section Name</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.StartTime">
            <summary>Start Time *</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.NextSectionName">
            <summary>Should this animation loop.</summary>
        </member>
        <member name="P:UnrealEngine.FCompositeSection.MetaData">
            <summary>
            Meta data that can be saved with the asset
            You can query by GetMetaData function
            </summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.SlotIndex">
            <summary>The montage that this element is currently linked to</summary>
            <summary>The slot index we are currently using within LinkedMontage</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.SegmentIndex">
            <summary>The index of the segment we are linked to within the slot we are using</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.LinkMethod">
            <summary>The method we are using to calculate our times</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.CachedLinkMethod">
            <summary>Cached link method used to transform the time when LinkMethod changes, always relates to the currently stored time</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.SegmentBeginTime">
            <summary>The absolute time in the montage that our currently linked segment begins</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.SegmentLength">
            <summary>The absolute length of our currently linked segment</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSection.LinkValue">
            <summary>The time of this montage. This will differ depending upon the method we are using to link the time for this element</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSubFont.Typeface">
            <summary>Typeface data for this sub-font</summary>
        </member>
        <member name="P:UnrealEngine.FCompositeSubFont.CharacterRanges">
            <summary>Array of character ranges for which this sub-font should be used</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSubFont.ScalingFactor">
            <summary>Amount to scale this sub-font so that it better matches the size of the default font</summary>
        </member>
        <member name="F:UnrealEngine.FCompositeSubFont.EditorName">
            <summary>Name of this sub-font. Only used by the editor UI as a convenience to let you state the purpose of the font family.</summary>
        </member>
        <member name="T:UnrealEngine.FConeConstraint">
            <summary>Cone constraint</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Swing1LimitDegrees">
            <summary>Angle of movement along the XY plane. This defines the first symmetric angle of the cone.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Swing2LimitDegrees">
            <summary>Angle of movement along the XZ plane. This defines the second symmetric angle of the cone.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Swing1Motion">
            <summary>Indicates whether the Swing1 limit is used.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Swing2Motion">
            <summary>Indicates whether the Swing2 limit is used.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Stiffness">
            <summary>Stiffness of the soft constraint. Only used when Soft Constraint is on.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Damping">
            <summary>Damping of the soft constraint. Only used when Soft Constraint is on.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.Restitution">
            <summary>Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead.</summary>
        </member>
        <member name="F:UnrealEngine.FConeConstraint.ContactDistance">
            <summary>Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.</summary>
        </member>
        <member name="P:UnrealEngine.FConeConstraint.bSoftConstraint">
            <summary>Whether we want to use a soft constraint (spring).</summary>
        </member>
        <member name="T:UnrealEngine.FConstrainComponentPropName">
            <summary>Struct used to specify the property name of the component to constrain</summary>
        </member>
        <member name="F:UnrealEngine.FConstrainComponentPropName.ComponentName">
            <summary>Name of property</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintDrive.Stiffness">
            <summary>The spring strength of the drive. Force proportional to the position error.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintDrive.Damping">
            <summary>The damping strength of the drive. Force proportional to the velocity error.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintDrive.MaxForce">
            <summary>The force limit of the drive.</summary>
        </member>
        <member name="P:UnrealEngine.FConstraintDrive.bEnablePositionDrive">
            <summary>Enables/Disables position drive (orientation if using angular drive)</summary>
        </member>
        <member name="P:UnrealEngine.FConstraintDrive.bEnableVelocityDrive">
            <summary>Enables/Disables velocity drive (angular velocity if using angular drive)</summary>
        </member>
        <member name="T:UnrealEngine.FConstraintInstance">
            <summary>Container for a physics representation of an object.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.JointName">
            <summary>Name of bone that this joint is associated with.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.ConstraintBone1">
            <summary>
            Name of first bone (body) that this constraint is connecting.
            This will be the 'child' bone in a PhysicsAsset.
            </summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.ConstraintBone2">
            <summary>
            Name of second bone (body) that this constraint is connecting.
            This will be the 'parent' bone in a PhysicsAset.
            </summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.Pos1">
            <summary>Location of constraint in Body1 reference frame.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.PriAxis1">
            <summary>Primary (twist) axis in Body1 reference frame.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.SecAxis1">
            <summary>Seconday axis in Body1 reference frame. Orthogonal to PriAxis1.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.Pos2">
            <summary>Location of constraint in Body2 reference frame.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.PriAxis2">
            <summary>Primary (twist) axis in Body2 reference frame.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.SecAxis2">
            <summary>Seconday axis in Body2 reference frame. Orthogonal to PriAxis2.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.AngularRotationOffset">
            <summary>
            Specifies the angular offset between the two frames of reference. By default limit goes from (-Angle, +Angle)
            This allows you to bias the limit for swing1 swing2 and twist.
            </summary>
        </member>
        <member name="P:UnrealEngine.FConstraintInstance.bScaleLinearLimits">
            <summary>If true, linear limits scale using the absolute min of the 3d scale of the owning component</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.ProfileInstance">
            <summary>Constraint Data (properties easily swapped at runtime based on different constraint profiles)</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintInstance.AngularDriveSpring">
            <summary>Revolutions per second</summary>
        </member>
        <member name="T:UnrealEngine.FConstraintProfileProperties">
            <summary>Container for properties of a physics constraint that can be easily swapped at runtime. This is useful for switching different setups when going from ragdoll to standup for example</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintProfileProperties.ProjectionLinearTolerance">
            <summary>Linear tolerance value in world units. If the distance error exceeds this tolerence limit, the body will be projected.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintProfileProperties.ProjectionAngularTolerance">
            <summary>Angular tolerance value in world units. If the distance error exceeds this tolerence limit, the body will be projected.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintProfileProperties.LinearBreakThreshold">
            <summary>Force needed to break the distance constraint.</summary>
        </member>
        <member name="F:UnrealEngine.FConstraintProfileProperties.AngularBreakThreshold">
            <summary>Torque needed to break the joint.</summary>
        </member>
        <member name="P:UnrealEngine.FConstraintProfileProperties.bDisableCollision">
            <summary>Disable collision between bodies joined by this constraint.</summary>
        </member>
        <member name="P:UnrealEngine.FConstraintProfileProperties.bEnableProjection">
            <summary>
            If distance error between bodies exceeds 0.1 units, or rotation error exceeds 10 degrees, body will be projected to fix this.
            For example a chain spinning too fast will have its elements appear detached due to velocity, this will project all bodies so they still appear attached to each other.
            </summary>
        </member>
        <member name="P:UnrealEngine.FConstraintProfileProperties.bAngularBreakable">
            <summary>Whether it is possible to break the joint with angular force.</summary>
        </member>
        <member name="P:UnrealEngine.FConstraintProfileProperties.bLinearBreakable">
            <summary>Whether it is possible to break the joint with linear force.</summary>
        </member>
        <member name="T:UnrealEngine.FControllerEvent">
            <summary>DEPRECATED 4.6 - Do not use //@Todo slate: Remove this as soon as the 4.6 deprecated API is Removed.</summary>
        </member>
        <member name="T:UnrealEngine.FConvexElement2D">
            <summary>One convex hull, used for simplified collision.</summary>
        </member>
        <member name="P:UnrealEngine.FConvexElement2D.VertexData">
            <summary>Vertices that lie on the convex hull</summary>
        </member>
        <member name="T:UnrealEngine.FCurveEdEntry">
            <summary>
            Information about a particule curve being viewed.
            Property could be an FInterpCurve, a DistributionFloat or a DistributionVector
            </summary>
        </member>
        <member name="F:UnrealEngine.FCurveEdTab.ViewStartInput">
            <summary>Remember the view setting for each tab.</summary>
        </member>
        <member name="T:UnrealEngine.FCustomChannelSetup">
            <summary>Structure for custom channel setup information.</summary>
        </member>
        <member name="F:UnrealEngine.FCustomChannelSetup.Channel">
            <summary>Which channel you'd like to customize *</summary>
        </member>
        <member name="F:UnrealEngine.FCustomChannelSetup.Name">
            <summary>Name of channel you'd like to show up *</summary>
        </member>
        <member name="F:UnrealEngine.FCustomChannelSetup.DefaultResponse">
            <summary>Default Response for the channel</summary>
        </member>
        <member name="P:UnrealEngine.FCustomChannelSetup.bTraceType">
            <summary>Sets meta data TraceType="1" for the enum entry if true. Otherwise, this channel will be treated as object query channel, so you can query object types*</summary>
        </member>
        <member name="P:UnrealEngine.FCustomChannelSetup.bStaticObject">
            <summary>Specifies if this is static object. Otherwise it will be dynamic object. This is used for query all objects vs all static objects vs all dynamic objects *</summary>
        </member>
        <member name="T:UnrealEngine.FCustomProfile">
            <summary>
            Structure for custom profiles.
            if you'd like to just add custom channels, not changing anything else engine defined
            if you'd like to override all about profile, please use
            +Profiles=(Name=NameOfProfileYouLikeToOverwrite,....)
            </summary>
        </member>
        <member name="P:UnrealEngine.FCustomProfile.CustomResponses">
            <summary>Types of objects that this physics objects will collide with.</summary>
        </member>
        <member name="T:UnrealEngine.FDateTime">
            <summary>A date/time value.</summary>
        </member>
        <member name="T:UnrealEngine.FDebugDisplayProperty">
            <summary>
            Debug property display functionality to interact with this, use "display", "displayall", "displayclear"
            @see UGameViewportClient
            @see FDebugDisplayProperty
            @see DrawStatsHUD
            </summary>
        </member>
        <member name="T:UnrealEngine.FDebugFloatHistory">
            <summary>Structure for recording float values and displaying them as an Histogram through DrawDebugFloatHistory.</summary>
        </member>
        <member name="P:UnrealEngine.FDebugFloatHistory.Samples">
            <summary>Samples</summary>
        </member>
        <member name="F:UnrealEngine.FDebugFloatHistory.MaxSamples">
            <summary>Max Samples to record.</summary>
        </member>
        <member name="F:UnrealEngine.FDebugFloatHistory.MinValue">
            <summary>Min value to record.</summary>
        </member>
        <member name="F:UnrealEngine.FDebugFloatHistory.MaxValue">
            <summary>Max value to record.</summary>
        </member>
        <member name="P:UnrealEngine.FDebugFloatHistory.bAutoAdjustMinMax">
            <summary>Auto adjust Min/Max as new values are recorded?</summary>
        </member>
        <member name="T:UnrealEngine.FDebugTextInfo">
            <summary>
            * Single entry of a debug text item to render.
            *
            * @see AHud
            * @see AddDebugText(), RemoveDebugText() and DrawDebugTextList()
            </summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.SrcActorOffset">
            <summary>AActor related to text item</summary>
            <summary>Offset from SrcActor.Location to apply</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.SrcActorDesiredOffset">
            <summary>Desired offset to interpolate to</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.DebugText">
            <summary>Text to display</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.TimeRemaining">
            <summary>Time remaining for the debug text, -1.f == infinite</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.Duration">
            <summary>Duration used to lerp desired offset</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.TextColor">
            <summary>Text color</summary>
        </member>
        <member name="P:UnrealEngine.FDebugTextInfo.bAbsoluteLocation">
            <summary>whether the offset should be treated as absolute world location of the string</summary>
        </member>
        <member name="P:UnrealEngine.FDebugTextInfo.bKeepAttachedToActor">
            <summary>If the actor moves does the text also move with it?</summary>
        </member>
        <member name="P:UnrealEngine.FDebugTextInfo.bDrawShadow">
            <summary>Whether to draw a shadow for the text</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.OrigActorLocation">
            <summary>When we first spawn store off the original actor location for use with bKeepAttachedToActor</summary>
        </member>
        <member name="F:UnrealEngine.FDebugTextInfo.FontScale">
            <summary>The Font which to display this as.  Will Default to GetSmallFont()*</summary>
            <summary>Scale to apply to font when rendering</summary>
        </member>
        <member name="T:UnrealEngine.FDelegateArray">
            <summary>
            Helper struct, since UnrealScript doesn't allow arrays of arrays, but
            arrays of structs of arrays are okay.
            </summary>
        </member>
        <member name="F:UnrealEngine.FDelegateRuntimeBinding.ObjectName">
            <summary>The widget that will be bound to the live data.</summary>
        </member>
        <member name="F:UnrealEngine.FDelegateRuntimeBinding.PropertyName">
            <summary>The property on the widget that will have a binding placed on it.</summary>
        </member>
        <member name="F:UnrealEngine.FDelegateRuntimeBinding.FunctionName">
            <summary>The function or property we're binding to on the source object.</summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleAdvancedParameters">
            <summary>Parameters that are less-often used.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleAdvancedParameters.DamageCap">
            <summary>
            Limits the amount of damage applied to a chunk.  This is useful for preventing the entire destructible
            from getting pulverized by a very large application of damage.  This can easily happen when impact damage is
            used, and the damage amount is proportional to the impact force (see forceToDamage).
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleAdvancedParameters.ImpactVelocityThreshold">
            <summary>
            Large impact force may be reported if rigid bodies are spawned inside one another.  In this case the realative velocity of the two
            objects will be low.  This variable allows the user to set a minimum velocity threshold for impacts to ensure that the objects are
            moving at a min velocity in order for the impact force to be considered.
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleAdvancedParameters.MaxChunkSpeed">
            <summary>
            If greater than 0, the chunks' speeds will not be allowed to exceed this value.  Use 0
            to disable this feature (this is the default).
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleAdvancedParameters.FractureImpulseScale">
            <summary>
            Scale factor used to apply an impulse force along the normal of chunk when fractured.  This is used
            in order to "push" the pieces out as they fracture.
            </summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleChunkParameters">
            <summary>Per-chunk authoring data.</summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleChunkParameters.bIsSupportChunk">
            <summary>
            Defines the chunk to be environmentally supported, if the appropriate NxDestructibleParametersFlag flags
            are set in NxDestructibleParameters.
            Default = false.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleChunkParameters.bDoNotFracture">
            <summary>
            Defines the chunk to be unfractureable.  If this is true, then none of its children will be fractureable.
            Default = false.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleChunkParameters.bDoNotDamage">
            <summary>
            Defines the chunk to be undamageable.  This means this chunk will not fracture, but its children might.
            Default = false.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleChunkParameters.bDoNotCrumble">
            <summary>
            Defines the chunk to be uncrumbleable.  This means this chunk will not be broken down into fluid mesh particles
            no matter how much damage it takes.  Note: this only applies to chunks with no children.  For a chunk with
            children, then:
            1) The chunk may be broken down into its children, and then its children may be crumbled, if the doNotCrumble flag
            is not set on them.
            2) If the Destructible module's chunk depth offset LOD may be set such that this chunk effectively has no children.
            In this case, the doNotCrumble flag will apply to it.
            Default = false.
            </summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleDamageParameters">
            <summary>Parameters that pertain to chunk damage.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleDamageParameters.DamageThreshold">
            <summary>The damage amount which will cause a chunk to fracture (break free).</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleDamageParameters.DamageSpread">
            <summary>Controls how easily damage spreads. DamageRadius = Damage*DamageSpread. All chunks within DamageRadius will take damage. Full damage is taken at zero distance, and zero damage at the DamageRadius.</summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleDamageParameters.bEnableImpactDamage">
            <summary>
            Whether to apply damage to destructible when colliding with an object.
            @see ImpactDamage
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleDamageParameters.ImpactDamage">
            <summary>
            Controls how much damage is applied upon collision. Damage = ImpactDamage * ImpactForce.
            @see DepthParameters for per level control of ImpactDamage
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleDamageParameters.DefaultImpactDamageDepth">
            <summary>
            Max depth level where impact damage is enabled. @see DepthParameters for per level control of ImpactDamage
            If negative, impact damage is disabled
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleDamageParameters.bCustomImpactResistance">
            <summary>
            By default, objects that collide with destructibles will bounce back. Custom resistance allows for finer control of how much a destructible "pushes back" against a colliding object.
            @see ImpactResistance
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleDamageParameters.ImpactResistance">
            <summary>
            Controls how much resistance is applied to colliding objects. Weak materials like glass should set this to a low value so that objects will pass right through them during fracture.
            @see DepthParameters for per level control of ImpactResistance
            </summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleDebrisParameters">
            <summary>Parameters that pertain to chunk debris-level settings.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FDestructibleDebrisParameters.DebrisLifetimeMin" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FDestructibleDebrisParameters.DebrisMaxSeparationMin" -->
        <member name="F:UnrealEngine.FDestructibleDebrisParameters.ValidBounds">
            <summary>
            "Debris chunks" (see debrisDepth, above) will be destroyed if they leave this box.
            The box translates with the destructible actor's initial position, but does not
            rotate or scale.
            </summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleDepthParameters">
            <summary>Properties that may be set for all chunks at a particular depth in the fracture hierarchy.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleDepthParameters.ImpactDamageOverride">
            <summary>Chunks up to the depth DefaultImpactDamageDepth will take impact damage, unless one of the override options (see EImpactDamageOverride) is chosen.</summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleParameters">
            <summary>Parameters that apply to a destructible actor.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleParameters.DamageParameters">
            <summary>Parameters that pertain to chunk damage.  See DestructibleDamageParameters.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleParameters.DebrisParameters">
            <summary>Parameters that pertain to chunk debris-level settings.  See DestructibleDebrisParameters.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleParameters.AdvancedParameters">
            <summary>Parameters that are less-often used.  See DestructibleAdvancedParameters.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleParameters.SpecialHierarchyDepths">
            <summary>Special hierarchy depths for various behaviors.</summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParameters.DepthParameters">
            <summary>
            Parameters that apply to every chunk at a given level.
            the element [0] of the array applies to the level 0 (unfractured) chunk, element [1] applies
            to the level 1 chunks, etc.
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleParameters.Flags">
            <summary>A collection of flags defined in DestructibleParametersFlag.</summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleParametersFlag">
            <summary>Flags that apply to a destructible actor.</summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bAccumulateDamage">
            <summary>
            If set, chunks will "remember" damage applied to them, so that many applications of a damage amount
            below damageThreshold will eventually fracture the chunk.  If not set, a single application of
            damage must exceed damageThreshold in order to fracture the chunk.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bAssetDefinedSupport">
            <summary>
            If set, then chunks which are tagged as "support" chunks (via NxDestructibleChunkDesc::isSupportChunk)
            will have environmental support in static destructibles.
            Note: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as
            "support" chunks AND overlap the Scene's static geometry in order to be environmentally supported.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bWorldSupport">
            <summary>
            If set, then chunks which overlap the Scene's static geometry will have environmental support in
            static destructibles.
            Note: if both bAssetDefinedSupport and bWorldSupport are set, then chunks must be tagged as
            "support" chunks AND overlap the Scene's static geometry in order to be environmentally supported.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bDebrisTimeout">
            <summary>
            Whether or not chunks at or deeper than the "debris" depth (see NxDestructibleParameters::debrisDepth)
            will time out.  The lifetime is a value between NxDestructibleParameters::debrisLifetimeMin and
            NxDestructibleParameters::debrisLifetimeMax, based upon the destructible module's LOD setting.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bDebrisMaxSeparation">
            <summary>
            Whether or not chunks at or deeper than the "debris" depth (see NxDestructibleParameters::debrisDepth)
            will be removed if they separate too far from their origins.  The maxSeparation is a value between
            NxDestructibleParameters::debrisMaxSeparationMin and NxDestructibleParameters::debrisMaxSeparationMax,
            based upon the destructible module's LOD setting.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bCrumbleSmallestChunks">
            <summary>
            If set, the smallest chunks may be further broken down, either by fluid crumbles (if a crumble particle
            system is specified in the NxDestructibleActorDesc), or by simply removing the chunk if no crumble
            particle system is specified.  Note: the "smallest chunks" are normally defined to be the deepest level
            of the fracture hierarchy.  However, they may be taken from higher levels of the hierarchy if
            NxModuleDestructible::setMaxChunkDepthOffset is called with a non-zero value.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bAccurateRaycasts">
            <summary>
            If set, the NxDestructibleActor::rayCast function will search within the nearest visible chunk hit
            for collisions with child chunks.  This is used to get a better raycast position and normal, in
            case the parent collision volume does not tightly fit the graphics mesh.  The returned chunk index
            will always be that of the visible parent that is intersected, however.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bUseValidBounds">
            <summary>
            If set, the ValidBounds field of NxDestructibleParameters will be used.  These bounds are translated
            (but not scaled or rotated) to the origin of the destructible actor.  If a chunk or chunk island moves
            outside of those bounds, it is destroyed.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleParametersFlag.bFormExtendedStructures">
            <summary>
            If initially static, the destructible will become part of an extended support structure if it is
            in contact with another static destructible that also has this flag set.
            </summary>
        </member>
        <member name="T:UnrealEngine.FDestructibleSpecialHierarchyDepths">
            <summary>Special hierarchy depths for various behaviors.</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleSpecialHierarchyDepths.SupportDepth">
            <summary>
            The chunk hierarchy depth at which to create a support graph.  Higher depth levels give more detailed support,
            but will give a higher computational load.  Chunks below the support depth will never be supported.
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleSpecialHierarchyDepths.MinimumFractureDepth">
            <summary>The chunks will not be broken free below this depth.</summary>
        </member>
        <member name="P:UnrealEngine.FDestructibleSpecialHierarchyDepths.bEnableDebris">
            <summary>
            Enables debris at a specific depth level.
            @see DebrisDepth
            </summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleSpecialHierarchyDepths.DebrisDepth">
            <summary>The hierarchy depth at which chunks are considered to be "debris."</summary>
        </member>
        <member name="F:UnrealEngine.FDestructibleSpecialHierarchyDepths.EssentialDepth">
            <summary>
            The chunk hierarchy depth up to which chunks will always be processed.  These chunks are considered
            to be essential either for gameplay or visually.
            The minimum value is 0, meaning the level 0 chunk is always considered essential.
            Default value is 0.
            </summary>
        </member>
        <member name="P:UnrealEngine.FDialogueContext.Targets">
            <summary>The person speaking the dialogue.</summary>
            <summary>The people being spoken to.</summary>
        </member>
        <member name="F:UnrealEngine.FDialogueContextMapping.Context">
            <summary>The context of the dialogue.</summary>
        </member>
        <member name="F:UnrealEngine.FDialogueContextMapping.LocalizationKeyFormat">
            <summary>The soundwave to play for this dialogue.</summary>
            <summary>
            The format string to use when generating the localization key for this context. This must be unique within the owner dialogue wave.
            Available format markers:
              * {ContextHash} - A hash generated from the speaker and target voices.
            </summary>
        </member>
        <member name="F:UnrealEngine.FDialogueWaveParameter.Context">
            <summary>The dialogue wave to play.</summary>
            <summary>The context to use for the dialogue wave.</summary>
        </member>
        <member name="T:UnrealEngine.FDirectorTrackCut">
            <summary>Information for one cut in this track.</summary>
        </member>
        <member name="F:UnrealEngine.FDirectorTrackCut.Time">
            <summary>Time to perform the cut.</summary>
        </member>
        <member name="F:UnrealEngine.FDirectorTrackCut.TransitionTime">
            <summary>Time taken to move view to new camera.</summary>
        </member>
        <member name="F:UnrealEngine.FDirectorTrackCut.TargetCamGroup">
            <summary>GroupName of UInterpGroup to cut viewpoint to.</summary>
        </member>
        <member name="F:UnrealEngine.FDirectorTrackCut.ShotNumber">
            <summary>Shot number for developer reference</summary>
        </member>
        <member name="T:UnrealEngine.FDirectoryPath">
            <summary>Structure for directory paths that are displayed in the UI.</summary>
        </member>
        <member name="F:UnrealEngine.FDirectoryPath.Path">
            <summary>The path to the directory.</summary>
        </member>
        <member name="F:UnrealEngine.FDistanceDatum.FadeInDistanceStart">
            <summary>
            The FadeInDistance at which to start hearing this sound.
                   * If you want to hear the sound up close then setting this to 0 might be a good option.
            </summary>
        </member>
        <member name="F:UnrealEngine.FDistanceDatum.FadeInDistanceEnd">
            <summary>The distance at which this sound has faded in completely.</summary>
        </member>
        <member name="F:UnrealEngine.FDistanceDatum.FadeOutDistanceStart">
            <summary>The distance at which this sound starts fading out.</summary>
        </member>
        <member name="F:UnrealEngine.FDistanceDatum.FadeOutDistanceEnd">
            <summary>The distance at which this sound is no longer audible.</summary>
        </member>
        <member name="F:UnrealEngine.FDistanceDatum.Volume">
            <summary>The volume for which this Input should be played.</summary>
        </member>
        <member name="T:UnrealEngine.FDistributionLookupTable">
            <summary>Lookup table for distributions.</summary>
        </member>
        <member name="T:UnrealEngine.FDropNoteInfo">
            <summary>Info about one note dropped in the map during PIE.</summary>
        </member>
        <member name="F:UnrealEngine.FDropNoteInfo.Location">
            <summary>Location to create Note actor in edited level.</summary>
        </member>
        <member name="F:UnrealEngine.FDropNoteInfo.Rotation">
            <summary>Rotation to create Note actor in edited level.</summary>
        </member>
        <member name="F:UnrealEngine.FDropNoteInfo.Comment">
            <summary>Text to assign to Note actor in edited level.</summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphPinReference.PinId">
            <summary>The pin's unique ID. Updated at Set and Save time.</summary>
        </member>
        <member name="T:UnrealEngine.FEdGraphPinType">
            <summary>Struct used to define the type of information carried on this pin</summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphPinType.PinCategory">
            <summary>Category of pin type</summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphPinType.PinSubCategory">
            <summary>Sub-category of pin type</summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphPinType.PinSubCategoryMemberReference">
            <summary>Sub-category member reference</summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphPinType.PinValueType">
            <summary>Data used to determine value types when bIsMap is true</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphPinType.bIsMap">
            <summary>Whether or not this pin represents a map of keys to values</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphPinType.bIsSet">
            <summary>Whether or not this pin represents a set of (unique) values</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphPinType.bIsArray">
            <summary>Whether or not this pin represents an array of values</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphPinType.bIsReference">
            <summary>Whether or not this pin is a value passed by reference or not</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphPinType.bIsConst">
            <summary>Whether or not this pin is a immutable const value</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphPinType.bIsWeakPointer">
            <summary>Whether or not this is a weak reference</summary>
        </member>
        <member name="T:UnrealEngine.FEdGraphTerminalType">
            <summary>
            Struct used to define information for terminal types, e.g. types that can be contained
            by a container. Currently can represent strong/weak references to a type (only UObjects),
            a structure, or a primitive. Support for "Container of Containers" is done by wrapping
            a structure, rather than implicitly defining names for containers.
            </summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphTerminalType.TerminalCategory">
            <summary>Category</summary>
        </member>
        <member name="F:UnrealEngine.FEdGraphTerminalType.TerminalSubCategory">
            <summary>Sub-category</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphTerminalType.bTerminalIsConst">
            <summary>Whether or not this pin is a immutable const value</summary>
        </member>
        <member name="P:UnrealEngine.FEdGraphTerminalType.bTerminalIsWeakPointer">
            <summary>Whether or not this is a weak reference</summary>
        </member>
        <member name="T:UnrealEngine.FEditableTextBoxStyle">
            <summary>Represents the appearance of an SEditableTextBox</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.BackgroundImageNormal">
            <summary>Border background image when the box is not hovered or focused</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.BackgroundImageHovered">
            <summary>Border background image when the box is hovered</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.BackgroundImageFocused">
            <summary>Border background image when the box is focused</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.BackgroundImageReadOnly">
            <summary>Border background image when the box is read-only</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.Padding">
            <summary>Padding</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.Font">
            <summary>Font family and size to be used when displaying this text.</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.ForegroundColor">
            <summary>The foreground color of text.</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.BackgroundColor">
            <summary>The background color applied to the active background image</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.ReadOnlyForegroundColor">
            <summary>The read-only foreground color of text in read-only mode.</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.HScrollBarPadding">
            <summary>Padding around the horizontal scrollbar</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.VScrollBarPadding">
            <summary>Padding around the vertical scrollbar</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextBoxStyle.ScrollBarStyle">
            <summary>Style used for the scrollbars</summary>
        </member>
        <member name="T:UnrealEngine.FEditableTextStyle">
            <summary>Represents the appearance of an SEditableText</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextStyle.Font">
            <summary>Font family and size to be used when displaying this text.</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextStyle.ColorAndOpacity">
            <summary>The color and opacity of this text</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextStyle.BackgroundImageSelected">
            <summary>Background image for the selected text</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextStyle.BackgroundImageComposing">
            <summary>Background image for the selected text</summary>
        </member>
        <member name="F:UnrealEngine.FEditableTextStyle.CaretImage">
            <summary>Image brush used for the caret</summary>
        </member>
        <member name="F:UnrealEngine.FEditedDocumentInfo.SavedViewOffset">
            <summary>Saved view position</summary>
        </member>
        <member name="F:UnrealEngine.FEditedDocumentInfo.SavedZoomAmount">
            <summary>Saved zoom amount</summary>
        </member>
        <member name="T:UnrealEngine.FEditorElement">
            <summary>Each elements in the grid</summary>
        </member>
        <member name="T:UnrealEngine.FEditorImportExportTestDefinition">
            <summary>Holds settings for the asset import / export automation test</summary>
        </member>
        <member name="F:UnrealEngine.FEditorImportExportTestDefinition.ImportFilePath">
            <summary>The file to import</summary>
        </member>
        <member name="F:UnrealEngine.FEditorImportExportTestDefinition.ExportFileExtension">
            <summary>The file extension to use when exporting this asset.  Used to find a supporting exporter</summary>
        </member>
        <member name="P:UnrealEngine.FEditorImportExportTestDefinition.bSkipExport">
            <summary>If true, the export step will be skipped</summary>
        </member>
        <member name="P:UnrealEngine.FEditorImportExportTestDefinition.FactorySettings">
            <summary>Settings for the import factory</summary>
        </member>
        <member name="T:UnrealEngine.FEditorImportWorkflowDefinition">
            <summary>Holds settings for the asset import workflow test</summary>
        </member>
        <member name="F:UnrealEngine.FEditorImportWorkflowDefinition.ImportFilePath">
            <summary>The file to import</summary>
        </member>
        <member name="P:UnrealEngine.FEditorImportWorkflowDefinition.FactorySettings">
            <summary>Settings for the import factory</summary>
        </member>
        <member name="T:UnrealEngine.FEditorMapPerformanceTestDefinition">
            <summary>Holds settings for the asset import / export automation test</summary>
        </member>
        <member name="F:UnrealEngine.FEditorMapPerformanceTestDefinition.PerformanceTestmap">
            <summary>Map to be used for the Performance Capture *</summary>
        </member>
        <member name="F:UnrealEngine.FEditorMapPerformanceTestDefinition.TestTimer">
            <summary>This is the length of time in seconds that this test will run for before stopping.</summary>
        </member>
        <member name="T:UnrealEngine.FEmitterDynamicParameter">
            <summary>Helper structure for displaying the parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FEmitterDynamicParameter.ParamName">
            <summary>The parameter name - from the material DynamicParameter expression. READ-ONLY</summary>
        </member>
        <member name="P:UnrealEngine.FEmitterDynamicParameter.bUseEmitterTime">
            <summary>If true, use the EmitterTime to retrieve the value, otherwise use Particle RelativeTime.</summary>
        </member>
        <member name="P:UnrealEngine.FEmitterDynamicParameter.bSpawnTimeOnly">
            <summary>If true, only set the value at spawn time of the particle, otherwise update each frame.</summary>
        </member>
        <member name="F:UnrealEngine.FEmitterDynamicParameter.ValueMethod">
            <summary>Where to get the parameter value from.</summary>
        </member>
        <member name="P:UnrealEngine.FEmitterDynamicParameter.bScaleVelocityByParamValue">
            <summary>If true, scale the velocity value selected in ValueMethod by the evaluated ParamValue.</summary>
        </member>
        <member name="F:UnrealEngine.FEmitterDynamicParameter.ParamValue">
            <summary>The distriubtion for the parameter value.</summary>
        </member>
        <member name="F:UnrealEngine.FEventPayload.EventName">
            <summary>The name of the event to trigger</summary>
        </member>
        <member name="F:UnrealEngine.FEventPayload.Parameters">
            <summary>The event parameters</summary>
        </member>
        <member name="T:UnrealEngine.FEventReply">
            <summary>Allows users to handle events and return information to the underlying UI layer.</summary>
        </member>
        <member name="T:UnrealEngine.FEventTrackKey">
            <summary>Information for one event in the track.</summary>
        </member>
        <member name="T:UnrealEngine.FExpandableAreaStyle">
            <summary>Represents the appearance of an SExpandableArea</summary>
        </member>
        <member name="F:UnrealEngine.FExpandableAreaStyle.CollapsedImage">
            <summary>Image to use when the area is collapsed</summary>
        </member>
        <member name="F:UnrealEngine.FExpandableAreaStyle.ExpandedImage">
            <summary>Image to use when the area is expanded</summary>
        </member>
        <member name="F:UnrealEngine.FExpandableAreaStyle.RolloutAnimationSeconds">
            <summary>How long the rollout animation lasts</summary>
        </member>
        <member name="F:UnrealEngine.FExpressionInput.OutputIndex">
            <summary>UMaterial expression that this input is connected to, or NULL if not connected.</summary>
            <summary>Index into Expression's outputs array that this input is connected to.</summary>
        </member>
        <member name="F:UnrealEngine.FExpressionInput.InputName">
            <summary>
            optional FName of the input.
            Note that this is the only member which is not derived from the output currently connected.
            </summary>
        </member>
        <member name="F:UnrealEngine.FExpressionInput.ExpressionName">
            <summary>Material expression name that this input is connected to, or None if not connected. Used only in cooked builds</summary>
        </member>
        <member name="T:UnrealEngine.FExpressionOutput">
            <summary>Struct that represents an expression's output.</summary>
        </member>
        <member name="T:UnrealEngine.FExternalToolDefinition">
            <summary>Structure for defining an external tool</summary>
        </member>
        <member name="F:UnrealEngine.FExternalToolDefinition.ToolName">
            <summary>The name of the tool / test.</summary>
        </member>
        <member name="F:UnrealEngine.FExternalToolDefinition.ExecutablePath">
            <summary>The executable to run.</summary>
        </member>
        <member name="F:UnrealEngine.FExternalToolDefinition.CommandLineOptions">
            <summary>The command line options to pass to the executable.</summary>
        </member>
        <member name="F:UnrealEngine.FExternalToolDefinition.WorkingDirectory">
            <summary>The working directory for the new process.</summary>
        </member>
        <member name="F:UnrealEngine.FExternalToolDefinition.ScriptExtension">
            <summary>If set, look for scripts with this extension.</summary>
        </member>
        <member name="F:UnrealEngine.FExternalToolDefinition.ScriptDirectory">
            <summary>If the ScriptExtension is set, look here for the script files.</summary>
        </member>
        <member name="T:UnrealEngine.FFilePath">
            <summary>Structure for file paths that are displayed in the UI.</summary>
        </member>
        <member name="F:UnrealEngine.FFilePath.FilePath">
            <summary>The path to the file.</summary>
        </member>
        <member name="T:UnrealEngine.FFindFloorResult">
            <summary>Data about the floor for walking movement, used by CharacterMovementComponent.</summary>
        </member>
        <member name="P:UnrealEngine.FFindFloorResult.bBlockingHit">
            <summary>
            True if there was a blocking hit in the floor test that was NOT in initial penetration.
            The HitResult can give more info about other circumstances.
            </summary>
        </member>
        <member name="P:UnrealEngine.FFindFloorResult.bWalkableFloor">
            <summary>True if the hit found a valid walkable floor.</summary>
        </member>
        <member name="P:UnrealEngine.FFindFloorResult.bLineTrace">
            <summary>True if the hit found a valid walkable floor using a line trace (rather than a sweep test, which happens when the sweep test fails to yield a walkable surface).</summary>
        </member>
        <member name="F:UnrealEngine.FFindFloorResult.FloorDist">
            <summary>The distance to the floor, computed from the swept capsule trace.</summary>
        </member>
        <member name="F:UnrealEngine.FFindFloorResult.LineDist">
            <summary>The distance to the floor, computed from the trace. Only valid if bLineTrace is true.</summary>
        </member>
        <member name="F:UnrealEngine.FFindFloorResult.HitResult">
            <summary>Hit result of the test that found a floor. Includes more specific data about the point of impact and surface normal at that point.</summary>
        </member>
        <member name="F:UnrealEngine.FFloatCurve.FloatCurve">
            <summary>Curve data for float.</summary>
        </member>
        <member name="F:UnrealEngine.FFloatCurve.LastObservedName">
            <summary>
            Last observed name of the curve. We store this so we can recover from situations that
            mean the skeleton doesn't have a mapped name for our UID (such as a user saving the an
            animation but not the skeleton).
            </summary>
        </member>
        <member name="F:UnrealEngine.FFloatCurve.CurveTypeFlags">
            <summary>Curve Type Flags</summary>
        </member>
        <member name="T:UnrealEngine.FFloatDistribution">
            <summary>Type-safe floating point distribution.</summary>
        </member>
        <member name="T:UnrealEngine.FFloatRange">
            <summary>A float range</summary>
        </member>
        <member name="T:UnrealEngine.FFloatRangeBound">
            <summary>A float range bound</summary>
        </member>
        <member name="T:UnrealEngine.FFocusEvent">
            <summary>
            FFocusEvent is used when notifying widgets about keyboard focus changes
            It is passed to event handlers dealing with keyboard focus
            </summary>
        </member>
        <member name="T:UnrealEngine.FFontCharacter">
            <summary>This struct is serialized using native serialization so any changes to it require a package version bump.</summary>
        </member>
        <member name="T:UnrealEngine.FFontData">
            <summary>Payload data describing an individual font in a typeface. Keep this lean as it's also used as a key!</summary>
        </member>
        <member name="F:UnrealEngine.FFontData.FontFilename">
            <summary>
            The filename of the font to use.
            This variable is ignored if we have a font face asset, and is set to the .ufont file in a cooked build.
            </summary>
        </member>
        <member name="P:UnrealEngine.FFontData.FontData">
            <summary>Font data v3. This points to a font face asset.</summary>
            <summary>
            Legacy font data v2. This used to be where font data was stored prior to font face assets.
            This can be removed once we no longer support loading packages older than FEditorObjectVersion::AddedFontFaceAssets (as can UFontBulkData itself).
            </summary>
            <summary>
            Legacy font data v1. This used to be where font data was stored prior to font bulk data.
            This can be removed once we no longer support loading packages older than VER_UE4_SLATE_BULK_FONT_DATA.
            </summary>
        </member>
        <member name="T:UnrealEngine.FFontImportOptionsData">
            <summary>Font import options</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.FontName">
            <summary>Name of the typeface for the font to import</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.Height">
            <summary>Height of font (point size)</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bEnableAntialiasing">
            <summary>Whether the font should be antialiased or not.  Usually you should leave this enabled.</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bEnableBold">
            <summary>Whether the font should be generated in bold or not</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bEnableItalic">
            <summary>Whether the font should be generated in italics or not</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bEnableUnderline">
            <summary>Whether the font should be generated with an underline or not</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bAlphaOnly">
            <summary>if true then forces PF_G8 and only maintains Alpha value and discards color</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.CharacterSet">
            <summary>Character set for this font</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.Chars">
            <summary>Explicit list of characters to include in the font</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.UnicodeRange">
            <summary>Range of Unicode character values to include in the font.  You can specify ranges using hyphens and/or commas (e.g. '400-900')</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.CharsFilePath">
            <summary>Path on disk to a folder where files that contain a list of characters to include in the font</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.CharsFileWildcard">
            <summary>File mask wildcard that specifies which files within the CharsFilePath to scan for characters in include in the font</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bCreatePrintableOnly">
            <summary>Skips generation of glyphs for any characters that are not considered 'printable'</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bIncludeASCIIRange">
            <summary>When specifying a range of characters and this is enabled, forces ASCII characters (0 thru 255) to be included as well</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.ForegroundColor">
            <summary>Color of the foreground font pixels.  Usually you should leave this white and instead use the UI Styles editor to change the color of the font on the fly</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bEnableDropShadow">
            <summary>Enables a very simple, 1-pixel, black colored drop shadow for the generated font</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.TexturePageWidth">
            <summary>Horizontal size of each texture page for this font in pixels</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.TexturePageMaxHeight">
            <summary>The maximum vertical size of a texture page for this font in pixels.  The actual height of a texture page may be less than this if the font can fit within a smaller sized texture page.</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.XPadding">
            <summary>Horizontal padding between each font character on the texture page in pixels</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.YPadding">
            <summary>Vertical padding between each font character on the texture page in pixels</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.ExtendBoxTop">
            <summary>How much to extend the top of the UV coordinate rectangle for each character in pixels</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.ExtendBoxBottom">
            <summary>How much to extend the bottom of the UV coordinate rectangle for each character in pixels</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.ExtendBoxRight">
            <summary>How much to extend the right of the UV coordinate rectangle for each character in pixels</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.ExtendBoxLeft">
            <summary>How much to extend the left of the UV coordinate rectangle for each character in pixels</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bEnableLegacyMode">
            <summary>Enables legacy font import mode.  This results in lower quality antialiasing and larger glyph bounds, but may be useful when debugging problems</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.Kerning">
            <summary>The initial horizontal spacing adjustment between rendered characters.  This setting will be copied directly into the generated Font object's properties.</summary>
        </member>
        <member name="P:UnrealEngine.FFontImportOptionsData.bUseDistanceFieldAlpha">
            <summary>If true then the alpha channel of the font textures will store a distance field instead of a color mask</summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.DistanceFieldScaleFactor">
            <summary>
            Scale factor determines how big to scale the font bitmap during import when generating distance field values
            Note that higher values give better quality but importing will take much longer.
            </summary>
        </member>
        <member name="F:UnrealEngine.FFontImportOptionsData.DistanceFieldScanRadiusScale">
            <summary>Shrinks or expands the scan radius used to determine the silhouette of the font edges.</summary>
        </member>
        <member name="T:UnrealEngine.FFontOutlineSettings">
            <summary>Settings for applying an outline to a font</summary>
        </member>
        <member name="F:UnrealEngine.FFontOutlineSettings.OutlineSize">
            <summary>Size of the outline in slate units (at 1.0 font scale this unit is a pixel)</summary>
        </member>
        <member name="F:UnrealEngine.FFontOutlineSettings.OutlineColor">
            <summary>Optional material to apply to the outline</summary>
            <summary>The color of the outline for any character in this font</summary>
        </member>
        <member name="P:UnrealEngine.FFontOutlineSettings.bSeparateFillAlpha">
            <summary>
            If checked, the outline will be completely translucent where the filled area will be.  This allows for a separate fill alpha value
            The trade off when enabling this is slightly worse quality for completely opaque fills where the inner outline border meets the fill area
            </summary>
        </member>
        <member name="T:UnrealEngine.FFontParameterValue">
            <summary>Editable font parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FForceFeedbackAttenuationSettings">
            <summary>The struct for defining the properties used when determining attenuation for a force feedback effect</summary>
        </member>
        <member name="F:UnrealEngine.FForceFeedbackAttenuationSettings.AttenuationShape">
            <summary>The shape of the attenuation volume.</summary>
        </member>
        <member name="F:UnrealEngine.FForceFeedbackAttenuationSettings.dBAttenuationAtMax">
            <summary>The volume at maximum distance in deciBels.</summary>
        </member>
        <member name="F:UnrealEngine.FForceFeedbackAttenuationSettings.AttenuationShapeExtents">
            <summary>
            The dimensions to use for the attenuation shape. Interpretation of the values differ per shape.
                     Sphere  - X is Sphere Radius. Y and Z are unused
                     Capsule - X is Capsule Half Height, Y is Capsule Radius, Z is unused
                     Box     - X, Y, and Z are the Box's dimensions
                     Cone    - X is Cone Radius, Y is Cone Angle, Z is Cone Falloff Angle
            </summary>
        </member>
        <member name="F:UnrealEngine.FForceFeedbackAttenuationSettings.ConeOffset">
            <summary>The distance back from the sound's origin to begin the cone when using the cone attenuation shape.</summary>
        </member>
        <member name="F:UnrealEngine.FForceFeedbackAttenuationSettings.FalloffDistance">
            <summary>The distance over which falloff occurs.</summary>
        </member>
        <member name="T:UnrealEngine.FFormatArgumentData">
            <summary>
            Used to pass argument/value pairs into FText::Format.
            The full C++ struct is located here: Engine\Source\Runtime\Core\Public\Internationalization\Text.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FFOscillator">
            <summary>Defines oscillation of a single number.</summary>
        </member>
        <member name="F:UnrealEngine.FFOscillator.Amplitude">
            <summary>Amplitude of the sinusoidal oscillation.</summary>
        </member>
        <member name="F:UnrealEngine.FFOscillator.Frequency">
            <summary>Frequency of the sinusoidal oscillation.</summary>
        </member>
        <member name="F:UnrealEngine.FFOscillator.InitialOffset">
            <summary>Defines how to begin (either at zero, or at a randomized value.</summary>
        </member>
        <member name="T:UnrealEngine.FFractureEffect">
            <summary>Struct used to hold effects for destructible damage events</summary>
        </member>
        <member name="T:UnrealEngine.FFractureMaterial">
            <summary>Parameters to describe the application of U,V coordinates on a particular slice within a destructible.</summary>
        </member>
        <member name="F:UnrealEngine.FFractureMaterial.UVScale">
            <summary>
            The UV scale (geometric distance/unit texture distance) for interior materials.
            Default = (100.0f,100.0f).
            </summary>
        </member>
        <member name="F:UnrealEngine.FFractureMaterial.UVOffset">
            <summary>
            A UV origin offset for interior materials.
            Default = (0.0f,0.0f).
            </summary>
        </member>
        <member name="F:UnrealEngine.FFractureMaterial.Tangent">
            <summary>
            Object-space vector specifying surface tangent direction.  If this vector is (0.0f,0.0f,0.0f), then an arbitrary direction will be chosen.
            Default = (0.0f,0.0f,0.0f).
            </summary>
        </member>
        <member name="F:UnrealEngine.FFractureMaterial.UAngle">
            <summary>
            Angle from tangent direction for the u coordinate axis.
            Default = 0.0f.
            </summary>
        </member>
        <member name="F:UnrealEngine.FFractureMaterial.InteriorElementIndex">
            <summary>
            The element index to use for the newly-created triangles.
            If a negative index is given, a new element will be created for interior triangles.
            Default = -1
            </summary>
        </member>
        <member name="T:UnrealEngine.FFunctionExpressionInput">
            <summary>Struct that stores information about a function input which is needed to maintain connections and implement the function call.</summary>
        </member>
        <member name="F:UnrealEngine.FFunctionExpressionInput.ExpressionInputId">
            <summary>
            Reference to the FunctionInput in the material function.
            This is a reference to a private object so it can't be saved, and must be generated by UpdateFromFunctionResource or SetMaterialFunction.
            </summary>
            <summary>Id of the FunctionInput, used to link ExpressionInput.</summary>
        </member>
        <member name="F:UnrealEngine.FFunctionExpressionInput.Input">
            <summary>Actual input struct which stores information about how this input is connected in the material.</summary>
        </member>
        <member name="T:UnrealEngine.FFunctionExpressionOutput">
            <summary>Struct that stores information about a function output which is needed to maintain connections and implement the function call.</summary>
        </member>
        <member name="F:UnrealEngine.FFunctionExpressionOutput.ExpressionOutputId">
            <summary>
            Reference to the FunctionOutput in the material function.
            This is a reference to a private object so it can't be saved, and must be generated by UpdateFromFunctionResource or SetMaterialFunction.
            </summary>
            <summary>Id of the FunctionOutput, used to link ExpressionOutput.</summary>
        </member>
        <member name="F:UnrealEngine.FFunctionExpressionOutput.Output">
            <summary>Actual output struct which stores information about how this output is connected in the material.</summary>
        </member>
        <member name="T:UnrealEngine.FGeometry">
            <summary>
            Represents the position, size, and absolute position of a Widget in Slate.
            The absolute location of a geometry is usually screen space or
            window space depending on where the geometry originated.
            Geometries are usually paired with a SWidget pointer in order
            to provide information about a specific widget (see FArrangedWidget).
            A Geometry's parent is generally thought to be the Geometry of the
            the corresponding parent widget.
            </summary>
        </member>
        <member name="T:UnrealEngine.FGeomSelection">
            <summary>Selection information for geometry mode</summary>
        </member>
        <member name="F:UnrealEngine.FGeomSelection.Index">
            <summary>EGeometrySelectionType_</summary>
        </member>
        <member name="F:UnrealEngine.FGeomSelection.SelectionIndex">
            <summary>Index into the geometry data structures</summary>
        </member>
        <member name="T:UnrealEngine.FGPUSpriteEmitterInfo">
            <summary>The data needed by the runtime to simulate sprites.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteEmitterInfo.SpawnModules">
            <summary>The required module. Needed for now, but should be divorced from the runtime.</summary>
            <summary>The spawn module. Needed for now, but should be divorced from the runtime.</summary>
            <summary>The spawn-per-unit module.</summary>
            <summary>List of spawn modules that must be evaluated at runtime.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.LocalVectorField">
            <summary>Local vector field info.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.VectorFieldScale">
            <summary>Per-particle vector field scale.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.DragCoefficient">
            <summary>Per-particle drag coefficient.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.PointAttractorStrength">
            <summary>Point attractor strength over time.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.Resilience">
            <summary>Damping factor applied to particle collisions.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.ConstantAcceleration">
            <summary>Constant acceleration to apply to particles.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.PointAttractorPosition">
            <summary>Point attractor position.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.PointAttractorRadiusSq">
            <summary>Point attractor radius, squared.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.OrbitOffsetBase">
            <summary>Amount by which to offset particles when they are spawned.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.InvMaxSize">
            <summary>One over the maximum size of a sprite particle.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.InvRotationRateScale">
            <summary>The inverse scale to apply to rotation rate.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.MaxLifetime">
            <summary>The maximum lifetime of particles in this emitter.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.MaxParticleCount">
            <summary>The maximum number of particles expected for this emitter.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.ScreenAlignment">
            <summary>The method for aligning the particle based on the camera.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.LockAxisFlag">
            <summary>The method for locking the particles to a particular axis.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteEmitterInfo.bEnableCollision">
            <summary>If true, collisions are enabled for this emitter.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteEmitterInfo.bRemoveHMDRoll">
            <summary>If true, removes the HMD view roll (e.g. in VR)</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.MinFacingCameraBlendDistance">
            <summary>The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_Square</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.MaxFacingCameraBlendDistance">
            <summary>The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_FacingCameraPosition</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.DynamicColor">
            <summary>Dynamic color scale from the ColorOverLife module.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.DynamicAlpha">
            <summary>Dynamic alpha scale from the ColorOverLife module.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.DynamicColorScale">
            <summary>Dynamic color scale from the ColorScaleOverLife module.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteEmitterInfo.DynamicAlphaScale">
            <summary>Dynamic alpha scale from the ColorScaleOverLife module.</summary>
        </member>
        <member name="T:UnrealEngine.FGPUSpriteLocalVectorFieldInfo">
            <summary>Data needed for local vector fields.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.Transform">
            <summary>Local vector field to apply to this emitter.</summary>
            <summary>Local vector field transform.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.MinInitialRotation">
            <summary>Minimum initial rotation.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.MaxInitialRotation">
            <summary>Maximum initial rotation.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.RotationRate">
            <summary>Local vector field rotation rate.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.Intensity">
            <summary>Local vector field intensity.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.Tightness">
            <summary>Local vector field tightness.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.bIgnoreComponentTransform">
            <summary>Ignore Components Transform</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.bTileX">
            <summary>Tile vector field in x axis?</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.bTileY">
            <summary>Tile vector field in y axis?</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.bTileZ">
            <summary>Tile vector field in z axis?</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteLocalVectorFieldInfo.bUseFixDT">
            <summary>Use fix delta time in the simulation?</summary>
        </member>
        <member name="T:UnrealEngine.FGPUSpriteResourceData">
            <summary>The source data for runtime resources.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteResourceData.QuantizedColorSamples">
            <summary>Quantized color samples.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteResourceData.QuantizedMiscSamples">
            <summary>Quantized samples for misc curve attributes to be evaluated at runtime.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteResourceData.QuantizedSimulationAttrSamples">
            <summary>Quantized samples for simulation attributes.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.ColorScale">
            <summary>Scale and bias to be applied to the color of sprites.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.MiscScale">
            <summary>Scale and bias to be applied to the misc curve.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.SimulationAttrCurveScale">
            <summary>Scale and bias to be applied to the simulation attribute curves.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.SubImageSize">
            <summary>Size of subimages. X:SubImageCountH Y:SubImageCountV Z:1/SubImageCountH W:1/SubImageCountV</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.SizeBySpeed">
            <summary>SizeBySpeed parameters. XY=SpeedScale ZW=MaxSpeedScale.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.ConstantAcceleration">
            <summary>Constant acceleration to apply to particles.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.OrbitOffsetBase">
            <summary>Offset at which to orbit.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.OrbitFrequencyBase">
            <summary>Frequency at which the particle orbits around each axis.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.OrbitPhaseBase">
            <summary>Phase offset of orbit around each axis.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.GlobalVectorFieldScale">
            <summary>Scale to apply to global vector fields.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.GlobalVectorFieldTightness">
            <summary>Tightness override value for the global vector fields.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.PerParticleVectorFieldScale">
            <summary>Scale to apply to per-particle vector field scale.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.PerParticleVectorFieldBias">
            <summary>Bias to apply to per-particle vector field scale.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.DragCoefficientScale">
            <summary>Scale to apply to per-particle drag coefficient.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.DragCoefficientBias">
            <summary>Bias to apply to per-particle drag coefficient.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.ResilienceScale">
            <summary>Scale to apply to per-particle damping factor.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.ResilienceBias">
            <summary>Bias to apply to per-particle damping factor.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.CollisionRadiusScale">
            <summary>Scale to apply to per-particle size for collision.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.CollisionRadiusBias">
            <summary>Bias to apply to per-particle size for collision.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.CollisionTimeBias">
            <summary>Bias applied to relative time upon collision.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.CollisionRandomSpread">
            <summary>Control on reflection's random distribution spread.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.CollisionRandomDistribution">
            <summary>Control on reflection's random distribution when colliding. (1=uniform distribution)</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.OneMinusFriction">
            <summary>One minus the coefficient of friction applied to particles upon collision.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.RotationRateScale">
            <summary>Scale to apply to per-particle rotation rate.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.CameraMotionBlurAmount">
            <summary>How much to stretch sprites based on camera motion blur.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.ScreenAlignment">
            <summary>Screen alignment for particles.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.LockAxisFlag">
            <summary>The method for locking the particles to a particular axis.</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.PivotOffset">
            <summary>Pivot offset in UV space for placing the verts of each particle.</summary>
        </member>
        <member name="P:UnrealEngine.FGPUSpriteResourceData.bRemoveHMDRoll">
            <summary>If true, removes the HMD view roll (e.g. in VR)</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.MinFacingCameraBlendDistance">
            <summary>The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_Square</summary>
        </member>
        <member name="F:UnrealEngine.FGPUSpriteResourceData.MaxFacingCameraBlendDistance">
            <summary>The distance at which PSA_FacingCameraDistanceBlend    is fully PSA_FacingCameraPosition</summary>
        </member>
        <member name="T:UnrealEngine.FGuid">
            <summary>A globally unique identifier.</summary>
        </member>
        <member name="F:UnrealEngine.FHapticFeedbackDetails_Curve.Frequency">
            <summary>The frequency to vibrate the haptic device at.  Frequency ranges vary by device!</summary>
        </member>
        <member name="F:UnrealEngine.FHapticFeedbackDetails_Curve.Amplitude">
            <summary>The amplitude to vibrate the haptic device at.  Amplitudes are normalized over the range [0.0, 1.0], with 1.0 being the max setting of the device</summary>
        </member>
        <member name="F:UnrealEngine.FHierarchicalSimplification.TransitionScreenSize">
            <summary>The screen radius an mesh object should reach before swapping to the LOD actor, once one of parent displays, it won't draw any of children.</summary>
        </member>
        <member name="P:UnrealEngine.FHierarchicalSimplification.bSimplifyMesh">
            <summary>
            If this is true, it will simplify mesh but it is slower.
            If false, it will just merge actors but not simplify using the lower LOD if exists.
            For example if you build LOD 1, it will use LOD 1 of the mesh to merge actors if exists.
            If you merge material, it will reduce drawcalls.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHierarchicalSimplification.ProxySetting">
            <summary>Simplification Setting if bSimplifyMesh is true</summary>
        </member>
        <member name="F:UnrealEngine.FHierarchicalSimplification.MergeSetting">
            <summary>Merge Mesh Setting if bSimplifyMesh is false</summary>
        </member>
        <member name="F:UnrealEngine.FHierarchicalSimplification.DesiredBoundRadius">
            <summary>Desired Bounding Radius for clustering - this is not guaranteed but used to calculate filling factor for auto clustering</summary>
        </member>
        <member name="F:UnrealEngine.FHierarchicalSimplification.DesiredFillingPercentage">
            <summary>Desired Filling Percentage for clustering - this is not guaranteed but used to calculate filling factor  for auto clustering</summary>
        </member>
        <member name="F:UnrealEngine.FHierarchicalSimplification.MinNumberOfActorsToBuild">
            <summary>Min number of actors to build LODActor</summary>
        </member>
        <member name="T:UnrealEngine.FHitResult">
            <summary>Structure containing information about one hit of a trace, such as point of impact and surface normal at that point.</summary>
        </member>
        <member name="P:UnrealEngine.FHitResult.bBlockingHit">
            <summary>Indicates if this hit was a result of blocking collision. If false, there was no hit or it was an overlap/touch instead.</summary>
        </member>
        <member name="P:UnrealEngine.FHitResult.bStartPenetrating">
            <summary>
            Whether the trace started in penetration, i.e. with an initial blocking overlap.
            In the case of penetration, if PenetrationDepth > 0.f, then it will represent the distance along the Normal vector that will result in
            minimal contact between the swept shape and the object that was hit. In this case, ImpactNormal will be the normal opposed to movement at that location
            (ie, Normal may not equal ImpactNormal). ImpactPoint will be the same as Location, since there is no single impact point to report.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.Time">
            <summary>
            'Time' of impact along trace direction (ranging from 0.0 to 1.0) if there is a hit, indicating time between TraceStart and TraceEnd.
            For swept movement (but not queries) this may be pulled back slightly from the actual time of impact, to prevent precision problems with adjacent geometry.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.Distance">
            <summary>The distance from the TraceStart to the ImpactPoint in world space. This value is 0 if there was an initial overlap (trace started inside another colliding object).</summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.Location">
            <summary>
            The location in world space where the moving shape would end up against the impacted object, if there is a hit. Equal to the point of impact for line tests.
            Example: for a sphere trace test, this is the point where the center of the sphere would be located when it touched the other object.
            For swept movement (but not queries) this may not equal the final location of the shape since hits are pulled back slightly to prevent precision issues from overlapping another surface.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.ImpactPoint">
            <summary>
            Location in world space of the actual contact of the trace shape (box, sphere, ray, etc) with the impacted object.
            Example: for a sphere trace test, this is the point where the surface of the sphere touches the other object.
            @note: In the case of initial overlap (bStartPenetrating=true), ImpactPoint will be the same as Location because there is no meaningful single impact point to report.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.Normal">
            <summary>
            Normal of the hit in world space, for the object that was swept. Equal to ImpactNormal for line tests.
            This is computed for capsules and spheres, otherwise it will be the same as ImpactNormal.
            Example: for a sphere trace test, this is a normalized vector pointing in towards the center of the sphere at the point of impact.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.ImpactNormal">
            <summary>
            Normal of the hit in world space, for the object that was hit by the sweep, if any.
            For example if a box hits a flat plane, this is a normalized vector pointing out from the plane.
            In the case of impact with a corner or edge of a surface, usually the "most opposing" normal (opposed to the query direction) is chosen.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.TraceStart">
            <summary>
            Start location of the trace.
            For example if a sphere is swept against the world, this is the starting location of the center of the sphere.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.TraceEnd">
            <summary>
            End location of the trace; this is NOT where the impact occurred (if any), but the furthest point in the attempted sweep.
            For example if a sphere is swept against the world, this would be the center of the sphere if there was no blocking hit.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.PenetrationDepth">
            <summary>
            If this test started in penetration (bStartPenetrating is true) and a depenetration vector can be computed,
            this value is the distance along Normal that will result in moving out of penetration.
            If the distance cannot be computed, this distance will be zero.
            </summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.Item">
            <summary>Extra data about item that was hit (hit primitive specific).</summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.BoneName">
            <summary>Name of bone we hit (for skeletal meshes).</summary>
        </member>
        <member name="F:UnrealEngine.FHitResult.FaceIndex">
            <summary>Face index we hit (for complex hits with triangle meshes).</summary>
        </member>
        <member name="T:UnrealEngine.FImportFactorySettingValues">
            <summary>Holds UProperty names and values to customize factory settings</summary>
        </member>
        <member name="F:UnrealEngine.FImportFactorySettingValues.SettingName">
            <summary>Name of the property to change.  Nested settings can be modified using "Outer.Property</summary>
        </member>
        <member name="F:UnrealEngine.FImportFactorySettingValues.Value">
            <summary>Value to import for the specified property.</summary>
        </member>
        <member name="T:UnrealEngine.FInputActionKeyMapping">
            <summary>
            Defines a mapping between an action and key
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html
            </summary>
        </member>
        <member name="F:UnrealEngine.FInputActionKeyMapping.ActionName">
            <summary>Friendly name of action, e.g "jump"</summary>
        </member>
        <member name="F:UnrealEngine.FInputActionKeyMapping.Key">
            <summary>Key to bind it to.</summary>
        </member>
        <member name="P:UnrealEngine.FInputActionKeyMapping.bShift">
            <summary>true if one of the Shift keys must be down when the KeyEvent is received to be acknowledged</summary>
        </member>
        <member name="P:UnrealEngine.FInputActionKeyMapping.bCtrl">
            <summary>true if one of the Ctrl keys must be down when the KeyEvent is received to be acknowledged</summary>
        </member>
        <member name="P:UnrealEngine.FInputActionKeyMapping.bAlt">
            <summary>true if one of the Alt keys must be down when the KeyEvent is received to be acknowledged</summary>
        </member>
        <member name="P:UnrealEngine.FInputActionKeyMapping.bCmd">
            <summary>true if one of the Cmd keys must be down when the KeyEvent is received to be acknowledged</summary>
        </member>
        <member name="T:UnrealEngine.FInputAxisConfigEntry">
            <summary>Configurable properties for control axes.</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisConfigEntry.AxisKeyName">
            <summary>Axis Key these properties apply to</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisConfigEntry.AxisProperties">
            <summary>Properties for the Axis Key</summary>
        </member>
        <member name="T:UnrealEngine.FInputAxisKeyMapping">
            <summary>
            Defines a mapping between an axis and key
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Input/index.html
            </summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisKeyMapping.AxisName">
            <summary>Friendly name of axis, e.g "MoveForward"</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisKeyMapping.Key">
            <summary>Key to bind it to.</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisKeyMapping.Scale">
            <summary>Multiplier to use for the mapping when accumulating the axis value</summary>
        </member>
        <member name="T:UnrealEngine.FInputAxisProperties">
            <summary>Configurable properties for control axes, used to transform raw input into game ready values.</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisProperties.DeadZone">
            <summary>What the dead zone of the axis is.  For control axes such as analog sticks.</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisProperties.Sensitivity">
            <summary>Scaling factor to multiply raw value by.</summary>
        </member>
        <member name="F:UnrealEngine.FInputAxisProperties.Exponent">
            <summary>For applying curves to [0..1] axes, e.g. analog sticks</summary>
        </member>
        <member name="P:UnrealEngine.FInputAxisProperties.bInvert">
            <summary>Inverts reported values for this axis</summary>
        </member>
        <member name="P:UnrealEngine.FInputBlendPose.BranchFilters">
            <summary>Bone Name to filter *</summary>
        </member>
        <member name="T:UnrealEngine.FInputChord">
            <summary>An Input Chord is a key and the modifier keys that are to be held with it.</summary>
        </member>
        <member name="F:UnrealEngine.FInputChord.Key">
            <summary>The Key is the core of the chord.</summary>
        </member>
        <member name="P:UnrealEngine.FInputChord.bShift">
            <summary>Whether the shift key is part of the chord.</summary>
        </member>
        <member name="P:UnrealEngine.FInputChord.bCtrl">
            <summary>Whether the control key is part of the chord.</summary>
        </member>
        <member name="P:UnrealEngine.FInputChord.bAlt">
            <summary>Whether the alt key is part of the chord.</summary>
        </member>
        <member name="P:UnrealEngine.FInputChord.bCmd">
            <summary>Whether the command key is part of the chord.</summary>
        </member>
        <member name="T:UnrealEngine.FInputEvent">
            <summary>Base class for all mouse and keyevents.</summary>
        </member>
        <member name="F:UnrealEngine.FInstancedStaticMeshInstanceData.LightmapUVBias">
            <summary>Legacy, this is now stored in FMeshMapBuildData.  Still serialized for backwards compatibility.</summary>
        </member>
        <member name="F:UnrealEngine.FInstancedStaticMeshInstanceData.ShadowmapUVBias">
            <summary>Legacy, this is now stored in FMeshMapBuildData.  Still serialized for backwards compatibility.</summary>
        </member>
        <member name="T:UnrealEngine.FInt32Range">
            <summary>An int32 range</summary>
        </member>
        <member name="T:UnrealEngine.FInt32RangeBound">
            <summary>An int32 range bound</summary>
        </member>
        <member name="T:UnrealEngine.FIntegralCurve">
            <summary>An integral curve, which holds the key time and the key value</summary>
        </member>
        <member name="P:UnrealEngine.FIntegralCurve.Keys">
            <summary>The keys, ordered by time</summary>
        </member>
        <member name="F:UnrealEngine.FIntegralCurve.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="F:UnrealEngine.FIntegralCurve.KeyHandlesToIndices">
            <summary>Map of which key handles go to which indices.</summary>
        </member>
        <member name="T:UnrealEngine.FIntegralKey">
            <summary>An integral key, which holds the key time and the key value</summary>
        </member>
        <member name="F:UnrealEngine.FIntegralKey.Time">
            <summary>The keyed time</summary>
        </member>
        <member name="F:UnrealEngine.FIntegralKey.Value">
            <summary>The keyed integral value</summary>
        </member>
        <member name="T:UnrealEngine.FInteriorSettings">
            <summary>Struct encapsulating settings for interior areas.</summary>
        </member>
        <member name="P:UnrealEngine.FInteriorSettings.bIsWorldSettings">
            <summary>Whether these interior settings are the default values for the world</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.ExteriorVolume">
            <summary>The desired volume of sounds outside the volume when the player is inside the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.ExteriorTime">
            <summary>The time over which to interpolate from the current volume to the desired volume of sounds outside the volume when the player enters the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.ExteriorLPF">
            <summary>The desired LPF frequency cutoff in hertz of sounds outside the volume when the player is inside the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.ExteriorLPFTime">
            <summary>The time over which to interpolate from the current LPF to the desired LPF of sounds outside the volume when the player enters the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.InteriorVolume">
            <summary>The desired volume of sounds inside the volume when the player is outside the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.InteriorTime">
            <summary>The time over which to interpolate from the current volume to the desired volume of sounds inside the volume when the player enters the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.InteriorLPF">
            <summary>The desired LPF frequency cutoff in hertz of sounds inside  the volume when the player is outside the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInteriorSettings.InteriorLPFTime">
            <summary>The time over which to interpolate from the current LPF to the desired LPF of sounds inside the volume when the player enters the volume</summary>
        </member>
        <member name="F:UnrealEngine.FInterpControlPoint.PositionControlPoint">
            <summary>The position of the point</summary>
        </member>
        <member name="P:UnrealEngine.FInterpControlPoint.bPositionIsRelative">
            <summary>Is the location relative to the root components initial location</summary>
        </member>
        <member name="T:UnrealEngine.FInterpGroupActorInfo">
            <summary>A group and all the actors controlled by the group</summary>
        </member>
        <member name="T:UnrealEngine.FInterpLookupPoint">
            <summary>
            Array of group names to retrieve position and rotation data from instead of using the data stored in the keyframe.
            A value of NAME_None means to use the PosTrack and EulerTrack data for the keyframe.
            There needs to be the same amount of elements in this array as there are keyframes.
            </summary>
        </member>
        <member name="F:UnrealEngine.FInterpolationParameter.InterpolationTime">
            <summary>Interpolation Time for input, when it gets input, it will use this time to interpolate to target, used for smoother interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.FInterpolationParameter.InterpolationType">
            <summary>Type of interpolation used for filtering the input value to decide how to get to target.</summary>
        </member>
        <member name="T:UnrealEngine.FIntPoint">
            <summary>
            Screen coordinates.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\IntPoint.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FIntVector">
            <summary>
            An integer vector in 3D space.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\IntVector.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FKAggregateGeom">
            <summary>Container for an aggregate of collision shapes</summary>
        </member>
        <member name="T:UnrealEngine.FKBoxElem">
            <summary>Box shape used for collision</summary>
        </member>
        <member name="F:UnrealEngine.FKBoxElem.Center">
            <summary>Position of the box's origin</summary>
        </member>
        <member name="F:UnrealEngine.FKBoxElem.Orientation">
            <summary>Orientation of the box</summary>
        </member>
        <member name="F:UnrealEngine.FKBoxElem.X">
            <summary>Extent of the box along the y-axis</summary>
        </member>
        <member name="F:UnrealEngine.FKBoxElem.Y">
            <summary>Extent of the box along the y-axis</summary>
        </member>
        <member name="F:UnrealEngine.FKBoxElem.Z">
            <summary>Extent of the box along the z-axis</summary>
        </member>
        <member name="T:UnrealEngine.FKConvexElem">
            <summary>One convex hull, used for simplified collision.</summary>
        </member>
        <member name="P:UnrealEngine.FKConvexElem.VertexData">
            <summary>Array of indices that make up the convex hull.</summary>
        </member>
        <member name="F:UnrealEngine.FKConvexElem.ElemBox">
            <summary>Bounding box of this convex hull.</summary>
        </member>
        <member name="F:UnrealEngine.FKConvexElem.Transform">
            <summary>Transform of this element</summary>
        </member>
        <member name="T:UnrealEngine.FKeyBind">
            <summary>Struct containing mappings for legacy method of binding keys to exec commands.</summary>
        </member>
        <member name="F:UnrealEngine.FKeyBind.Key">
            <summary>The key to be bound to the command</summary>
        </member>
        <member name="F:UnrealEngine.FKeyBind.Command">
            <summary>The command to execute when the key is pressed/released</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.Control">
            <summary>Whether the control key needs to be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.Shift">
            <summary>Whether the shift key needs to be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.Alt">
            <summary>Whether the alt key needs to be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.Cmd">
            <summary>Whether the command key needs to be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.bIgnoreCtrl">
            <summary>Whether the control key must not be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.bIgnoreShift">
            <summary>Whether the shift key must not be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.bIgnoreAlt">
            <summary>Whether the alt key must not be held when the key event occurs</summary>
        </member>
        <member name="P:UnrealEngine.FKeyBind.bIgnoreCmd">
            <summary>Whether the command key must not be held when the key event occurs</summary>
        </member>
        <member name="T:UnrealEngine.FKeyEvent">
            <summary>
            FKeyEvent describes a key action (keyboard/controller key/button pressed or released.)
            It is passed to event handlers dealing with key input.
            </summary>
        </member>
        <member name="T:UnrealEngine.FKeyHandleMap">
            <summary>Represents a mapping of key handles to key index that may be serialized</summary>
        </member>
        <member name="T:UnrealEngine.FKSphereElem">
            <summary>Sphere shape used for collision</summary>
        </member>
        <member name="F:UnrealEngine.FKSphereElem.Center">
            <summary>Position of the sphere's origin</summary>
        </member>
        <member name="F:UnrealEngine.FKSphereElem.Radius">
            <summary>Radius of the sphere</summary>
        </member>
        <member name="T:UnrealEngine.FKSphylElem">
            <summary>Capsule shape used for collision</summary>
        </member>
        <member name="F:UnrealEngine.FKSphylElem.TM">
            <summary>The transform assumes the sphyl axis points down Z.</summary>
        </member>
        <member name="F:UnrealEngine.FKSphylElem.Center">
            <summary>Position of the capsule's origin</summary>
        </member>
        <member name="F:UnrealEngine.FKSphylElem.Orientation">
            <summary>Orientation of the capsule</summary>
        </member>
        <member name="F:UnrealEngine.FKSphylElem.Radius">
            <summary>Radius of the capsule</summary>
        </member>
        <member name="F:UnrealEngine.FKSphylElem.Length">
            <summary>This is of line-segment ie. add Radius to both ends to find total length.</summary>
        </member>
        <member name="T:UnrealEngine.FLatentActionInfo">
            <summary>Latent action info</summary>
        </member>
        <member name="F:UnrealEngine.FLatentActionInfo.Linkage">
            <summary>The resume point within the function to execute</summary>
        </member>
        <member name="F:UnrealEngine.FLatentActionInfo.UUID">
            <summary>the UUID for this action</summary>
        </member>
        <member name="F:UnrealEngine.FLatentActionInfo.ExecutionFunction">
            <summary>The function to execute.</summary>
        </member>
        <member name="T:UnrealEngine.FLaunchOnTestSettings">
            <summary>Holds settings for the editor Launch On With Map Iterations test.</summary>
        </member>
        <member name="F:UnrealEngine.FLaunchOnTestSettings.LaunchOnTestmap">
            <summary>Map to be used for the Launch On test *</summary>
        </member>
        <member name="F:UnrealEngine.FLaunchOnTestSettings.DeviceID">
            <summary>This is the device to be used for launch on. Example: WindowsNoEditor, Android, IOS, Linux</summary>
        </member>
        <member name="F:UnrealEngine.FLayerActorStats.Total">
            <summary>A Type of Actor currently associated with the Layer</summary>
            <summary>The total number of Actors of Type assigned to the Layer</summary>
        </member>
        <member name="T:UnrealEngine.FLevelCollection">
            <summary>
            Contains a group of levels of a particular ELevelCollectionType within a UWorld
            and the context required to properly tick/update those levels. This object is move-only.
            </summary>
        </member>
        <member name="P:UnrealEngine.FLevelSimplificationDetails.bCreatePackagePerAsset">
            <summary>Whether to create separate packages for each generated asset. All in map package otherwise</summary>
        </member>
        <member name="F:UnrealEngine.FLevelSimplificationDetails.DetailsPercentage">
            <summary>Percentage of details for static mesh proxy</summary>
        </member>
        <member name="F:UnrealEngine.FLevelSimplificationDetails.StaticMeshMaterial">
            <summary>Static mesh material simplification</summary>
        </member>
        <member name="F:UnrealEngine.FLevelSimplificationDetails.StaticMeshMaterialSettings">
            <summary>Landscape material simplification</summary>
        </member>
        <member name="F:UnrealEngine.FLevelSimplificationDetails.LandscapeExportLOD">
            <summary>Landscape LOD to use for static mesh generation, when not specified 'Max LODLevel' from landscape actor will be used</summary>
        </member>
        <member name="F:UnrealEngine.FLevelSimplificationDetails.LandscapeMaterial">
            <summary>Landscape material simplification</summary>
        </member>
        <member name="F:UnrealEngine.FLevelSimplificationDetails.LandscapeMaterialSettings">
            <summary>Landscape material simplification</summary>
        </member>
        <member name="P:UnrealEngine.FLevelSimplificationDetails.bBakeFoliageToLandscape">
            <summary>Whether to bake foliage into landscape static mesh texture</summary>
        </member>
        <member name="P:UnrealEngine.FLevelSimplificationDetails.bBakeGrassToLandscape">
            <summary>Whether to bake grass into landscape static mesh texture</summary>
        </member>
        <member name="T:UnrealEngine.FLevelViewportInfo">
            <summary>Saved editor viewport state information</summary>
        </member>
        <member name="F:UnrealEngine.FLevelViewportInfo.CamPosition">
            <summary>Where the camera is positioned within the viewport.</summary>
        </member>
        <member name="F:UnrealEngine.FLevelViewportInfo.CamRotation">
            <summary>The camera's position within the viewport.</summary>
        </member>
        <member name="F:UnrealEngine.FLevelViewportInfo.CamOrthoZoom">
            <summary>The zoom value  for orthographic mode.</summary>
        </member>
        <member name="P:UnrealEngine.FLevelViewportInfo.CamUpdated">
            <summary>Whether camera settings have been systematically changed since the last level viewport update.</summary>
        </member>
        <member name="P:UnrealEngine.FLightingChannels.bChannel0">
            <summary>Default channel for all primitives and lights.</summary>
        </member>
        <member name="T:UnrealEngine.FLightmassDirectionalLightSettings">
            <summary>Directional light settings for Lightmass</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassDirectionalLightSettings.LightSourceAngle">
            <summary>Angle that the directional light's emissive surface extends relative to a receiver, affects penumbra sizes.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassDirectionalLightSettings.IndirectLightingSaturation">
            <summary>0 will be completely desaturated, 1 will be unchanged</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassDirectionalLightSettings.ShadowExponent">
            <summary>Controls the falloff of shadow penumbras</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassDirectionalLightSettings.bUseAreaShadowsForStationaryLight">
            <summary>
            Whether to use area shadows for stationary light precomputed shadowmaps.
            Area shadows get softer the further they are from shadow casters, but require higher lightmap resolution to get the same quality where the shadow is sharp.
            </summary>
        </member>
        <member name="T:UnrealEngine.FLightmassMaterialInterfaceSettings">
            <summary>UMaterial interface settings for Lightmass</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassMaterialInterfaceSettings.bCastShadowAsMasked">
            <summary>If true, forces translucency to cast static shadows as if the material were masked.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassMaterialInterfaceSettings.EmissiveBoost">
            <summary>Scales the emissive contribution of this material to static lighting.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassMaterialInterfaceSettings.DiffuseBoost">
            <summary>Scales the diffuse contribution of this material to static lighting.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassMaterialInterfaceSettings.ExportResolutionScale">
            <summary>
            Scales the resolution that this material's attributes were exported at.
            This is useful for increasing material resolution when details are needed.
            </summary>
        </member>
        <member name="P:UnrealEngine.FLightmassMaterialInterfaceSettings.bOverrideCastShadowAsMasked">
            <summary>If true, override the bCastShadowAsMasked setting of the parent material.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassMaterialInterfaceSettings.bOverrideEmissiveBoost">
            <summary>If true, override the emissive boost setting of the parent material.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassMaterialInterfaceSettings.bOverrideDiffuseBoost">
            <summary>If true, override the diffuse boost setting of the parent material.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassMaterialInterfaceSettings.bOverrideExportResolutionScale">
            <summary>If true, override the export resolution scale setting of the parent material.</summary>
        </member>
        <member name="T:UnrealEngine.FLightmassPointLightSettings">
            <summary>Point/spot settings for Lightmass</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPointLightSettings.IndirectLightingSaturation">
            <summary>0 will be completely desaturated, 1 will be unchanged</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPointLightSettings.ShadowExponent">
            <summary>Controls the falloff of shadow penumbras</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassPointLightSettings.bUseAreaShadowsForStationaryLight">
            <summary>
            Whether to use area shadows for stationary light precomputed shadowmaps.
            Area shadows get softer the further they are from shadow casters, but require higher lightmap resolution to get the same quality where the shadow is sharp.
            </summary>
        </member>
        <member name="T:UnrealEngine.FLightmassPrimitiveSettings">
            <summary>Per-object settings for Lightmass</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassPrimitiveSettings.bUseTwoSidedLighting">
            <summary>If true, this object will be lit as if it receives light from both sides of its polygons.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassPrimitiveSettings.bShadowIndirectOnly">
            <summary>If true, this object will only shadow indirect lighting.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassPrimitiveSettings.bUseEmissiveForStaticLighting">
            <summary>If true, allow using the emissive for static lighting.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassPrimitiveSettings.bUseVertexNormalForHemisphereGather">
            <summary>
            Typically the triangle normal is used for hemisphere gathering which prevents incorrect self-shadowing from artist-tweaked vertex normals.
            However in the case of foliage whose vertex normal has been setup to match the underlying terrain, gathering in the direction of the vertex normal is desired.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPrimitiveSettings.EmissiveLightFalloffExponent">
            <summary>Direct lighting falloff exponent for mesh area lights created from emissive areas on this primitive.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPrimitiveSettings.EmissiveLightExplicitInfluenceRadius">
            <summary>
            Direct lighting influence radius.
            The default is 0, which means the influence radius should be automatically generated based on the emissive light brightness.
            Values greater than 0 override the automatic method.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPrimitiveSettings.EmissiveBoost">
            <summary>Scales the emissive contribution of all materials applied to this object.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPrimitiveSettings.DiffuseBoost">
            <summary>Scales the diffuse contribution of all materials applied to this object.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassPrimitiveSettings.FullyOccludedSamplesFraction">
            <summary>Fraction of samples taken that must be occluded in order to reach full occlusion.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.StaticLightingLevelScale">
            <summary>
            Warning: Setting this to less than 1 will greatly increase build times!
            Scale of the level relative to real world scale (1 Unreal Unit = 1 cm).
            All scale-dependent Lightmass setting defaults have been tweaked to work well with real world scale,
            Any levels with a different scale should use this scale to compensate.
            For large levels it can drastically reduce build times to set this to 2 or 4.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.NumIndirectLightingBounces">
            <summary>
            Number of times light is allowed to bounce off of surfaces, starting from the light source.
            0 is direct lighting only, 1 is one bounce, etc.
            Bounce 1 takes the most time to calculate and contributes the most to visual quality, followed by bounce 2.
            Successive bounces don't really affect build times, but have a much lower visual impact.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.IndirectLightingQuality">
            <summary>
            Warning: Setting this higher than 1 will greatly increase build times!
            Can be used to increase the GI solver sample counts in order to get higher quality for levels that need it.
            It can be useful to reduce IndirectLightingSmoothness somewhat (~.75) when increasing quality to get defined indirect shadows.
            Note that this can't affect compression artifacts, UV seams or other texture based artifacts.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.IndirectLightingSmoothness">
            <summary>
            Smoothness factor to apply to indirect lighting.  This is useful in some lighting conditions when Lightmass cannot resolve accurate indirect lighting.
            1 is default smoothness tweaked for a variety of lighting situations.
            Higher values like 3 smooth out the indirect lighting more, but at the cost of indirect shadows losing detail.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.EnvironmentColor">
            <summary>
            Represents a constant color light surrounding the upper hemisphere of the level, like a sky.
            This light source currently does not get bounced as indirect lighting.
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.EnvironmentIntensity">
            <summary>Scales EnvironmentColor to allow independent color and brightness controls.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.EmissiveBoost">
            <summary>Scales the emissive contribution of all materials in the scene.  Currently disabled and should be removed with mesh area lights.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.DiffuseBoost">
            <summary>Scales the diffuse contribution of all materials in the scene.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassWorldInfoSettings.bUseAmbientOcclusion">
            <summary>If true, AmbientOcclusion will be enabled.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassWorldInfoSettings.bGenerateAmbientOcclusionMaterialMask">
            <summary>
            Whether to generate textures storing the AO computed by Lightmass.
            These can be accessed through the PrecomputedAOMask material node,
            Which is useful for blending between material layers on environment assets.
            Be sure to set DirectIlluminationOcclusionFraction and IndirectIlluminationOcclusionFraction to 0 if you only want the PrecomputedAOMask!
            </summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.DirectIlluminationOcclusionFraction">
            <summary>How much of the AO to apply to direct lighting.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.IndirectIlluminationOcclusionFraction">
            <summary>How much of the AO to apply to indirect lighting.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.OcclusionExponent">
            <summary>Higher exponents increase contrast.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.FullyOccludedSamplesFraction">
            <summary>Fraction of samples taken that must be occluded in order to reach full occlusion.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.MaxOcclusionDistance">
            <summary>Maximum distance for an object to cause occlusion on another object.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassWorldInfoSettings.bVisualizeMaterialDiffuse">
            <summary>If true, override normal direct and indirect lighting with just the exported diffuse term.</summary>
        </member>
        <member name="P:UnrealEngine.FLightmassWorldInfoSettings.bVisualizeAmbientOcclusion">
            <summary>If true, override normal direct and indirect lighting with just the AO term.</summary>
        </member>
        <member name="F:UnrealEngine.FLightmassWorldInfoSettings.VolumeLightSamplePlacementScale">
            <summary>
            Scales the distances at which volume lighting samples are placed.  Volume lighting samples are computed by Lightmass and are used for GI on movable components.
            Using larger scales results in less sample memory usage and reduces Indirect Lighting Cache update times, but less accurate transitions between lighting areas.
            </summary>
        </member>
        <member name="P:UnrealEngine.FLightmassWorldInfoSettings.bCompressLightmaps">
            <summary>
            Whether to compress lightmap textures.  Disabling lightmap texture compression will reduce artifacts but increase memory and disk size by 4x.
            Use caution when disabling this.
            </summary>
        </member>
        <member name="T:UnrealEngine.FLinearColor">
            <summary>
            A linear color.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Color.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FLinearConstraint">
            <summary>Distance constraint</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.Limit">
            <summary>The distance allowed between between the two joint reference frames. Distance applies on all axes enabled (one axis means line, two axes implies circle, three axes implies sphere)</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.XMotion">
            <summary>Indicates the linear constraint applied along the X-axis. Free implies no constraint at all. Locked implies no movement along X is allowed. Limited implies the distance in the joint along all active axes must be less than the Distance provided.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.YMotion">
            <summary>Indicates the linear constraint applied along the X-axis. Free implies no constraint at all. Locked implies no movement along X is allowed. Limited implies the distance in the joint along all active axes must be less than the Distance provided.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.ZMotion">
            <summary>Indicates the linear constraint applied along the X-axis. Free implies no constraint at all. Locked implies no movement along X is allowed. Limited implies the distance in the joint along all active axes must be less than the Distance provided.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.Stiffness">
            <summary>Stiffness of the soft constraint. Only used when Soft Constraint is on.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.Damping">
            <summary>Damping of the soft constraint. Only used when Soft Constraint is on.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.Restitution">
            <summary>Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearConstraint.ContactDistance">
            <summary>Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.</summary>
        </member>
        <member name="P:UnrealEngine.FLinearConstraint.bSoftConstraint">
            <summary>Whether we want to use a soft constraint (spring).</summary>
        </member>
        <member name="T:UnrealEngine.FLinearDriveConstraint">
            <summary>Linear Drive</summary>
        </member>
        <member name="F:UnrealEngine.FLinearDriveConstraint.PositionTarget">
            <summary>Target position the linear drive.</summary>
        </member>
        <member name="F:UnrealEngine.FLinearDriveConstraint.VelocityTarget">
            <summary>Target velocity the linear drive.</summary>
        </member>
        <member name="T:UnrealEngine.FLocalizedSubtitle">
            <summary>A subtitle localized to a specific language.</summary>
        </member>
        <member name="F:UnrealEngine.FLocalizedSubtitle.LanguageExt">
            <summary>The 3-letter language for this subtitle</summary>
        </member>
        <member name="P:UnrealEngine.FLocalizedSubtitle.Subtitles">
            <summary>
            Subtitle cues.  If empty, use SoundNodeWave's SpokenText as the subtitle.  Will often be empty,
            as the contents of the subtitle is commonly identical to what is spoken.
            </summary>
        </member>
        <member name="P:UnrealEngine.FLocalizedSubtitle.bMature">
            <summary>true if this sound is considered to contain mature content.</summary>
        </member>
        <member name="P:UnrealEngine.FLocalizedSubtitle.bManualWordWrap">
            <summary>true if the subtitles have been split manually.</summary>
        </member>
        <member name="P:UnrealEngine.FLocalizedSubtitle.bSingleLine">
            <summary>true if the subtitles should be displayed one line at a time.</summary>
        </member>
        <member name="F:UnrealEngine.FLocationBoneSocketInfo.BoneSocketName">
            <summary>The name of the bone/socket on the skeletal mesh</summary>
        </member>
        <member name="F:UnrealEngine.FLocationBoneSocketInfo.Offset">
            <summary>The offset from the bone/socket to use</summary>
        </member>
        <member name="T:UnrealEngine.FLODSoloTrack">
            <summary>
            Temporary array for tracking 'solo' emitter mode.
            Entry will be true if emitter was enabled
            </summary>
        </member>
        <member name="T:UnrealEngine.FMargin">
            <summary>Describes the space around a Widget.</summary>
        </member>
        <member name="F:UnrealEngine.FMargin.Left">
            <summary>Holds the margin to the left.</summary>
        </member>
        <member name="F:UnrealEngine.FMargin.Top">
            <summary>Holds the margin to the top.</summary>
        </member>
        <member name="F:UnrealEngine.FMargin.Right">
            <summary>Holds the margin to the right.</summary>
        </member>
        <member name="F:UnrealEngine.FMargin.Bottom">
            <summary>Holds the margin to the bottom.</summary>
        </member>
        <member name="T:UnrealEngine.FMarkerSyncAnimPosition">
            <summary>
            Represent a current play position in an animation
            based on sync markers
            </summary>
        </member>
        <member name="F:UnrealEngine.FMarkerSyncAnimPosition.PreviousMarkerName">
            <summary>The marker we have passed</summary>
        </member>
        <member name="F:UnrealEngine.FMarkerSyncAnimPosition.NextMarkerName">
            <summary>The marker we are heading towards</summary>
        </member>
        <member name="F:UnrealEngine.FMarkerSyncAnimPosition.PositionBetweenMarkers">
            <summary>
            Value between 0 and 1 representing where we are:
                  0   we are at PreviousMarker
                  1   we are at NextMarker
                  0.5 we are half way between the two
            </summary>
        </member>
        <member name="P:UnrealEngine.FMarkerSyncData.AuthoredSyncMarkers">
            <summary>Authored Sync markers</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialAttributesInput.OutputIndex">
            <summary>UMaterial expression that this input is connected to, or NULL if not connected.</summary>
            <summary>Index into Expression's outputs array that this input is connected to.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialAttributesInput.InputName">
            <summary>
            optional FName of the input.
            Note that this is the only member which is not derived from the output currently connected.
            </summary>
        </member>
        <member name="F:UnrealEngine.FMaterialAttributesInput.ExpressionName">
            <summary>Material expression name that this input is connected to, or None if not connected. Used only in cooked builds</summary>
        </member>
        <member name="T:UnrealEngine.FMaterialEditorPromotionSettings">
            <summary>Holds settings for the material editor build promotion tests</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialEditorPromotionSettings.DefaultMaterialAsset">
            <summary>Default material asset to apply to static meshes *</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialEditorPromotionSettings.DefaultDiffuseTexture">
            <summary>Default material asset to apply to static meshes *</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialEditorPromotionSettings.DefaultNormalTexture">
            <summary>Default material asset to apply to static meshes *</summary>
        </member>
        <member name="T:UnrealEngine.FMaterialFunctionInfo">
            <summary>Stores information about a function that this material references, used to know when the material needs to be recompiled.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialFunctionInfo.StateId">
            <summary>Id that the function had when this material was last compiled.</summary>
        </member>
        <member name="T:UnrealEngine.FMaterialInstanceBasePropertyOverrides">
            <summary>Properties from the base material that can be overridden in material instances.</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.bOverride_OpacityMaskClipValue">
            <summary>Enables override of the opacity mask clip value.</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.bOverride_BlendMode">
            <summary>Enables override of the blend mode.</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.bOverride_ShadingModel">
            <summary>Enables override of the shading model.</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.bOverride_DitheredLODTransition">
            <summary>Enables override of the two sided property.</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.bOverride_TwoSided">
            <summary>Enables override of the two sided property.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FMaterialInstanceBasePropertyOverrides.OpacityMaskClipValue" -->
        <member name="F:UnrealEngine.FMaterialInstanceBasePropertyOverrides.BlendMode">
            <summary>The blend mode</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialInstanceBasePropertyOverrides.ShadingModel">
            <summary>The shading model</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.TwoSided">
            <summary>Indicates that the material should be rendered without backface culling and the normal should be flipped for backfaces.</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialInstanceBasePropertyOverrides.DitheredLODTransition">
            <summary>Whether the material should support a dithered LOD transition when used with the foliage system.</summary>
        </member>
        <member name="T:UnrealEngine.FMaterialParameterCollectionInfo">
            <summary>Stores information about a parameter collection that this material references, used to know when the material needs to be recompiled.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialParameterCollectionInfo.StateId">
            <summary>Id that the collection had when this material was last compiled.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.TextureSize">
            <summary>Size of generated BaseColor map</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialProxySettings.bNormalMap">
            <summary>Whether to generate normal map</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialProxySettings.bMetallicMap">
            <summary>Whether to generate metallic map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.MetallicConstant">
            <summary>Metallic constant</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialProxySettings.bRoughnessMap">
            <summary>Whether to generate roughness map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.RoughnessConstant">
            <summary>Roughness constant</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialProxySettings.bSpecularMap">
            <summary>Whether to generate specular map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.SpecularConstant">
            <summary>Specular constant</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialProxySettings.bEmissiveMap">
            <summary>Whether to generate emissive map</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialProxySettings.bOpacityMap">
            <summary>Whether to generate opacity map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.DiffuseTextureSize">
            <summary>Override diffuse map size</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.NormalTextureSize">
            <summary>Override normal map size</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.MetallicTextureSize">
            <summary>Override metallic map size</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.RoughnessTextureSize">
            <summary>Override roughness map size</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.SpecularTextureSize">
            <summary>Override specular map size</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.EmissiveTextureSize">
            <summary>Override emissive map size</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialProxySettings.OpacityTextureSize">
            <summary>Override opacity map size</summary>
        </member>
        <member name="T:UnrealEngine.FMaterialSimplificationSettings">
            <summary>Use FMaterialProxySettings instead</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.BaseColorMapSize">
            <summary>Size of generated BaseColor map</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialSimplificationSettings.bNormalMap">
            <summary>Whether to generate normal map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.NormalMapSize">
            <summary>Size of generated specular map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.MetallicConstant">
            <summary>Metallic constant</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialSimplificationSettings.bMetallicMap">
            <summary>Whether to generate metallic map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.MetallicMapSize">
            <summary>Size of generated metallic map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.RoughnessConstant">
            <summary>Roughness constant</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialSimplificationSettings.bRoughnessMap">
            <summary>Whether to generate roughness map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.RoughnessMapSize">
            <summary>Size of generated roughness map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.SpecularConstant">
            <summary>Specular constant</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialSimplificationSettings.bSpecularMap">
            <summary>Whether to generate specular map</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSimplificationSettings.SpecularMapSize">
            <summary>Size of generated specular map</summary>
        </member>
        <member name="P:UnrealEngine.FMaterialSpriteElement.bSizeIsInScreenSpace">
            <summary>The material that the sprite is rendered with.</summary>
            <summary>A curve that maps distance on the X axis to the sprite opacity on the Y axis.</summary>
            <summary>Whether the size is defined in screen-space or world-space.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSpriteElement.BaseSizeX">
            <summary>The base width of the sprite, multiplied with the DistanceToSizeCurve.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialSpriteElement.BaseSizeY">
            <summary>The base height of the sprite, multiplied with the DistanceToSizeCurve.</summary>
        </member>
        <member name="T:UnrealEngine.FMaterialTextureInfo">
            <summary>This struct holds data about how a texture is sampled within a material.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialTextureInfo.SamplingScale">
            <summary>The scale used when sampling the texture</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialTextureInfo.UVChannelIndex">
            <summary>The coordinate index used when sampling the texture</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialTextureInfo.TextureName">
            <summary>The texture name. Used for debugging and also to for quick matching of the entries.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialTextureInfo.TextureReference">
            <summary>The reference to the texture, used to keep the TextureName valid even if it gets renamed.</summary>
        </member>
        <member name="F:UnrealEngine.FMaterialTextureInfo.TextureIndex">
            <summary>
            The texture index in the material resource the data was built from.
            This must be transient as it depends on which shader map was used for the build.
            </summary>
        </member>
        <member name="T:UnrealEngine.FMatrix">
            <summary>
            * A 4x4 matrix.
            * The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Matrix.h
            </summary>
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Multiply(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Gets the result of multiplying a Matrix to this.
            
             @param Other The matrix to multiply this by.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Addition(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Gets the result of adding a matrix to this.
            
             @param Other The Matrix to add.
             @return The result of addition.
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Multiply(UnrealEngine.FMatrix,System.Single)">
            This isn't applying SCALE, just multiplying float to all members - i.e. weighting
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Equality(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Checks whether two matrix are identical.
            
             @param Other The other matrix.
             @return true if two matrix are identical, otherwise false.
        </member>
        <member name="M:UnrealEngine.FMatrix.Equals(System.Object)">
             Checks whether another Matrix is equal to this, within specified tolerance.
            
             @param Other The other Matrix.
             @param Tolerance Error Tolerance.
             @return true if two Matrix are equal, within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Inequality(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Checks whether another Matrix is not equal to this, within specified tolerance.
            
             @param Other The other Matrix.
             @return true if two Matrix are not equal, within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FMatrix.TransformPosition(UnrealEngine.FVector)">
            Transform a location - will take into account translation part of the FMatrix. 
        </member>
        <member name="M:UnrealEngine.FMatrix.InverseTransformPosition(UnrealEngine.FVector)">
            Inverts the matrix and then transforms V - correctly handles scaling in this matrix. 
        </member>
        <member name="M:UnrealEngine.FMatrix.TransformVector(UnrealEngine.FVector)">
            Transform a direction vector - will not take into account translation part of the FMatrix. 
            If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT.
        </member>
        <member name="M:UnrealEngine.FMatrix.InverseTransformVector(UnrealEngine.FVector)">
            Transform a direction vector by the inverse of this matrix - will not take into account translation part.
            If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT with adjoint of matrix inverse.
        </member>
        <member name="M:UnrealEngine.FMatrix.RotDeterminant">
            @return the determinant of rotation 3x3 matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.InverseFast">
            Fast path, doesn't check for nil matrices in final release builds 
        </member>
        <member name="M:UnrealEngine.FMatrix.Inverse">
            Fast path, and handles nil matrices. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ExtractScaling(System.Single)">
            Remove any scaling from this matrix (ie magnitude of each row is 1) and return the 3D scale vector that was initially present with error Tolerance 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetScaleVector(System.Single)">
            return a 3D scale vector calculated from this matrix (where each component is the magnitude of a row vector) with error Tolerance. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ConcatTranslation(UnrealEngine.FVector)">
            Returns a matrix with an additional translation concatenated. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ScaleTranslation(UnrealEngine.FVector)">
            Scale the translation part of the matrix by the supplied vector. 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetMaximumAxisScale">
            @return the maximum magnitude of any row of the matrix. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ApplyScale(System.Single)">
            Apply Scale to this matrix *
        </member>
        <member name="M:UnrealEngine.FMatrix.GetScaledAxis(UnrealEngine.EAxis)">
             get axis of this matrix scaled by the scale of the matrix
            
             @param i index into the axis of the matrix
             @ return vector of the axis
        </member>
        <member name="M:UnrealEngine.FMatrix.GetScaledAxes(UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
             get axes of this matrix scaled by the scale of the matrix
            
             @param X axes returned to this param
             @param Y axes returned to this param
             @param Z axes returned to this param
        </member>
        <member name="M:UnrealEngine.FMatrix.GetUnitAxis(UnrealEngine.EAxis)">
             get unit length axis of this matrix
            
             @param i index into the axis of the matrix
             @return vector of the axis
        </member>
        <member name="M:UnrealEngine.FMatrix.GetUnitAxes(UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
             get unit length axes of this matrix
            
             @param X axes returned to this param
             @param Y axes returned to this param
             @param Z axes returned to this param
        </member>
        <member name="M:UnrealEngine.FMatrix.SetAxis(System.Int32,UnrealEngine.FVector)">
             set an axis of this matrix
            
             @param i index into the axis of the matrix
             @param Axis vector of the axis
        </member>
        <member name="M:UnrealEngine.FMatrix.GetColumn(System.Int32)">
             get a column of this matrix
            
             @param i index into the column of the matrix
             @return vector of the column 
        </member>
        <member name="M:UnrealEngine.FMatrix.Rotator">
            @return rotator representation of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.ToQuat">
             Transform a rotation matrix into a quaternion.
            
             @warning rotation part will need to be unit length for this to be right!
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumNearPlane(UnrealEngine.FPlane@)">
            @param OutPlane the near plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumFarPlane(UnrealEngine.FPlane@)">
            @param OutPlane the far plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumLeftPlane(UnrealEngine.FPlane@)">
            @param OutPlane the left plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumRightPlane(UnrealEngine.FPlane@)">
            @param OutPlane the right plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumTopPlane(UnrealEngine.FPlane@)">
            @param OutPlane the top plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumBottomPlane(UnrealEngine.FPlane@)">
            @param OutPlane the bottom plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.Mirror(UnrealEngine.EAxis,UnrealEngine.EAxis)">
            Utility for mirroring this transform across a certain plane, and flipping one of the axis as well.
        </member>
        <member name="M:UnrealEngine.FMatrix.ToString">
             Get a textual representation of the vector.
            
             @return Text describing the vector.
        </member>
        <member name="T:UnrealEngine.FMeshBuildSettings">
            <summary>Settings applied when building a mesh.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bUseMikkTSpace">
            <summary>If true, degenerate triangles will be removed.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bRecomputeNormals">
            <summary>If true, normals in the raw mesh are ignored and recomputed.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bRecomputeTangents">
            <summary>If true, tangents in the raw mesh are ignored and recomputed.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bRemoveDegenerates">
            <summary>If true, degenerate triangles will be removed.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bBuildAdjacencyBuffer">
            <summary>Required for PNT tessellation but can be slow. Recommend disabling for larger meshes.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bBuildReversedIndexBuffer">
            <summary>Required to optimize mesh in mirrored transform. Double index buffer size.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bUseHighPrecisionTangentBasis">
            <summary>If true, Tangents will be stored at 16 bit vs 8 bit precision.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bUseFullPrecisionUVs">
            <summary>If true, UVs will be stored at full floating point precision.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshBuildSettings.BuildScale3D">
            <summary>The local scale applied when building the mesh</summary>
        </member>
        <member name="F:UnrealEngine.FMeshBuildSettings.DistanceFieldResolutionScale">
            <summary>
            Scale to apply to the mesh when allocating the distance field volume texture.
            The default scale is 1, which is assuming that the mesh will be placed unscaled in the world.
            </summary>
        </member>
        <member name="P:UnrealEngine.FMeshBuildSettings.bGenerateDistanceFieldAsIfTwoSided">
            <summary>
            Whether to generate the distance field treating every triangle hit as a front face.
            When enabled prevents the distance field from being discarded due to the mesh being open, but also lowers Distance Field AO quality.
            </summary>
        </member>
        <member name="F:UnrealEngine.FMeshBuildSettings.DistanceFieldBias">
            <summary>
            Adding a constant distance effectively shrinks the distance field representation.
            This is useful for preventing self shadowing aritfacts when doing some minor ambient animation.
            Thin walls will be affected more severely than large hollow objects, because thin walls don't have a large negative region.
            </summary>
        </member>
        <member name="T:UnrealEngine.FMeshMergingSettings">
            <summary>Mesh merging settings</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bGenerateLightMapUV">
            <summary>Whether to generate lightmap UVs for a merged mesh</summary>
        </member>
        <member name="F:UnrealEngine.FMeshMergingSettings.TargetLightMapResolution">
            <summary>Target lightmap resolution</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bImportVertexColors">
            <summary>Whether we should import vertex colors into merged mesh</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bPivotPointAtZero">
            <summary>Whether merged mesh should have pivot at world origin, or at first merged component otherwise</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bMergePhysicsData">
            <summary>Whether to merge physics data (collision primitives)</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bMergeMaterials">
            <summary>Whether to merge source materials into one flat material</summary>
        </member>
        <member name="F:UnrealEngine.FMeshMergingSettings.MaterialSettings">
            <summary>Material simplification</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bBakeVertexDataToMesh">
            <summary>Whether or not vertex data such as vertex colours should be baked into the resulting mesh</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bUseVertexDataForBakingMaterial">
            <summary>Whether or not vertex data such as vertex colours should be used when baking out materials</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bUseTextureBinning">
            <summary>Whether or not to calculate varying output texture sizes according to their importance in the final atlas texture</summary>
        </member>
        <member name="F:UnrealEngine.FMeshMergingSettings.SpecificLOD">
            <summary>A given LOD level to export from the source meshes</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bUseLandscapeCulling">
            <summary>Whether or not to use available landscape geometry to cull away invisible triangles</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bExportNormalMap">
            <summary>Whether to export normal maps for material merging</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bExportMetallicMap">
            <summary>Whether to export metallic maps for material merging</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bExportRoughnessMap">
            <summary>Whether to export roughness maps for material merging</summary>
        </member>
        <member name="P:UnrealEngine.FMeshMergingSettings.bExportSpecularMap">
            <summary>Whether to export specular maps for material merging</summary>
        </member>
        <member name="F:UnrealEngine.FMeshMergingSettings.MergedMaterialAtlasResolution">
            <summary>Merged material texture atlas resolution</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.ScreenSize">
            <summary>Screen size of the resulting proxy mesh in pixel size</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.MaterialSettings">
            <summary>Material simplification</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.Material">
            <summary>Material simplification</summary>
        </member>
        <member name="P:UnrealEngine.FMeshProxySettings.bCalculateCorrectLODModel">
            <summary>Determines whether or not the correct LOD models should be calculated given the source meshes and transition size</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.MergeDistance">
            <summary>Distance at which meshes should be merged together</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.HardAngleThreshold">
            <summary>Angle at which a hard edge is introduced between faces</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.LightMapResolution">
            <summary>Lightmap resolution</summary>
        </member>
        <member name="P:UnrealEngine.FMeshProxySettings.bRecalculateNormals">
            <summary>Whether Simplygon should recalculate normals, otherwise the normals channel will be sampled from the original mesh</summary>
        </member>
        <member name="P:UnrealEngine.FMeshProxySettings.bUseLandscapeCulling">
            <summary>Whether or not to use available landscape geometry to cull away invisible triangles</summary>
        </member>
        <member name="F:UnrealEngine.FMeshProxySettings.LandscapeCullingPrecision">
            <summary>Level of detail of the landscape that should be used for the culling</summary>
        </member>
        <member name="T:UnrealEngine.FMeshReductionSettings">
            <summary>Settings used to reduce a mesh.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.PercentTriangles">
            <summary>Percentage of triangles to keep. 1.0 = no reduction, 0.0 = no triangles.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.MaxDeviation">
            <summary>The maximum distance in object space by which the reduced mesh may deviate from the original mesh.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.PixelError">
            <summary>The amount of error in pixels allowed for this LOD.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.WeldingThreshold">
            <summary>Threshold in object space at which vertices are welded together.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.HardAngleThreshold">
            <summary>Angle at which a hard edge is introduced between faces.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.SilhouetteImportance">
            <summary>Higher values minimize change to border edges.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.TextureImportance">
            <summary>Higher values reduce texture stretching.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.ShadingImportance">
            <summary>Higher values try to preserve normals better.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshReductionSettings.bRecalculateNormals">
            <summary>
            UPROPERTY(EditAnywhere, Category = ReductionSettings)
                   bool bActive;
            </summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.VisibilityAggressiveness">
            <summary>Higher values generates fewer samples</summary>
        </member>
        <member name="F:UnrealEngine.FMeshReductionSettings.VertexColorImportance">
            <summary>Higher values minimize change to vertex color data.</summary>
        </member>
        <member name="T:UnrealEngine.FMeshSectionInfoMap">
            <summary>Map containing per-section settings for each section of each LOD.</summary>
        </member>
        <member name="T:UnrealEngine.FMeshUVChannelInfo">
            <summary>The world size for each texcoord mapping. Used by the texture streaming.</summary>
        </member>
        <member name="P:UnrealEngine.FMeshUVChannelInfo.bOverrideDensities">
            <summary>Whether this values was set manually or is auto generated.</summary>
        </member>
        <member name="F:UnrealEngine.FMeshUVChannelInfo.LocalUVDensities">
            <summary>
            The UV density in the mesh, before any transform scaling, in world unit per UV.
            This value represents the length taken to cover a full UV unit.
            </summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.Location">
            <summary>Location</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.Rotation">
            <summary>Rotation</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.FOV">
            <summary>The field of view (in degrees) in perspective mode (ignored in Orthographic mode)</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.OrthoWidth">
            <summary>The desired width (in world units) of the orthographic view (ignored in Perspective mode)</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.OrthoNearClipPlane">
            <summary>The near plane distance of the orthographic view (in world units)</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.OrthoFarClipPlane">
            <summary>The far plane distance of the orthographic view (in world units)</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.AspectRatio">
            <summary>Aspect Ratio (Width/Height); ignored unless bConstrainAspectRatio is true</summary>
        </member>
        <member name="P:UnrealEngine.FMinimalViewInfo.bConstrainAspectRatio">
            <summary>If bConstrainAspectRatio is true, black bars will be added if the destination view has a different aspect ratio than this camera requested.</summary>
        </member>
        <member name="P:UnrealEngine.FMinimalViewInfo.bUseFieldOfViewForLOD">
            <summary>If true, account for the field of view angle when computing which level of detail to use for meshes.</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.ProjectionMode">
            <summary>The type of camera</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.PostProcessBlendWeight">
            <summary>Indicates if PostProcessSettings should be applied.</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.PostProcessSettings">
            <summary>Post-process settings to use if PostProcessBlendWeight is non-zero.</summary>
        </member>
        <member name="F:UnrealEngine.FMinimalViewInfo.OffCenterProjectionOffset">
            <summary>Off-axis / off-center projection offset as proportion of screen dimensions</summary>
        </member>
        <member name="T:UnrealEngine.FMotionEvent">
            <summary>
            FMotionEvent describes a touch pad action (press, move, lift)
            It is passed to event handlers dealing with touch input.
            </summary>
        </member>
        <member name="T:UnrealEngine.FMovementProperties">
            <summary>Movement capabilities, determining available movement options for Pawns and used by AI for reachability tests.</summary>
        </member>
        <member name="P:UnrealEngine.FMovementProperties.bCanCrouch">
            <summary>If true, this Pawn is capable of crouching.</summary>
        </member>
        <member name="P:UnrealEngine.FMovementProperties.bCanJump">
            <summary>If true, this Pawn is capable of jumping.</summary>
        </member>
        <member name="P:UnrealEngine.FMovementProperties.bCanWalk">
            <summary>If true, this Pawn is capable of walking or moving on the ground.</summary>
        </member>
        <member name="P:UnrealEngine.FMovementProperties.bCanSwim">
            <summary>If true, this Pawn is capable of swimming or moving through fluid volumes.</summary>
        </member>
        <member name="P:UnrealEngine.FMovementProperties.bCanFly">
            <summary>If true, this Pawn is capable of flying.</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneBinding">
            <summary>A set of tracks bound to runtime objects</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneBinding.ObjectGuid">
            <summary>Object binding guid for runtime objects</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneBinding.BindingName">
            <summary>Display name</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneBinding.Tracks">
            <summary>All tracks in this binding</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneBindingOverrideData">
            <summary>Movie scene binding override data</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneBindingOverrideData.ObjectBindingId">
            <summary>Specifies the object binding to override.</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneBindingOverrideData.bOverridesDefault">
            <summary>Specifies whether the default assignment should remain bound (false) or if this should completely override the default binding (false).</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneCameraAnimSectionData.PlayRate">
            <summary>The camera anim to play</summary>
            <summary>How fast to play back the animation.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneCameraAnimSectionData.PlayScale">
            <summary>Scalar to control intensity of the animation.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneCameraShakeSectionData.PlayScale">
            <summary>Class of the camera shake to play</summary>
            <summary>Scalar that affects shake intensity</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneEditorData">
            <summary>Editor only data that needs to be saved between sessions for editing but has no runtime purpose</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneEditorData.WorkingRange">
            <summary>User-defined working range in which the entire sequence should reside.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneEditorData.ViewRange">
            <summary>The last view-range that the user was observing</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneEvaluationField">
            <summary>Memory layout optimized primarily for speed of searching the applicable ranges</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationField.Ranges">
            <summary>Ranges stored separately for fast (cache efficient) lookup. Each index has a corresponding entry in FMovieSceneEvaluationField::Groups.</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationField.Groups">
            <summary>Groups that store segment pointers for each of the above ranges. Each index has a corresponding entry in FMovieSceneEvaluationField::Ranges.</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationField.MetaData">
            <summary>Meta data that maps to entries in the 'Ranges' array.</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneEvaluationFieldSegmentPtr">
            <summary>A pointer to a particular segment of a track held within an evaluation template</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneEvaluationFieldSegmentPtr.SegmentIndex">
            <summary>The index of the segment within the track (see FMovieSceneEvaluationTrack::Segments)</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneEvaluationFieldSegmentPtr.SequenceID">
            <summary>The sequence ID that identifies to which sequence the track belongs</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneEvaluationFieldSegmentPtr.TrackIdentifier">
            <summary>The Identifier of the track inside the track map (see FMovieSceneEvaluationTemplate::Tracks)</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneEvaluationGroup">
            <summary>Holds segment pointers for all segments that are active for a given range of the sequence</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationGroup.LUTIndices">
            <summary>Array of indices that define all the flush groups in the range.</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationGroup.SegmentPtrLUT">
            <summary>A grouping of evaluation pointers that occur in this range of the sequence</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneEvaluationGroupLUTIndex">
            <summary>Lookup table index for a group of evaluation templates</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationGroupLUTIndex.bRequiresImmediateFlush">
            <summary>Whether this group requires a flush of the execution stack immediately or not (generally false)</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneEvaluationGroupLUTIndex.LUTOffset">
            <summary>The offset within FMovieSceneEvaluationGroup::SegmentPtrLUT that this index starts</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FMovieSceneEvaluationGroupLUTIndex.NumInitPtrs" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FMovieSceneEvaluationGroupLUTIndex.NumEvalPtrs" -->
        <member name="T:UnrealEngine.FMovieSceneEvaluationMetaData">
            <summary>Informational meta data that applies to a given time range</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEvaluationMetaData.ActiveSequences">
            <summary>Array of sequences that are active in this time range.</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneEventSectionData">
            <summary>A curve of events</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEventSectionData.KeyTimes">
            <summary>Sorted array of key times</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneEventSectionData.KeyValues">
            <summary>Array of values that correspond to each key time</summary>
        </member>
        <member name="T:UnrealEngine.FMovieScenePossessable">
            <summary>MovieScenePossessable is a "typed slot" used to allow the MovieScene to control an already-existing object</summary>
        </member>
        <member name="F:UnrealEngine.FMovieScenePossessable.Guid">
            <summary>
            Unique identifier of the possessable object. // @todo sequencer: Guids need to be handled carefully when the asset is duplicated (or loaded after being copied on disk).
            //                                     Sometimes we'll need to generate fresh Guids.
            </summary>
        </member>
        <member name="F:UnrealEngine.FMovieScenePossessable.Name">
            <summary>Name label for this slot // @todo sequencer: Should be editor-only probably</summary>
        </member>
        <member name="F:UnrealEngine.FMovieScenePossessable.ParentGuid">
            <summary>
            Type of the object we'll be possessing // @todo sequencer: Might be able to be editor-only.  We'll see.
            // @todo sequencer: This isn't used for anything yet.  We could use it to gate which types of objects can be bound to a
            // possessable "slot" though.  Or we could use it to generate a "preview" spawnable puppet when previewing with no
            // possessable object available.
            </summary>
            <summary>GUID relating to this possessable's parent, if applicable.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSectionParameters.StartOffset">
            <summary>Number of seconds to skip at the beginning of the sub-sequence.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSectionParameters.TimeScale">
            <summary>Playback time scaling factor.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSectionParameters.PrerollTime">
            <summary>Amount of time to evaluate the section before its actual physical start time.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSectionParameters.PostrollTime">
            <summary>Amount of time to evaluate the section after its actual physical end time.</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneSequenceHierarchy">
            <summary>Structure that stores hierarchical information pertaining to all sequences contained within a master sequence</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneSequencePlaybackSettings">
            <summary>Settings for the level sequence player actor.</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSequencePlaybackSettings.LoopCount">
            <summary>Number of times to loop playback. -1 for infinite, else the number of times to loop before stopping</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSequencePlaybackSettings.PlayRate">
            <summary>The rate at which to playback the animation</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneSequencePlaybackSettings.bRandomStartTime">
            <summary>Start playback at a random time</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSequencePlaybackSettings.StartTime">
            <summary>Start playback at the specified time</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneSequencePlaybackSettings.bRestoreState">
            <summary>Flag used to specify whether actor states should be restored on stop</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSkeletalAnimationParams.StartOffset">
            <summary>The animation this section plays</summary>
            <summary>The offset into the beginning of the animation clip</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSkeletalAnimationParams.EndOffset">
            <summary>The offset into the end of the animation clip</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSkeletalAnimationParams.PlayRate">
            <summary>The playback rate of the animation clip</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneSkeletalAnimationParams.bReverse">
            <summary>Reverse the playback of the animation clip</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSkeletalAnimationParams.SlotName">
            <summary>The slot name to use for the animation</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSkeletalAnimationParams.Weight">
            <summary>The weight curve for this animation section</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneSpawnable">
            <summary>MovieSceneSpawnable describes an object that can be spawned for this MovieScene</summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSpawnable.Guid">
            <summary>
            Unique identifier of the spawnable object. // @todo sequencer: Guids need to be handled carefully when the asset is duplicated (or loaded after being copied on disk).
            //                                     Sometimes we'll need to generate fresh Guids.
            </summary>
        </member>
        <member name="F:UnrealEngine.FMovieSceneSpawnable.Name">
            <summary>Name label // @todo sequencer: Should be editor-only probably</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneSpawnable.ChildPossessables">
            <summary>Set of GUIDs to possessable object bindings that are bound to an object inside this spawnable // @todo sequencer: This should be a TSet, but they don't duplicate correctly atm</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneTrackCompilationParams">
            <summary>Movie scene compilation parameters. Serialized items contribute to a compiled template's cached hash</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneTrackCompilationParams.bForEditorPreview">
            <summary>Whether we're generating for an editor preview, or for efficient runtime evaluation</summary>
        </member>
        <member name="T:UnrealEngine.FMovieSceneTrackEvalOptions">
            <summary>Generic evaluation options for any track</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneTrackEvalOptions.bCanEvaluateNearestSection">
            <summary>true when the value of bEvaluateNearestSection is to be considered for the track</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneTrackEvalOptions.bEvaluateNearestSection">
            <summary>When evaluating empty space on a track, will evaluate the last position of the previous section (if possible), or the first position of the next section, in that order of preference.</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneTrackEvalOptions.bEvaluateInPreroll">
            <summary>Evaluate this track as part of its parent sub-section's pre-roll, if applicable</summary>
        </member>
        <member name="P:UnrealEngine.FMovieSceneTrackEvalOptions.bEvaluateInPostroll">
            <summary>Evaluate this track as part of its parent sub-section's post-roll, if applicable</summary>
        </member>
        <member name="T:UnrealEngine.FNameCurve">
            <summary>Implements a curve of FNames.</summary>
        </member>
        <member name="P:UnrealEngine.FNameCurve.Keys">
            <summary>Sorted array of keys</summary>
        </member>
        <member name="F:UnrealEngine.FNameCurve.KeyHandlesToIndices">
            <summary>Map of which key handles go to which indices.</summary>
        </member>
        <member name="T:UnrealEngine.FNameCurveKey">
            <summary>One key in a curve of FNames.</summary>
        </member>
        <member name="F:UnrealEngine.FNameCurveKey.Time">
            <summary>Time at this key</summary>
        </member>
        <member name="F:UnrealEngine.FNameCurveKey.Value">
            <summary>Value at this key</summary>
        </member>
        <member name="T:UnrealEngine.FNamedCurveValue">
            <summary>Name/value pair for retrieving curve values</summary>
        </member>
        <member name="F:UnrealEngine.FNamedCurveValue.Name">
            <summary>The name of the curve</summary>
        </member>
        <member name="F:UnrealEngine.FNamedCurveValue.Value">
            <summary>The value of the curve</summary>
        </member>
        <member name="T:UnrealEngine.FNamedSlotBinding">
            <summary>
            The state passed into OnPaint that we can expose as a single painting structure to blueprints to
            allow script code to override OnPaint behavior.
            </summary>
        </member>
        <member name="T:UnrealEngine.FNavAgentProperties">
            <summary>Properties of representation of an 'agent' (or Pawn) used by AI navigation/pathfinding.</summary>
        </member>
        <member name="F:UnrealEngine.FNavAgentProperties.AgentRadius">
            <summary>Radius of the capsule used for navigation/pathfinding.</summary>
        </member>
        <member name="F:UnrealEngine.FNavAgentProperties.AgentHeight">
            <summary>Total height of the capsule used for navigation/pathfinding.</summary>
        </member>
        <member name="F:UnrealEngine.FNavAgentProperties.AgentStepHeight">
            <summary>Step height to use, or -1 for default value from navdata's config.</summary>
        </member>
        <member name="F:UnrealEngine.FNavAgentProperties.NavWalkingSearchHeightScale">
            <summary>Scale factor to apply to height of bounds when searching for navmesh to project to when nav walking</summary>
        </member>
        <member name="P:UnrealEngine.FNavAgentProperties.bCanCrouch">
            <summary>Type of navigation data used by agent, null means "any"</summary>
            <summary>If true, this Pawn is capable of crouching.</summary>
        </member>
        <member name="P:UnrealEngine.FNavAgentProperties.bCanJump">
            <summary>If true, this Pawn is capable of jumping.</summary>
        </member>
        <member name="P:UnrealEngine.FNavAgentProperties.bCanWalk">
            <summary>If true, this Pawn is capable of walking or moving on the ground.</summary>
        </member>
        <member name="P:UnrealEngine.FNavAgentProperties.bCanSwim">
            <summary>If true, this Pawn is capable of swimming or moving through fluid volumes.</summary>
        </member>
        <member name="P:UnrealEngine.FNavAgentProperties.bCanFly">
            <summary>If true, this Pawn is capable of flying.</summary>
        </member>
        <member name="F:UnrealEngine.FNavDataConfig.AgentRadius">
            <summary>Radius of the capsule used for navigation/pathfinding.</summary>
        </member>
        <member name="F:UnrealEngine.FNavDataConfig.AgentHeight">
            <summary>Total height of the capsule used for navigation/pathfinding.</summary>
        </member>
        <member name="F:UnrealEngine.FNavDataConfig.AgentStepHeight">
            <summary>Step height to use, or -1 for default value from navdata's config.</summary>
        </member>
        <member name="F:UnrealEngine.FNavDataConfig.NavWalkingSearchHeightScale">
            <summary>Scale factor to apply to height of bounds when searching for navmesh to project to when nav walking</summary>
        </member>
        <member name="P:UnrealEngine.FNavDataConfig.bCanCrouch">
            <summary>Type of navigation data used by agent, null means "any"</summary>
            <summary>If true, this Pawn is capable of crouching.</summary>
        </member>
        <member name="P:UnrealEngine.FNavDataConfig.bCanJump">
            <summary>If true, this Pawn is capable of jumping.</summary>
        </member>
        <member name="P:UnrealEngine.FNavDataConfig.bCanWalk">
            <summary>If true, this Pawn is capable of walking or moving on the ground.</summary>
        </member>
        <member name="P:UnrealEngine.FNavDataConfig.bCanSwim">
            <summary>If true, this Pawn is capable of swimming or moving through fluid volumes.</summary>
        </member>
        <member name="P:UnrealEngine.FNavDataConfig.bCanFly">
            <summary>If true, this Pawn is capable of flying.</summary>
        </member>
        <member name="T:UnrealEngine.FNavigationEvent">
            <summary>
            FNavigationEvent describes a navigation action (Left, Right, Up, Down)
            It is passed to event handlers dealing with navigation.
            </summary>
        </member>
        <member name="F:UnrealEngine.FNavigationFilterArea.TravelCostOverride">
            <summary>navigation area class</summary>
            <summary>override for travel cost</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationFilterArea.EnteringCostOverride">
            <summary>override for entering cost</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationFilterArea.bIsExcluded">
            <summary>mark as excluded</summary>
        </member>
        <member name="T:UnrealEngine.FNavigationFilterFlags">
            <summary>Use UNavigationSystem.DescribeFilterFlags() to setup user friendly names of flags</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationLink.LeftProjectHeight">
            <summary>if greater than 0 nav system will attempt to project navlink's start point on geometry below</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationLink.MaxFallDownLength">
            <summary>if greater than 0 nav system will attempt to project navlink's end point on geometry below</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationLink.SupportedAgents">
            <summary>restrict area only to specified agents</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bSupportsAgent0">
            <summary>DEPRECATED AGENT CONFIG</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationLink.Description">
            <summary>this is an editor-only property to put descriptions in navlinks setup, to be able to identify it easier</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bUseSnapHeight">
            <summary>WITH_EDITORONLY_DATA</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bSnapToCheapestArea">
            <summary>If set, link will try to snap to cheapest area in given radius</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag0">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag1">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag2">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag3">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag4">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag5">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag6">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationLink.bCustomFlag7">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationSegmentLink.LeftProjectHeight">
            <summary>if greater than 0 nav system will attempt to project navlink's start point on geometry below</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationSegmentLink.MaxFallDownLength">
            <summary>if greater than 0 nav system will attempt to project navlink's end point on geometry below</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationSegmentLink.SupportedAgents">
            <summary>restrict area only to specified agents</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bSupportsAgent0">
            <summary>DEPRECATED AGENT CONFIG</summary>
        </member>
        <member name="F:UnrealEngine.FNavigationSegmentLink.Description">
            <summary>this is an editor-only property to put descriptions in navlinks setup, to be able to identify it easier</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bUseSnapHeight">
            <summary>WITH_EDITORONLY_DATA</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bSnapToCheapestArea">
            <summary>If set, link will try to snap to cheapest area in given radius</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag0">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag1">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag2">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag3">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag4">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag5">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag6">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="P:UnrealEngine.FNavigationSegmentLink.bCustomFlag7">
            <summary>custom flag, check DescribeCustomFlags for details</summary>
        </member>
        <member name="T:UnrealEngine.FNetDriverDefinition">
            <summary>
            Container for describing various types of netdrivers available to the engine
            The engine will try to construct a netdriver of a given type and, failing that,
            the fallback version.
            </summary>
        </member>
        <member name="F:UnrealEngine.FNetDriverDefinition.DefName">
            <summary>Unique name of this net driver definition</summary>
        </member>
        <member name="F:UnrealEngine.FNetDriverDefinition.DriverClassName">
            <summary>Class name of primary net driver</summary>
        </member>
        <member name="F:UnrealEngine.FNetDriverDefinition.DriverClassNameFallback">
            <summary>Class name of the fallback net driver if the main net driver class fails to initialize</summary>
        </member>
        <member name="T:UnrealEngine.FNetViewer">
            <summary>stores information on a viewer that actors need to be checked against for relevancy</summary>
        </member>
        <member name="F:UnrealEngine.FNetViewer.ViewLocation">
            <summary>The "controlling net object" associated with this view (typically player controller)</summary>
            <summary>The actor that is being directly viewed, usually a pawn.  Could also be the net actor of consequence</summary>
            <summary>Where the viewer is looking from</summary>
        </member>
        <member name="F:UnrealEngine.FNetViewer.ViewDir">
            <summary>Direction the viewer is looking</summary>
        </member>
        <member name="T:UnrealEngine.FNode">
            <summary>Rig Controller for bone transform *</summary>
        </member>
        <member name="F:UnrealEngine.FNode.Name">
            <summary>Name of the original node. We don't allow to change this. This is used for identity.*</summary>
        </member>
        <member name="F:UnrealEngine.FNode.ParentName">
            <summary>We save Parent Node but if the parent node is removed, it will reset to root</summary>
        </member>
        <member name="F:UnrealEngine.FNode.Transform">
            <summary>Absolute transform of the node. Hoping to use this data in the future to render</summary>
        </member>
        <member name="F:UnrealEngine.FNode.DisplayName">
            <summary>This is Display Name where it will be used to display in Retarget Manager. This name has to be unique.</summary>
        </member>
        <member name="T:UnrealEngine.FOpenTestAsset">
            <summary>Structure for asset opening test</summary>
        </member>
        <member name="F:UnrealEngine.FOpenTestAsset.AssetToOpen">
            <summary>Asset reference</summary>
        </member>
        <member name="P:UnrealEngine.FOpenTestAsset.bSkipTestWhenUnAttended">
            <summary>Perform only when attend *</summary>
        </member>
        <member name="T:UnrealEngine.FOrbitOptions">
            <summary>Container struct for holding options on the data updating for the module.</summary>
        </member>
        <member name="P:UnrealEngine.FOrbitOptions.bProcessDuringSpawn">
            <summary>Whether to process the data during spawning.</summary>
        </member>
        <member name="P:UnrealEngine.FOrbitOptions.bProcessDuringUpdate">
            <summary>Whether to process the data during updating.</summary>
        </member>
        <member name="P:UnrealEngine.FOrbitOptions.bUseEmitterTime">
            <summary>Whether to use emitter time during data retrieval.</summary>
        </member>
        <member name="T:UnrealEngine.FOverlapInfo">
            <summary>Overlap info consisting of the primitive and the body that is overlapping</summary>
        </member>
        <member name="T:UnrealEngine.FPackedNormal">
            <summary>
            A packed normal.
            The full C++ class is located here: Engine\Source\Runtime\RenderCore\Public\PackedNormal.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FPaintContext">
            <summary>
            The state passed into OnPaint that we can expose as a single painting structure to blueprints to
            allow script code to override OnPaint behavior.
            </summary>
        </member>
        <member name="T:UnrealEngine.FPaintedVertex">
            <summary>Cached vertex information at the time the mesh was painted.</summary>
        </member>
        <member name="F:UnrealEngine.FParticleBurst.Count">
            <summary>The number of particles to burst</summary>
        </member>
        <member name="F:UnrealEngine.FParticleBurst.CountLow">
            <summary>If >= 0, use as a range [CountLow..Count]</summary>
        </member>
        <member name="F:UnrealEngine.FParticleBurst.Time">
            <summary>The time at which to burst them (0..1: emitter lifetime)</summary>
        </member>
        <member name="T:UnrealEngine.FParticleEditorPromotionSettings">
            <summary>Holds settings for the particle editor build promotion tests</summary>
        </member>
        <member name="F:UnrealEngine.FParticleEditorPromotionSettings.DefaultParticleAsset">
            <summary>Default particle asset to use for tests</summary>
        </member>
        <member name="F:UnrealEngine.FParticleEvent_GenerateInfo.Type">
            <summary>The type of event.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FParticleEvent_GenerateInfo.Frequency" -->
        <member name="F:UnrealEngine.FParticleEvent_GenerateInfo.ParticleFrequency">
            <summary>Only fire the first time (collision only).</summary>
        </member>
        <member name="P:UnrealEngine.FParticleEvent_GenerateInfo.FirstTimeOnly">
            <summary>Only fire the first time (collision only).</summary>
        </member>
        <member name="P:UnrealEngine.FParticleEvent_GenerateInfo.LastTimeOnly">
            <summary>Only fire the last time (collision only).</summary>
        </member>
        <member name="P:UnrealEngine.FParticleEvent_GenerateInfo.UseReflectedImpactVector">
            <summary>Use the impact FVector not the hit normal (collision only).</summary>
        </member>
        <member name="P:UnrealEngine.FParticleEvent_GenerateInfo.bUseOrbitOffset">
            <summary>Use the orbit offset when computing the position at which the event occurred.</summary>
        </member>
        <member name="F:UnrealEngine.FParticleEvent_GenerateInfo.CustomName">
            <summary>Should the event tag with a custom name? Leave blank for the default.</summary>
        </member>
        <member name="P:UnrealEngine.FParticleEvent_GenerateInfo.ParticleModuleEventsToSendToGame">
            <summary>The events we want to fire off when this event has been generated</summary>
        </member>
        <member name="F:UnrealEngine.FParticleRandomSeedInfo.ParameterName">
            <summary>The name to expose to the placed instances for setting this seed</summary>
        </member>
        <member name="P:UnrealEngine.FParticleRandomSeedInfo.bGetSeedFromInstance">
            <summary>
            If true, the module will attempt to get the seed from the owner
            instance. If that fails, it will fall back to getting it from
            the RandomSeeds array.
            </summary>
        </member>
        <member name="P:UnrealEngine.FParticleRandomSeedInfo.bInstanceSeedIsIndex">
            <summary>
            If true, the seed value retrieved from the instance will be an
            index into the array of seeds.
            </summary>
        </member>
        <member name="P:UnrealEngine.FParticleRandomSeedInfo.bResetSeedOnEmitterLooping">
            <summary>
            If true, then reset the seed upon the emitter looping.
            For looping environmental effects this should likely be set to false to avoid
            a repeating pattern.
            </summary>
        </member>
        <member name="P:UnrealEngine.FParticleRandomSeedInfo.bRandomlySelectSeedArray">
            <summary>If true, then randomly select a seed entry from the RandomSeeds array</summary>
        </member>
        <member name="P:UnrealEngine.FParticleRandomSeedInfo.RandomSeeds">
            <summary>
            The random seed values to utilize for the module.
            More than 1 means the instance will randomly select one.
            </summary>
        </member>
        <member name="T:UnrealEngine.FParticleReplayTrackKey">
            <summary>Data for a single key in this track</summary>
        </member>
        <member name="F:UnrealEngine.FParticleReplayTrackKey.Time">
            <summary>Position along timeline</summary>
        </member>
        <member name="F:UnrealEngine.FParticleReplayTrackKey.Duration">
            <summary>Time length this clip should be captured/played for</summary>
        </member>
        <member name="F:UnrealEngine.FParticleReplayTrackKey.ClipIDNumber">
            <summary>Replay clip ID number that identifies the clip we should capture to or playback from</summary>
        </member>
        <member name="T:UnrealEngine.FParticleSysParam">
            <summary>Struct used for a particular named instance parameter for this ParticleSystemComponent.</summary>
        </member>
        <member name="F:UnrealEngine.FParticleSysParam.Name">
            <summary>The name of the parameter</summary>
        </member>
        <member name="F:UnrealEngine.FParticleSysParam.ParamType">
            <summary>
            The type of parameters
            PSPT_None       - There is no data type
            PSPT_Scalar     - Use the scalar value
            PSPT_ScalarRand - Select a scalar value in the range [Scalar_Low..Scalar)
            PSPT_Vector     - Use the vector value
            PSPT_VectorRand - Select a vector value in the range [Vector_Low..Vector)
            PSPT_Color      - Use the color value
            PSPT_Actor      - Use the actor value
            PSPT_Material   - Use the material value
            </summary>
        </member>
        <member name="T:UnrealEngine.FParticleSystemLOD">
            <summary>Structure containing per-LOD settings that pertain to the entire UParticleSystem.</summary>
        </member>
        <member name="T:UnrealEngine.FPassiveSoundMixModifier">
            <summary>Structure containing information on a SoundMix to activate passively.</summary>
        </member>
        <member name="F:UnrealEngine.FPassiveSoundMixModifier.MinVolumeThreshold">
            <summary>The SoundMix to activate</summary>
            <summary>Minimum volume level required to activate SoundMix. Below this value the SoundMix will not be active.</summary>
        </member>
        <member name="F:UnrealEngine.FPassiveSoundMixModifier.MaxVolumeThreshold">
            <summary>Maximum volume level required to activate SoundMix. Above this value the SoundMix will not be active.</summary>
        </member>
        <member name="T:UnrealEngine.FPhysicalAnimationData">
            <summary>Stores info on the type of motor that will be used for a given bone</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.BodyName">
            <summary>The body we will be driving. We specifically hide this from users since they provide the body name and bodies below in the component API.</summary>
        </member>
        <member name="P:UnrealEngine.FPhysicalAnimationData.bIsLocalSimulation">
            <summary>Whether the drive targets are in world space or local</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.OrientationStrength">
            <summary>The strength used to correct orientation error</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.AngularVelocityStrength">
            <summary>The strength used to correct angular velocity error</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.PositionStrength">
            <summary>The strength used to correct linear position error. Only used for non-local simulation</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.VelocityStrength">
            <summary>The strength used to correct linear velocity error. Only used for non-local simulation</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.MaxLinearForce">
            <summary>The max force used to correct linear errors</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationData.MaxAngularForce">
            <summary>The max force used to correct angular errors</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationProfile.ProfileName">
            <summary>Profile name used to identify set of physical animation parameters</summary>
        </member>
        <member name="F:UnrealEngine.FPhysicalAnimationProfile.PhysicalAnimationData">
            <summary>Physical animation parameters used to drive animation</summary>
        </member>
        <member name="T:UnrealEngine.FPhysicalSurfaceName">
            <summary>Structure that represents the name of physical surfaces.</summary>
        </member>
        <member name="T:UnrealEngine.FPlane">
            <summary>
            A plane definition in 3D space.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Plane.h
            </summary>
        </member>
        <member name="P:UnrealEngine.FPlane.Item(System.Int32)">
             Gets specific component of the vector.
            
             @param Index the index of vector component
             @return reference to component.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector4)">
             Constructor.
            
             @param V 4D vector to set up plane.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(System.Single,System.Single,System.Single,System.Single)">
             Constructor.
            
             @param InX X Coordinate.
             @param InY Y Coordinate.
             @param InZ Z Coordinate.
             @param InW W Coordinate.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector,System.Single)">
             Constructor.
            
             @param InNormal Plane Normal Vector.
             @param InW Plane W Coordinate.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector,UnrealEngine.FVector)">
             Constructor.
            
             @param InBase Base point in plane.
             @param InNormal Plane Normal Vector.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Constructor.
            
             @param A First point in the plane.
             @param B Second point in the plane.
             @param C Third point in the plane.
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPlane.PlaneDot(UnrealEngine.FVector)" -->
        <member name="M:UnrealEngine.FPlane.Flip">
             Get a flipped version of the plane.
            
             @return A flipped version of the plane.
        </member>
        <member name="M:UnrealEngine.FPlane.TransformBy(UnrealEngine.FMatrix)">
             Get the result of transforming the plane by a Matrix.
            
             @param M The matrix to transform plane with.
             @return The result of transform.
        </member>
        <member name="M:UnrealEngine.FPlane.TransformByUsingAdjointT(UnrealEngine.FMatrix,System.Single,UnrealEngine.FMatrix)">
             You can optionally pass in the matrices transpose-adjoint, which save it recalculating it.
             MSM: If we are going to save the transpose-adjoint we should also save the more expensive
             determinant.
            
             @param M The Matrix to transform plane with.
             @param DetM Determinant of Matrix.
             @param TA Transpose-adjoint of Matrix.
             @return The result of transform.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Equality(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Check if two planes are identical.
            
             @param V The other plane.
             @return true if planes are identical, otherwise false.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Inequality(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Check if two planes are different.
            
             @param V The other plane.
             @return true if planes are different, otherwise false.
        </member>
        <member name="M:UnrealEngine.FPlane.Equals(UnrealEngine.FPlane,System.Single)">
             Checks whether two planes are equal within specified tolerance.
            
             @param V The other plane.
             @param Tolerance Error Tolerance.
             @return true if the two planes are equal within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FPlane.op_BitwiseOr(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Calculates dot product of two planes.
            
             @param V The other plane.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Addition(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Gets result of adding a plane to this.
            
             @param V The other plane.
             @return The result of adding a plane to this.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Subtraction(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Gets result of subtracting a plane from this.
            
             @param V The other plane.
             @return The result of subtracting a plane from this.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Division(UnrealEngine.FPlane,System.Single)">
             Gets result of dividing a plane.
            
             @param Scale What to divide by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Multiply(UnrealEngine.FPlane,System.Single)">
             Gets result of scaling a plane.
            
             @param Scale The scaling factor.
             @return The result of scaling.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Multiply(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Gets result of multiplying a plane with this.
            
             @param V The other plane.
             @return The result of multiplying a plane with this.
        </member>
        <member name="T:UnrealEngine.FPointerEvent">
            <summary>
            FPointerEvent describes a mouse or touch action (e.g. Press, Release, Move, etc).
            It is passed to event handlers dealing with pointer-based input.
            </summary>
        </member>
        <member name="T:UnrealEngine.FPoseData">
            <summary>
            Pose data
            This is one pose data structure
            This will let us blend poses quickly easily
            All poses within this asset should contain same number of tracks,
            so that we can blend quickly
            </summary>
        </member>
        <member name="P:UnrealEngine.FPoseData.LocalSpacePose">
            <summary>local space pose, # of array match with # of Tracks</summary>
        </member>
        <member name="P:UnrealEngine.FPoseData.LocalSpacePoseMask">
            <summary>
            whether or not, the joint contains dirty transform
            it only blends if this is true
            this allows per bone blend
            @todo: convert to bit field?
            </summary>
        </member>
        <member name="P:UnrealEngine.FPoseData.CurveData">
            <summary># of array match with # of Curves in PoseDataContainer</summary>
        </member>
        <member name="T:UnrealEngine.FPoseDataContainer">
            <summary>
            Pose data container
            Contains animation and curve for all poses
            </summary>
        </member>
        <member name="P:UnrealEngine.FPoseDataContainer.PoseNames">
            <summary>
            pose names - horizontal data
            # of poses - there is no compression across tracks -
            unfortunately, tried TMap, but it is not great because it changes order whenever add/remove
            we need consistent array of names, so that it doesn't change orders
            </summary>
        </member>
        <member name="P:UnrealEngine.FPoseDataContainer.Curves">
            <summary>curve meta data # of Curve UIDs should match with Poses.CurveValues.Num</summary>
        </member>
        <member name="T:UnrealEngine.FPoseSnapshot">
            <summary>A pose for a skeletal mesh</summary>
        </member>
        <member name="P:UnrealEngine.FPoseSnapshot.LocalTransforms">
            <summary>Array of transforms per-bone</summary>
        </member>
        <member name="P:UnrealEngine.FPoseSnapshot.BoneNames">
            <summary>Array of bone names (corresponding to LocalTransforms)</summary>
        </member>
        <member name="F:UnrealEngine.FPoseSnapshot.SkeletalMeshName">
            <summary>The name of the skeletal mesh that was used to take this snapshot</summary>
        </member>
        <member name="F:UnrealEngine.FPoseSnapshot.SnapshotName">
            <summary>The name for this snapshot</summary>
        </member>
        <member name="P:UnrealEngine.FPoseSnapshot.bIsValid">
            <summary>Whether the pose is valid</summary>
        </member>
        <member name="T:UnrealEngine.FPostProcessSettings">
            <summary>
            To be able to use struct PostProcessSettings. // Each property consists of a bool to enable it (by default off),
            // the variable declaration and further down the default value for it.
            // The comment should include the meaning and usable range.
            </summary>
        </member>
        <member name="P:UnrealEngine.FPostProcessSettings.bOverride_WhiteTemp">
            <summary>first all bOverride_... as they get grouped together into bitfields</summary>
        </member>
        <member name="P:UnrealEngine.FPostProcessSettings.bOverride_ColorSaturation">
            <summary>Color Correction controls</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.ColorSaturation">
            <summary>Color Correction controls</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.SceneColorTint">
            <summary>Scene tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.SceneFringeIntensity">
            <summary>in percent, Scene chromatic aberration / color fringe (camera imperfection) to simulate an artifact that happens in real-world lens, mostly visible in the image corners.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.BloomIntensity">
            <summary>Multiplier for all bloom contributions >=0: off, 1(default), >1 brighter</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.BloomThreshold">
            <summary>
            minimum brightness the bloom starts having effect
            -1:all pixels affect bloom equally (physically correct, faster as a threshold pass is omitted), 0:all pixels affect bloom brights more, 1(default), >1 brighter
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.BloomSizeScale">
            <summary>Scale for all bloom sizes</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom1Size">
            <summary>
            Diameter size for the Bloom1 in percent of the screen width
            (is done in 1/2 resolution, larger values cost more performance, good for high frequency details)
            >=0: can be clamped because of shader limitations
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom2Size">
            <summary>
            Diameter size for Bloom2 in percent of the screen width
            (is done in 1/4 resolution, larger values cost more performance)
            >=0: can be clamped because of shader limitations
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom3Size">
            <summary>
            Diameter size for Bloom3 in percent of the screen width
            (is done in 1/8 resolution, larger values cost more performance)
            >=0: can be clamped because of shader limitations
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom4Size">
            <summary>
            Diameter size for Bloom4 in percent of the screen width
            (is done in 1/16 resolution, larger values cost more performance, best for wide contributions)
            >=0: can be clamped because of shader limitations
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom5Size">
            <summary>
            Diameter size for Bloom5 in percent of the screen width
            (is done in 1/32 resolution, larger values cost more performance, best for wide contributions)
            >=0: can be clamped because of shader limitations
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom6Size">
            <summary>
            Diameter size for Bloom6 in percent of the screen width
            (is done in 1/64 resolution, larger values cost more performance, best for wide contributions)
            >=0: can be clamped because of shader limitations
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom1Tint">
            <summary>Bloom1 tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom2Tint">
            <summary>Bloom2 tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom3Tint">
            <summary>Bloom3 tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom4Tint">
            <summary>Bloom4 tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom5Tint">
            <summary>Bloom5 tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.Bloom6Tint">
            <summary>Bloom6 tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.BloomDirtMaskIntensity">
            <summary>BloomDirtMask intensity</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.BloomDirtMaskTint">
            <summary>BloomDirtMask tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientCubemapTint">
            <summary>Texture that defines the dirt on the camera lens where the light of very bright objects is scattered.</summary>
            <summary>AmbientCubemap tint color</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientCubemapIntensity">
            <summary>
            To scale the Ambient cubemap brightness
            >=0: off, 1(default), >1 brighter
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AutoExposureMethod">
            <summary>The Ambient cubemap (Affects diffuse and specular shading), blends additively which if different from all other settings here</summary>
            <summary>Luminance computation method</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FPostProcessSettings.AutoExposureLowPercent" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FPostProcessSettings.AutoExposureHighPercent" -->
        <member name="F:UnrealEngine.FPostProcessSettings.AutoExposureMinBrightness">
            <summary>
            A good value should be positive near 0. This is the minimum brightness the auto exposure can adapt to.
            It should be tweaked in a dark lighting situation (too small: image appears too bright, too large: image appears too dark).
            Note: Tweaking emissive materials and lights or tweaking auto exposure can look the same. Tweaking auto exposure has global
            effect and defined the HDR range - you don't want to change that late in the project development.
            Eye Adaptation is disabled if MinBrightness = MaxBrightness
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AutoExposureMaxBrightness">
            <summary>
            A good value should be positive (2 is a good value). This is the maximum brightness the auto exposure can adapt to.
            It should be tweaked in a bright lighting situation (too small: image appears too bright, too large: image appears too dark).
            Note: Tweaking emissive materials and lights or tweaking auto exposure can look the same. Tweaking auto exposure has global
            effect and defined the HDR range - you don't want to change that late in the project development.
            Eye Adaptation is disabled if MinBrightness = MaxBrightness
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AutoExposureSpeedUp">
            <summary>>0</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AutoExposureSpeedDown">
            <summary>>0</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AutoExposureBias">
            <summary>
            Logarithmic adjustment for the exposure. Only used if a tonemapper is specified.
            0: no adjustment, -1:2x darker, -2:4x darker, 1:2x brighter, 2:4x brighter, ...
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.HistogramLogMin">
            <summary>temporary exposed until we found good values, -8: 1/256, -10: 1/1024</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.HistogramLogMax">
            <summary>temporary exposed until we found good values 4: 16, 8: 256</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LensFlareIntensity">
            <summary>Brightness scale of the image cased lens flares (linear)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LensFlareTint">
            <summary>Tint color for the image based lens flares.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LensFlareBokehSize">
            <summary>Size of the Lens Blur (in percent of the view width) that is done with the Bokeh texture (note: performance cost is radius*radius)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LensFlareThreshold">
            <summary>Minimum brightness the lens flare starts having effect (this should be as high as possible to avoid the performance cost of blurring content that is too dark too see)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LensFlareTints">
            <summary>Defines the shape of the Bokeh when the image base lens flares are blurred, cannot be blended</summary>
            <summary>RGB defines the lens flare color, A it's position. This is a temporary solution.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.VignetteIntensity">
            <summary>0..1 0=off/no vignette .. 1=strong vignette</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.GrainJitter">
            <summary>0..1 grain jitter</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.GrainIntensity">
            <summary>0..1 grain intensity</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionIntensity">
            <summary>0..1 0=off/no ambient occlusion .. 1=strong ambient occlusion, defines how much it affects the non direct lighting after base pass</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionStaticFraction">
            <summary>0..1 0=no effect on static lighting .. 1=AO affects the stat lighting, 0 is free meaning no extra rendering pass</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionRadius">
            <summary>>0, in unreal units, bigger values means even distant surfaces affect the ambient occlusion</summary>
        </member>
        <member name="P:UnrealEngine.FPostProcessSettings.AmbientOcclusionRadiusInWS">
            <summary>true: AO radius is in world space units, false: AO radius is locked the view space in 400 units</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionFadeDistance">
            <summary>>0, in unreal units, at what distance the AO effect disppears in the distance (avoding artifacts and AO effects on huge object)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionFadeRadius">
            <summary>>0, in unreal units, how many units before AmbientOcclusionFadeOutDistance it starts fading out</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionDistance">
            <summary>>0, in unreal units, how wide the ambient occlusion effect should affect the geometry (in depth), will be removed - only used for non normal method which is not exposed</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionPower">
            <summary>>0, in unreal units, bigger values means even distant surfaces affect the ambient occlusion</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionBias">
            <summary>>0, in unreal units, default (3.0) works well for flat surfaces but can reduce details</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionQuality">
            <summary>0=lowest quality..100=maximum quality, only a few quality levels are implemented, no soft transition</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionMipBlend">
            <summary>Affects the blend over the multiple mips (lower resolution versions) , 0:fully use full resolution, 1::fully use low resolution, around 0.6 seems to be a good value</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionMipScale">
            <summary>Affects the radius AO radius scale over the multiple mips (lower resolution versions)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.AmbientOcclusionMipThreshold">
            <summary>to tweak the bilateral upsampling when using multiple mips (lower resolution versions)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.IndirectLightingColor">
            <summary>Adjusts indirect lighting color. (1,1,1) is default. (0,0,0) to disable GI. The show flag 'Global Illumination' must be enabled to use this property.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.IndirectLightingIntensity">
            <summary>Scales the indirect lighting contribution. A value of 0 disables GI. Default is 1. The show flag 'Global Illumination' must be enabled to use this property.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.ColorGradingIntensity">
            <summary>Color grading lookup table intensity. 0 = no intensity, 1=full intensity</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldMethod">
            <summary>Look up table texture to use or none of not used</summary>
            <summary>BokehDOF, Simple gaussian, ... Mobile supports Gaussian only.</summary>
        </member>
        <member name="P:UnrealEngine.FPostProcessSettings.bMobileHQGaussian">
            <summary>Enable HQ Gaussian on high end mobile platforms. (ES3_1)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldFstop">
            <summary>CircleDOF only: Defines the opening of the camera lens, Aperture is 1/fstop, typical lens go down to f/1.2 (large opening), larger numbers reduce the DOF effect</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldSensorWidth">
            <summary>Width of the camera sensor to assume, in mm.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldFocalDistance">
            <summary>Distance in which the Depth of Field effect should be sharp, in unreal units (cm)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldDepthBlurAmount">
            <summary>CircleDOF only: Depth blur km for 50%</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldDepthBlurRadius">
            <summary>CircleDOF only: Depth blur radius in pixels at 1920x</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldFocalRegion">
            <summary>Artificial region where all content is in focus, starting after DepthOfFieldFocalDistance, in unreal units  (cm)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldNearTransitionRegion">
            <summary>To define the width of the transition region next to the focal region on the near side (cm)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldFarTransitionRegion">
            <summary>To define the width of the transition region next to the focal region on the near side (cm)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldScale">
            <summary>
            SM5: BokehDOF only: To amplify the depth of field effect (like aperture)  0=off
                      ES2: Used to blend DoF. 0=off
            </summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldMaxBokehSize">
            <summary>BokehDOF only: Maximum size of the Depth of Field blur (in percent of the view width) (note: performance cost scales with size*size)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldNearBlurSize">
            <summary>Gaussian only: Maximum size of the Depth of Field blur (in percent of the view width) (note: performance cost scales with size)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldFarBlurSize">
            <summary>Gaussian only: Maximum size of the Depth of Field blur (in percent of the view width) (note: performance cost scales with size)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldOcclusion">
            <summary>Defines the shape of the Bokeh when object get out of focus, cannot be blended</summary>
            <summary>Occlusion tweak factor 1 (0.18 to get natural occlusion, 0.4 to solve layer color leaking issues)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldColorThreshold">
            <summary>Color threshold to do full quality DOF (BokehDOF only)</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldSizeThreshold">
            <summary>Size threshold to do full quality DOF (BokehDOF only)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FPostProcessSettings.DepthOfFieldSkyFocusDistance" -->
        <member name="F:UnrealEngine.FPostProcessSettings.DepthOfFieldVignetteSize">
            <summary>Artificial circular mask to (near) blur content outside the radius, only for GaussianDOF, diameter in percent of screen width, costs performance if the mask is used, keep Feather can Radius on default to keep it off</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.MotionBlurAmount">
            <summary>Strength of motion blur, 0:off, should be renamed to intensity</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.MotionBlurMax">
            <summary>max distortion caused by motion blur, in percent of the screen width, 0:off</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.MotionBlurPerObjectSize">
            <summary>The minimum projected screen radius for a primitive to be drawn in the velocity pass, percentage of screen width. smaller numbers cause more draw calls, default: 4%</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVIntensity">
            <summary>How strong the dynamic GI from the LPV should be. 0.0 is off, 1.0 is the "normal" value, but higher values can be used to boost the effect</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVVplInjectionBias">
            <summary>Bias applied to light injected into the LPV in cell units. Increase to reduce bleeding through thin walls</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVSize">
            <summary>The size of the LPV volume, in Unreal units</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVSecondaryOcclusionIntensity">
            <summary>Secondary occlusion strength (bounce light shadows). Set to 0 to disable</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVSecondaryBounceIntensity">
            <summary>Secondary bounce light strength (bounce light shadows). Set to 0 to disable</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVGeometryVolumeBias">
            <summary>Bias applied to the geometry volume in cell units. Increase to reduce darkening due to secondary occlusion</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVDirectionalOcclusionIntensity">
            <summary>Controls the amount of directional occlusion. Requires LPV. Values very close to 1.0 are recommended</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVDirectionalOcclusionRadius">
            <summary>Occlusion Radius - 16 is recommended for most scenes</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVDiffuseOcclusionExponent">
            <summary>Diffuse occlusion exponent - increase for more contrast. 1 to 2 is recommended</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVSpecularOcclusionExponent">
            <summary>Specular occlusion exponent - increase for more contrast. 6 to 9 is recommended</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVDiffuseOcclusionIntensity">
            <summary>Diffuse occlusion intensity - higher values provide increased diffuse occlusion.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.LPVSpecularOcclusionIntensity">
            <summary>Specular occlusion intensity - higher values provide increased specular occlusion.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.ScreenSpaceReflectionIntensity">
            <summary>Enable/Fade/disable the Screen Space Reflection feature, in percent, avoid numbers between 0 and 1 fo consistency</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.ScreenSpaceReflectionQuality">
            <summary>0=lowest quality..100=maximum quality, only a few quality levels are implemented, no soft transition, 50 is the default for better performance.</summary>
        </member>
        <member name="F:UnrealEngine.FPostProcessSettings.ScreenSpaceReflectionMaxRoughness">
            <summary>Until what roughness we fade the screen space reflections, 0.8 works well, smaller can run faster</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FPostProcessSettings.ScreenPercentage" -->
        <member name="F:UnrealEngine.FPostProcessSettings.WeightedBlendables">
            <summary>
            Allows custom post process materials to be defined, using a MaterialInstance with the same Material as its parent to allow blending.
            For materials this needs to be the "PostProcess" domain type. This can be used for any UObject object implementing the IBlendableInterface (e.g. could be used to fade weather settings).
            </summary>
        </member>
        <member name="P:UnrealEngine.FPostProcessSettings.Blendables">
            <summary>for backwards compatibility</summary>
        </member>
        <member name="T:UnrealEngine.FPredictProjectilePathParams">
            <summary>Input parameters to PredictProjectilePath functions.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.StartLocation">
            <summary>Location of the start of the trace.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.LaunchVelocity">
            <summary>Initial launch velocity at the start of the trace.</summary>
        </member>
        <member name="P:UnrealEngine.FPredictProjectilePathParams.bTraceWithCollision">
            <summary>Whether to trace along the path looking for blocking collision and stopping at the first hit.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FPredictProjectilePathParams.ProjectileRadius" -->
        <member name="F:UnrealEngine.FPredictProjectilePathParams.MaxSimTime">
            <summary>Maximum simulation time for the virtual projectile.</summary>
        </member>
        <member name="P:UnrealEngine.FPredictProjectilePathParams.bTraceWithChannel">
            <summary>Whether or not to use TraceChannel, if tracing with collision.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.TraceChannel">
            <summary>Trace channel to use, if tracing with collision.</summary>
        </member>
        <member name="P:UnrealEngine.FPredictProjectilePathParams.ObjectTypes">
            <summary>Object type to use, if tracing with collision.</summary>
        </member>
        <member name="P:UnrealEngine.FPredictProjectilePathParams.ActorsToIgnore">
            <summary>Actors to ignore when tracing with collision.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.SimFrequency">
            <summary>Determines size of each sub-step in the simulation (chopping up MaxSimTime). Recommended between 10 to 30 depending on desired quality versus performance.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.OverrideGravityZ">
            <summary>Optional override of Gravity (if 0, uses WorldGravityZ).</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.DrawDebugType">
            <summary>Debug drawing duration option.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathParams.DrawDebugTime">
            <summary>Duration of debug lines (only relevant for DrawDebugType::Duration)</summary>
        </member>
        <member name="P:UnrealEngine.FPredictProjectilePathParams.bTraceComplex">
            <summary>Trace against complex collision (triangles rather than simple primitives) if tracing with collision.</summary>
        </member>
        <member name="T:UnrealEngine.FPredictProjectilePathPointData">
            <summary>Data about a single point in a projectile path trace.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathPointData.Location">
            <summary>Location of this point</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathPointData.Velocity">
            <summary>Velocity at this point</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathPointData.Time">
            <summary>Elapsed time at this point from the start of the trace.</summary>
        </member>
        <member name="T:UnrealEngine.FPredictProjectilePathResult">
            <summary>Container for the result of a projectile path trace (using PredictProjectilePath).</summary>
        </member>
        <member name="P:UnrealEngine.FPredictProjectilePathResult.PathData">
            <summary>Info for each point on the path.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathResult.LastTraceDestination">
            <summary>Info on the last point we tried to trace to, which may have been beyond the final hit.</summary>
        </member>
        <member name="F:UnrealEngine.FPredictProjectilePathResult.HitResult">
            <summary>Hit along the trace, if tracing with collision was enabled.</summary>
        </member>
        <member name="T:UnrealEngine.FPreviewAssetAttachContainer">
            <summary>Component which deals with attaching assets</summary>
        </member>
        <member name="T:UnrealEngine.FPreviewAttachedObjectPair">
            <summary>Preview items that are attached to the skeleton *</summary>
        </member>
        <member name="F:UnrealEngine.FPreviewAttachedObjectPair.AttachedTo">
            <summary>The name of the attach point of the Object (for example a bone or socket name)</summary>
        </member>
        <member name="T:UnrealEngine.FPreviewMeshCollectionEntry">
            <summary>An entry in a preview mesh collection</summary>
        </member>
        <member name="T:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction">
            <summary>
            Tick function that calls UPrimitiveComponent::PostPhysicsTick
            //DEPRECATED: This struct has been deprecated. Please use your own tick functions if you need something other than the primary tick function
            </summary>
        </member>
        <member name="F:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.TickGroup">
            <summary>
            Defines the minimum tick group for this tick function. These groups determine the relative order of when objects tick during a frame update.
            Given prerequisites, the tick may be delayed.
            @see ETickingGroup
            @see FTickFunction::AddPrerequisite()
            </summary>
        </member>
        <member name="F:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.EndTickGroup">
            <summary>
            Defines the tick group that this tick function must finish in. These groups determine the relative order of when objects tick during a frame update.
            @see ETickingGroup
            </summary>
        </member>
        <member name="P:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.bTickEvenWhenPaused">
            <summary>Bool indicating that this function should execute even if the game is paused. Pause ticks are very limited in capabilities. *</summary>
        </member>
        <member name="P:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.bCanEverTick">
            <summary>If false, this tick function will never be registered and will never tick. Only settable in defaults.</summary>
        </member>
        <member name="P:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.bStartWithTickEnabled">
            <summary>If true, this tick function will start enabled, but can be disabled later on.</summary>
        </member>
        <member name="P:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.bAllowTickOnDedicatedServer">
            <summary>If we allow this tick to run on a dedicated server</summary>
        </member>
        <member name="F:UnrealEngine.FPrimitiveComponentPostPhysicsTickFunction.TickInterval">
            <summary>The frequency in seconds at which this tick function will be executed.  If less than or equal to 0 then it will tick every frame</summary>
        </member>
        <member name="T:UnrealEngine.FProgressBarStyle">
            <summary>Represents the appearance of an SProgressBar</summary>
        </member>
        <member name="F:UnrealEngine.FProgressBarStyle.BackgroundImage">
            <summary>Background image to use for the progress bar</summary>
        </member>
        <member name="F:UnrealEngine.FProgressBarStyle.FillImage">
            <summary>Foreground image to use for the progress bar</summary>
        </member>
        <member name="F:UnrealEngine.FProgressBarStyle.MarqueeImage">
            <summary>Image to use for marquee mode</summary>
        </member>
        <member name="T:UnrealEngine.FPropertyPathSegment">
            <summary>A struct used for caching part of a property path.  Don't use this class directly.</summary>
        </member>
        <member name="F:UnrealEngine.FPropertyPathSegment.Name">
            <summary>The sub-component of the property path, a single value between .'s of the path</summary>
        </member>
        <member name="F:UnrealEngine.FPropertyPathSegment.ArrayIndex">
            <summary>The optional array index.</summary>
        </member>
        <member name="T:UnrealEngine.FQuat">
            <summary>
            Quaternion.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Quat.h
            </summary>
        </member>
        <member name="M:UnrealEngine.FQuat.op_Addition(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Gets the result of adding a Quaternion to this.
             This is a component-wise addition; composing quaternions should be done via multiplication.
            
             @param Q The Quaternion to add.
             @return The result of addition.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Subtraction(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Gets the result of subtracting a Quaternion to this.
             This is a component-wise subtraction; composing quaternions should be done via multiplication.
            
             @param Q The Quaternion to subtract.
             @return The result of subtraction.
        </member>
        <member name="M:UnrealEngine.FQuat.Equals(System.Object)">
             Checks whether another Quaternion is equal to this, within specified tolerance.
            
             @param Q The other Quaternion.
             @param Tolerance Error Tolerance.
             @return true if two Quaternion are equal, within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FQuat.IsIdentity">
             Checks whether this Quaternion is an Identity Quaternion.
             Assumes Quaternion tested is normalized.
            
             @return true if Quaternion is a normalized Identity Quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Multiply(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Gets the result of multiplying this by another quaternion (this * Q).
            
             Order matters when composing quaternions: C = A * B will yield a quaternion C that logically
             first applies B then A to any subsequent transformation (right first, then left).
            
             @param Q The Quaternion to multiply this by.
             @return The result of multiplication (this * Q).
        </member>
        <member name="M:UnrealEngine.FQuat.op_Multiply(UnrealEngine.FQuat,UnrealEngine.FVector)">
             Rotate a vector by this quaternion.
            
             @param V the vector to be rotated
             @return vector after rotation
             @see RotateVector()
        </member>
        <member name="M:UnrealEngine.FQuat.op_Multiply(UnrealEngine.FQuat,System.Single)">
             Get the result of scaling this quaternion.
            
             @param Scale The scaling factor.
             @return The result of scaling.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Division(UnrealEngine.FQuat,System.Single)">
             Divide this quaternion by scale.
            
             @param Scale What to divide by.
             @return new Quaternion of this after division by scale.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Equality(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Checks whether two quaternions are identical.
             This is an exact comparison per-component;see Equals() for a comparison
             that allows for a small error tolerance and flipped axes of rotation.
            
             @param Q The other quaternion.
             @return true if two quaternion are identical, otherwise false.
             @see Equals()
        </member>
        <member name="M:UnrealEngine.FQuat.op_Inequality(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Checks whether two quaternions are not identical.
            
             @param Q The other quaternion.
             @return true if two quaternion are not identical, otherwise false.
        </member>
        <member name="M:UnrealEngine.FQuat.op_BitwiseOr(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Calculates dot product of two quaternions.
            
             @param Q The other quaternions.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FQuat.MakeFromEuler(UnrealEngine.FVector)">
            Convert a vector of floating-point Euler angles (in degrees) into a Quaternion.
            
            @param Euler the Euler angles
            @return constructed FQuat
        </member>
        <member name="M:UnrealEngine.FQuat.Euler">
            Convert a Quaternion into floating-point Euler angles (in degrees). 
        </member>
        <member name="M:UnrealEngine.FQuat.Normalize(System.Single)">
             Normalize this quaternion if it is large enough.
             If it is too small, returns an identity quaternion.
            
             @param Tolerance Minimum squared length of quaternion for normalization.
        </member>
        <member name="M:UnrealEngine.FQuat.GetNormalized(System.Single)">
             Get a normalized copy of this quaternion.
             If it is too small, returns an identity quaternion.
            
             @param Tolerance Minimum squared length of quaternion for normalization.
        </member>
        <member name="M:UnrealEngine.FQuat.Size">
             Get the length of this quaternion.
            
             @return The length of this quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.SizeSquared">
             Get the length squared of this quaternion.
            
             @return The length of this quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.ToAxisAndAngle(UnrealEngine.FVector@,System.Single@)">
             get the axis and angle of rotation of this quaternion
            
             @param Axis{out] vector of axis of the quaternion
             @param Angle{out] angle of the quaternion
             @warning : assumes normalized quaternions.
        </member>
        <member name="M:UnrealEngine.FQuat.RotateVector(UnrealEngine.FVector)">
             Rotate a vector by this quaternion.
            
             @param V the vector to be rotated
             @return vector after rotation
        </member>
        <member name="M:UnrealEngine.FQuat.UnrotateVector(UnrealEngine.FVector)">
             Rotate a vector by the inverse of this quaternion.
            
             @param V the vector to be rotated
             @return vector after rotation by the inverse of this quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.Log">
            @return quaternion with W=0 and V=theta*v.
        </member>
        <member name="M:UnrealEngine.FQuat.Exp">
            @note Exp should really only be used after Log.
            Assumes a quaternion with W=0 and V=theta*v (where |v| = 1).
            Exp(q) = (sin(theta)*v, cos(theta))
        </member>
        <member name="M:UnrealEngine.FQuat.Inverse">
            @return inverse of this quaternion
        </member>
        <member name="M:UnrealEngine.FQuat.EnforceShortestArcWith(UnrealEngine.FQuat)">
            Enforce that the delta between this Quaternion and another one represents
            the shortest possible rotation angle
        </member>
        <member name="M:UnrealEngine.FQuat.GetAxisX">
            Get the forward direction (X axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetAxisY">
            Get the right direction (Y axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetAxisZ">
            Get the up direction (Z axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetForwardVector">
            Get the forward direction (X axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetRightVector">
            Get the right direction (Y axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetUpVector">
            Get the up direction (Z axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.Vector">
            Convert a rotation into a unit vector facing in its direction. Equivalent to GetForwardVector(). 
        </member>
        <member name="M:UnrealEngine.FQuat.Rotator">
            Get the FRotator representation of this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetRotationAxis">
            Get the axis of rotation of the Quaternion.
            This is the axis around which rotation occurs to transform the canonical coordinate system to the target orientation.
            For the identity Quaternion which has no such rotation, FVector(1,0,0) is returned.
        </member>
        <member name="M:UnrealEngine.FQuat.ToString">
             Get a textual representation of the vector.
            
             @return Text describing the vector.
        </member>
        <member name="T:UnrealEngine.FRandomStream">
            <summary>
            Thread-safe RNG.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\RandomStream.h
            </summary>
        </member>
        <member name="T:UnrealEngine.FRawCurveTracks">
            <summary>Raw Curve data for serialization</summary>
        </member>
        <member name="P:UnrealEngine.FRawCurveTracks.VectorCurves">
            <summary>
            @note : Currently VectorCurves are not evaluated or used for anything else but transient data for modifying bone track
                                 Note that it doesn't have UPROPERTY tag yet. In the future, we'd like this to be serialized, but not for now
            </summary>
        </member>
        <member name="P:UnrealEngine.FRawCurveTracks.TransformCurves">
            <summary>@note : TransformCurves are used to edit additive animation in editor.</summary>
        </member>
        <member name="T:UnrealEngine.FRedirector">
            <summary>
            This is used for redirecting old name to new name
            We use manually parsing array, but that makes harder to modify from property setting
            So adding this USTRUCT to support it properly
            </summary>
        </member>
        <member name="F:UnrealEngine.FRedirector.NewName">
            <summary>Types of objects that this physics objects will collide with.</summary>
        </member>
        <member name="T:UnrealEngine.FRepAttachment">
            <summary>Handles attachment replication to clients. Movement replication will not happen while AttachParent is non-nullptr</summary>
        </member>
        <member name="T:UnrealEngine.FRepMovement">
            <summary>
            Replicated movement data of our RootComponent.
            Struct used for efficient replication as velocity and location are generally replicated together (this saves a repindex)
            and velocity.Z is commonly zero (most position replications are for walking pawns).
            </summary>
        </member>
        <member name="P:UnrealEngine.FRepMovement.bSimulatedPhysicSleep">
            <summary>If set, RootComponent should be sleeping.</summary>
        </member>
        <member name="P:UnrealEngine.FRepMovement.bRepPhysics">
            <summary>If set, additional physic data (angular velocity) will be replicated.</summary>
        </member>
        <member name="T:UnrealEngine.FRepRootMotionMontage">
            <summary>Replicated data when playing a root motion montage.</summary>
        </member>
        <member name="P:UnrealEngine.FRepRootMotionMontage.bIsActive">
            <summary>Whether this has useful/active data.</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.Position">
            <summary>AnimMontage providing Root Motion</summary>
            <summary>Track position of Montage</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.Location">
            <summary>Location</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.Rotation">
            <summary>Rotation</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.MovementBaseBoneName">
            <summary>Movement Relative to Base</summary>
            <summary>Bone on the MovementBase, if a skeletal mesh.</summary>
        </member>
        <member name="P:UnrealEngine.FRepRootMotionMontage.bRelativePosition">
            <summary>Additional replicated flag, if MovementBase can't be resolved on the client. So we don't use wrong data.</summary>
        </member>
        <member name="P:UnrealEngine.FRepRootMotionMontage.bRelativeRotation">
            <summary>Whether rotation is relative or absolute.</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.AuthoritativeRootMotion">
            <summary>State of Root Motion Sources on Authority</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.Acceleration">
            <summary>Acceleration</summary>
        </member>
        <member name="F:UnrealEngine.FRepRootMotionMontage.LinearVelocity">
            <summary>Velocity</summary>
        </member>
        <member name="F:UnrealEngine.FResponseChannel.Channel">
            <summary>
            This should match DisplayName of ECollisionChannel
                Meta data of custom channels can be used as well
            </summary>
        </member>
        <member name="T:UnrealEngine.FReverbSettings">
            <summary>Struct encapsulating settings for reverb effects.</summary>
        </member>
        <member name="P:UnrealEngine.FReverbSettings.bApplyReverb">
            <summary>Whether to apply the reverb settings below.</summary>
        </member>
        <member name="F:UnrealEngine.FReverbSettings.ReverbType">
            <summary>The reverb preset to employ.</summary>
        </member>
        <member name="F:UnrealEngine.FReverbSettings.Volume">
            <summary>The reverb asset to employ.</summary>
            <summary>Volume level of the reverb affect.</summary>
        </member>
        <member name="F:UnrealEngine.FReverbSettings.FadeTime">
            <summary>Time to fade from the current reverb settings into this setting, in seconds.</summary>
        </member>
        <member name="T:UnrealEngine.FRichCurve">
            <summary>A rich, editable float curve</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurve.PreInfinityExtrap">
            <summary>Pre-infinity extrapolation state</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurve.PostInfinityExtrap">
            <summary>Post-infinity extrapolation state</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurve.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="P:UnrealEngine.FRichCurve.Keys">
            <summary>Sorted array of keys</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurve.KeyHandlesToIndices">
            <summary>Map of which key handles go to which indices.</summary>
        </member>
        <member name="T:UnrealEngine.FRichCurveKey">
            <summary>One key in a rich, editable float curve</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.InterpMode">
            <summary>Interpolation mode between this key and the next</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.TangentMode">
            <summary>Mode for tangents at this key</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.TangentWeightMode">
            <summary>If either tangent at this key is 'weighted'</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.Time">
            <summary>Time at this key</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.Value">
            <summary>Value at this key</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.ArriveTangent">
            <summary>If RCIM_Cubic, the arriving tangent at this key</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.ArriveTangentWeight">
            <summary>If RCTWM_WeightedArrive or RCTWM_WeightedBoth, the weight of the left tangent</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.LeaveTangent">
            <summary>If RCIM_Cubic, the leaving tangent at this key</summary>
        </member>
        <member name="F:UnrealEngine.FRichCurveKey.LeaveTangentWeight">
            <summary>If RCTWM_WeightedLeave or RCTWM_WeightedBoth, the weight of the right tangent</summary>
        </member>
        <member name="P:UnrealEngine.FRigConfiguration.BoneMappingTable">
            <summary>@todo in the future we can make this to be run-time data</summary>
        </member>
        <member name="T:UnrealEngine.FRigidBodyErrorCorrection">
            <summary>Rigid body error correction data</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.LinearDeltaThresholdSq">
            <summary>max squared position difference to perform velocity adjustment</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.LinearInterpAlpha">
            <summary>strength of snapping to desired linear velocity</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.LinearRecipFixTime">
            <summary>inverted duration after which linear velocity adjustment will fix error</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.AngularDeltaThreshold">
            <summary>max squared angle difference (in radians) to perform velocity adjustment</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.AngularInterpAlpha">
            <summary>strength of snapping to desired angular velocity</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.AngularRecipFixTime">
            <summary>inverted duration after which angular velocity adjustment will fix error</summary>
        </member>
        <member name="F:UnrealEngine.FRigidBodyErrorCorrection.BodySpeedThresholdSq">
            <summary>min squared body speed to perform velocity adjustment</summary>
        </member>
        <member name="F:UnrealEngine.FRigTransformConstraint.TranformType">
            <summary>EditAnywhere, Category="FTransformBaseConstraint"</summary>
        </member>
        <member name="F:UnrealEngine.FRigTransformConstraint.ParentSpace">
            <summary>Parent space that are define *</summary>
        </member>
        <member name="F:UnrealEngine.FRigTransformConstraint.Weight">
            <summary>EditAnywhere, Category="FTransformBaseConstraint"</summary>
        </member>
        <member name="T:UnrealEngine.FRootMotionMovementParams">
            <summary>Utility struct to accumulate root motion.</summary>
        </member>
        <member name="T:UnrealEngine.FRootMotionSourceGroup">
            <summary>Group of Root Motion Sources that are applied</summary>
        </member>
        <member name="P:UnrealEngine.FRootMotionSourceGroup.bHasAdditiveSources">
            <summary>Whether this group has additive root motion sources</summary>
        </member>
        <member name="P:UnrealEngine.FRootMotionSourceGroup.bHasOverrideSources">
            <summary>Whether this group has override root motion sources</summary>
        </member>
        <member name="F:UnrealEngine.FRootMotionSourceGroup.LastPreAdditiveVelocity">
            <summary>
            Saved off pre-additive-applied Velocity, used for being able to reliably add/remove additive
            velocity from currently computed Velocity (otherwise we would be removing additive velocity
            that no longer exists, like if you run into a wall and your Velocity becomes 0 - subtracting
            the velocity that we added heading into the wall last tick would make you go backwards. With
            this method we override that resulting Velocity due to obstructions
            </summary>
        </member>
        <member name="P:UnrealEngine.FRootMotionSourceGroup.bIsAdditiveVelocityApplied">
            <summary>
            True when we had additive velocity applied last tick, checked to know if we should restore
            LastPreAdditiveVelocity before a Velocity computation
            </summary>
        </member>
        <member name="F:UnrealEngine.FRootMotionSourceGroup.LastAccumulatedSettings">
            <summary>Aggregate Settings of the last group of accumulated sources</summary>
        </member>
        <member name="T:UnrealEngine.FRootMotionSourceSettings">
            <summary>
            Structure for RootMotionSource option flags
            (used for convenience instead of having to manually manipulate flag bitfields)
            </summary>
        </member>
        <member name="T:UnrealEngine.FROscillator">
            <summary>Defines FRotator oscillation.</summary>
        </member>
        <member name="F:UnrealEngine.FROscillator.Pitch">
            <summary>Pitch oscillation.</summary>
        </member>
        <member name="F:UnrealEngine.FROscillator.Yaw">
            <summary>Yaw oscillation.</summary>
        </member>
        <member name="F:UnrealEngine.FROscillator.Roll">
            <summary>Roll oscillation.</summary>
        </member>
        <member name="T:UnrealEngine.FRotator">
            <summary>
            An orthogonal rotation in 3d space.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Rotator.h
            </summary>
        </member>
        <member name="F:UnrealEngine.FRotator.Pitch">
            <summary>Pitch (degrees) around Y axis</summary>
        </member>
        <member name="F:UnrealEngine.FRotator.Yaw">
            <summary>Yaw (degrees) around Z axis</summary>
        </member>
        <member name="F:UnrealEngine.FRotator.Roll">
            <summary>Roll (degrees) around X axis</summary>
        </member>
        <member name="M:UnrealEngine.FRotator.#ctor(System.Single)">
             Constructor
            
             @param InF Value to set all components to.
        </member>
        <member name="M:UnrealEngine.FRotator.#ctor(System.Single,System.Single,System.Single)">
             Constructor.
            
             @param InPitch Pitch in degrees.
             @param InYaw Yaw in degrees.
             @param InRoll Roll in degrees.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Addition(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Get the result of adding a rotator to this.
            
             @param R The other rotator.
             @return The result of adding a rotator to this.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Subtraction(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Get the result of subtracting a rotator from this.
            
             @param R The other rotator.
             @return The result of subtracting a rotator from this.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Multiply(UnrealEngine.FRotator,System.Single)">
             Get the result of scaling this rotator.
            
             @param Scale The scaling factor.
             @return The result of scaling.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Equality(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Checks whether two rotators are identical. This checks each component for exact equality.
            
             @param R The other rotator.
             @return true if two rotators are identical, otherwise false.
             @see Equals()
        </member>
        <member name="M:UnrealEngine.FRotator.op_Inequality(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Checks whether two rotators are different.
            
             @param V The other rotator.
             @return true if two rotators are different, otherwise false.
        </member>
        <member name="M:UnrealEngine.FRotator.Add(System.Single,System.Single,System.Single)">
             Adds to each component of the rotator.
            
             @param DeltaPitch Change in pitch. (+/-)
             @param DeltaYaw Change in yaw. (+/-)
             @param DeltaRoll Change in roll. (+/-)
             @return Copy of rotator after addition.
        </member>
        <member name="M:UnrealEngine.FRotator.GetInverse">
            Returns the inverse of the rotator.
        </member>
        <member name="M:UnrealEngine.FRotator.Vector">
             Convert a rotation into a unit vector facing in its direction.
            
             @return Rotation as a unit direction vector.
        </member>
        <member name="M:UnrealEngine.FRotator.Quaternion">
             Get Rotation as a quaternion.
            
             @return Rotation as a quaternion.
        </member>
        <member name="M:UnrealEngine.FRotator.Euler">
             Convert a Rotator into floating-point Euler angles (in degrees). Rotator now stored in degrees.
            
             @return Rotation as a Euler angle vector.
        </member>
        <member name="M:UnrealEngine.FRotator.RotateVector(UnrealEngine.FVector)">
             Rotate a vector rotated by this rotator.
            
             @param V The vector to rotate.
             @return The rotated vector.
        </member>
        <member name="M:UnrealEngine.FRotator.UnrotateVector(UnrealEngine.FVector)">
             Returns the vector rotated by the inverse of this rotator.
            
             @param V The vector to rotate.
             @return The rotated vector.
        </member>
        <member name="M:UnrealEngine.FRotator.Clamp">
             Gets the rotation values so they fall within the range [0,360]
            
             @return Clamped version of rotator.
        </member>
        <member name="M:UnrealEngine.FRotator.GetNormalized">
             Create a copy of this rotator and normalize, removes all winding and creates the "shortest route" rotation. 
            
             @return Normalized copy of this rotator
        </member>
        <member name="M:UnrealEngine.FRotator.GetDenormalized">
             Create a copy of this rotator and denormalize, clamping each axis to 0 - 360. 
            
             @return Denormalized copy of this rotator
        </member>
        <member name="M:UnrealEngine.FRotator.Normalize">
            In-place normalize, removes all winding and creates the "shortest route" rotation.
        </member>
        <member name="M:UnrealEngine.FRotator.ClampAxis(System.Single)">
             Clamps an angle to the range of [0, 360).
            
             @param Angle The angle to clamp.
             @return The clamped angle.
        </member>
        <member name="M:UnrealEngine.FRotator.NormalizeAxis(System.Single)">
             Clamps an angle to the range of (-180, 180].
            
             @param Angle The Angle to clamp.
             @return The clamped angle.
        </member>
        <member name="M:UnrealEngine.FRotator.MakeFromEuler(UnrealEngine.FVector)">
             Convert a vector of floating-point Euler angles (in degrees) into a Rotator. Rotator now stored in degrees
            
             @param Euler Euler angle vector.
             @return A rotator from a Euler angle.
        </member>
        <member name="F:UnrealEngine.FScalarMaterialInput.OutputIndex">
            <summary>Material expression that this input is connected to, or NULL if not connected.</summary>
            <summary>Index into Expression's outputs array that this input is connected to.</summary>
        </member>
        <member name="F:UnrealEngine.FScalarMaterialInput.InputName">
            <summary>
            Optional name of the input.
            Note that this is the only member which is not derived from the output currently connected.
            </summary>
        </member>
        <member name="F:UnrealEngine.FScalarMaterialInput.ExpressionName">
            <summary>Material expression name that this input is connected to, or None if not connected. Used only in cooked builds</summary>
        </member>
        <member name="T:UnrealEngine.FScalarParameterNameAndCurve">
            <summary>Structure representing an animated scalar parameter and it's associated animation curve.</summary>
        </member>
        <member name="F:UnrealEngine.FScalarParameterNameAndCurve.ParameterName">
            <summary>The name of the scalar parameter which is being animated.</summary>
        </member>
        <member name="F:UnrealEngine.FScalarParameterNameAndCurve.ParameterCurve">
            <summary>The curve which contains the animation data for the scalar parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FScalarParameterValue">
            <summary>Editable scalar parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FScrollBarStyle">
            <summary>Represents the appearance of an SScrollBar</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.HorizontalBackgroundImage">
            <summary>Background image to use when the scrollbar is oriented horizontally</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.VerticalBackgroundImage">
            <summary>Background image to use when the scrollbar is oriented vertically</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.VerticalTopSlotImage">
            <summary>The image to use to represent the track above the thumb when the scrollbar is oriented vertically</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.HorizontalTopSlotImage">
            <summary>The image to use to represent the track above the thumb when the scrollbar is oriented horizontally</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.VerticalBottomSlotImage">
            <summary>The image to use to represent the track below the thumb when the scrollbar is oriented vertically</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.HorizontalBottomSlotImage">
            <summary>The image to use to represent the track below the thumb when the scrollbar is oriented horizontally</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.NormalThumbImage">
            <summary>Image to use when the scrollbar thumb is in its normal state</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.HoveredThumbImage">
            <summary>Image to use when the scrollbar thumb is in its hovered state</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBarStyle.DraggedThumbImage">
            <summary>Image to use when the scrollbar thumb is in its dragged state</summary>
        </member>
        <member name="T:UnrealEngine.FScrollBoxStyle">
            <summary>Represents the appearance of an SScrollBox</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBoxStyle.TopShadowBrush">
            <summary>Brush used to draw the top shadow of a scrollbox</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBoxStyle.BottomShadowBrush">
            <summary>Brush used to draw the bottom shadow of a scrollbox</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBoxStyle.LeftShadowBrush">
            <summary>Brush used to draw the left shadow of a scrollbox</summary>
        </member>
        <member name="F:UnrealEngine.FScrollBoxStyle.RightShadowBrush">
            <summary>Brush used to draw the right shadow of a scrollbox</summary>
        </member>
        <member name="T:UnrealEngine.FShapedTextOptions">
            <summary>
            Common data for all widgets that use shaped text.
            Contains the common options that should be exposed for the underlying Slate widget.
            </summary>
        </member>
        <member name="F:UnrealEngine.FSimpleMemberReference.MemberName">
            <summary>
            Most often the Class that this member is defined in. Could be a UPackage
            if it is a native delegate signature function (declared globally).
            </summary>
            <summary>Name of the member</summary>
        </member>
        <member name="F:UnrealEngine.FSimpleMemberReference.MemberGuid">
            <summary>The Guid of the member</summary>
        </member>
        <member name="F:UnrealEngine.FSimulatedRootMotionReplicatedMove.Time">
            <summary>Local time when move was received on client and saved.</summary>
        </member>
        <member name="F:UnrealEngine.FSimulatedRootMotionReplicatedMove.RootMotion">
            <summary>Root Motion information</summary>
        </member>
        <member name="P:UnrealEngine.FSingleAnimationPlayData.bSavedLooping">
            <summary>
            @todo in the future, we should make this one UObject
            and have detail customization to display different things
            The default sequence to play on this skeletal mesh
            </summary>
            <summary>Default setting for looping for SequenceToPlay. This is not current state of looping.</summary>
        </member>
        <member name="P:UnrealEngine.FSingleAnimationPlayData.bSavedPlaying">
            <summary>Default setting for playing for SequenceToPlay. This is not current state of playing.</summary>
        </member>
        <member name="F:UnrealEngine.FSingleAnimationPlayData.SavedPosition">
            <summary>Default setting for position of SequenceToPlay to play.</summary>
        </member>
        <member name="F:UnrealEngine.FSingleAnimationPlayData.SavedPlayRate">
            <summary>Default setting for play rate of SequenceToPlay to play.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMaterial.MaterialSlotName">
            <summary>This name should be use by the gameplay to avoid error if the skeletal mesh Materials array topology change</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMaterial.ImportedMaterialSlotName">
            <summary>This name should be use when we re-import a skeletal mesh so we can order the Materials array like it should be</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMaterial.UVChannelData">
            <summary>Data used for texture streaming relative to each UV channels.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshLODGroupSettings.ScreenSize">
            <summary>The screen sizes to use for the respective LOD level</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshLODGroupSettings.OptimizationSettings">
            <summary>The optimization settings to use for the respective LOD level</summary>
        </member>
        <member name="T:UnrealEngine.FSkeletalMeshLODInfo">
            <summary>Struct containing information for a particular LOD level, such as materials and info for when to use it.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshLODInfo.ScreenSize">
            <summary>
            ScreenSize to display this LOD.
            The screen size is based around the projected diameter of the bounding
            sphere of the model. i.e. 0.5 means half the screen's maximum dimension.
            </summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshLODInfo.LODHysteresis">
            <summary>Used to avoid 'flickering' when on LOD boundary. Only taken into account when moving from complex->simple.</summary>
        </member>
        <member name="P:UnrealEngine.FSkeletalMeshLODInfo.LODMaterialMap">
            <summary>Mapping table from this LOD's materials to the USkeletalMesh materials array.</summary>
        </member>
        <member name="P:UnrealEngine.FSkeletalMeshLODInfo.bEnableShadowCasting">
            <summary>Per-section control over whether to enable shadow casting.</summary>
        </member>
        <member name="P:UnrealEngine.FSkeletalMeshLODInfo.bHasBeenSimplified">
            <summary>Whether to disable morph targets for this LOD.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshLODInfo.ReductionSettings">
            <summary>Reduction settings to apply when building render data.</summary>
        </member>
        <member name="P:UnrealEngine.FSkeletalMeshLODInfo.RemovedBones">
            <summary>This has been removed in editor. We could re-apply this in import time or by mesh reduction utilities</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshLODInfo.SourceImportFilename">
            <summary>The filename of the file tha was used to import this LOD if it was not auto generated.</summary>
        </member>
        <member name="T:UnrealEngine.FSkeletalMeshOptimizationSettings">
            <summary>FSkeletalMeshOptimizationSettings - The settings used to optimize a skeletal mesh LOD.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.ReductionMethod">
            <summary>The method to use when optimizing the skeletal mesh LOD</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.NumOfTrianglesPercentage">
            <summary>If ReductionMethod equals SMOT_NumOfTriangles this value is the ratio of triangles [0-1] to remove from the mesh</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.MaxDeviationPercentage">
            <summary>If ReductionMethod equals SMOT_MaxDeviation this value is the maximum deviation from the base mesh as a percentage of the bounding sphere.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.WeldingThreshold">
            <summary>The welding threshold distance. Vertices under this distance will be welded.</summary>
        </member>
        <member name="P:UnrealEngine.FSkeletalMeshOptimizationSettings.bRecalcNormals">
            <summary>Whether Normal smoothing groups should be preserved. If false then NormalsThreshold is used *</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.NormalsThreshold">
            <summary>
            If the angle between two triangles are above this value, the normals will not be
                  smooth over the edge between those two triangles. Set in degrees. This is only used when PreserveNormals is set to false
            </summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.SilhouetteImportance">
            <summary>How important the shape of the geometry is.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.TextureImportance">
            <summary>How important texture density is.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.ShadingImportance">
            <summary>How important shading quality is.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.SkinningImportance">
            <summary>How important skinning quality is.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.BoneReductionRatio">
            <summary>The ratio of bones that will be removed from the mesh</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.MaxBonesPerVertex">
            <summary>Maximum number of bones that can be assigned to each vertex.</summary>
        </member>
        <member name="F:UnrealEngine.FSkeletalMeshOptimizationSettings.BaseLOD">
            <summary>Maximum number of bones that can be assigned to each vertex.</summary>
        </member>
        <member name="T:UnrealEngine.FSkeletonToMeshLinkup">
            <summary>This is a mapping table between bone in a particular skeletal mesh and bone of this skeleton set.</summary>
        </member>
        <member name="P:UnrealEngine.FSkeletonToMeshLinkup.SkeletonToMeshTable">
            <summary>
            Mapping table. Size must be same as size of bone tree (not Mesh Ref Pose).
            No index should be more than the number of bones in this skeleton
            -1 indicates no match for this bone - will be ignored.
            </summary>
        </member>
        <member name="P:UnrealEngine.FSkeletonToMeshLinkup.MeshToSkeletonTable">
            <summary>
            Mapping table. Size must be same as size of ref pose (not bone tree).
            No index should be more than the number of bones in this skeletalmesh
            -1 indicates no match for this bone - will be ignored.
            </summary>
        </member>
        <member name="T:UnrealEngine.FSkelMeshComponentLODInfo">
            <summary>LOD specific setup for the skeletal mesh component.</summary>
        </member>
        <member name="P:UnrealEngine.FSkelMeshComponentLODInfo.HiddenMaterials">
            <summary>Material corresponds to section. To show/hide each section, use this.</summary>
        </member>
        <member name="T:UnrealEngine.FSlateBrush">
            <summary>An brush which contains information about how to draw a Slate element</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.ImageSize">
            <summary>Size of the resource in Slate Units</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.DrawAs">
            <summary>How to draw the image</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.Margin">
            <summary>The margin to use in Box and Border modes</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.Tint">
            <summary>Tinting applied to the image.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.TintColor">
            <summary>Tinting applied to the image.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.Tiling">
            <summary>How to tile the image in Image mode</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.Mirroring">
            <summary>
            How to mirror the image in Image mode.  This is normally only used for dynamic image brushes where the source texture
                      comes from a hardware device such as a web camera.
            </summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.ImageType">
            <summary>The type of image</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.ResourceName">
            <summary>
            The image to render for this brush, can be a UTexture or UMaterialInterface or an object implementing
            the AtlasedTextureInterface.
            </summary>
            <summary>The name of the rendering resource to use</summary>
        </member>
        <member name="P:UnrealEngine.FSlateBrush.bIsDynamicallyLoaded">
            <summary>Whether or not the brush path is a path to a UObject</summary>
        </member>
        <member name="P:UnrealEngine.FSlateBrush.bHasUObject">
            <summary>Whether or not the brush has a UTexture resource</summary>
        </member>
        <member name="F:UnrealEngine.FSlateBrush.UVRegion">
            <summary>
            Optional UV region for an image
            When valid - overrides UV region specified in resource proxy
            </summary>
        </member>
        <member name="T:UnrealEngine.FSlateChildSize">
            <summary>A struct exposing size param related properties to UMG.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateChildSize.Value">
            <summary>The parameter of the size rule.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateChildSize.SizeRule">
            <summary>The sizing rule of the content.</summary>
        </member>
        <member name="T:UnrealEngine.FSlateColor">
            <summary>A Slate color can be a directly specified value, or the color can be pulled from a WidgetStyle.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateColor.SpecifiedColor">
            <summary>The current specified color; only meaningful when ColorToUse == UseColor_Specified.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateColor.ColorUseRule">
            <summary>The rule for which color to pick.</summary>
        </member>
        <member name="T:UnrealEngine.FSlateFontInfo">
            <summary>A representation of a font in Slate.</summary>
        </member>
        <member name="F:UnrealEngine.FSlateFontInfo.OutlineSettings">
            <summary>The font object (valid when used from UMG or a Slate widget style asset)</summary>
            <summary>The material to use when rendering this font</summary>
            <summary>Settings for applying an outline to a font</summary>
        </member>
        <member name="F:UnrealEngine.FSlateFontInfo.TypefaceFontName">
            <summary>The name of the font to use from the default typeface (None will use the first entry)</summary>
        </member>
        <member name="F:UnrealEngine.FSlateFontInfo.Size">
            <summary>The size of the font</summary>
        </member>
        <member name="F:UnrealEngine.FSlateFontInfo.FontName">
            <summary>The name of the font</summary>
        </member>
        <member name="T:UnrealEngine.FSlateSound">
            <summary>An intermediary to make UBaseSound available for Slate to play sounds</summary>
        </member>
        <member name="T:UnrealEngine.FSliderStyle">
            <summary>Represents the appearance of an SSlider</summary>
        </member>
        <member name="F:UnrealEngine.FSliderStyle.NormalBarImage">
            <summary>Image to use when the slider bar is in its normal state</summary>
        </member>
        <member name="F:UnrealEngine.FSliderStyle.DisabledBarImage">
            <summary>Image to use when the slider bar is in its disabled state</summary>
        </member>
        <member name="F:UnrealEngine.FSliderStyle.NormalThumbImage">
            <summary>Image to use when the slider thumb is in its normal state</summary>
        </member>
        <member name="F:UnrealEngine.FSliderStyle.DisabledThumbImage">
            <summary>Image to use when the slider thumb is in its disabled state</summary>
        </member>
        <member name="T:UnrealEngine.FSlotAnimationTrack">
            <summary>
            Each slot data referenced by Animation Slot
            contains slot name, and animation data
            </summary>
        </member>
        <member name="F:UnrealEngine.FSmartName.DisplayName">
            <summary>name</summary>
        </member>
        <member name="T:UnrealEngine.FSoundAttenuationSettings">
            <summary>The settings for attenuating.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundAttenuationSettings.bAttenuate">
            <summary>Enable attenuation via volume.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundAttenuationSettings.bSpatialize">
            <summary>Enable the source to be positioned in 3D.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundAttenuationSettings.bAttenuateWithLPF">
            <summary>Enable attenuation via low pass filter.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundAttenuationSettings.bEnableListenerFocus">
            <summary>Whether or not listener-focus calculations are enabled for this attenuation.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundAttenuationSettings.bEnableOcclusion">
            <summary>Whether or not to enable line-of-sight occlusion checking for the sound that plays in this audio component.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundAttenuationSettings.bUseComplexCollisionForOcclusion">
            <summary>Whether or not to enable complex geometry occlusion checks.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.OmniRadius">
            <summary>At what distance we start treating the sound source as spatialized</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.StereoSpread">
            <summary>The distance between left and right stereo channels when stereo assets spatialized.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.SpatializationAlgorithm">
            <summary>Which spatialization algorithm to use if spatializing mono sources.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.LPFRadiusMin">
            <summary>The range at which to start applying a low pass filter.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.LPFRadiusMax">
            <summary>The range at which to apply the maximum amount of low pass filter.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.LPFFrequencyAtMin">
            <summary>The Frequency in hertz at which to set the LPF when the sound is at LPFRadiusMin. (defaults to bypass)</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.LPFFrequencyAtMax">
            <summary>The Frequency in hertz at which to set the LPF when the sound is at LPFRadiusMax.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.FocusAzimuth">
            <summary>Azimuth angle (in degrees) relative to the listener forward vector which defines the focus region of sounds. Sounds playing at an angle less than this will be in focus.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.NonFocusAzimuth">
            <summary>Azimuth angle (in degrees) relative to the listener forward vector which defines the non-focus region of sounds. Sounds playing at an angle greater than this will be out of focus.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.FocusDistanceScale">
            <summary>Amount to scale the distance calculation of sounds that are in-focus. Can be used to make in-focus sounds appear to be closer or further away than they actually are.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.NonFocusDistanceScale">
            <summary>Amount to scale the distance calculation of sounds that are not in-focus. Can be used to make in-focus sounds appear to be closer or further away than they actually are.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.FocusPriorityScale">
            <summary>Amount to scale the priority of sounds that are in focus. Can be used to boost the priority of sounds that are in focus.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.NonFocusPriorityScale">
            <summary>Amount to scale the priority of sounds that are not in-focus. Can be used to reduce the priority of sounds that are not in focus.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.FocusVolumeAttenuation">
            <summary>Amount to attenuate sounds that are in focus. Can be overridden at the sound-level.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.NonFocusVolumeAttenuation">
            <summary>Amount to attenuate sounds that are not in focus. Can be overridden at the sound-level.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.OcclusionTraceChannel">
            <summary>Which trace channel to use for audio occlusion checks.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.OcclusionLowPassFilterFrequency">
            <summary>The low pass filter frequency (in hertz) to apply if the sound playing in this audio component is occluded. This will override the frequency set in LowPassFilterFrequency. A frequency of 0.0 is the device sample rate and will bypass the filter.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.OcclusionVolumeAttenuation">
            <summary>The amount of volume attenuation to apply to sounds which are occluded.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.OcclusionInterpolationTime">
            <summary>The amount of time in seconds to interpolate to the target OcclusionLowPassFilterFrequency when a sound is occluded.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.ReverbWetLevelMin">
            <summary>The amount to send to master reverb when sound is ReverbDistanceMin from listener.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.ReverbWetLevelMax">
            <summary>The amount to send to master reverb when sound is at ReverbDistanceMax from listener.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.ReverbDistanceMin">
            <summary>The distance which defines the amount of reverb wet level defined in ReverbWetLevelMin.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.ReverbDistanceMax">
            <summary>The distance which defines the amount of reverb wet level defined in ReverbDistanceMax.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.AttenuationShape">
            <summary>The shape of the attenuation volume.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.dBAttenuationAtMax">
            <summary>The volume at maximum distance in deciBels.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.AttenuationShapeExtents">
            <summary>
            The dimensions to use for the attenuation shape. Interpretation of the values differ per shape.
                     Sphere  - X is Sphere Radius. Y and Z are unused
                     Capsule - X is Capsule Half Height, Y is Capsule Radius, Z is unused
                     Box     - X, Y, and Z are the Box's dimensions
                     Cone    - X is Cone Radius, Y is Cone Angle, Z is Cone Falloff Angle
            </summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.ConeOffset">
            <summary>The distance back from the sound's origin to begin the cone when using the cone attenuation shape.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundAttenuationSettings.FalloffDistance">
            <summary>The distance over which falloff occurs.</summary>
        </member>
        <member name="T:UnrealEngine.FSoundClassAdjuster">
            <summary>Elements of data for sound group volume control</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassAdjuster.VolumeAdjuster">
            <summary>The sound class this adjuster affects.</summary>
            <summary>A multiplier applied to the volume.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassAdjuster.PitchAdjuster">
            <summary>A multiplier applied to the pitch.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassAdjuster.bApplyToChildren">
            <summary>Set to true to apply this adjuster to all children of the sound class.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassAdjuster.VoiceCenterChannelVolumeAdjuster">
            <summary>A multiplier applied to VoiceCenterChannelVolume.</summary>
        </member>
        <member name="T:UnrealEngine.FSoundClassProperties">
            <summary>Structure containing configurable properties of a sound class.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.Volume">
            <summary>Volume multiplier.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.Pitch">
            <summary>Pitch multiplier.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.StereoBleed">
            <summary>The amount of stereo sounds to bleed to the rear speakers</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.LFEBleed">
            <summary>The amount of a sound to bleed to the LFE channel</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.VoiceCenterChannelVolume">
            <summary>Voice center channel volume - Not a multiplier (no propagation)</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.RadioFilterVolume">
            <summary>Volume of the radio filter effect</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.RadioFilterVolumeThreshold">
            <summary>Volume at which the radio filter kicks in</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bApplyEffects">
            <summary>Sound mix voice - whether to apply audio effects</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bAlwaysPlay">
            <summary>Whether to artificially prioritise the component to play</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bIsUISound">
            <summary>Whether or not this sound plays when the game is paused in the UI</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bIsMusic">
            <summary>Whether or not this is music (propagates only if parent is true)</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bReverb">
            <summary>Whether or not this sound class has reverb applied</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.Default2DReverbSendAmount">
            <summary>Amount of audio to send to master reverb effect for 2D sounds played with this sound class.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bCenterChannelOnly">
            <summary>Whether or not this sound class forces sounds to the center channel</summary>
        </member>
        <member name="P:UnrealEngine.FSoundClassProperties.bApplyAmbientVolumes">
            <summary>Whether the Interior/Exterior volume and LPF modifiers should be applied</summary>
        </member>
        <member name="F:UnrealEngine.FSoundClassProperties.OutputTarget">
            <summary>Which output target the sound should be played through</summary>
        </member>
        <member name="F:UnrealEngine.FSoundConcurrencySettings.MaxCount">
            <summary>The max number of allowable concurrent active voices for voices playing in this concurrency group.</summary>
        </member>
        <member name="P:UnrealEngine.FSoundConcurrencySettings.bLimitToOwner">
            <summary>Whether or not to limit the concurrency to per sound owner (i.e. the actor that plays the sound). If the sound doesn't have an owner, it falls back to global concurrency.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundConcurrencySettings.ResolutionRule">
            <summary>Which concurrency resolution policy to use if max voice count is reached.</summary>
        </member>
        <member name="F:UnrealEngine.FSoundConcurrencySettings.VolumeScale">
            <summary>
            The amount of attenuation to apply to older voice instances in this concurrency group. This reduces volume of older voices in a concurrency group as new voices play.
            AppliedVolumeScale = Math.Pow(DuckingScale, VoiceGeneration)
            </summary>
        </member>
        <member name="T:UnrealEngine.FSoundTrackKey">
            <summary>Information for one sound in the track.</summary>
        </member>
        <member name="T:UnrealEngine.FSpinBoxStyle">
            <summary>Represents the appearance of an SSpinBox</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.BackgroundBrush">
            <summary>Brush used to draw the background of the spinbox</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.HoveredBackgroundBrush">
            <summary>Brush used to draw the background of the spinbox when it's hovered over</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.ActiveFillBrush">
            <summary>Brush used to fill the spinbox when it's active</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.InactiveFillBrush">
            <summary>Brush used to fill the spinbox when it's inactive</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.ArrowsImage">
            <summary>Image used to draw the spinbox arrows</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.ForegroundColor">
            <summary>Color used to draw the spinbox foreground elements</summary>
        </member>
        <member name="F:UnrealEngine.FSpinBoxStyle.TextPadding">
            <summary>Padding to add around the spinbox and its text</summary>
        </member>
        <member name="F:UnrealEngine.FSplineCurves.Position">
            <summary>Spline built from position data.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineCurves.Rotation">
            <summary>Spline built from rotation data.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineCurves.Scale">
            <summary>Spline built from scale data.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineCurves.ReparamTable">
            <summary>Input: distance along curve, output: parameter that puts you there.</summary>
        </member>
        <member name="T:UnrealEngine.FSplineMeshParams">
            <summary>
            Structure that holds info about spline, passed to renderer to deform UStaticMesh.
            Also used by Lightmass, so be sure to update Lightmass::FSplineMeshParams and the static lighting code if this changes!
            </summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.StartPos">
            <summary>Start location of spline, in component space.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.StartTangent">
            <summary>Start tangent of spline, in component space.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.StartScale">
            <summary>X and Y scale applied to mesh at start of spline.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.StartRoll">
            <summary>Roll around spline applied at start</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.StartOffset">
            <summary>Starting offset of the mesh from the spline, in component space.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.EndPos">
            <summary>End location of spline, in component space.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.EndTangent">
            <summary>End tangent of spline, in component space.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.EndScale">
            <summary>X and Y scale applied to mesh at end of spline.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.EndRoll">
            <summary>Roll around spline applied at end.</summary>
        </member>
        <member name="F:UnrealEngine.FSplineMeshParams.EndOffset">
            <summary>Ending offset of the mesh from the spline, in component space.</summary>
        </member>
        <member name="T:UnrealEngine.FSpriteCategoryInfo">
            <summary>Information about the sprite category</summary>
        </member>
        <member name="F:UnrealEngine.FSpriteCategoryInfo.Category">
            <summary>Sprite category that the component belongs to</summary>
        </member>
        <member name="F:UnrealEngine.FSpriteCategoryInfo.DisplayName">
            <summary>Localized name of the sprite category</summary>
        </member>
        <member name="F:UnrealEngine.FSpriteCategoryInfo.Description">
            <summary>Localized description of the sprite category</summary>
        </member>
        <member name="F:UnrealEngine.FStaticMaterial.MaterialSlotName">
            <summary>This name should be use by the gameplay to avoid error if the skeletal mesh Materials array topology change</summary>
        </member>
        <member name="F:UnrealEngine.FStaticMaterial.ImportedMaterialSlotName">
            <summary>This name should be use when we re-import a skeletal mesh so we can order the Materials array like it should be</summary>
        </member>
        <member name="F:UnrealEngine.FStaticMaterial.UVChannelData">
            <summary>Data used for texture streaming relative to each UV channels.</summary>
        </member>
        <member name="P:UnrealEngine.FStaticMeshComponentLODInfo.PaintedVertices">
            <summary>Vertex data cached at the time this LOD was painted, if any</summary>
        </member>
        <member name="T:UnrealEngine.FStaticMeshSourceModel">
            <summary>Source model from which a renderable static mesh is built.</summary>
        </member>
        <member name="F:UnrealEngine.FStaticMeshSourceModel.BuildSettings">
            <summary>Settings applied when building the mesh.</summary>
        </member>
        <member name="F:UnrealEngine.FStaticMeshSourceModel.ReductionSettings">
            <summary>Reduction settings to apply when building render data.</summary>
        </member>
        <member name="F:UnrealEngine.FStaticMeshSourceModel.ScreenSize">
            <summary>
            ScreenSize to display this LOD.
            The screen size is based around the projected diameter of the bounding
            sphere of the model. i.e. 0.5 means half the screen's maximum dimension.
            </summary>
        </member>
        <member name="T:UnrealEngine.FStreamingTextureBuildInfo">
            <summary>
            This struct holds the result of TextureStreaming Build for each component texture, as referred by its used materials.
            It is possible that the entry referred by this data is not actually relevant in a given quality / target.
            It is also possible that some texture are not referred, and will then fall on fallbacks computation.
            Because each component holds its precomputed data for each texture, this struct is designed to be as compact as possible.
            </summary>
        </member>
        <member name="F:UnrealEngine.FStreamingTextureBuildInfo.PackedRelativeBox">
            <summary>
            The relative bounding box for this entry. The relative bounds is a bound equal or smaller than the component bounds and represent
            the merged LOD section bounds of all LOD section referencing the given texture. When the level transform is modified following
            a call to ApplyLevelTransform, this relative bound becomes deprecated as it was computed from the transform at build time.
            </summary>
        </member>
        <member name="F:UnrealEngine.FStreamingTextureBuildInfo.TextureLevelIndex">
            <summary>
            The level scope identifier of the texture. When building the texture streaming data, each level holds a list of all referred texture Guids.
            This is required to prevent loading textures on platforms which would not require the texture to be loaded, and is a consequence of the texture
            streaming build not being platform specific (the same streaming data is build for every platform target). Could also apply to quality level.
            </summary>
        </member>
        <member name="F:UnrealEngine.FStreamingTextureBuildInfo.TexelFactor">
            <summary>
            The texel factor for this texture. This represent the world size a texture square holding with unit UVs.
            This value is a combination of the TexelFactor from the mesh and also the material scale.
            It does not take into consideration StreamingDistanceMultiplier, or texture group scale.
            </summary>
        </member>
        <member name="T:UnrealEngine.FStringAssetReference">
            <summary>A string asset reference</summary>
        </member>
        <member name="T:UnrealEngine.FStringClassReference">
            <summary>A string class reference</summary>
        </member>
        <member name="T:UnrealEngine.FStringCurve">
            <summary>Implements a curve of FStrings.</summary>
        </member>
        <member name="F:UnrealEngine.FStringCurve.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="P:UnrealEngine.FStringCurve.Keys">
            <summary>Sorted array of keys</summary>
        </member>
        <member name="F:UnrealEngine.FStringCurve.KeyHandlesToIndices">
            <summary>Map of which key handles go to which indices.</summary>
        </member>
        <member name="T:UnrealEngine.FStringCurveKey">
            <summary>One key in a curve of FStrings.</summary>
        </member>
        <member name="F:UnrealEngine.FStringCurveKey.Time">
            <summary>Time at this key</summary>
        </member>
        <member name="F:UnrealEngine.FStringCurveKey.Value">
            <summary>Value at this key</summary>
        </member>
        <member name="T:UnrealEngine.FSubsurfaceProfileStruct">
            <summary>struct with all the settings we want in USubsurfaceProfile, separate to make it easer to pass this data around in the engine.</summary>
        </member>
        <member name="F:UnrealEngine.FSubsurfaceProfileStruct.ScatterRadius">
            <summary>in world/unreal units (cm)</summary>
        </member>
        <member name="F:UnrealEngine.FSubsurfaceProfileStruct.SubsurfaceColor">
            <summary>
            Specifies the how much of the diffuse light gets into the material,
            can be seen as a per-channel mix factor between the original image,
            and the SSS-filtered image (called "strength" in SeparableSSS, default there: 0.48, 0.41, 0.28)
            </summary>
        </member>
        <member name="F:UnrealEngine.FSubsurfaceProfileStruct.FalloffColor">
            <summary>
            defines the per-channel falloff of the gradients
            produced by the subsurface scattering events, can be used to fine tune the color of the gradients
            (called "falloff" in SeparableSSS, default there: 1, 0.37, 0.3)
            </summary>
        </member>
        <member name="T:UnrealEngine.FSubtitleCue">
            <summary>A line of subtitle text and the time at which it should be displayed.</summary>
        </member>
        <member name="F:UnrealEngine.FSubtitleCue.Text">
            <summary>The text to appear in the subtitle.</summary>
        </member>
        <member name="F:UnrealEngine.FSubtitleCue.Time">
            <summary>The time at which the subtitle is to be displayed, in seconds relative to the beginning of the line.</summary>
        </member>
        <member name="T:UnrealEngine.FSubTrackGroup">
            <summary>A small structure holding data for grouping subtracks. (For UI drawing purposes)</summary>
        </member>
        <member name="F:UnrealEngine.FSubTrackGroup.GroupName">
            <summary>Name of the subtrack  group</summary>
        </member>
        <member name="P:UnrealEngine.FSubTrackGroup.TrackIndices">
            <summary>Indices to tracks in the parent track subtrack array.</summary>
        </member>
        <member name="P:UnrealEngine.FSubTrackGroup.bIsCollapsed">
            <summary>If this group is collapsed</summary>
        </member>
        <member name="P:UnrealEngine.FSubTrackGroup.bIsSelected">
            <summary>If this group is selected</summary>
        </member>
        <member name="T:UnrealEngine.FSupportedSubTrackInfo">
            <summary>Helper struct for creating sub tracks supported by this track</summary>
        </member>
        <member name="F:UnrealEngine.FSupportedSubTrackInfo.SubTrackName">
            <summary>The sub track class which is supported by this track</summary>
            <summary>The name of the subtrack</summary>
        </member>
        <member name="F:UnrealEngine.FSupportedSubTrackInfo.GroupIndex">
            <summary>Index into the any subtrack group this subtrack belongs to (can be -1 for no group)</summary>
        </member>
        <member name="T:UnrealEngine.FTableRowBase">
            <summary>Base class for all table row structs to inherit from.</summary>
        </member>
        <member name="T:UnrealEngine.FTableRowStyle">
            <summary>Represents the appearance of an STableRow</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.SelectorFocusedBrush">
            <summary>Brush used as a selector when a row is focused</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.ActiveHoveredBrush">
            <summary>Brush used when a selected row is active and hovered</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.ActiveBrush">
            <summary>Brush used when a selected row is active</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.InactiveHoveredBrush">
            <summary>Brush used when an selected row is inactive and hovered</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.InactiveBrush">
            <summary>Brush used when a selected row is inactive</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.EvenRowBackgroundHoveredBrush">
            <summary>Brush used when an even row is hovered</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.EvenRowBackgroundBrush">
            <summary>Brush used when an even row is in its normal state</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.OddRowBackgroundHoveredBrush">
            <summary>Brush used when an odd row is hovered</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.OddRowBackgroundBrush">
            <summary>Brush to used when an odd row is in its normal state</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.TextColor">
            <summary>Text color used for all rows</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.SelectedTextColor">
            <summary>Text color used for the selected row</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.DropIndicator_Above">
            <summary>Brush used to provide feedback that a user can drop above the hovered row.</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.DropIndicator_Onto">
            <summary>Brush used to provide feedback that a user can drop onto the hovered row.</summary>
        </member>
        <member name="F:UnrealEngine.FTableRowStyle.DropIndicator_Below">
            <summary>Brush used to provide feedback that a user can drop below the hovered row.</summary>
        </member>
        <member name="T:UnrealEngine.FTextBlockStyle">
            <summary>Represents the appearance of an STextBlock</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.Font">
            <summary>Font family and size to be used when displaying this text.</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.ColorAndOpacity">
            <summary>The color and opacity of this text</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.ShadowOffset">
            <summary>How much should the shadow be offset? An offset of 0 implies no shadow.</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.ShadowColorAndOpacity">
            <summary>The color and opacity of the shadow</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.SelectedBackgroundColor">
            <summary>The background color of selected text</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.HighlightColor">
            <summary>The color of highlighted text</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.HighlightShape">
            <summary>The shape of highlighted text</summary>
        </member>
        <member name="F:UnrealEngine.FTextBlockStyle.UnderlineBrush">
            <summary>The brush used to draw an underline under the text (if any)</summary>
        </member>
        <member name="T:UnrealEngine.FTextureLODGroup">
            <summary>LOD settings for a single texture group.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureLODGroup.Group">
            <summary>Minimum LOD mip count below which the code won't bias.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureLODGroup.LODBias">
            <summary>Group LOD bias.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureLODGroup.NumStreamedMips">
            <summary>Number of mip-levels that can be streamed. -1 means all mips can stream.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureLODGroup.MipGenSettings">
            <summary>Defines how the the mip-map generation works, e.g. sharpening</summary>
        </member>
        <member name="T:UnrealEngine.FTextureParameterValue">
            <summary>Editable texture parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FTextureSource">
            <summary>Texture source data management.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureSource.Id">
            <summary>GUID used to track changes to the source data.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureSource.SizeX">
            <summary>Width of the texture.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureSource.SizeY">
            <summary>Height of the texture.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureSource.NumSlices">
            <summary>Depth (volume textures) or faces (cube maps).</summary>
        </member>
        <member name="F:UnrealEngine.FTextureSource.NumMips">
            <summary>Number of mips provided as source data for the texture.</summary>
        </member>
        <member name="P:UnrealEngine.FTextureSource.bPNGCompressed">
            <summary>RGBA8 source data is optionally compressed as PNG.</summary>
        </member>
        <member name="P:UnrealEngine.FTextureSource.bGuidIsHash">
            <summary>Legacy textures use a hash instead of a GUID.</summary>
        </member>
        <member name="F:UnrealEngine.FTextureSource.Format">
            <summary>Format in which the source data is stored.</summary>
        </member>
        <member name="F:UnrealEngine.FTimeline.LengthMode">
            <summary>Specified how the timeline determines its own length (e.g. specified length, last keyframe)</summary>
        </member>
        <member name="F:UnrealEngine.FTimeline.Length">
            <summary>How long the timeline is, will stop or loop at the end</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.bLooping">
            <summary>Whether timeline should loop when it reaches the end, or stop</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.bReversePlayback">
            <summary>If playback should move the current position backwards instead of forwards</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.bPlaying">
            <summary>Are we currently playing (moving Position)</summary>
        </member>
        <member name="F:UnrealEngine.FTimeline.PlayRate">
            <summary>How fast we should play through the timeline</summary>
        </member>
        <member name="F:UnrealEngine.FTimeline.Position">
            <summary>Current position in the timeline</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.Events">
            <summary>Array of events that are fired at various times during the timeline</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.InterpVectors">
            <summary>Array of vector interpolations performed during the timeline</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.InterpFloats">
            <summary>Array of float interpolations performed during the timeline</summary>
        </member>
        <member name="P:UnrealEngine.FTimeline.InterpLinearColors">
            <summary>Array of linear color interpolations performed during the timeline</summary>
        </member>
        <member name="F:UnrealEngine.FTimeline.DirectionPropertyName">
            <summary>Optional. If set, Timeline will also set ETimelineDirection property on PropertySetObject using the name.</summary>
        </member>
        <member name="T:UnrealEngine.FTimelineEventEntry">
            <summary>Struct that contains one entry for an 'event' during the timeline</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineEventEntry.Time">
            <summary>Time at which event should fire</summary>
        </member>
        <member name="T:UnrealEngine.FTimelineFloatTrack">
            <summary>Struct that contains one entry for each vector interpolation performed by the timeline</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineFloatTrack.TrackName">
            <summary>Float curve to be evaluated</summary>
            <summary>Name of track, usually set in Timeline Editor. Used by SetInterpFloatCurve function.</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineFloatTrack.FloatPropertyName">
            <summary>Name of property that we should update from this curve</summary>
        </member>
        <member name="T:UnrealEngine.FTimelineLinearColorTrack">
            <summary>Struct that contains one entry for each linear color interpolation performed by the timeline</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineLinearColorTrack.TrackName">
            <summary>Float curve to be evaluated</summary>
            <summary>Name of track, usually set in Timeline Editor. Used by SetInterpLinearColorCurve function.</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineLinearColorTrack.LinearColorPropertyName">
            <summary>Name of property that we should update from this curve</summary>
        </member>
        <member name="T:UnrealEngine.FTimelineVectorTrack">
            <summary>Struct that contains one entry for each vector interpolation performed by the timeline</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineVectorTrack.TrackName">
            <summary>Vector curve to be evaluated</summary>
            <summary>Name of track, usually set in Timeline Editor. Used by SetInterpVectorCurve function.</summary>
        </member>
        <member name="F:UnrealEngine.FTimelineVectorTrack.VectorPropertyName">
            <summary>Name of property that we should update from this curve</summary>
        </member>
        <member name="T:UnrealEngine.FTimerHandle">
            <summary>Unique handle that can be used to distinguish timers that have identical delegates.</summary>
        </member>
        <member name="T:UnrealEngine.FTimespan">
            <summary>A time span value.</summary>
        </member>
        <member name="T:UnrealEngine.FTireFrictionScalePair">
            <summary>DEPRECATED Pairs desired tire friction scale with tire type</summary>
        </member>
        <member name="F:UnrealEngine.FTireFrictionScalePair.FrictionScale">
            <summary>Tire type</summary>
            <summary>Friction scale for this type of tire</summary>
        </member>
        <member name="T:UnrealEngine.FToggleTrackKey">
            <summary>Information for one toggle in the track.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FTouchInputControl.Center" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FTouchInputControl.VisualSize" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FTouchInputControl.ThumbSize" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.FTouchInputControl.InteractionSize" -->
        <member name="F:UnrealEngine.FTouchInputControl.InputScale">
            <summary>The scale for control input</summary>
        </member>
        <member name="F:UnrealEngine.FTouchInputControl.MainInputKey">
            <summary>The main input to send from this control (for sticks, this is the horizontal axis)</summary>
        </member>
        <member name="F:UnrealEngine.FTouchInputControl.AltInputKey">
            <summary>The alternate input to send from this control (for sticks, this is the vertical axis)</summary>
        </member>
        <member name="T:UnrealEngine.FTrackToSkeletonMap">
            <summary>@note We have a plan to support skeletal hierarchy. When that happens, we'd like to keep skeleton indexing.</summary>
        </member>
        <member name="F:UnrealEngine.FTrackToSkeletonMap.BoneTreeIndex">
            <summary>Index of Skeleton.BoneTree this Track belongs to.</summary>
        </member>
        <member name="T:UnrealEngine.FTransform">
            <summary>
            Transform composed of Quat/Translation/Scale.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Transform.h
            </summary>
        </member>
        <member name="M:UnrealEngine.FTransform.ToMatrixWithScale">
            Convert this Transform to a transformation matrix with scaling.
        </member>
        <member name="M:UnrealEngine.FTransform.ToInverseMatrixWithScale">
            Convert this Transform to matrix with scaling and compute the inverse of that.
        </member>
        <member name="M:UnrealEngine.FTransform.Inverse">
            Convert this Transform to inverse.
        </member>
        <member name="M:UnrealEngine.FTransform.ToMatrixNoScale">
            Convert this Transform to a transformation matrix, ignoring its scaling
        </member>
        <member name="M:UnrealEngine.FTransform.Blend(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single)">
            Set this transform to the weighted blend of the supplied two transforms. 
        </member>
        <member name="M:UnrealEngine.FTransform.BlendWith(UnrealEngine.FTransform,System.Single)">
            Set this Transform to the weighted blend of it and the supplied Transform. 
        </member>
        <member name="M:UnrealEngine.FTransform.op_Addition(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Quaternion addition is wrong here. This is just a special case for linear interpolation.
            Use only within blends!!
            Rotation part is NOT normalized!!
        </member>
        <member name="M:UnrealEngine.FTransform.op_Multiply(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Return a transform that is the result of this multiplied by another transform.
            Order matters when composing transforms : C = A * B will yield a transform C that logically first applies A then B to any subsequent transformation.
            
            @param  Other other transform by which to multiply.
            @return new transform: this * Other
        </member>
        <member name="M:UnrealEngine.FTransform.op_Multiply(UnrealEngine.FTransform,UnrealEngine.FQuat)">
             Return a transform that is the result of this multiplied by another transform (made only from a rotation).
             Order matters when composing transforms : C = A * B will yield a transform C that logically first applies A then B to any subsequent transformation.
            
             @param  Other other quaternion rotation by which to multiply.
             @return new transform: this * FTransform(Other)
        </member>
        <member name="M:UnrealEngine.FTransform.SetToRelativeTransform(UnrealEngine.FTransform)">
            Set current transform and the relative to ParentTransform.
            Equates to This = This->GetRelativeTransform(Parent), but saves the intermediate FTransform storage and copy.
        </member>
        <member name="M:UnrealEngine.FTransform.InverseTransformPosition(UnrealEngine.FVector)">
            Inverts the matrix and then transforms V - correctly handles scaling in this matrix. 
        </member>
        <member name="M:UnrealEngine.FTransform.InverseTransformVector(UnrealEngine.FVector)">
            Transform a direction vector by the inverse of this matrix - will not take into account translation part.
            If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT with adjoint of matrix inverse.
        </member>
        <member name="M:UnrealEngine.FTransform.GetDeterminant">
            Calculate the  
        </member>
        <member name="M:UnrealEngine.FTransform.SetLocation(UnrealEngine.FVector)">
            Set the translation of this transformation 
        </member>
        <member name="M:UnrealEngine.FTransform.Multiply(UnrealEngine.FTransform@,UnrealEngine.FTransform@,UnrealEngine.FTransform@)">
             Create a new transform: OutTransform = A * B.
            
             Order matters when composing transforms : A * B will yield a transform that logically first applies A then B to any subsequent transformation.
             
             @param  OutTransform pointer to transform that will store the result of A * B.
             @param  A Transform A.
             @param  B Transform B.
        </member>
        <member name="M:UnrealEngine.FTransform.SetComponents(UnrealEngine.FQuat,UnrealEngine.FVector,UnrealEngine.FVector)">
            Sets the components
            @param InRotation The new value for the Rotation component
            @param InTranslation The new value for the Translation component
            @param InScale3D The new value for the Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.SetIdentity">
            Sets the components to the identity transform:
              Rotation = (0,0,0,1)
              Translation = (0,0,0)
              Scale3D = (1,1,1)
        </member>
        <member name="M:UnrealEngine.FTransform.MultiplyScale3D(UnrealEngine.FVector)">
            Scales the Scale3D component by a new factor
            @param Scale3DMultiplier The value to multiply Scale3D with
        </member>
        <member name="M:UnrealEngine.FTransform.SetTranslation(UnrealEngine.FVector)">
            Sets the translation component
            @param NewTranslation The new value for the translation component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyTranslation(UnrealEngine.FTransform)">
            Copy translation from another FTransform. 
        </member>
        <member name="M:UnrealEngine.FTransform.ConcatenateRotation(UnrealEngine.FQuat)">
            Concatenates another rotation to this transformation 
            @param DeltaRotation The rotation to concatenate in the following fashion: Rotation = Rotation * DeltaRotation
        </member>
        <member name="M:UnrealEngine.FTransform.AddToTranslation(UnrealEngine.FVector)">
            Adjusts the translation component of this transformation 
            @param DeltaTranslation The translation to add in the following fashion: Translation += DeltaTranslation
        </member>
        <member name="M:UnrealEngine.FTransform.AddTranslations(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Add the translations from two FTransforms and return the result.
            @return A.Translation + B.Translation
        </member>
        <member name="M:UnrealEngine.FTransform.SubtractTranslations(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Subtract translations from two FTransforms and return the difference.
            @return A.Translation - B.Translation.
        </member>
        <member name="M:UnrealEngine.FTransform.SetRotation(UnrealEngine.FQuat)">
            Sets the rotation component
            @param NewRotation The new value for the rotation component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyRotation(UnrealEngine.FTransform)">
            Copy rotation from another FTransform. 
        </member>
        <member name="M:UnrealEngine.FTransform.SetScale3D(UnrealEngine.FVector)">
            Sets the Scale3D component
            @param NewScale3D The new value for the Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyScale3D(UnrealEngine.FTransform)">
            Copy scale from another FTransform. 
        </member>
        <member name="M:UnrealEngine.FTransform.SetTranslationAndScale3D(UnrealEngine.FVector,UnrealEngine.FVector)">
            Sets both the translation and Scale3D components at the same time
            @param NewTranslation The new value for the translation component
            @param NewScale3D The new value for the Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.AccumulateWithShortestRotation(UnrealEngine.FTransform,System.Single)">
             Accumulates another transform with this one, with an optional blending weight
            
             Rotation is accumulated additively, in the shortest direction (Rotation = Rotation +/- DeltaAtom.Rotation * Weight)
             Translation is accumulated additively (Translation += DeltaAtom.Translation * Weight)
             Scale3D is accumulated additively (Scale3D += DeltaAtom.Scale3D * Weight)
            
             @param DeltaAtom The other transform to accumulate into this one
             @param Weight The weight to multiply DeltaAtom by before it is accumulated.
        </member>
        <member name="M:UnrealEngine.FTransform.Accumulate(UnrealEngine.FTransform)">
             Accumulates another transform with this one
            
             Rotation is accumulated multiplicatively (Rotation = SourceAtom.Rotation * Rotation)
             Translation is accumulated additively (Translation += SourceAtom.Translation)
             Scale3D is accumulated multiplicatively (Scale3D *= SourceAtom.Scale3D)
            
             @param SourceAtom The other transform to accumulate into this one
        </member>
        <member name="M:UnrealEngine.FTransform.Accumulate(UnrealEngine.FTransform,System.Single)">
            Accumulates another transform with this one, with a blending weight
            
             Let SourceAtom = Atom * BlendWeight
             Rotation is accumulated multiplicatively (Rotation = SourceAtom.Rotation * Rotation).
             Translation is accumulated additively (Translation += SourceAtom.Translation)
             Scale3D is accumulated multiplicatively (Scale3D *= SourceAtom.Scale3D)
            
             Note: Rotation will not be normalized! Will have to be done manually.
            
             @param Atom The other transform to accumulate into this one
             @param BlendWeight The weight to multiply Atom by before it is accumulated.
        </member>
        <member name="M:UnrealEngine.FTransform.LerpTranslationScale3D(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single)">
             Set the translation and Scale3D components of this transform to a linearly interpolated combination of two other transforms
            
             Translation = FMath::Lerp(SourceAtom1.Translation, SourceAtom2.Translation, Alpha)
             Scale3D = FMath::Lerp(SourceAtom1.Scale3D, SourceAtom2.Scale3D, Alpha)
            
             @param SourceAtom1 The starting point source atom (used 100% if Alpha is 0)
             @param SourceAtom2 The ending point source atom (used 100% if Alpha is 1)
             @param Alpha The blending weight between SourceAtom1 and SourceAtom2
        </member>
        <member name="M:UnrealEngine.FTransform.AccumulateWithAdditiveScale3D(UnrealEngine.FTransform)">
             Accumulates another transform with this one
            
             Rotation is accumulated multiplicatively (Rotation = SourceAtom.Rotation * Rotation)
             Translation is accumulated additively (Translation += SourceAtom.Translation)
             Scale3D is accumulated additively (Scale3D += SourceAtom.Scale3D)
            
             @param SourceAtom The other transform to accumulate into this one
        </member>
        <member name="M:UnrealEngine.FTransform.NormalizeRotation">
            Normalize the rotation component of this transformation
        </member>
        <member name="M:UnrealEngine.FTransform.IsRotationNormalized">
             Checks whether the rotation component is normalized or not
            
             @return true if the rotation component is normalized, and false otherwise.
        </member>
        <member name="M:UnrealEngine.FTransform.GetRotation">
             Returns the rotation component
            
             @return The rotation component
        </member>
        <member name="M:UnrealEngine.FTransform.GetTranslation">
             Returns the translation component
            
             @return The translation component
        </member>
        <member name="M:UnrealEngine.FTransform.GetScale3D">
             Returns the Scale3D component
            
             @return The Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyRotationPart(UnrealEngine.FTransform)">
             Sets the Rotation and Scale3D of this transformation from another transform
            
             @param SrcBA The transform to copy rotation and Scale3D from
        </member>
        <member name="M:UnrealEngine.FTransform.CopyTranslationAndScale3D(UnrealEngine.FTransform)">
             Sets the Translation and Scale3D of this transformation from another transform
            
             @param SrcBA The transform to copy translation and Scale3D from
        </member>
        <member name="T:UnrealEngine.FTransformBase">
            <summary>This is a mapping table between bone in a particular skeletal mesh and bone of this skeleton set.</summary>
        </member>
        <member name="T:UnrealEngine.FTransformBaseConstraint">
            <summary>This defines what constraint it is defined</summary>
        </member>
        <member name="P:UnrealEngine.FTransformBaseConstraint.TransformConstraints">
            <summary>What transform type *</summary>
        </member>
        <member name="F:UnrealEngine.FTransformCurve.TranslationCurve">
            <summary>Curve data for each transform.</summary>
        </member>
        <member name="F:UnrealEngine.FTransformCurve.RotationCurve">
            <summary>
            Rotation curve - right now we use euler because quat also doesn't provide linear interpolation - curve editor can't handle quat interpolation
            If you hit gimbal lock, you should add extra key to fix it. This will cause gimbal lock.
            @TODO: Eventually we'll need FRotationCurve that would contain rotation curve - that will interpolate as slerp or as quaternion
            </summary>
        </member>
        <member name="F:UnrealEngine.FTransformCurve.LastObservedName">
            <summary>
            Last observed name of the curve. We store this so we can recover from situations that
            mean the skeleton doesn't have a mapped name for our UID (such as a user saving the an
            animation but not the skeleton).
            </summary>
        </member>
        <member name="F:UnrealEngine.FTransformCurve.CurveTypeFlags">
            <summary>Curve Type Flags</summary>
        </member>
        <member name="T:UnrealEngine.FTriangleSortSettings">
            <summary>Struct containing triangle sort settings for a particular section</summary>
        </member>
        <member name="T:UnrealEngine.FTTEventTrack">
            <summary>Structure storing information about one event track</summary>
        </member>
        <member name="F:UnrealEngine.FTTEventTrack.TrackName">
            <summary>Curve object used to store keys</summary>
            <summary>Name of this track</summary>
        </member>
        <member name="P:UnrealEngine.FTTEventTrack.bIsExternalCurve">
            <summary>Flag to identify internal/external curve</summary>
        </member>
        <member name="T:UnrealEngine.FTTFloatTrack">
            <summary>Structure storing information about one float interpolation track</summary>
        </member>
        <member name="F:UnrealEngine.FTTFloatTrack.TrackName">
            <summary>Curve object used to define float value over time</summary>
            <summary>Name of this track</summary>
        </member>
        <member name="P:UnrealEngine.FTTFloatTrack.bIsExternalCurve">
            <summary>Flag to identify internal/external curve</summary>
        </member>
        <member name="T:UnrealEngine.FTTLinearColorTrack">
            <summary>Structure storing information about one color interpolation track</summary>
        </member>
        <member name="F:UnrealEngine.FTTLinearColorTrack.TrackName">
            <summary>Curve object used to define color value over time</summary>
            <summary>Name of this track</summary>
        </member>
        <member name="P:UnrealEngine.FTTLinearColorTrack.bIsExternalCurve">
            <summary>Flag to identify internal/external curve</summary>
        </member>
        <member name="T:UnrealEngine.FTTVectorTrack">
            <summary>Structure storing information about one vector interpolation track</summary>
        </member>
        <member name="F:UnrealEngine.FTTVectorTrack.TrackName">
            <summary>Curve object used to define vector value over time</summary>
            <summary>Name of this track</summary>
        </member>
        <member name="P:UnrealEngine.FTTVectorTrack.bIsExternalCurve">
            <summary>Flag to identify internal/external curve</summary>
        </member>
        <member name="T:UnrealEngine.FTViewTarget">
            <summary>A ViewTarget is the primary actor the camera is associated with.</summary>
        </member>
        <member name="F:UnrealEngine.FTViewTarget.POV">
            <summary>Target Actor used to compute POV</summary>
            <summary>Computed point of view</summary>
        </member>
        <member name="T:UnrealEngine.FTwistConstraint">
            <summary>Angular roll constraint</summary>
        </member>
        <member name="F:UnrealEngine.FTwistConstraint.TwistLimitDegrees">
            <summary>Symmetric angle of roll along the X-axis.</summary>
        </member>
        <member name="F:UnrealEngine.FTwistConstraint.TwistMotion">
            <summary>Indicates whether the Swing1 limit is used.</summary>
        </member>
        <member name="F:UnrealEngine.FTwistConstraint.Stiffness">
            <summary>Stiffness of the soft constraint. Only used when Soft Constraint is on.</summary>
        </member>
        <member name="F:UnrealEngine.FTwistConstraint.Damping">
            <summary>Damping of the soft constraint. Only used when Soft Constraint is on.</summary>
        </member>
        <member name="F:UnrealEngine.FTwistConstraint.Restitution">
            <summary>Controls the amount of bounce when the constraint is violated. A restitution value of 1 will bounce back with the same velocity the limit was hit. A value of 0 will stop dead.</summary>
        </member>
        <member name="F:UnrealEngine.FTwistConstraint.ContactDistance">
            <summary>Determines how close to the limit we have to get before turning the joint on. Larger value will be more expensive, but will do a better job not violating constraints. A smaller value will be more efficient, but easier to violate.</summary>
        </member>
        <member name="P:UnrealEngine.FTwistConstraint.bSoftConstraint">
            <summary>Whether we want to use a soft constraint (spring).</summary>
        </member>
        <member name="T:UnrealEngine.FTypeface">
            <summary>Definition for a typeface (a family of fonts)</summary>
        </member>
        <member name="P:UnrealEngine.FTypeface.Fonts">
            <summary>The fonts contained within this family</summary>
        </member>
        <member name="T:UnrealEngine.FTypefaceEntry">
            <summary>A single entry in a typeface</summary>
        </member>
        <member name="F:UnrealEngine.FTypefaceEntry.Name">
            <summary>Name used to identify this font within its typeface</summary>
        </member>
        <member name="F:UnrealEngine.FTypefaceEntry.Font">
            <summary>Raw font data for this font</summary>
        </member>
        <member name="T:UnrealEngine.FUniqueNetIdRepl">
            <summary>
            Wrapper for opaque type FUniqueNetId
            Makes sure that the opaque aspects of FUniqueNetId are properly handled/serialized
            over network RPC and actor replication
            </summary>
        </member>
        <member name="T:UnrealEngine.FUserActivity">
            <summary>The description of a user activity</summary>
        </member>
        <member name="F:UnrealEngine.FUserActivity.ActionName">
            <summary>Describes the user's activity</summary>
        </member>
        <member name="T:UnrealEngine.FVector">
            <summary>
            A point or direction FVector in 3d space.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Vector.h
            </summary>
        </member>
        <member name="F:UnrealEngine.FVector.ZeroVector">
            A zero vector (0,0,0) 
        </member>
        <member name="F:UnrealEngine.FVector.UpVector">
            World up vector (0,0,1) 
        </member>
        <member name="F:UnrealEngine.FVector.ForwardVector">
            Unreal forward vector (1,0,0) 
        </member>
        <member name="F:UnrealEngine.FVector.RightVector">
            Unreal right vector (0,1,0) 
        </member>
        <member name="M:UnrealEngine.FVector.#ctor(System.Single)">
             Constructor initializing all components to a single float value.
            
             @param InF Value to set all components to.
        </member>
        <member name="M:UnrealEngine.FVector.#ctor(System.Single,System.Single,System.Single)">
             Constructor using initial values for each component.
            
             @param InX X Coordinate.
             @param InY Y Coordinate.
             @param InZ Z Coordinate.
        </member>
        <member name="M:UnrealEngine.FVector.#ctor(UnrealEngine.FVector4)">
             Constructor using the XYZ components from a 4D vector.
            
             @param V 4D Vector to copy from.
        </member>
        <member name="M:UnrealEngine.FVector.op_ExclusiveOr(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate cross product between this and another vector.
            
             @param V The other vector.
             @return The cross product.
        </member>
        <member name="M:UnrealEngine.FVector.CrossProduct(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the cross product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The cross product.
        </member>
        <member name="M:UnrealEngine.FVector.op_BitwiseOr(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the dot product between this and another vector.
            
             @param V The other vector.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FVector.DotProduct(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the dot product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FVector.op_Addition(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise addition of this and another vector.
            
             @param V The vector to add to this.
             @return The result of vector addition.
        </member>
        <member name="M:UnrealEngine.FVector.op_Subtraction(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise subtraction of this by another vector.
            
             @param V The vector to subtract from this.
             @return The result of vector subtraction.
        </member>
        <member name="M:UnrealEngine.FVector.op_Subtraction(UnrealEngine.FVector,System.Single)">
             Gets the result of subtracting from each component of the vector.
            
             @param Bias How much to subtract from each component.
             @return The result of subtraction.
        </member>
        <member name="M:UnrealEngine.FVector.op_Addition(UnrealEngine.FVector,System.Single)">
             Gets the result of adding to each component of the vector.
            
             @param Bias How much to add to each component.
             @return The result of addition.
        </member>
        <member name="M:UnrealEngine.FVector.op_Multiply(UnrealEngine.FVector,System.Single)">
             Gets the result of scaling the vector (multiplying each component by a value).
            
             @param Scale What to multiply each component by.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector.op_Division(UnrealEngine.FVector,System.Single)">
             Gets the result of dividing each component of the vector by a value.
            
             @param Scale What to divide each component by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector.op_Multiply(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise multiplication of this vector by another.
            
             @param V The vector to multiply with.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector.op_Division(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise division of this vector by another.
            
             @param V The vector to divide by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector.op_UnaryNegation(UnrealEngine.FVector)">
             Get a negated copy of the vector.
            
             @return A negated copy of the vector.
        </member>
        <member name="P:UnrealEngine.FVector.Item(System.Int32)">
             Gets specific component of the vector.
            
             @param Index the index of vector component
             @return reference to component.
        </member>
        <member name="M:UnrealEngine.FVector.Set(System.Single,System.Single,System.Single)">
             Set the values of the vector directly.
            
             @param InX New X coordinate.
             @param InY New Y coordinate.
             @param InZ New Z coordinate.
        </member>
        <member name="M:UnrealEngine.FVector.GetMax">
             Get the maximum value of the vector's components.
            
             @return The maximum value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.GetAbsMax">
             Get the maximum absolute value of the vector's components.
            
             @return The maximum absolute value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.GetMin">
             Get the minimum value of the vector's components.
            
             @return The minimum value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.GetAbsMin">
             Get the minimum absolute value of the vector's components.
            
             @return The minimum absolute value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.ComponentMin(UnrealEngine.FVector)">
            Gets the component-wise min of two vectors. 
        </member>
        <member name="M:UnrealEngine.FVector.ComponentMax(UnrealEngine.FVector)">
            Gets the component-wise max of two vectors. 
        </member>
        <member name="M:UnrealEngine.FVector.GetAbs">
             Get a copy of this vector with absolute value of each component.
            
             @return A copy of this vector with absolute value of each component.
        </member>
        <member name="M:UnrealEngine.FVector.Size">
             Get the length (magnitude) of this vector.
            
             @return The length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.SizeSquared">
             Get the squared length of this vector.
            
             @return The squared length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.Size2D">
             Get the length of the 2D components of this vector.
            
             @return The 2D length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.SizeSquared2D">
             Get the squared length of the 2D components of this vector.
            
             @return The squared 2D length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.IsZero">
             Checks whether all components of the vector are exactly zero.
            
             @return true if the vector is exactly zero, false otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.Normalize(System.Single)">
             Normalize this vector in-place if it is large enough, set it to (0,0,0) otherwise.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @return true if the vector was normalized correctly, false otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.IsNormalized">
             Checks whether vector is normalized.
            
             @return true if Normalized, false otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.ToDirectionAndLength(UnrealEngine.FVector@,System.Single@)">
             Util to convert this vector into a unit direction vector and its original length.
            
             @param OutDir Reference passed in to store unit direction vector.
             @param OutLength Reference passed in to store length of the vector.
        </member>
        <member name="M:UnrealEngine.FVector.GetSignVector">
             Get a copy of the vector as sign only.
             Each component is set to +1 or -1, with the sign of zero treated as +1.
            
             @param A copy of the vector with each component set to +1 or -1
        </member>
        <member name="M:UnrealEngine.FVector.Projection">
             Projects 2D components of vector based on Z.
            
             @return Projected version of vector based on Z.
        </member>
        <member name="M:UnrealEngine.FVector.GetUnsafeNormal">
             Calculates normalized version of vector without checking for zero length.
            
             @return Normalized version of vector.
             @see GetSafeNormal()
        </member>
        <member name="M:UnrealEngine.FVector.Reciprocal">
             Gets the reciprocal of this vector, avoiding division by zero.
             Zero components are set to BIG_NUMBER.
            
             @return Reciprocal of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.IsUniform(System.Single)">
             Check whether X, Y and Z are nearly equal.
            
             @param Tolerance Specified Tolerance.
             @return true if X == Y == Z within the specified tolerance.
        </member>
        <member name="M:UnrealEngine.FVector.MirrorByVector(UnrealEngine.FVector)">
             Mirror a vector about a normal vector.
            
             @param MirrorNormal Normal vector to mirror about.
             @return Mirrored vector.
        </member>
        <member name="M:UnrealEngine.FVector.MirrorByPlane(UnrealEngine.FPlane)">
             Mirrors a vector about a plane.
            
             @param Plane Plane to mirror about.
             @return Mirrored vector.
        </member>
        <member name="M:UnrealEngine.FVector.RotateAngleAxis(System.Single,UnrealEngine.FVector)">
             Rotates around Axis (assumes Axis.Size() == 1).
            
             @param Angle Angle to rotate (in degrees).
             @param Axis Axis to rotate around.
             @return Rotated Vector.
        </member>
        <member name="M:UnrealEngine.FVector.GetSafeNormal(System.Single)">
             Gets a normalized copy of the vector, checking it is safe to do so based on the length.
             Returns zero vector if vector length is too small to safely normalize.
            
             @param Tolerance Minimum squared vector length.
             @return A normalized copy if safe, (0,0,0) otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.ProjectOnTo(UnrealEngine.FVector)">
             Gets a copy of this vector projected onto the input vector.
            
             @param A	Vector to project onto, does not assume it is normalized.
             @return Projected vector.
        </member>
        <member name="M:UnrealEngine.FVector.ProjectOnToNormal(UnrealEngine.FVector)">
            Gets a copy of this vector projected onto the input vector, which is assumed to be unit length.
            
            @param  Normal Vector to project onto (assumed to be unit length).
            @return Projected vector.
        </member>
        <member name="M:UnrealEngine.FVector.PointsAreSame(UnrealEngine.FVector,UnrealEngine.FVector)">
             Compare two points and see if they're the same, using a threshold.
            
             @param P First vector.
             @param Q Second vector.
             @return Whether points are the same within a threshold. Uses fast distance approximation (linear per-component distance).
        </member>
        <member name="M:UnrealEngine.FVector.PointsAreNear(UnrealEngine.FVector,UnrealEngine.FVector,System.Single)">
             Compare two points and see if they're within specified distance.
            
             @param Point1 First vector.
             @param Point2 Second vector.
             @param Dist Specified distance.
             @return Whether two points are within the specified distance. Uses fast distance approximation (linear per-component distance).
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneDist(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the signed distance (in the direction of the normal) between a point and a plane.
            
             @param Point The Point we are checking.
             @param PlaneBase The Base Point in the plane.
             @param PlaneNormal The Normal of the plane (assumed to be unit length).
             @return Signed distance between point and plane.
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneProject(UnrealEngine.FVector,UnrealEngine.FPlane)">
             Calculate the projection of a point on the given plane.
            
             @param Point The point to project onto the plane
             @param Plane The plane
             @return Projection of Point onto Plane
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneProject(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the projection of a point on the plane defined by counter-clockwise (CCW) points A,B,C.
            
             @param Point The point to project onto the plane
             @param A 1st of three points in CCW order defining the plane 
             @param B 2nd of three points in CCW order defining the plane
             @param C 3rd of three points in CCW order defining the plane
             @return Projection of Point onto plane ABC
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneProject(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the projection of a point on the plane defined by PlaneBase and PlaneNormal.
            
             @param Point The point to project onto the plane
             @param PlaneBase Point on the plane
             @param PlaneNorm Normal of the plane (assumed to be unit length).
             @return Projection of Point onto plane
        </member>
        <member name="M:UnrealEngine.FVector.VectorPlaneProject(UnrealEngine.FVector,UnrealEngine.FVector)">
            Calculate the projection of a vector on the plane defined by PlaneNormal.
            
            @param  V The vector to project onto the plane.
            @param  PlaneNormal Normal of the plane (assumed to be unit length).
            @return Projection of V onto plane.
        </member>
        <member name="M:UnrealEngine.FVector.Dist(UnrealEngine.FVector,UnrealEngine.FVector)">
             Euclidean distance between two points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The distance between two points.
        </member>
        <member name="M:UnrealEngine.FVector.DistSquared(UnrealEngine.FVector,UnrealEngine.FVector)">
             Squared distance between two points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two points.
        </member>
        <member name="M:UnrealEngine.FVector.DistSquaredXY(UnrealEngine.FVector,UnrealEngine.FVector)">
             Squared distance between two points in the XY plane only.
            	
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two points in the XY plane
        </member>
        <member name="M:UnrealEngine.FVector.RadiansToDegrees(UnrealEngine.FVector)">
             Converts a vector containing radian values to a vector containing degree values.
            
             @param RadVector	Vector containing radian values
             @return Vector  containing degree values
        </member>
        <member name="M:UnrealEngine.FVector.DegreesToRadians(UnrealEngine.FVector)">
             Converts a vector containing degree values to a vector containing radian values.
            
             @param DegVector	Vector containing degree values
             @return Vector containing radian values
        </member>
        <member name="T:UnrealEngine.FVector2D">
            <summary>
            A point or direction FVector in 2d space.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Vector2D.h
            </summary>
        </member>
        <member name="F:UnrealEngine.FVector2D.ZeroVector">
            Global 2D zero vector constant (0,0) 
        </member>
        <member name="F:UnrealEngine.FVector2D.UnitVector">
            Global 2D unit vector constant (1,1) 
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Addition(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise addition of this and another vector.
            
             @param V The vector to add to this.
             @return The result of vector addition.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Subtraction(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise subtraction of this by another vector.
            
             @param V The vector to subtract from this.
             @return The result of vector subtraction.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Multiply(UnrealEngine.FVector2D,System.Single)">
             Gets the result of scaling the vector (multiplying each component by a value).
            
             @param Scale What to multiply each component by.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Division(UnrealEngine.FVector2D,System.Single)">
             Gets the result of dividing each component of the vector by a value.
            
             @param Scale What to divide each component by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Multiply(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise multiplication of this vector by another.
            
             @param V The vector to multiply with.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Division(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise division of this vector by another.
            
             @param V The vector to divide by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector2D.DotProduct(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Calculates the dot product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FVector2D.DistSquared(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Squared distance between two 2D points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two 2D points.
        </member>
        <member name="M:UnrealEngine.FVector2D.Distance(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Distance between two 2D points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two 2D points.
        </member>
        <member name="M:UnrealEngine.FVector2D.CrossProduct(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Calculate the cross product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The cross product.
        </member>
        <member name="M:UnrealEngine.FVector2D.GetRotated(System.Single)">
             Rotates around axis (0,0,1)
            
             @param AngleDeg Angle to rotate (in degrees)
             @return Rotated Vector
        </member>
        <member name="M:UnrealEngine.FVector2D.GetSafeNormal(System.Single)">
             Gets a normalized copy of the vector, checking it is safe to do so based on the length.
             Returns zero vector if vector length is too small to safely normalize.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @return A normalized copy of the vector if safe, (0,0) otherwise.
        </member>
        <member name="M:UnrealEngine.FVector2D.Normalize(System.Single)">
             Normalize this vector in-place if it is large enough, set it to (0,0) otherwise.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @see GetSafeNormal()
        </member>
        <member name="F:UnrealEngine.FVector2MaterialInput.OutputIndex">
            <summary>Material expression that this input is connected to, or NULL if not connected.</summary>
            <summary>Index into Expression's outputs array that this input is connected to.</summary>
        </member>
        <member name="F:UnrealEngine.FVector2MaterialInput.InputName">
            <summary>
            Optional name of the input.
            Note that this is the only member which is not derived from the output currently connected.
            </summary>
        </member>
        <member name="F:UnrealEngine.FVector2MaterialInput.ExpressionName">
            <summary>Material expression name that this input is connected to, or None if not connected. Used only in cooked builds</summary>
        </member>
        <member name="T:UnrealEngine.FVector4">
            <summary>
            A 4-D homogeneous vector.
            The full C++ class is located here: Engine\Source\Runtime\Core\Public\Math\Vector4.h
            </summary>
        </member>
        <member name="M:UnrealEngine.FVector4.GetSafeNormal(System.Single)">
             Returns a normalized copy of the vector if safe to normalize.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @return A normalized copy of the vector or a zero vector.
        </member>
        <member name="F:UnrealEngine.FVectorCurve.FloatCurves">
            <summary>Curve data for float.</summary>
        </member>
        <member name="F:UnrealEngine.FVectorCurve.LastObservedName">
            <summary>
            Last observed name of the curve. We store this so we can recover from situations that
            mean the skeleton doesn't have a mapped name for our UID (such as a user saving the an
            animation but not the skeleton).
            </summary>
        </member>
        <member name="F:UnrealEngine.FVectorCurve.CurveTypeFlags">
            <summary>Curve Type Flags</summary>
        </member>
        <member name="F:UnrealEngine.FVectorMaterialInput.OutputIndex">
            <summary>Material expression that this input is connected to, or NULL if not connected.</summary>
            <summary>Index into Expression's outputs array that this input is connected to.</summary>
        </member>
        <member name="F:UnrealEngine.FVectorMaterialInput.InputName">
            <summary>
            Optional name of the input.
            Note that this is the only member which is not derived from the output currently connected.
            </summary>
        </member>
        <member name="F:UnrealEngine.FVectorMaterialInput.ExpressionName">
            <summary>Material expression name that this input is connected to, or None if not connected. Used only in cooked builds</summary>
        </member>
        <member name="T:UnrealEngine.FVectorParameterNameAndCurves">
            <summary>Structure representing an animated vector parameter and it's associated animation curve.</summary>
        </member>
        <member name="F:UnrealEngine.FVectorParameterNameAndCurves.ParameterName">
            <summary>The name of the vector parameter which is being animated.</summary>
        </member>
        <member name="F:UnrealEngine.FVectorParameterNameAndCurves.XCurve">
            <summary>The curve which contains the animation data for the x component of the vector parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FVectorParameterNameAndCurves.YCurve">
            <summary>The curve which contains the animation data for the y component of the vector parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FVectorParameterNameAndCurves.ZCurve">
            <summary>The curve which contains the animation data for the z component of the vector parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FVectorParameterValue">
            <summary>Editable vector parameter.</summary>
        </member>
        <member name="T:UnrealEngine.FVector_NetQuantize">
            <summary>
            FVector_NetQuantize
            0 decimal place of precision.
            Up to 20 bits per component.
            Valid range: 2^20 = +/- 1,048,576
            Note: this is the historical UE format for vector net serialization
            </summary>
        </member>
        <member name="T:UnrealEngine.FVector_NetQuantize10">
            <summary>
            FVector_NetQuantize10
            1 decimal place of precision.
            Up to 24 bits per component.
            Valid range: 2^24 / 10 = +/- 1,677,721.6
            </summary>
        </member>
        <member name="T:UnrealEngine.FVector_NetQuantize100">
            <summary>
            FVector_NetQuantize100
            2 decimal place of precision.
            Up to 30 bits per component.
            Valid range: 2^30 / 100 = +/- 10,737,418.24
            </summary>
        </member>
        <member name="T:UnrealEngine.FVector_NetQuantizeNormal">
            <summary>
            FVector_NetQuantizeNormal
            16 bits per component
            Valid range: -1..+1 inclusive
            </summary>
        </member>
        <member name="T:UnrealEngine.FViewTargetTransitionParams">
            <summary>A set of parameters to describe how to transition between view targets.</summary>
        </member>
        <member name="F:UnrealEngine.FViewTargetTransitionParams.BlendTime">
            <summary>Total duration of blend to pending view target. 0 means no blending.</summary>
        </member>
        <member name="F:UnrealEngine.FViewTargetTransitionParams.BlendFunction">
            <summary>Function to apply to the blend parameter.</summary>
        </member>
        <member name="F:UnrealEngine.FViewTargetTransitionParams.BlendExp">
            <summary>Exponent, used by certain blend functions to control the shape of the curve.</summary>
        </member>
        <member name="P:UnrealEngine.FViewTargetTransitionParams.bLockOutgoing">
            <summary>
            If true, lock outgoing viewtarget to last frame's camera POV for the remainder of the blend.
            This is useful if you plan to teleport the old viewtarget, but don't want to affect the blend.
            </summary>
        </member>
        <member name="T:UnrealEngine.FVisibilityTrackKey">
            <summary>Information for one toggle in the track.</summary>
        </member>
        <member name="F:UnrealEngine.FVisibilityTrackKey.ActiveCondition">
            <summary>Condition that must be satisfied for this key event to fire</summary>
        </member>
        <member name="T:UnrealEngine.FVOscillator">
            <summary>Defines FVector oscillation.</summary>
        </member>
        <member name="F:UnrealEngine.FVOscillator.X">
            <summary>Oscillation in the X axis.</summary>
        </member>
        <member name="F:UnrealEngine.FVOscillator.Y">
            <summary>Oscillation in the Y axis.</summary>
        </member>
        <member name="F:UnrealEngine.FVOscillator.Z">
            <summary>Oscillation in the Z axis.</summary>
        </member>
        <member name="T:UnrealEngine.FWalkableSlopeOverride">
            <summary>Struct allowing control over "walkable" normals, by allowing a restriction or relaxation of what steepness is normally walkable.</summary>
        </member>
        <member name="F:UnrealEngine.FWalkableSlopeOverride.WalkableSlopeBehavior">
            <summary>
            Behavior of this surface (whether we affect the walkable slope).
            @see GetWalkableSlopeBehavior(), SetWalkableSlopeBehavior()
            </summary>
        </member>
        <member name="F:UnrealEngine.FWalkableSlopeOverride.WalkableSlopeAngle">
            <summary>
            Override walkable slope angle (in degrees), applying the rules of the Walkable Slope Behavior.
            @see GetWalkableSlopeAngle(), SetWalkableSlopeAngle()
            </summary>
        </member>
        <member name="F:UnrealEngine.FWeightedBlendable.Weight">
            <summary>0:no effect .. 1:full effect</summary>
        </member>
        <member name="T:UnrealEngine.FWeightedBlendables">
            <summary>for easier detail customization, needed?</summary>
        </member>
        <member name="T:UnrealEngine.FWidgetAnimationBinding">
            <summary>A single object bound to a UMG sequence.</summary>
        </member>
        <member name="T:UnrealEngine.FWidgetTransform">
            <summary>Describes the standard transformation of a widget</summary>
        </member>
        <member name="F:UnrealEngine.FWidgetTransform.Translation">
            <summary>The amount to translate the widget in slate units</summary>
        </member>
        <member name="F:UnrealEngine.FWidgetTransform.Scale">
            <summary>The scale to apply to the widget</summary>
        </member>
        <member name="F:UnrealEngine.FWidgetTransform.Shear">
            <summary>The amount to shear the widget in slate units</summary>
        </member>
        <member name="F:UnrealEngine.FWidgetTransform.Angle">
            <summary>The angle in degrees to rotate</summary>
        </member>
        <member name="M:UnrealEngine.IFileManager.ConvertToAbsolutePathForExternalAppForRead(System.String)">
             Converts passed in filename to use an absolute path (for reading)
            
             @param	Filename	filename to convert to use an absolute path, safe to pass in already using absolute path
             
             @return	filename using absolute path
        </member>
        <member name="M:UnrealEngine.IFileManager.ConvertToAbsolutePathForExternalAppForWrite(System.String)">
             Converts passed in filename to use an absolute path (for writing)
            
             @param	Filename	filename to convert to use an absolute path, safe to pass in already using absolute path
             
             @return	filename using absolute path
        </member>
        <member name="F:UnrealEngine.Const.FLOAT_NORMAL_THRESH">
            Lengths of normalized vectors (These are half their maximum values
            to assure that dot products with normalized vectors don't overflow).
        </member>
        <member name="F:UnrealEngine.Const.THRESH_VECTOR_NORMALIZED">
            Allowed error for a normalized vector (against squared magnitude) 
        </member>
        <member name="F:UnrealEngine.Const.THRESH_QUAT_NORMALIZED">
            Allowed error for a normalized quaternion (against squared magnitude) 
        </member>
        <member name="M:UnrealEngine.FMath.SinCos(System.Single@,System.Single@,System.Single)">
             Computes the sine and cosine of a scalar float.
            
             @param ScalarSin	Pointer to where the Sin result should be stored
             @param ScalarCos	Pointer to where the Cos result should be stored
             @param Value  input angles 
        </member>
        <member name="M:UnrealEngine.FScriptMap.AddUninitialized(UnrealEngine.FScriptMap@,UnrealEngine.FScriptMapLayout@)">
             Adds an uninitialized object to the map.
             The map will need rehashing at some point after this call to make it valid.
            
             @return  The index of the added element.
        </member>
    </members>
</doc>
