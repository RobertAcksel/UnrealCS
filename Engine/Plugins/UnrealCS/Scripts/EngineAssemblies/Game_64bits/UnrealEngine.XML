<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnrealEngine</name>
    </assembly>
    <members>
        <member name="F:UnrealEngine.FName.ComparisonIndex">
            Index into the Names array (used to find String portion of the string/number pair used for comparison) 
        </member>
        <member name="F:UnrealEngine.FName.DisplayIndex">
            Index into the Names array (used to find String portion of the string/number pair used for display) 
        </member>
        <member name="F:UnrealEngine.FName.Number">
            Number portion of the string/number pair (stored internally as 1 more than actual, so zero'd memory will be the default, no-instance case) 
        </member>
        <member name="M:UnrealEngine.FPaths.ShouldSaveToUserDir">
            Should the "saved" directory structures be rooted in the user dir or relative to the "engine/game" 
        </member>
        <member name="M:UnrealEngine.FPaths.LaunchDir">
            Returns the directory the application was launched from (useful for commandline utilities)
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPaths.EngineDir" -->
        <member name="M:UnrealEngine.FPaths.EngineUserDir">
             Returns the root directory for user-specific engine files. Always writable.
            
             @return root user directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineVersionAgnosticUserDir">
             Returns the root directory for user-specific engine files which can be shared between versions. Always writable.
            
             @return root user directory
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPaths.EngineContentDir" -->
        <member name="M:UnrealEngine.FPaths.EngineConfigDir">
             Returns the directory the root configuration files are located.
            
             @return root config directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineIntermediateDir">
             Returns the intermediate directory of the engine
            
             @return content directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineSavedDir">
             Returns the saved directory of the engine
            
             @return Saved directory.
        </member>
        <member name="M:UnrealEngine.FPaths.EnginePluginsDir">
             Returns the plugins directory of the engine
            
             @return Plugins directory.
        </member>
        <member name="M:UnrealEngine.FPaths.RootDir">
             Returns the root directory of the engine directory tree
            
             @return Root directory.
        </member>
        <member name="M:UnrealEngine.FPaths.GameDir">
             Returns the base directory of the current game by looking at FApp::GetGameName().
             This is usually a subdirectory of the installation
             root directory and can be overridden on the command line to allow self
             contained mod support.
            
             @return base directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameUserDir">
             Returns the root directory for user-specific game files.
            
             @return game user directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameContentDir">
             Returns the content directory of the current game by looking at FApp::GetGameName().
            
             @return content directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameConfigDir">
             Returns the directory the root configuration files are located.
            
             @return root config directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameSavedDir">
             Returns the saved directory of the current game by looking at FApp::GetGameName().
            
             @return saved directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameIntermediateDir">
             Returns the intermediate directory of the current game by looking at FApp::GetGameName().
            
             @return intermediate directory
        </member>
        <member name="M:UnrealEngine.FPaths.GamePluginsDir">
             Returns the plugins directory of the current game by looking at FApp::GetGameName().
            
             @return plugins directory
        </member>
        <member name="M:UnrealEngine.FPaths.SourceConfigDir">
             Returns the directory the engine uses to look for the source leaf ini files. This
             can't be an .ini variable for obvious reasons.
            
             @return source config directory
        </member>
        <member name="M:UnrealEngine.FPaths.GeneratedConfigDir">
             Returns the directory the engine saves generated config files.
            
             @return config directory
        </member>
        <member name="M:UnrealEngine.FPaths.SandboxesDir">
             Returns the directory the engine stores sandbox output
            
             @return sandbox directory
        </member>
        <member name="M:UnrealEngine.FPaths.ProfilingDir">
             Returns the directory the engine uses to output profiling files.
            
             @return log directory
        </member>
        <member name="M:UnrealEngine.FPaths.ScreenShotDir">
             Returns the directory the engine uses to output screenshot files.
            
             @return screenshot directory
        </member>
        <member name="M:UnrealEngine.FPaths.BugItDir">
             Returns the directory the engine uses to output BugIt files.
            
             @return screenshot directory
        </member>
        <member name="M:UnrealEngine.FPaths.VideoCaptureDir">
             Returns the directory the engine uses to output user requested video capture files.
            
             @return Video capture directory
        </member>
        <member name="M:UnrealEngine.FPaths.GameLogDir">
             Returns the directory the engine uses to output logs. This currently can't 
             be an .ini setting as the game starts logging before it can read from .ini
             files.
            
             @return log directory
        </member>
        <member name="M:UnrealEngine.FPaths.AutomationDir">
            @return The directory for automation save files
        </member>
        <member name="M:UnrealEngine.FPaths.AutomationTransientDir">
            @return The directory for automation save files that are meant to be deleted every run
        </member>
        <member name="M:UnrealEngine.FPaths.AutomationLogDir">
            @return The directory for automation log files.
        </member>
        <member name="M:UnrealEngine.FPaths.CloudDir">
            @return The directory for local files used in cloud emulation or support
        </member>
        <member name="M:UnrealEngine.FPaths.GameDevelopersDir">
            @return The directory that contains subfolders for developer-specific content
        </member>
        <member name="M:UnrealEngine.FPaths.GameUserDeveloperDir">
            @return The directory that contains developer-specific content for the current user
        </member>
        <member name="M:UnrealEngine.FPaths.DiffDir">
            @return The directory for temp files used for diff'ing
        </member>
        <member name="M:UnrealEngine.FPaths.GameAgnosticSavedDir">
             Returns the saved directory that is not game specific. This is usually the same as
             EngineSavedDir().
            
             @return saved directory
        </member>
        <member name="M:UnrealEngine.FPaths.EngineSourceDir">
            @return The directory where engine source code files are kept
        </member>
        <member name="M:UnrealEngine.FPaths.GameSourceDir">
            @return The directory where game source code files are kept
        </member>
        <member name="M:UnrealEngine.FPaths.FeaturePackDir">
            @return The directory where feature packs are kept
        </member>
        <member name="M:UnrealEngine.FPaths.CollapseRelativeDirectories(System.String@)">
             Takes a fully pathed string and eliminates relative pathing (eg: annihilates ".." with the adjacent directory).
             Assumes all slashes have been converted to TEXT('/').
             For example, takes the string:
            	BaseDirectory/SomeDirectory/../SomeOtherDirectory/Filename.ext
             and converts it to:
            	BaseDirectory/SomeOtherDirectory/Filename.ext
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPaths.MakeStandardFilename(System.String@)" -->
        <member name="M:UnrealEngine.FPaths.MakePlatformFilename(System.String@)">
            Takes an "Unreal" pathname and converts it to a platform filename. 
        </member>
        <member name="M:UnrealEngine.FPaths.ConvertRelativePathToFull(System.String)">
            Converts a relative path name to a fully qualified name relative to the process BaseDir().
        </member>
        <member name="F:UnrealEngine.FScriptDelegate.Object">
            The object bound to this delegate, or nullptr if no object is bound 
        </member>
        <member name="F:UnrealEngine.FScriptDelegate.FunctionName">
            Name of the function to call on the bound object 
        </member>
        <member name="M:UnrealEngine.AActor.GetComponentsByTag(UnrealEngine.TSubclassOf{UnrealEngine.UActorComponent},System.String)">
            <summary>Gets all the components that inherit from the given class with a given tag.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetComponentsByClass(UnrealEngine.TSubclassOf{UnrealEngine.UActorComponent})">
            <summary>
            Gets all the components that inherit from the given class.
                  Currently returns an array of UActorComponent which must be cast to the correct type.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetComponentByClass(UnrealEngine.TSubclassOf{UnrealEngine.UActorComponent})">
            <summary>Script exposed version of FindComponentByClass</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorEyesViewPoint(UnrealEngine.FVector@,UnrealEngine.FRotator@)">
            <summary>
            Returns the point of view of the actor.
            Note that this doesn't mean the camera, but the 'eyes' of the actor.
            For example, for a Pawn, this would define the eye height location,
            and view rotation (which is different from the pawn rotation which has a zeroed pitch component).
            A camera first person view will typically use this view point. Most traces (weapon, AI) will be done from this view point.
            @param       OutLocation - location of view point
            @param       OutRotation - view rotation of actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.ForceNetUpdate">
            <summary>Force actor to be updated to clients</summary>
        </member>
        <member name="M:UnrealEngine.AActor.WasRecentlyRendered(System.Single)">
            <summary>
            Returns true if this actor has been rendered "recently", with a tolerance in seconds to define what "recent" means.
            e.g.: If a tolerance of 0.1 is used, this function will return true only if the actor was rendered in the last 0.1 seconds of game time.
            @param Tolerance  How many seconds ago the actor last render time can be and still count as having been "recently" rendered.
            @return Whether this actor was recently rendered.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetTickGroup(UnrealEngine.ETickingGroup)">
            <summary>
            Sets the ticking group for this actor.
            @param NewTickGroup the new value to assign
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetAttachedActors(UnrealEngine.AActor[]@)">
            <summary>Find all Actors which are attached directly to a component in this actor</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetAttachParentSocketName">
            <summary>Walk up the attachment chain from RootComponent until we encounter a different actor, and return the socket name in the component. If we are not attached to a component in a different actor, returns NAME_None</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetAttachParentActor">
            <summary>Walk up the attachment chain from RootComponent until we encounter a different actor, and return it. If we are not attached to a component in a different actor, returns NULL</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_TeleportTo(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>
            Teleport this actor to a new location. If the actor doesn't fit exactly at the location specified, tries to slightly move it out of walls and such.
            @param DestLocation The target destination point
            @param DestRotation The target rotation at the destination
            @return true if the actor has been successfully moved, or false if it couldn't fit.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetParentActor">
            <summary>If this Actor was created by a Child Actor Component returns the Actor that owns that Child Actor Component</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetParentComponent">
            <summary>If this Actor was created by a Child Actor Component returns that Child Actor Component</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetAllChildActors(UnrealEngine.AActor[]@,System.Boolean)">
            <summary>Returns a list of all child actors, including children of children</summary>
        </member>
        <member name="M:UnrealEngine.AActor.IsChildActor">
            <summary>Returns whether this Actor was spawned by a child actor component</summary>
        </member>
        <member name="M:UnrealEngine.AActor.FlushNetDormancy">
            <summary>Forces dormant actor to replicate but doesn't change NetDormancy state (i.e., they will go dormant again if left dormant)</summary>
        </member>
        <member name="M:UnrealEngine.AActor.IsOverlappingActor(UnrealEngine.AActor)">
            <summary>
            Check whether any component of this Actor is overlapping any component of another Actor.
            @param Other The other Actor to test against
            @return Whether any component of this Actor is overlapping any component of another Actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetOwner">
            <summary>
            Get the owner of this Actor, used primarily for network replication.
            @return Actor that owns this Actor
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetOwner(UnrealEngine.AActor)">
            <summary>
            Set the owner of this Actor, used primarily for network replication.
            @param NewOwner      The Actor whom takes over ownership of this Actor
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.OnRep_ReplicatedMovement">
            <summary>ReplicatedMovement struct replication event</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorTickInterval">
            <summary>Returns the tick interval of this actor's primary tick function</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetActorTickInterval(System.Single)">
            <summary>
            Sets the tick interval of this actor's primary tick function. Will not enable a disabled tick function. Takes effect on next tick.
            @param TickInterval   The rate at which this actor should be ticking
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.IsActorTickEnabled">
            <summary>Returns whether this actor has tick enabled or not</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetActorTickEnabled(System.Boolean)">
            <summary>
            Set this actor's tick functions to be enabled or disabled. Only has an effect if the function is registered
            This only modifies the tick function on actor itself
            @param       bEnabled        Whether it should be enabled or not
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetLifeSpan">
            <summary>Get the remaining lifespan of this actor. If zero is returned the actor lives forever.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetLifeSpan(System.Single)">
            <summary>Set the lifespan of this actor. When it expires the object will be destroyed. If requested lifespan is 0, the timer is cleared and the actor will not be destroyed.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetOverlappingComponents(UnrealEngine.UPrimitiveComponent[]@)">
            <summary>Returns list of components this actor is overlapping.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetOverlappingActors(UnrealEngine.AActor[]@,UnrealEngine.TSubclassOf{UnrealEngine.AActor})">
            <summary>
            Returns list of actors this actor is overlapping (any component overlapping any component). Does not return itself.
            @param OverlappingActors             [out] Returned list of overlapping actors
            @param ClassFilter                   [optional] If set, only returns actors of this class or subclasses
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.MakeNoise(System.Single,UnrealEngine.APawn,UnrealEngine.FVector,System.Single,System.String)">
            <summary>
            Trigger a noise caused by a given Pawn, at a given location.
            Note that the NoiseInstigator Pawn MUST have a PawnNoiseEmitterComponent for the noise to be detected by a PawnSensingComponent.
            Senders of MakeNoise should have an Instigator if they are not pawns, or pass a NoiseInstigator.
            @param Loudness The relative loudness of this noise. Usual range is 0 (no noise) to 1 (full volume). If MaxRange is used, this scales the max range, otherwise it affects the hearing range specified by the sensor.
            @param NoiseInstigator Pawn responsible for this noise.  Uses the actor's Instigator if NoiseInstigator=NULL
            @param NoiseLocation Position of noise source.  If zero vector, use the actor's location.
            @param MaxRange Max range at which the sound may be heard. A value of 0 indicates no max range (though perception may have its own range). Loudness scales the range. (Note: not supported for legacy PawnSensingComponent, only for AIPerception)
            @param Tag Identifier for the noise.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetGameTimeSinceCreation">
            <summary>The number of seconds (in game time) since this Actor was created, relative to Get Game Time In Seconds.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetTickableWhenPaused(System.Boolean)">
            <summary>Sets whether this actor can tick when paused.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetTickableWhenPaused">
            <summary>Gets whether this actor can tick when paused.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.RemoveTickPrerequisiteComponent(UnrealEngine.UActorComponent)">
            <summary>Remove tick dependency on PrerequisiteComponent.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.RemoveTickPrerequisiteActor(UnrealEngine.AActor)">
            <summary>Remove tick dependency on PrerequisiteActor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.AddTickPrerequisiteComponent(UnrealEngine.UActorComponent)">
            <summary>Make this actor tick after PrerequisiteComponent. This only applies to this actor's tick function; dependencies for owned components must be set up separately if desired.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.AddTickPrerequisiteActor(UnrealEngine.AActor)">
            <summary>Make this actor tick after PrerequisiteActor. This only applies to this actor's tick function; dependencies for owned components must be set up separately if desired.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorTimeDilation">
            <summary>
            Get CustomTimeDilation - this can be used for input control or speed control for slomo.
            We don't want to scale input globally because input can be used for UI, which do not care for TimeDilation.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.ActorHasTag(System.String)">
            <summary>See if this actor contains the supplied tag</summary>
        </member>
        <member name="M:UnrealEngine.AActor.DetachRootComponentFromParent(System.Boolean)">
            <summary>
            Detaches the RootComponent of this Actor from any SceneComponent it is currently attached to.
             @param bMaintainWorldTransform     If true, update the relative location/rotation of this component to keep its world position the same
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AttachRootComponentToActor(UnrealEngine.AActor,System.String,UnrealEngine.EAttachLocation,System.Boolean)">
            <summary>
            Attaches the RootComponent of this Actor to the supplied component, optionally at a named socket. It is not valid to call this on components that are not Registered.
             @param AttachLocationType   Type of attachment, AbsoluteWorld to keep its world position, RelativeOffset to keep the object's relative offset and SnapTo to snap to the new parent.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AttachRootComponentTo(UnrealEngine.USceneComponent,System.String,UnrealEngine.EAttachLocation,System.Boolean)">
            <summary>
            Attaches the RootComponent of this Actor to the supplied component, optionally at a named socket. It is not valid to call this on components that are not Registered.
             @param AttachLocationType  Type of attachment, AbsoluteWorld to keep its world position, RelativeOffset to keep the object's relative offset and SnapTo to snap to the new parent.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.AddComponent(System.String,System.Boolean,UnrealEngine.FTransform,UnrealEngine.UObject)">
            <summary>
            Creates a new component and assigns ownership to the Actor this is
            called for. Automatic attachment causes the first component created to
            become the root, and all subsequent components to be attached under that
            root. When bManualAttachment is set, automatic attachment is
            skipped and it is up to the user to attach the resulting component (or
            set it up as the root) themselves.
            @see UK2Node_AddComponent    DO NOT CALL MANUALLY - BLUEPRINT INTERNAL USE ONLY (for Add Component nodes)
            @param TemplateName                                  The name of the Component Template to use.
            @param bManualAttachment                             Whether manual or automatic attachment is to be used
            @param RelativeTransform                             The relative transform between the new component and its attach parent (automatic only)
            @param ComponentTemplateContext              Optional UBlueprintGeneratedClass reference to use to find the template in. If null (or not a BPGC), component is sought in this Actor's class
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.HasAuthority">
            <summary>Returns whether this actor has network authority</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_DestroyActor">
            <summary>Destroy the actor</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorEnableCollision">
            <summary>Get current state of collision for the whole actor</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetActorEnableCollision(System.Boolean)">
            <summary>Allows enabling/disabling collision for the whole actor</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetActorHiddenInGame(System.Boolean)">
            <summary>
            Sets the actor to be hidden in the game
            @param  bNewHidden      Whether or not to hide the actor and all its components
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorRelativeScale3D">
            <summary>Return the actor's relative scale 3d</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetActorRelativeScale3D(UnrealEngine.FVector)">
            <summary>
            Set the actor's RootComponent to the specified relative scale 3d
            @param NewRelativeScale      New scale to set the actor's RootComponent to
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorRelativeTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the actor's RootComponent to the specified relative transform
            @param NewRelativeTransform          New relative transform of the actor's root component
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorRelativeRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the actor's RootComponent to the specified relative rotation
            @param NewRelativeRotation   New relative rotation of the actor's root component
            @param bSweep                                Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                         Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                             Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                         If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                         If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                         If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorRelativeLocation(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the actor's RootComponent to the specified relative location.
            @param NewRelativeLocation   New relative location of the actor's root component
            @param bSweep                                Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                         Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                             Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                         If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                         If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                         If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AddActorLocalTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the transform of this component in its local reference frame
            @param NewTransform          The change in transform in local space.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AddActorLocalRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the rotation of this component in its local reference frame
            @param DeltaRotation         The change in rotation in local space.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AddActorLocalOffset(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the location of this component in its local reference frame.
            @param DelatLocation         The change in location in local space.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the Actors transform to the specified one.
            @param NewTransform          The new transform.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AddActorWorldTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>Adds a delta to the transform of this actor in world space. Scale is unchanged.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AddActorWorldRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the rotation of this actor in world space.
            @param DeltaRotation         The change in rotation.
            @param bSweep                        Whether to sweep to the target rotation (not currently supported for rotation).
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            @param SweepHitResult        The hit result from the move if swept.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_AddActorWorldOffset(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the location of this actor in world space.
            @param DeltaLocation         The change in location.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            @param SweepHitResult        The hit result from the move if swept.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetHorizontalDotProductTo(UnrealEngine.AActor)">
            <summary>Returns the dot product from this Actor to OtherActor, ignoring Z. Returns -2.0 on failure. Returns 0.0 for coincidental actors.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetDotProductTo(UnrealEngine.AActor)">
            <summary>Returns the dot product from this Actor to OtherActor. Returns -2.0 on failure. Returns 0.0 for coincidental actors.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetVerticalDistanceTo(UnrealEngine.AActor)">
            <summary>Returns the distance from this Actor to OtherActor, ignoring XY.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetHorizontalDistanceTo(UnrealEngine.AActor)">
            <summary>Returns the distance from this Actor to OtherActor, ignoring Z.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetSquaredDistanceTo(UnrealEngine.AActor)">
            <summary>Returns the squared distance from this Actor to OtherActor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetDistanceTo(UnrealEngine.AActor)">
            <summary>Returns the distance from this Actor to OtherActor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorScale3D">
            <summary>Returns the Actor's world-space scale.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetActorScale3D(UnrealEngine.FVector)">
            <summary>Set the Actor's world-space scale.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorLocationAndRotation(UnrealEngine.FVector,UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Move the actor instantly to the specified location and rotation.
            @param NewLocation           The new location to teleport the Actor to.
            @param NewRotation           The new rotation for the Actor.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            @param SweepHitResult        The hit result from the move if swept.
            @return      Whether the rotation was successfully set.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorRotation(UnrealEngine.FRotator,System.Boolean)">
            <summary>
            Set the Actor's rotation instantly to the specified rotation.
            @param       NewRotation     The new rotation for the Actor.
            @param       bTeleportPhysics Whether we teleport the physics state (if physics collision is enabled for this object).
                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
            @return      Whether the rotation was successfully set.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetVelocity">
            <summary>Returns velocity (in cm/s (Unreal Units/second) of the rootcomponent if it is either using physics or has an associated MovementComponent</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_GetRootComponent">
            <summary>Returns the RootComponent of this Actor</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorBounds(System.Boolean,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>
            Returns the bounding box of all components that make up this Actor (excluding ChildActorComponents).
            @param       bOnlyCollidingComponents        If true, will only return the bounding box for components with collision enabled.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorRightVector">
            <summary>Get the right (Y) vector (length 1.0) from this Actor, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorUpVector">
            <summary>Get the up (Z) vector (length 1.0) from this Actor, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetActorForwardVector">
            <summary>Get the forward (X) vector (length 1.0) from this Actor, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_GetActorRotation">
            <summary>Returns rotation of the RootComponent of this Actor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_SetActorLocation(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Move the Actor to the specified location.
            @param NewLocation   The new location to move the Actor to.
            @param bSweep                Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                         Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport             Whether we teleport the physics state (if physics collision is enabled for this object).
                                                         If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                         If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                         If CCD is on and not teleporting, this will affect objects along the entire swept volume.
            @param SweepHitResult        The hit result from the move if swept.
            @return      Whether the location was successfully set (if not swept), or whether movement occurred at all (if swept).
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.K2_GetActorLocation">
            <summary>Returns the location of the RootComponent of this Actor</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetTransform">
            <summary>
            Get the actor-to-world transform.
            @return The transform that transforms from actor space to world space.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetInstigatorController">
            <summary>Returns the instigator's controller for this actor, or NULL if there is none.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetInstigator">
            <summary>Returns the instigator for this actor, or NULL if there is none.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetInputVectorAxisValue(UnrealEngine.FKey)">
            <summary>Gets the value of the input axis key if input is enabled for this actor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetInputAxisKeyValue(UnrealEngine.FKey)">
            <summary>Gets the value of the input axis key if input is enabled for this actor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetInputAxisValue(System.String)">
            <summary>Gets the value of the input axis if input is enabled for this actor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.DisableInput(UnrealEngine.APlayerController)">
            <summary>
            Removes this actor from the stack of input being handled by a PlayerController.
            @param PlayerController The PlayerController whose input events we no longer want to receive. If null, this actor will stop receiving input from all PlayerControllers.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.EnableInput(UnrealEngine.APlayerController)">
            <summary>
            Pushes this actor on to the stack of input being handled by a PlayerController.
            @param PlayerController The PlayerController whose input events we want to receive.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.OnRep_Instigator">
            <summary>Called on clients when Instigator is replicated.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.OnRep_AttachmentReplication">
            <summary>Called on client when updated AttachmentReplication value is received for this actor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.GetRemoteRole">
            <summary>Returns how much control the remote machine has over this actor.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetReplicateMovement(System.Boolean)">
            <summary>
            Set whether this actor's movement replicates to network clients.
            @param bInReplicateMovement Whether this Actor's movement replicates to clients.
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.SetReplicates(System.Boolean)">
            <summary>
            Set whether this actor replicates to network clients. When this actor is spawned on the server it will be sent to clients as well.
            Properties flagged for replication will update on clients if they change on the server.
            Internally changes the RemoteRole property and handles the cases where the actor needs to be added to the network actor list.
            @param bInReplicates Whether this Actor replicates to network clients.
            @see https://docs.unrealengine.com/latest/INT/Gameplay/Networking/Replication/
            </summary>
        </member>
        <member name="M:UnrealEngine.AActor.TearOff">
            <summary>Networking - Server - TearOff this actor to stop replication to clients. Will set bTearOff to true.</summary>
        </member>
        <member name="M:UnrealEngine.AActor.OnRep_ReplicateMovement">
            <summary>Called on client when updated bReplicateMovement value is received for this actor.</summary>
        </member>
        <member name="M:UnrealEngine.ACameraActor.GetAutoActivatePlayerIndex">
            <summary>Returns index of the player for whom we auto-activate, or INDEX_NONE (-1) if disabled.</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.GetAnimRootMotionTranslationScale">
            <summary>Returns current value of AnimRootMotionScale</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.IsPlayingNetworkedRootMotionMontage">
            <summary>
            true if we are playing Root Motion right now, through a Montage with RootMotionMode == ERootMotionMode::RootMotionFromMontagesOnly.
            This means code path for networked root motion is enabled.
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.IsPlayingRootMotion">
            <summary>true if we are playing Root Motion right now</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.OnRep_RootMotion">
            <summary>Handles replicated root motion properties on simulated proxies and position correction.</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.UnCrouch(System.Boolean)">
            <summary>
            Request the character to stop crouching. The request is processed on the next update of the CharacterMovementComponent.
            @see OnEndCrouch
            @see IsCrouched
            @see CharacterMovement->WantsToCrouch
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.Crouch(System.Boolean)">
            <summary>
            Request the character to start crouching. The request is processed on the next update of the CharacterMovementComponent.
            @see OnStartCrouch
            @see IsCrouched
            @see CharacterMovement->WantsToCrouch
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.LaunchCharacter(UnrealEngine.FVector,System.Boolean,System.Boolean)">
            <summary>
            Set a pending launch velocity on the Character. This velocity will be processed on the next CharacterMovementComponent tick,
            and will set it to the "falling" state. Triggers the OnLaunched event.
            @PARAM LaunchVelocity is the velocity to impart to the Character
            @PARAM bXYOverride if true replace the XY part of the Character's velocity instead of adding to it.
            @PARAM bZOverride if true replace the Z component of the Character's velocity instead of adding to it.
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.GetCurrentMontage">
            <summary>Return current playing Montage *</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.StopAnimMontage(UnrealEngine.UAnimMontage)">
            <summary>Stop Animation Montage. If NULL, it will stop what's currently active. The Blend Out Time is taken from the montage asset that is being stopped. *</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.PlayAnimMontage(UnrealEngine.UAnimMontage,System.Single,System.String)">
            <summary>Play Animation Montage on the character mesh *</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.IsJumpProvidingForce">
            <summary>
            True if jump is actively providing a force, such as when the jump key is held and the time it has been held is less than JumpMaxHoldTime.
            @see CharacterMovement->IsFalling
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.CanJump">
            <summary>
            Check if the character can jump in the current state.
            The default implementation may be overridden or extended by implementing the custom CanJump event in Blueprints.
            @Return Whether the character can jump in the current state.
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.StopJumping">
            <summary>
            Stop the character from jumping on the next update.
            Call this from an input event (such as a button 'up' event) to cease applying
            jump Z-velocity. If this is not called, then jump z-velocity will be applied
            until JumpMaxHoldTime is reached.
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.Jump">
            <summary>
            Make the character jump on the next update.
            If you want your character to jump according to the time that the jump key is held,
            then you can set JumpKeyHoldTime to some non-zero value. Make sure in this case to
            call StopJumping() when you want the jump's z-velocity to stop being applied (such
            as on a button up event), otherwise the character will carry on receiving the
            velocity until JumpKeyHoldTime is reached.
            </summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.OnRep_IsCrouched">
            <summary>Handle Crouching replicated from server</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.GetBaseRotationOffsetRotator">
            <summary>Get the saved rotation offset of mesh. This is how much extra rotation is applied from the capsule rotation.</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.GetBaseTranslationOffset">
            <summary>Get the saved translation offset of mesh. This is how much extra offset is applied from the center of the capsule.</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.SetReplicateMovement(System.Boolean)">
            <summary>Set whether this actor's movement replicates to network clients.</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.OnRep_ReplicatedBasedMovement">
            <summary>Rep notify for ReplicatedBasedMovement</summary>
        </member>
        <member name="M:UnrealEngine.ACharacter.CacheInitialMeshOffset(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>
            Cache mesh offset from capsule. This is used as the target for network smoothing interpolation, when the mesh is offset with lagged smoothing.
            This is automatically called during initialization; call this at runtime if you intend to change the default mesh offset from the capsule.
            @see GetBaseTranslationOffset(), GetBaseRotationOffset()
            </summary>
        </member>
        <member name="M:UnrealEngine.AController.ResetIgnoreInputFlags">
            <summary>Reset move and look input ignore flags.</summary>
        </member>
        <member name="M:UnrealEngine.AController.IsLookInputIgnored">
            <summary>Returns true if look input is ignored.</summary>
        </member>
        <member name="M:UnrealEngine.AController.ResetIgnoreLookInput">
            <summary>Stops ignoring look input by resetting the ignore look input state.</summary>
        </member>
        <member name="M:UnrealEngine.AController.SetIgnoreLookInput(System.Boolean)">
            <summary>
            Locks or unlocks look input, consecutive calls stack up and require the same amount of calls to undo, or can all be undone using ResetIgnoreLookInput.
            @param bNewLookInput  If true, look input is ignored. If false, input is not ignored.
            </summary>
        </member>
        <member name="M:UnrealEngine.AController.IsMoveInputIgnored">
            <summary>Returns true if movement input is ignored.</summary>
        </member>
        <member name="M:UnrealEngine.AController.ResetIgnoreMoveInput">
            <summary>Stops ignoring move input by resetting the ignore move input state.</summary>
        </member>
        <member name="M:UnrealEngine.AController.SetIgnoreMoveInput(System.Boolean)">
            <summary>
            Locks or unlocks movement input, consecutive calls stack up and require the same amount of calls to undo, or can all be undone using ResetIgnoreMoveInput.
            @param bNewMoveInput  If true, move input is ignored. If false, input is not ignored.
            </summary>
        </member>
        <member name="M:UnrealEngine.AController.StopMovement">
            <summary>Aborts the move the controller is currently performing</summary>
        </member>
        <member name="M:UnrealEngine.AController.UnPossess">
            <summary>Called to unpossess our pawn for any reason that is not the pawn being destroyed (destruction handled by PawnDestroyed()).</summary>
        </member>
        <member name="M:UnrealEngine.AController.Possess(UnrealEngine.APawn)">
            <summary>
            Handles attaching this controller to the specified pawn.
            Only runs on the network authority (where HasAuthority() returns true).
            @param InPawn The Pawn to be possessed.
            @see HasAuthority()
            </summary>
        </member>
        <member name="M:UnrealEngine.AController.IsLocalController">
            <summary>Returns whether this Controller is a local controller.</summary>
        </member>
        <member name="M:UnrealEngine.AController.IsLocalPlayerController">
            <summary>Returns whether this Controller is a locally controlled PlayerController.</summary>
        </member>
        <member name="M:UnrealEngine.AController.IsPlayerController">
            <summary>Returns whether this Controller is a PlayerController.</summary>
        </member>
        <member name="M:UnrealEngine.AController.GetDesiredRotation">
            <summary>Get the desired pawn target rotation</summary>
        </member>
        <member name="M:UnrealEngine.AController.GetViewTarget">
            <summary>Get the actor the controller is looking at</summary>
        </member>
        <member name="M:UnrealEngine.AController.K2_GetPawn">
            <summary>Return the Pawn that is currently 'controlled' by this PlayerController</summary>
        </member>
        <member name="M:UnrealEngine.AController.ClientSetRotation(UnrealEngine.FRotator,System.Boolean)">
            <summary>Replicated function to set the pawn rotation, allowing the server to force.</summary>
        </member>
        <member name="M:UnrealEngine.AController.ClientSetLocation(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>Replicated function to set the pawn location and rotation, allowing server to force (ex. teleports).</summary>
        </member>
        <member name="M:UnrealEngine.AController.OnRep_Pawn">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="M:UnrealEngine.AController.LineOfSightTo(UnrealEngine.AActor,UnrealEngine.FVector,System.Boolean)">
            <summary>
            Checks line to center and top of other actor
            @param Other is the actor whose visibility is being checked.
            @param ViewPoint is eye position visibility is being checked from.  If vect(0,0,0) passed in, uses current viewtarget's eye position.
            @param bAlternateChecks used only in AIController implementation
            @return true if controller's pawn can see Other actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.AController.SetInitialLocationAndRotation(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>Set the initial location and rotation of the controller, as well as the control rotation. Typically used when the controller is first created.</summary>
        </member>
        <member name="M:UnrealEngine.AController.SetControlRotation(UnrealEngine.FRotator)">
            <summary>Set the control rotation.</summary>
        </member>
        <member name="M:UnrealEngine.AController.GetControlRotation">
            <summary>
            Get the control rotation. This is the full aim rotation, which may be different than a camera orientation (for example in a third person view),
            and may differ from the rotation of the controlled Pawn (which may choose not to visually pitch or roll, for example).
            </summary>
        </member>
        <member name="M:UnrealEngine.ADebugCameraController.SetPawnMovementSpeedScale(System.Single)">
            <summary>Sets the pawn movement speed scale.</summary>
        </member>
        <member name="M:UnrealEngine.ADebugCameraController.ToggleDisplay">
            <summary>Toggles the display of debug info and input commands for the Debug Camera.</summary>
        </member>
        <member name="M:UnrealEngine.ADebugCameraController.ShowDebugSelectedInfo">
            <summary>@todo document</summary>
        </member>
        <member name="M:UnrealEngine.ADefaultPawn.LookUpAtRate(System.Single)">
            <summary>
            Called via input to look up at a given rate (or down if Rate is negative).
            @param Rate   This is a normalized rate, i.e. 1.0 means 100% of desired turn rate
            </summary>
        </member>
        <member name="M:UnrealEngine.ADefaultPawn.TurnAtRate(System.Single)">
            <summary>
            Called via input to turn at a given rate.
            @param Rate  This is a normalized rate, i.e. 1.0 means 100% of desired turn rate
            </summary>
        </member>
        <member name="M:UnrealEngine.ADefaultPawn.MoveUp_World(System.Single)">
            <summary>
            Input callback to move up in world space (or down if Val is negative).
            @param Val Amount of movement in the world up direction (or down if negative).
            @see APawn::AddMovementInput()
            </summary>
        </member>
        <member name="M:UnrealEngine.ADefaultPawn.MoveRight(System.Single)">
            <summary>
            Input callback to strafe right in local space (or left if Val is negative).
            @param Val Amount of movement in the right direction (or left if negative).
            @see APawn::AddMovementInput()
            </summary>
        </member>
        <member name="M:UnrealEngine.ADefaultPawn.MoveForward(System.Single)">
            <summary>
            Input callback to move forward in local space (or backward if Val is negative).
            @param Val Amount of movement in the forward direction (or backward if negative).
            @see APawn::AddMovementInput()
            </summary>
        </member>
        <member name="M:UnrealEngine.AEmitter.OnRep_bCurrentlyActive">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="M:UnrealEngine.AExponentialHeightFog.OnRep_bEnabled">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.SetBandwidthLimit(System.Single)">
            <summary>Alters the synthetic bandwidth limit for a running game.</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.Say(System.String)">
            <summary>Exec command to broadcast a string to all players</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.AbortMatch">
            <summary>Report that a match has failed due to unrecoverable error</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.RestartGame">
            <summary>Restart the game, by default travel to the current map</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.EndMatch">
            <summary>Transition from InProgress to WaitingPostMatch. You can call this manually, will also get called if ReadyToEndMatch returns true</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.StartMatch">
            <summary>Transition from WaitingToStart to InProgress. You can call this manually, will also get called if ReadyToStartMatch returns true</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.HasMatchEnded">
            <summary>Returns true if the match state is WaitingPostMatch or later</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.IsMatchInProgress">
            <summary>Returns true if the match state is InProgress or other gameplay state</summary>
        </member>
        <member name="M:UnrealEngine.AGameMode.GetMatchState">
            <summary>Returns the current match state, this is an accessor to protect the state machine flow</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.RestartPlayerAtTransform(UnrealEngine.AController,UnrealEngine.FTransform)">
            <summary>Tries to spawn the player's pawn at a specific location</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.RestartPlayerAtPlayerStart(UnrealEngine.AController,UnrealEngine.AActor)">
            <summary>Tries to spawn the player's pawn at the specified actor's location</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.RestartPlayer(UnrealEngine.AController)">
            <summary>Tries to spawn the player's pawn, at the location returned by FindPlayerStart</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.K2_FindPlayerStart(UnrealEngine.AController,System.String)">
            <summary>
            Return the specific player start actor that should be used for the next spawn
            This will either use a previously saved startactor, or calls ChoosePlayerStart
            @param Player The AController for whom we are choosing a Player Start
            @param IncomingName Specifies the tag of a Player Start to use
            @returns Actor chosen as player start (usually a PlayerStart)
            </summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.ChangeName(UnrealEngine.AController,System.String,System.Boolean)">
            <summary>
            Sets the name for a controller
            @param Controller    The controller of the player to change the name of
            @param NewName               The name to set the player to
            @param bNameChange   Whether the name is changing or if this is the first time it has been set
            </summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.ReturnToMainMenuHost">
            <summary>Return to main menu, and disconnect any players</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.ResetLevel">
            <summary>
            Overridable function called when resetting level. This is used to reset the game state while staying in the same map
            Default implementation calls Reset() on all actors except GameMode and Controllers
            </summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.HasMatchStarted">
            <summary>Returns true if the match start callbacks have been called</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.StartPlay">
            <summary>Transitions to calls BeginPlay on actors.</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.GetNumSpectators">
            <summary>Returns number of human players currently spectating</summary>
        </member>
        <member name="M:UnrealEngine.AGameModeBase.GetNumPlayers">
            <summary>Returns number of active human players, excluding spectators</summary>
        </member>
        <member name="M:UnrealEngine.AGameState.OnRep_ElapsedTime">
            <summary>Gives clients the chance to do something when time gets updates</summary>
        </member>
        <member name="M:UnrealEngine.AGameState.OnRep_MatchState">
            <summary>Match state has changed</summary>
        </member>
        <member name="M:UnrealEngine.AGameStateBase.GetPlayerRespawnDelay(UnrealEngine.AController)">
            <summary>Returns how much time needs to be spent before a player can respawn</summary>
        </member>
        <member name="M:UnrealEngine.AGameStateBase.GetPlayerStartTime(UnrealEngine.AController)">
            <summary>Returns the time that should be used as when a player started</summary>
        </member>
        <member name="M:UnrealEngine.AGameStateBase.HasMatchStarted">
            <summary>Returns true if the world has started match (called MatchStarted callbacks)</summary>
        </member>
        <member name="M:UnrealEngine.AGameStateBase.HasBegunPlay">
            <summary>Returns true if the world has started play (called BeginPlay on actors)</summary>
        </member>
        <member name="M:UnrealEngine.AGameStateBase.GetServerWorldTimeSeconds">
            <summary>Returns the simulated TimeSeconds on the server, will be synchronized on client and server</summary>
        </member>
        <member name="M:UnrealEngine.AHUD.AddHitBox(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.String,System.Boolean,System.Int32)">
            <summary>
            Add a hitbox to the hud
            @param Position                      Coordinates of the top left of the hit box.
            @param Size                          Size of the hit box.
            @param Name                          Name of the hit box.
            @param bConsumesInput        Whether click processing should continue if this hit box is clicked.
            @param Priority                      The priority of the box used for layering. Larger values are considered first.  Equal values are considered in the order they were added.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.AHUD.GetActorsInSelectionRectangle(UnrealEngine.TSubclassOf{UnrealEngine.AActor},UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.AActor[]@,System.Boolean,System.Boolean)" -->
        <member name="M:UnrealEngine.AHUD.Deproject(System.Single,System.Single,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Transforms a 2D screen location into a 3D location and direction</summary>
        </member>
        <member name="M:UnrealEngine.AHUD.Project(UnrealEngine.FVector)">
            <summary>Transforms a 3D world-space vector into 2D screen coordinates</summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawMaterialSimple(UnrealEngine.UMaterialInterface,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws a material-textured quad on the HUD.  Assumes UVs such that the entire material is shown.
            @param Material                      Material to use
            @param ScreenX                       Screen-space X coordinate of upper left corner of the quad.
            @param ScreenY                       Screen-space Y coordinate of upper left corner of the quad.
            @param ScreenW                       Screen-space width of the quad (in pixels).
            @param ScreenH                       Screen-space height of the quad (in pixels).
            @param Scale                         Amount to scale the entire texture (horizontally and vertically)
            @param bScalePosition        Whether the "Scale" parameter should also scale the position of this draw call.
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawMaterial(UnrealEngine.UMaterialInterface,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Single,UnrealEngine.FVector2D)">
            <summary>
            Draws a material-textured quad on the HUD.
            @param Material                      Material to use
            @param ScreenX                       Screen-space X coordinate of upper left corner of the quad.
            @param ScreenY                       Screen-space Y coordinate of upper left corner of the quad.
            @param ScreenW                       Screen-space width of the quad (in pixels).
            @param ScreenH                       Screen-space height of the quad (in pixels).
            @param MaterialU                     Texture-space U coordinate of upper left corner of the quad
            @param MaterialV                     Texture-space V coordinate of upper left corner of the quad.
            @param MaterialUWidth        Texture-space width of the quad (in normalized UV distance).
            @param MaterialVHeight       Texture-space height of the quad (in normalized UV distance).
            @param Scale                         Amount to scale the entire texture (horizontally and vertically)
            @param bScalePosition        Whether the "Scale" parameter should also scale the position of this draw call.
            @param Rotation                      Amount to rotate this quad
            @param RotPivot                      Location (as proportion of quad, 0-1) to rotate about
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawTextureSimple(UnrealEngine.UTexture,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Draws a textured quad on the HUD. Assumes 1:1 texel density.
            @param Texture                       Texture to draw.
            @param ScreenX                       Screen-space X coordinate of upper left corner of the quad.
            @param ScreenY                       Screen-space Y coordinate of upper left corner of the quad.
            @param Scale                         Scale multiplier to control size of the text.
            @param bScalePosition        Whether the "Scale" parameter should also scale the position of this draw call.
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawTexture(UnrealEngine.UTexture,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,UnrealEngine.FLinearColor,UnrealEngine.EBlendMode,System.Single,System.Boolean,System.Single,UnrealEngine.FVector2D)">
            <summary>
            Draws a textured quad on the HUD.
            @param Texture                       Texture to draw.
            @param ScreenX                       Screen-space X coordinate of upper left corner of the quad.
            @param ScreenY                       Screen-space Y coordinate of upper left corner of the quad.
            @param ScreenW                       Screen-space width of the quad (in pixels).
            @param ScreenH                       Screen-space height of the quad (in pixels).
            @param TextureU                      Texture-space U coordinate of upper left corner of the quad
            @param TextureV                      Texture-space V coordinate of upper left corner of the quad.
            @param TextureUWidth         Texture-space width of the quad (in normalized UV distance).
            @param TextureVHeight        Texture-space height of the quad (in normalized UV distance).
            @param TintColor                     Vertex color for the quad.
            @param BlendMode                     Controls how to blend this quad with the scene. Translucent by default.
            @param Scale                         Amount to scale the entire texture (horizontally and vertically)
            @param bScalePosition        Whether the "Scale" parameter should also scale the position of this draw call.
            @param Rotation                      Amount to rotate this quad
            @param RotPivot                      Location (as proportion of quad, 0-1) to rotate about
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawRect(UnrealEngine.FLinearColor,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws a colored untextured quad on the HUD.
            @param RectColor                     Color of the rect. Can be translucent.
            @param ScreenX                       Screen-space X coordinate of upper left corner of the quad.
            @param ScreenY                       Screen-space Y coordinate of upper left corner of the quad.
            @param ScreenW                       Screen-space width of the quad (in pixels).
            @param ScreenH                       Screen-space height of the quad (in pixels).
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawLine(System.Single,System.Single,System.Single,System.Single,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Draws a 2D line on the HUD.
            @param StartScreenX          Screen-space X coordinate of start of the line.
            @param StartScreenY          Screen-space Y coordinate of start of the line.
            @param EndScreenX            Screen-space X coordinate of end of the line.
            @param EndScreenY            Screen-space Y coordinate of end of the line.
            @param LineColor                     Color to draw line
            @param LineThickness         Thickness of the line to draw
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.DrawText(System.String,UnrealEngine.FLinearColor,System.Single,System.Single,UnrealEngine.UFont,System.Single,System.Boolean)">
            <summary>
            Draws a string on the HUD.
            @param Text                          String to draw
            @param TextColor                     Color to draw string
            @param ScreenX                       Screen-space X coordinate of upper left corner of the string.
            @param ScreenY                       Screen-space Y coordinate of upper left corner of the string.
            @param Font                          Font to draw text.  If NULL, default font is chosen.
            @param Scale                         Scale multiplier to control size of the text.
            @param bScalePosition        Whether the "Scale" parameter should also scale the position of this draw call.
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.GetTextSize(System.String,System.Single@,System.Single@,UnrealEngine.UFont,System.Single)">
            <summary>
            Returns the width and height of a string.
            @param Text                          String to draw
            @param OutWidth                      Returns the width in pixels of the string.
            @param OutHeight                     Returns the height in pixels of the string.
            @param Font                          Font to draw text.  If NULL, default font is chosen.
            @param Scale                         Scale multiplier to control size of the text.
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.RemoveDebugText(UnrealEngine.AActor,System.Boolean)">
            <summary>
            Remove debug strings for the given actor
            @param       SrcActor                        Actor whose string you wish to remove
            @param       bLeaveDurationText      when true text that has a finite duration will be removed, otherwise all will be removed for given actor
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.RemoveAllDebugStrings">
            <summary>Remove all debug strings added via AddDebugText</summary>
        </member>
        <member name="M:UnrealEngine.AHUD.AddDebugText(System.String,UnrealEngine.AActor,System.Single,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FColor,System.Boolean,System.Boolean,System.Boolean,UnrealEngine.UFont,System.Single,System.Boolean)">
            <summary>
            Add debug text for a specific actor to be displayed via DrawDebugTextList().  If the debug text is invalid then it will
            attempt to remove any previous entries via RemoveDebugText().
            @param DebugText                             Text to draw
            @param SrcActor                              Actor to which this relates
            @param Duration                              Duration to display the string
            @param Offset                                Initial offset to render text
            @param DesiredOffset                 Desired offset to render text - the text will move to this location over the given duration
            @param TextColor                     Color of text to render
            @param bSkipOverwriteCheck   skips the check to see if there is already debug text for the given actor
            @param bAbsoluteLocation     use an absolute world location
            @param bKeepAttachedToActor  if this is true the text will follow the actor, otherwise it will be drawn at the location when the call was made
            @param InFont                                font to use
            @param FontScale                     scale
            @param bDrawShadow                   Draw shadow on this string
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.AHUD.ShowDebugForReticleTargetToggle(UnrealEngine.TSubclassOf{UnrealEngine.AActor})" -->
        <member name="M:UnrealEngine.AHUD.ShowDebugToggleSubCategory(System.String)">
            <summary>Toggles sub categories of show debug to customize display</summary>
        </member>
        <member name="M:UnrealEngine.AHUD.ShowDebug(System.String)">
            <summary>
            Toggles displaying properties of player's current ViewTarget
            DebugType input values supported by base engine include "AI", "physics", "net", "camera", and "collision"
            </summary>
        </member>
        <member name="M:UnrealEngine.AHUD.ShowHUD">
            <summary>hides or shows HUD</summary>
        </member>
        <member name="M:UnrealEngine.ALevelScriptActor.SetCinematicMode(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the cinematic mode on all PlayerControllers
            @param       bInCinematicMode        specify true if the player is entering cinematic mode; false if the player is leaving cinematic mode.
            @param       bHidePlayer                     specify true to hide the player's pawn (only relevant if bInCinematicMode is true)
            @param       bAffectsHUD                     specify true if we should show/hide the HUD to match the value of bCinematicMode
            @param       bAffectsMovement        specify true to disable movement in cinematic mode, enable it when leaving
            @param       bAffectsTurning         specify true to disable turning in cinematic mode or enable it when leaving
            </summary>
        </member>
        <member name="M:UnrealEngine.ALevelScriptActor.RemoteEvent(System.String)">
            <summary>Tries to find an event named "EventName" on all other levels, and calls it</summary>
        </member>
        <member name="M:UnrealEngine.ALight.OnRep_bEnabled">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.SetLoopingState(System.Boolean)">
            <summary>Change the looping behaviour of this matinee</summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.ChangePlaybackDirection">
            <summary>Changes the direction of playback (go in reverse if it was going forward, or vice versa)</summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.SetPosition(System.Single,System.Boolean)">
            <summary>
            Set the position of the interpolation.
            @note if the interpolation is not currently active, this function doesn't send any Kismet events
            @param NewPosition the new position to set the interpolation to
            @param bJump if true, teleport to the new position (don't trigger any events between the old and new positions, etc)
            </summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.Pause">
            <summary>Hold playback at its current position. Calling Pause again will continue playback in its current direction.</summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.Reverse">
            <summary>Similar to play, but the playback will go backwards until the beginning of the sequence is reached.</summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.Stop">
            <summary>Stops playback at the current position</summary>
        </member>
        <member name="M:UnrealEngine.AMatineeActor.Play">
            <summary>
            Begin playback of the matinee. Only called in game.
            Will then advance Position by (PlayRate * Deltatime) each time the matinee is ticked.
            </summary>
        </member>
        <member name="M:UnrealEngine.ANavLinkProxy.HasMovingAgents">
            <summary>check if any agent is moving through smart link right now</summary>
        </member>
        <member name="M:UnrealEngine.ANavLinkProxy.SetSmartLinkEnabled(System.Boolean)">
            <summary>change state of smart link</summary>
        </member>
        <member name="M:UnrealEngine.ANavLinkProxy.IsSmartLinkEnabled">
            <summary>check if smart link is enabled</summary>
        </member>
        <member name="M:UnrealEngine.ANavLinkProxy.ResumePathFollowing(UnrealEngine.AActor)">
            <summary>resume normal path following</summary>
        </member>
        <member name="T:UnrealEngine.AnimationCompressionFormat">
            <summary>Indicates animation data compression format.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.IsMoveInputIgnored">
            <summary>Helper to see if move input is ignored. If our controller is a PlayerController, checks Controller->IsMoveInputIgnored().</summary>
        </member>
        <member name="M:UnrealEngine.APawn.AddControllerRollInput(System.Single)">
            <summary>
            Add input (affecting Roll) to the Controller's ControlRotation, if it is a local PlayerController.
            This value is multiplied by the PlayerController's InputRollScale value.
            @param Val Amount to add to Roll. This value is multiplied by the PlayerController's InputRollScale value.
            @see PlayerController::InputRollScale
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.AddControllerYawInput(System.Single)">
            <summary>
            Add input (affecting Yaw) to the Controller's ControlRotation, if it is a local PlayerController.
            This value is multiplied by the PlayerController's InputYawScale value.
            @param Val Amount to add to Yaw. This value is multiplied by the PlayerController's InputYawScale value.
            @see PlayerController::InputYawScale
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.AddControllerPitchInput(System.Single)">
            <summary>
            Add input (affecting Pitch) to the Controller's ControlRotation, if it is a local PlayerController.
            This value is multiplied by the PlayerController's InputPitchScale value.
            @param Val Amount to add to Pitch. This value is multiplied by the PlayerController's InputPitchScale value.
            @see PlayerController::InputPitchScale
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.ConsumeMovementInputVector">
            <summary>
            Returns the pending input vector and resets it to zero.
            This should be used during a movement update (by the Pawn or PawnMovementComponent) to prevent accumulation of control input between frames.
            Copies the pending input vector to the saved input vector (GetLastMovementInputVector()).
            @return The pending input vector.
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetLastMovementInputVector">
            <summary>
            Return the last input vector in world space that was processed by ConsumeMovementInputVector(), which is usually done by the Pawn or PawnMovementComponent.
            Any user that needs to know about the input that last affected movement should use this function.
            For example an animation update would want to use this, since by default the order of updates in a frame is:
            PlayerController (device input) -> MovementComponent -> Pawn -> Mesh (animations)
            @return The last input vector in world space that was processed by ConsumeMovementInputVector().
            @see AddMovementInput(), GetPendingMovementInputVector(), ConsumeMovementInputVector()
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetPendingMovementInputVector">
            <summary>
            Return the pending input vector in world space. This is the most up-to-date value of the input vector, pending ConsumeMovementInputVector() which clears it,
            Usually only a PawnMovementComponent will want to read this value, or the Pawn itself if it is responsible for movement.
            @return The pending input vector in world space.
            @see AddMovementInput(), GetLastMovementInputVector(), ConsumeMovementInputVector()
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.APawn.AddMovementInput(UnrealEngine.FVector,System.Single,System.Boolean)" -->
        <member name="M:UnrealEngine.APawn.SpawnDefaultController">
            <summary>Spawn default controller for this Pawn, and get possessed by it.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.DetachFromControllerPendingDestroy">
            <summary>Call this function to detach safely pawn from its controller, knowing that we will be destroyed soon.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetBaseAimRotation">
            <summary>
            Return the aim rotation for the Pawn.
            If we have a controller, by default we aim at the player's 'eyes' direction
            that is by default the Pawn rotation for AI, and camera (crosshair) rotation for human players.
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.IsPlayerControlled">
            <summary>@return true if controlled by a human player (possessed by a PlayerController).</summary>
        </member>
        <member name="M:UnrealEngine.APawn.IsLocallyControlled">
            <summary>@return true if controlled by a local (not network) Controller.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetNavAgentLocation">
            <summary>Basically retrieved pawn's location on navmesh</summary>
        </member>
        <member name="M:UnrealEngine.APawn.SetCanAffectNavigationGeneration(System.Boolean,System.Boolean)">
            <summary>
            Use SetCanAffectNavigationGeneration to change this value at runtime.
                Note that calling this function at runtime will result in any navigation change only if runtime navigation generation is enabled.
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.OnRep_PlayerState">
            <summary>PlayerState Replication Notification Callback</summary>
        </member>
        <member name="M:UnrealEngine.APawn.OnRep_Controller">
            <summary>Called when Controller is replicated</summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetControlRotation">
            <summary>Get the rotation of the Controller, often the 'view' rotation of this Pawn.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetController">
            <summary>Returns controller for this actor.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.IsControlled">
            <summary>See if this actor is currently being controlled</summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetMovementBaseActor(UnrealEngine.APawn)">
            <summary>Gets the owning actor of the Movement Base Component on which the pawn is standing.</summary>
        </member>
        <member name="M:UnrealEngine.APawn.PawnMakeNoise(System.Single,UnrealEngine.FVector,System.Boolean,UnrealEngine.AActor)">
            <summary>
            Inform AIControllers that you've made a noise they might hear (they are sent a HearNoise message if they have bHearNoises==true)
            The instigator of this sound is the pawn which is used to call MakeNoise.
            @param Loudness - is the relative loudness of this noise (range 0.0 to 1.0).  Directly affects the hearing range specified by the AI's HearingThreshold.
            @param NoiseLocation - Position of noise source.  If zero vector, use the actor's location.
            @param bUseNoiseMakerLocation - If true, use the location of the NoiseMaker rather than NoiseLocation.  If false, use NoiseLocation.
            @param NoiseMaker - Which actor is the source of the noise.  Not to be confused with the Noise Instigator, which is responsible for the noise (and is the pawn on which this function is called).  If not specified, the pawn instigating the noise will be used as the NoiseMaker
            </summary>
        </member>
        <member name="M:UnrealEngine.APawn.GetMovementComponent">
            <summary>Return our PawnMovementComponent, if we have one.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopAllCameraAnims(System.Boolean)">
            <summary>
            Stop playing all CameraAnims on this CameraManager.
            @param bImmediate    True to stop it right now and ignore blend out, false to let it blend out as indicated.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopCameraAnimInst(UnrealEngine.UCameraAnimInst,System.Boolean)">
            <summary>
            Stops the given CameraAnimInst from playing.  The given pointer should be considered invalid after this.
            @param bImmediate    True to stop it right now and ignore blend out, false to let it blend out as indicated.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopAllInstancesOfCameraAnim(UnrealEngine.UCameraAnim,System.Boolean)">
            <summary>
            Stop playing all instances of the indicated CameraAnim.
            @param bImmediate    True to stop it right now and ignore blend out, false to let it blend out as indicated.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.PlayCameraAnim(UnrealEngine.UCameraAnim,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,UnrealEngine.ECameraAnimPlaySpace,UnrealEngine.FRotator)">
            <summary>
            Play the indicated CameraAnim on this camera.
            @param Anim The animation that should play on this instance.
            @param Rate                          How fast to play the animation. 1.0 is normal.
            @param Scale                         How "intense" to play the animation. 1.0 is normal.
            @param BlendInTime           Time to linearly ramp in.
            @param BlendOutTime          Time to linearly ramp out.
            @param bLoop                         True to loop the animation if it hits the end.
            @param bRandomStartTime      Whether or not to choose a random time to start playing. Useful with bLoop=true and a duration to randomize things like shakes.
            @param Duration                      Optional total playtime for this animation, including blends. 0 means to use animations natural duration, or infinite if looping.
            @param PlaySpace                     Which space to play the animation in.
            @param UserPlaySpaceRot  Custom play space, used when PlaySpace is UserDefined.
            @return The CameraAnim instance, which can be stored to manipulate/stop the anim after the fact.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.SetManualCameraFade(System.Single,UnrealEngine.FLinearColor,System.Boolean)">
            <summary>
            Turns on camera fading at the given opacity. Does not auto-animate, allowing user to animate themselves.
            Call StopCameraFade to turn fading back off.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopCameraFade">
            <summary>Stops camera fading.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StartCameraFade(System.Single,System.Single,System.Single,UnrealEngine.FLinearColor,System.Boolean,System.Boolean)">
            <summary>
            Does a camera fade to/from a solid color.  Animates automatically.
            @param FromAlpha - Alpha at which to begin the fade. Range [0..1], where 0 is fully transparent and 1 is fully opaque solid color.
            @param ToAlpha - Alpha at which to finish the fade.
            @param Duration - How long the fade should take, in seconds.
            @param Color - Color to fade to/from.
            @param bShouldFadeAudio - True to fade audio volume along with the alpha of the solid color.
            @param bHoldWhenFinished - True for fade to hold at the ToAlpha until explicitly stopped (e.g. with StopCameraFade)
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopAllCameraShakes(System.Boolean)">
            <summary>Stops all active camera shakes on this camera.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopAllInstancesOfCameraShake(UnrealEngine.TSubclassOf{UnrealEngine.UCameraShake},System.Boolean)">
            <summary>Stops playing CameraShake of the given class.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.StopCameraShake(UnrealEngine.UCameraShake,System.Boolean)">
            <summary>Immediately stops the given shake instance and invalidates it.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.PlayCameraShake(UnrealEngine.TSubclassOf{UnrealEngine.UCameraShake},System.Single,UnrealEngine.ECameraAnimPlaySpace,UnrealEngine.FRotator)">
            <summary>
            Plays a camera shake on this camera.
            @param Shake - The class of camera shake to play.
            @param Scale - Scalar defining how "intense" to play the shake. 1.0 is normal (as authored).
            @param PlaySpace - Which coordinate system to play the shake in (affects oscillations and camera anims)
            @param UserPlaySpaceRot - Coordinate system to play shake when PlaySpace == CAPS_UserDefined.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.ClearCameraLensEffects">
            <summary>Removes all camera lens effects.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.RemoveCameraLensEffect(UnrealEngine.AEmitterCameraLensEffectBase)">
            <summary>
            Removes the given lens effect from the camera.
            @param Emitter - the emitter actor to remove from the camera
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.AddCameraLensEffect(UnrealEngine.TSubclassOf{UnrealEngine.AEmitterCameraLensEffectBase})">
            <summary>
            Creates a camera lens effect of the given class on this camera.
            @param LensEffectEmitterClass - Class of lens effect emitter to create.
            @return Returns the new emitter actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.GetCameraLocation">
            <summary>@return Returns camera's current location.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.GetCameraRotation">
            <summary>@return Returns camera's current rotation.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.GetFOVAngle">
            <summary>@return Returns the camera's current full FOV angle, in degrees.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.RemoveCameraModifier(UnrealEngine.UCameraModifier)">
            <summary>
            Removes the given camera modifier from this camera (if it's on the camera in the first place) and discards it.
            @return True if successfully removed, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.FindCameraModifierByClass(UnrealEngine.TSubclassOf{UnrealEngine.UCameraModifier})">
            <summary>
            Returns camera modifier for this camera of the given class, if it exists.
            Exact class match only. If there are multiple modifiers of the same class, the first one is returned.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.AddNewCameraModifier(UnrealEngine.TSubclassOf{UnrealEngine.UCameraModifier})">
            <summary>
            Creates and initializes a new camera modifier of the specified class.
            @param ModifierClass - The class of camera modifier to create.
            @return Returns the newly created camera modifier.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerCameraManager.GetOwningPlayerController">
            <summary>Returns the PlayerController that owns this camera.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetFocalLocation">
            <summary>
            Returns the location the PlayerController is focused on.
            If there is a possessed Pawn, returns the Pawn's location.
            If there is a spectator Pawn, returns that Pawn's location.
            Otherwise, returns the PlayerController's spawn location (usually the last known Pawn location after it has died).
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetSpectatorPawn">
            <summary>Get the Pawn used when spectating. NULL when not spectating.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.OnServerStartedVisualLogger(System.Boolean)">
            <summary>Notify from server that Visual Logger is recording, to show that information on client about possible performance issues</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetCinematicMode(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Server/SP only function for changing whether the player is in cinematic mode.  Updates values of various state variables, then replicates the call to the client
            to sync the current cinematic mode.
            @param       bInCinematicMode        specify true if the player is entering cinematic mode; false if the player is leaving cinematic mode.
            @param       bHidePlayer                     specify true to hide the player's pawn (only relevant if bInCinematicMode is true)
            @param       bAffectsHUD                     specify true if we should show/hide the HUD to match the value of bCinematicMode
            @param       bAffectsMovement        specify true to disable movement in cinematic mode, enable it when leaving
            @param       bAffectsTurning         specify true to disable turning in cinematic mode or enable it when leaving
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClearAudioListenerOverride">
            <summary>Clear any overrides that have been applied to audio listener</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetAudioListenerOverride(UnrealEngine.USceneComponent,UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>
            Used to override the default positioning of the audio listener
            @param AttachToComponent Optional component to attach the audio listener to
            @param Location Depending on whether Component is attached this is either an offset from its location or an absolute position
            @param Rotation Depending on whether Component is attached this is either an offset from its rotation or an absolute rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetViewTargetWithBlend(UnrealEngine.AActor,System.Single,UnrealEngine.EViewTargetBlendFunction,System.Single,System.Boolean)">
            <summary>
            Set the view target blending with variable control
            @param NewViewTarget - new actor to set as view target
            @param BlendTime - time taken to blend
            @param BlendFunc - Cubic, Linear etc functions for blending
            @param BlendExp -  Exponent, used by certain blend functions to control the shape of the curve.
            @param bLockOutgoing - If true, lock outgoing viewtarget to last frame's camera position for the remainder of the blend.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.Camera(System.String)">
            <summary>
            Change Camera mode
            @param       New camera mode to set
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetVirtualJoystickVisibility(System.Boolean)">
            <summary>Set the virtual joystick visibility.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ActivateTouchInterface(UnrealEngine.UTouchInterface)">
            <summary>Activates a new touch interface for this player controller</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputAnalogStickState(UnrealEngine.EControllerAnalogStick,System.Single@,System.Single@)">
            <summary>Retrieves the X and Y displacement of the given analog stick.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputMouseDelta(System.Single@,System.Single@)">
            <summary>Retrieves how far the mouse moved this frame.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputKeyTimeDown(UnrealEngine.FKey)">
            <summary>Returns how long the given key/button has been down.  Returns 0 if it's up or it just went down this frame.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetMousePosition(System.Single@,System.Single@)">
            <summary>Retrieves the X and Y screen coordinates of the mouse cursor. Returns false if there is no associated mouse device</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputMotionState(UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Retrieves the current motion state of the player's input device</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputTouchState(UnrealEngine.ETouchIndex,System.Single@,System.Single@,System.Boolean@)">
            <summary>Retrieves the X and Y screen coordinates of the specified touch key. Returns false if the touch index is not down</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputVectorKeyState(UnrealEngine.FKey)">
            <summary>Returns the vector value for the given key/button.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetInputAnalogKeyState(UnrealEngine.FKey)">
            <summary>Returns the analog value for the given key/button.  If analog isn't supported, returns 1 for down and 0 for up.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.WasInputKeyJustReleased(UnrealEngine.FKey)">
            <summary>Returns true if the given key/button was down last frame and up this frame.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.WasInputKeyJustPressed(UnrealEngine.FKey)">
            <summary>Returns true if the given key/button was up last frame and down this frame.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.IsInputKeyDown(UnrealEngine.FKey)">
            <summary>Returns true if the given key/button is pressed on the input of the controller (if present)</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.AddRollInput(System.Single)">
            <summary>
            Add Roll input. This value is multiplied by InputRollScale.
            @param Val Amount to add to Roll. This value is multiplied by InputRollScale.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.AddYawInput(System.Single)">
            <summary>
            Add Yaw (turn) input. This value is multiplied by InputYawScale.
            @param Val Amount to add to Yaw. This value is multiplied by InputYawScale.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.AddPitchInput(System.Single)">
            <summary>
            Add Pitch (look up) input. This value is multiplied by InputPitchScale.
            @param Val Amount to add to Pitch. This value is multiplied by InputPitchScale.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerToggleAILogging">
            <summary>Used by UGameplayDebuggingControllerComponent to replicate messages for AI debugging in network games.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientTeamMessage(UnrealEngine.APlayerState,System.String,System.String,System.Single)">
            <summary>@todo document</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerViewSelf(UnrealEngine.FViewTargetTransitionParams)">
            <summary>Move camera to current user</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerViewPrevPlayer">
            <summary>Move camera to previous player on round ended or spectating</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerViewNextPlayer">
            <summary>Move camera to next player on round ended or spectating</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerVerifyViewTarget">
            <summary>Used by client to request server to confirm current viewtarget (server will respond with ClientSetViewTarget() ).</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerUpdateLevelVisibility(System.String,System.Boolean)">
            <summary>
            Called when the client adds/removes a streamed level
            the server will only replicate references to Actors in visible levels so that it's impossible to send references to
            Actors the client has not initialized
            @param PackageName the name of the package for the level whose status changed
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerUpdateCamera(UnrealEngine.FVector_NetQuantize,System.Int32)">
            <summary>If PlayerCamera.bUseClientSideCameraUpdates is set, client will replicate camera positions to the server. // @TODO - combine pitch/yaw into one int, maybe also send location compressed</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerShortTimeout">
            <summary>Notifies the server that the client has ticked gameplay code, and should no longer get the extended "still loading" timeout grace period</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerCheckClientPossessionReliable">
            <summary>Reliable version of ServerCheckClientPossession to be used when there is no likely danger of spamming the network.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerCheckClientPossession">
            <summary>Tells the server to make sure the possessed pawn is in sync with the client.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerSetSpectatorLocation(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>When spectating, updates spectator location/rotation and pings the server to make sure spectating should continue.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerRestartPlayer">
            <summary>Attempts to restart this player, generally called from the client upon respawn request.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerPause">
            <summary>Replicate pause request to the server</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerNotifyLoadedWorld(System.String)">
            <summary>
            Called to notify the server when the client has loaded a new world via seamless traveling
            @param WorldPackageName the name of the world package that was loaded
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerChangeName(System.String)">
            <summary>Change name of server</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerCamera(System.String)">
            <summary>change mode of camera</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerAcknowledgePossession(UnrealEngine.APawn)">
            <summary>acknowledge possession of pawn</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientReceiveLocalizedMessage(UnrealEngine.TSubclassOf{UnrealEngine.ULocalMessage},System.Int32,UnrealEngine.APlayerState,UnrealEngine.APlayerState,UnrealEngine.UObject)">
            <summary>send client localized message id</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientRetryClientRestart(UnrealEngine.APawn)">
            <summary>Assign Pawn to player, but avoid calling ClientRestart if we have already accepted this pawn</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientEndOnlineSession">
            <summary>Notify client that the session is about to start</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientStartOnlineSession">
            <summary>Notify client that the session is starting</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientWasKicked(System.String)">
            <summary>Notify client they were kicked from the server</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientUpdateLevelStreamingStatus(System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Replicated Update streaming status
            @param PackageName - Name of the level package name used for loading.
            @param bNewShouldBeLoaded - Whether the level should be loaded
            @param bNewShouldBeVisible - Whether the level should be visible if it is loaded
            @param bNewShouldBlockOnLoad - Whether we want to force a blocking load
            @param LODIndex                              - Current LOD index for a streaming level
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientTravelInternal(System.String,UnrealEngine.ETravelType,System.Boolean,UnrealEngine.FGuid)">
            <summary>
            Internal clientside implementation of ClientTravel - use ClientTravel to call this
            @param URL                           A string containing the mapname (or IP address) to travel to, along with option key/value pairs
            @param TravelType            specifies whether the client should append URL options used in previous travels; if true is specified
                                                                 for the bSeamlesss parameter, this value must be TRAVEL_Relative.
            @param bSeamless                     Indicates whether to use seamless travel (requires TravelType of TRAVEL_Relative)
            @param MapPackageGuid        The GUID of the map package to travel to - this is used to find the file when it has been autodownloaded,
                                                                 so it is only needed for clients
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientTravel(System.String,UnrealEngine.ETravelType,System.Boolean,UnrealEngine.FGuid)">
            <summary>
            Travel to a different map or IP address. Calls the PreClientTravel event before doing anything.
            NOTE: This is implemented as a locally executed wrapper for ClientTravelInternal, to avoid API compatability breakage
            @param URL                           A string containing the mapname (or IP address) to travel to, along with option key/value pairs
            @param TravelType            specifies whether the client should append URL options used in previous travels; if true is specified
                                                                 for the bSeamlesss parameter, this value must be TRAVEL_Relative.
            @param bSeamless                     Indicates whether to use seamless travel (requires TravelType of TRAVEL_Relative)
            @param MapPackageGuid        The GUID of the map package to travel to - this is used to find the file when it has been autodownloaded,
                                                                 so it is only needed for clients
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetControllerLightColor(UnrealEngine.FColor)">
            <summary>
            Sets the light color of the player's controller
            @param        Color                                   The color for the light to be
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.PlayDynamicForceFeedback(System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,UnrealEngine.EDynamicForceFeedbackAction,UnrealEngine.FLatentActionInfo)">
            <summary>
            Latent action that controls the playing of force feedback
            Begins playing when Start is called.  Calling Update or Stop if the feedback is not active will have no effect.
            Completed will execute when Stop is called or the duration ends.
            When Update is called the Intensity, Duration, and affect values will be updated with the current inputs
            @param       Intensity                               How strong the feedback should be.  Valid values are between 0.0 and 1.0
            @param       Duration                                How long the feedback should play for.  If the value is negative it will play until stopped
            @param   bAffectsLeftLarge           Whether the intensity should be applied to the large left servo
            @param   bAffectsLeftSmall           Whether the intensity should be applied to the small left servo
            @param   bAffectsRightLarge          Whether the intensity should be applied to the large right servo
            @param   bAffectsRightSmall          Whether the intensity should be applied to the small right servo
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientStopForceFeedback(UnrealEngine.UForceFeedbackEffect,System.String)">
            <summary>
            Stops a playing force feedback pattern
            @param       ForceFeedbackEffect             If set only patterns from that effect will be stopped
            @param       Tag                                             If not none only the pattern with this tag will be stopped
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPlayForceFeedback(UnrealEngine.UForceFeedbackEffect,System.Boolean,System.String)">
            <summary>
            Play a force feedback pattern on the player's controller
            @param       ForceFeedbackEffect             The force feedback pattern to play
            @param       bLooping                                Whether the pattern should be played repeatedly or be a single one shot
            @param       Tag                                             A tag that allows stopping of an effect.  If another effect with this Tag is playing, it will be stopped and replaced
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientStopCameraShake(UnrealEngine.TSubclassOf{UnrealEngine.UCameraShake},System.Boolean)">
            <summary>Stop camera shake on client.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientStopCameraAnim(UnrealEngine.UCameraAnim)">
            <summary>Stop camera animation on client.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientClearCameraLensEffects">
            <summary>Removes all Camera Lens Effects.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSpawnCameraLensEffect(UnrealEngine.TSubclassOf{UnrealEngine.AEmitterCameraLensEffectBase})">
            <summary>Spawn a camera lens effect (e.g. blood).</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetViewTarget(UnrealEngine.AActor,UnrealEngine.FViewTargetTransitionParams)">
            <summary>
            Set the view target
            @param A - new actor to set as view target
            @param TransitionParams - parameters to use for controlling the transition
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetHUD">
            <summary>Gets the HUD currently being used by this player controller</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.GetViewportSize(System.Int32@,System.Int32@)">
            <summary>Helper to get the size of the HUD canvas for this player controller.  Returns 0 if there is no HUD</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetHUD(UnrealEngine.TSubclassOf{UnrealEngine.AHUD})">
            <summary>Set the client's class of HUD and spawns a new instance of it. If there was already a HUD active, it is destroyed.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetForceMipLevelsToBeResident(UnrealEngine.UMaterialInterface,System.Single,System.Int32)">
            <summary>
            Forces the streaming system to disregard the normal logic for the specified duration and
            instead always load all mip-levels for all textures used by the specified material.
            @param Material              - The material whose textures should be forced into memory.
            @param ForceDuration - Number of seconds to keep all mip-levels in memory, disregarding the normal priority logic.
            @param CinematicTextureGroups        - Bitfield indicating which texture groups that use extra high-resolution mips
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetCinematicMode(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Called by the server to synchronize cinematic transitions with the client</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetCameraMode(System.String)">
            <summary>
            Replicated function to set camera style on client
            @param       NewCamMode, name defining the new camera mode
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetCameraFade(System.Boolean,UnrealEngine.FColor,UnrealEngine.FVector2D,System.Single,System.Boolean)">
            <summary>
            Tell client to fade camera
            @Param bEnableFading - true if we should apply FadeColor/FadeAmount to the screen
            @Param FadeColor - Color to fade to
            @Param FadeAlpha - Amount of fading to apply
            @Param FadeTime - length of time for fade to occur over
            @Param bFadeAudio - true to apply fading of audio alongside the video
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetBlockOnAsyncLoading">
            <summary>
            Tells the client to block until all pending level streaming actions are complete.
            Happens at the end of the tick primarily used to force update the client ASAP at join time.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientRestart(UnrealEngine.APawn)">
            <summary>Tell client to restart the level</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientReset">
            <summary>Tell client to reset the PlayerController</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPrestreamTextures(UnrealEngine.AActor,System.Single,System.Boolean,System.Int32)">
            <summary>
            Forces the streaming system to disregard the normal logic for the specified duration and
            instead always load all mip-levels for all textures used by the specified actor.
            @param ForcedActor           - The actor whose textures should be forced into memory.
            @param ForceDuration         - Number of seconds to keep all mip-levels in memory, disregarding the normal priority logic.
            @param bEnableStreaming      - Whether to start (true) or stop (false) streaming
            @param CinematicTextureGroups        - Bitfield indicating which texture groups that use extra high-resolution mips
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPrepareMapChange(System.String,System.Boolean,System.Boolean)">
            <summary>
            Asynchronously loads the given level in preparation for a streaming map transition.
            the server sends one function per level name since dynamic arrays can't be replicated
            @param LevelNames - the names of the level packages to load. LevelNames[0] will be the new persistent (primary) level
            @param bFirst - whether this is the first item in the list (so clear the list first)
            @param bLast - whether this is the last item in the list (so start preparing the change after receiving it)
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPlaySoundAtLocation(UnrealEngine.USoundBase,UnrealEngine.FVector,System.Single,System.Single)">
            <summary>
            Play sound client-side at the specified location
            @param Sound - Sound to play
            @param Location - Location to play the sound at
            @param VolumeMultiplier - Volume multiplier to apply to the sound
            @param PitchMultiplier - Pitch multiplier to apply to the sound
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPlaySound(UnrealEngine.USoundBase,System.Single,System.Single)">
            <summary>
            Play sound client-side (so only the client will hear it)
            @param Sound - Sound to play
            @param VolumeMultiplier - Volume multiplier to apply to the sound
            @param PitchMultiplier - Pitch multiplier to apply to the sound
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPlayCameraShake(UnrealEngine.TSubclassOf{UnrealEngine.UCameraShake},System.Single,UnrealEngine.ECameraAnimPlaySpace,UnrealEngine.FRotator)">
            <summary>
            Play Camera Shake
            @param Shake - Camera shake animation to play
            @param Scale - Scalar defining how "intense" to play the anim
            @param PlaySpace - Which coordinate system to play the shake in (used for CameraAnims within the shake).
            @param UserPlaySpaceRot - Matrix used when PlaySpace = CAPS_UserDefined
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientPlayCameraAnim(UnrealEngine.UCameraAnim,System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,UnrealEngine.ECameraAnimPlaySpace,UnrealEngine.FRotator)">
            <summary>
            Play the indicated CameraAnim on this camera.
            @param AnimToPlay - Camera animation to play
            @param Scale - "Intensity" scalar.  This is the scale at which the anim was first played.
            @param Rate -  Multiplier for playback rate.  1.0 = normal.
            @param BlendInTime - Time to interpolate in from zero, for smooth starts
            @param BlendOutTime - Time to interpolate out to zero, for smooth finishes
            @param bLoop - True if the animation should loop, false otherwise
            @param bRandomStartTime - Whether or not to choose a random time to start playing.  Only really makes sense for bLoop = true
            @param Space - Animation play area
            @param CustomPlaySpace - Matrix used when Space = CAPS_UserDefined
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientMessage(System.String,System.String,System.Single)">
            <summary>
            Outputs a message to HUD
            @param S - message to display
            @param Type - @todo document
            @param MsgLifeTime - Optional length of time to display 0 = default time
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientIgnoreMoveInput(System.Boolean)">
            <summary>calls IgnoreMoveInput on client</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientIgnoreLookInput(System.Boolean)">
            <summary>calls IgnoreLookInput on client</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientGotoState(System.String)">
            <summary>
            Server uses this to force client into NewState .
            @Note ALL STATE NAMES NEED TO BE DEFINED IN name table in UnrealNames.h to be correctly replicated (so they are mapped to the same thing on client and server).
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientGameEnded(UnrealEngine.AActor,System.Boolean)">
            <summary>
            Replicated function called by GameHasEnded().
            @param       EndGameFocus - actor to view with camera
            @param       bIsWinner - true if this controller is on winning team
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientForceGarbageCollection">
            <summary>Forces GC at the end of the tick on the client</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientFlushLevelStreaming">
            <summary>
            Tells the client to block until all pending level streaming actions are complete
            happens at the end of the tick
            primarily used to force update the client ASAP at join time
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientCommitMapChange">
            <summary>Actually performs the level transition prepared by PrepareMapChange().</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientCapBandwidth(System.Int32)">
            <summary>Set CurrentNetSpeed to the lower of its current value and Cap.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientCancelPendingMapChange">
            <summary>Tells client to cancel any pending map change.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientAddTextureStreamingLoc(UnrealEngine.FVector,System.Single,System.Boolean)">
            <summary>Adds a location to the texture streaming system for the specified duration.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SendToConsole(System.String)">
            <summary>Sends a command to the console to execute if not shipping version</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ConsoleKey(UnrealEngine.FKey)">
            <summary>Console control commands, useful when remote debugging so you can't touch the console the normal way</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientUnmutePlayer(UnrealEngine.FUniqueNetIdRepl)">
            <summary>
            Tell the client to unmute a player for this controller
            @param PlayerId player id to unmute
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientMutePlayer(UnrealEngine.FUniqueNetIdRepl)">
            <summary>
            Tell the client to mute a player for this controller
            @param PlayerId player id to mute
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerUnmutePlayer(UnrealEngine.FUniqueNetIdRepl)">
            <summary>
            Tell the server to unmute a player for this controller
            @param PlayerId player id to unmute
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerMutePlayer(UnrealEngine.FUniqueNetIdRepl)">
            <summary>
            Tell the server to mute a player for this controller
            @param PlayerId player id to mute
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientVoiceHandshakeComplete">
            <summary>
            Tells the client that the server has all the information it needs and that it
            is ok to start sending voice packets. The server will already send voice packets
            when this function is called, since it is set server side and then forwarded
            NOTE: This is done as an RPC instead of variable replication because ordering matters
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ToggleSpeaking(System.Boolean)">
            <summary>
            Toggle voice chat on and off
            @param bSpeaking enable or disable voice chat
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientEnableNetworkVoice(System.Boolean)">
            <summary>
            Tell the client to enable or disable voice chat (not muting)
            @param bEnable enable or disable voice chat
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.StartFire(System.Byte)">
            <summary>Fire the player's currently selected weapon with the optional firemode.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetMouseLocation(System.Int32,System.Int32)">
            <summary>Positions the mouse cursor in screen space, in pixels.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ProjectWorldLocationToScreen(UnrealEngine.FVector,UnrealEngine.FVector2D@,System.Boolean)">
            <summary>
            Convert a World Space 3D position into a 2D Screen Space position.
            @return true if the world coordinate was successfully projected to the screen.
            </summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.DeprojectScreenPositionToWorld(System.Single,System.Single,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Convert current mouse 2D position to World Space 3D position and direction. Returns false if unable to determine value. *</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.DeprojectMousePositionToWorld(UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Convert current mouse 2D position to World Space 3D position and direction. Returns false if unable to determine value. *</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SwitchLevel(System.String)">
            <summary>SwitchLevel to the given MapURL.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.SetName(System.String)">
            <summary>Trys to set the player's name to the given name.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.Pause">
            <summary>Command to try to pause the game.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientRepObjRef(UnrealEngine.UObject)">
            <summary>Development RPC for testing object reference replication</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientReturnToMainMenu(System.String)">
            <summary>Return the client to the main menu gracefully</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.LocalTravel(System.String)">
            <summary>Causes the client to travel to the given URL</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.RestartLevel">
            <summary>Restarts the current level</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.FOV(System.Single)">
            <summary>Set the field of view to NewFOV</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.EnableCheats">
            <summary>Enables cheats within the game</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ClientSetSpectatorWaiting(System.Boolean)">
            <summary>Indicate that the Spectator is waiting to join/respawn.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerController.ServerSetSpectatorWaiting(System.Boolean)">
            <summary>Indicate that the Spectator is waiting to join/respawn.</summary>
        </member>
        <member name="M:UnrealEngine.APlayerState.OnRep_Score">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="M:UnrealEngine.ASkeletalMeshActor.OnRep_ReplicatedMesh">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="M:UnrealEngine.ASkyLight.OnRep_bEnabled">
            <summary>Replication Notification Callbacks</summary>
        </member>
        <member name="T:UnrealEngine.Beam2SourceTargetMethod">
            <summary>The method to use in determining the source/target.</summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetMethod.PEB2STM_Default">
            <summary>
            Default        - use the distribution.
                This is the fallback for when other modes can't be resolved.
            </summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetMethod.PEB2STM_UserSet">
            <summary>
            UserSet        - use the user set value.
                Primarily intended for weapon effects.
            </summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetMethod.PEB2STM_Emitter">
            <summary>Emitter        - use the emitter position as the source/target.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.Beam2SourceTargetMethod.PEB2STM_Particle" -->
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.Beam2SourceTargetMethod.PEB2STM_Actor" -->
        <member name="T:UnrealEngine.Beam2SourceTargetTangentMethod">
            <summary>The method to use in determining the source/target tangent.</summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetTangentMethod.PEB2STTM_Direct">
            <summary>Direct - a direct line between source and target.</summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetTangentMethod.PEB2STTM_UserSet">
            <summary>UserSet        - use the user set value.</summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetTangentMethod.PEB2STTM_Distribution">
            <summary>Distribution - use the distribution.</summary>
        </member>
        <member name="F:UnrealEngine.Beam2SourceTargetTangentMethod.PEB2STTM_Emitter">
            <summary>Emitter        - use the emitter direction.</summary>
        </member>
        <member name="T:UnrealEngine.EAdditiveAnimationType">
            <summary>Indicates whether an animation is additive, and what kind.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveAnimationType.AAT_None">
            <summary>No additive.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveAnimationType.AAT_LocalSpaceBase">
            <summary>Create Additive from LocalSpace Base.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveAnimationType.AAT_RotationOffsetMeshSpace">
            <summary>Create Additive from MeshSpace Rotation Only, Translation still will be LocalSpace.</summary>
        </member>
        <member name="T:UnrealEngine.EAdditiveBasePoseType">
            <summary>For an additive animation, indicates what the animation is relative to.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveBasePoseType.ABPT_None">
            <summary>Will be deprecated.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveBasePoseType.ABPT_RefPose">
            <summary>Use the Skeleton's ref pose as base.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveBasePoseType.ABPT_AnimScaled">
            <summary>Use a whole animation as a base pose. BasePoseSeq must be set.</summary>
        </member>
        <member name="F:UnrealEngine.EAdditiveBasePoseType.ABPT_AnimFrame">
            <summary>Use one frame of an animation as a base pose. BasePoseSeq and RefFrameIndex must be set (RefFrameIndex will be clamped).</summary>
        </member>
        <member name="T:UnrealEngine.EAngularConstraintMotion">
            <summary>ANGULAR DOF</summary>
        </member>
        <member name="F:UnrealEngine.EAngularConstraintMotion.ACM_Free">
            <summary>No constraint against this axis.</summary>
        </member>
        <member name="F:UnrealEngine.EAngularConstraintMotion.ACM_Limited">
            <summary>Limited freedom along this axis.</summary>
        </member>
        <member name="F:UnrealEngine.EAngularConstraintMotion.ACM_Locked">
            <summary>Fully constraint against this axis.</summary>
        </member>
        <member name="F:UnrealEngine.EAngularDriveMode.SLERP">
            <summary>Spherical lerp between the current orientation/velocity and the target orientation/velocity. NOTE: This will NOT work if any angular constraints are set to Locked.</summary>
        </member>
        <member name="F:UnrealEngine.EAngularDriveMode.TwistAndSwing">
            <summary>Path is decomposed into twist (roll constraint) and swing (cone constraint). Doesn't follow shortest arc and may experience gimbal lock. Does work with locked angular constraints.</summary>
        </member>
        <member name="F:UnrealEngine.EAnimationMode.AnimationCustomMode">
            <summary>This is custom type, engine leaves AnimInstance as it is</summary>
        </member>
        <member name="T:UnrealEngine.EAnimLinkMethod">
            <summary>Supported types of time for a linked element</summary>
        </member>
        <member name="F:UnrealEngine.EAnimLinkMethod.Absolute">
            <summary>Element stays at a specific time without moving.</summary>
        </member>
        <member name="F:UnrealEngine.EAnimLinkMethod.Relative">
            <summary>Element moves with its segment, but not when the segment changes size.</summary>
        </member>
        <member name="F:UnrealEngine.EAnimLinkMethod.Proportional">
            <summary>Element moves with its segment and will stay at a certain proportion through the segment.</summary>
        </member>
        <member name="T:UnrealEngine.EAntiAliasingMethod">
            <summary>Used by rendering project settings.</summary>
        </member>
        <member name="F:UnrealEngine.EAntiAliasingMethod.AAM_MSAA">
            <summary>Only supported with forward shading.  MSAA sample count is controlled by r.MSAACount.</summary>
        </member>
        <member name="F:UnrealEngine.EAttachLocation.KeepRelativeOffset">
            <summary>Keeps current relative transform as the relative transform to the new parent.</summary>
        </member>
        <member name="F:UnrealEngine.EAttachLocation.KeepWorldPosition">
            <summary>Automatically calculates the relative transform such that the attached component maintains the same world transform.</summary>
        </member>
        <member name="F:UnrealEngine.EAttachLocation.SnapToTarget">
            <summary>Snaps location and rotation to the attach point. Calculates the relative scale so that the final world scale of the component remains the same.</summary>
        </member>
        <member name="F:UnrealEngine.EAttachLocation.SnapToTargetIncludingScale">
            <summary>Snaps entire transform to target, including scale.</summary>
        </member>
        <member name="F:UnrealEngine.EAudioOutputTarget.Speaker">
            <summary>Sound plays only from speakers.</summary>
        </member>
        <member name="F:UnrealEngine.EAudioOutputTarget.Controller">
            <summary>Sound plays only from controller if present.</summary>
        </member>
        <member name="F:UnrealEngine.EAudioOutputTarget.ControllerFallbackToSpeaker">
            <summary>Sound plays on the controller if present. If not present, it plays from speakers.</summary>
        </member>
        <member name="T:UnrealEngine.EAutoExposureMethod">
            <summary>Used by FPostProcessSettings Auto Exposure</summary>
        </member>
        <member name="F:UnrealEngine.EAutoExposureMethod.AEM_Histogram">
            <summary>Not supported on mobile, requires compute shader to construct 64 bin histogram</summary>
        </member>
        <member name="F:UnrealEngine.EAutoExposureMethod.AEM_Basic">
            <summary>Not supported on mobile, faster method that computes single value by downsampling</summary>
        </member>
        <member name="T:UnrealEngine.EAutoExposureMethodUI">
            <summary>used by FPostProcessSettings AutoExposure</summary>
        </member>
        <member name="F:UnrealEngine.EAutoExposureMethodUI.AEM_Histogram">
            <summary>Not supported on mobile, requires compute shader to construct 64 bin histogram</summary>
        </member>
        <member name="F:UnrealEngine.EAutoExposureMethodUI.AEM_Basic">
            <summary>Not supported on mobile, faster method that computes single value by downsampling</summary>
        </member>
        <member name="T:UnrealEngine.EAxis">
            <summary>Generic axis enum (mirrored for native use in Axis.h).</summary>
        </member>
        <member name="T:UnrealEngine.EBeamTaperMethod">
            <summary>Beam Tapering Variables.</summary>
        </member>
        <member name="T:UnrealEngine.EBlendableLocation">
            <summary>Where to place a material node in the post processing graph.</summary>
        </member>
        <member name="F:UnrealEngine.EBlendableLocation.BL_AfterTonemapping">
            <summary>Input0:former pass color, Input1:SeparateTranslucency.</summary>
        </member>
        <member name="F:UnrealEngine.EBlendableLocation.BL_BeforeTonemapping">
            <summary>Input0:former pass color, Input1:SeparateTranslucency.</summary>
        </member>
        <member name="F:UnrealEngine.EBlendableLocation.BL_BeforeTranslucency">
            <summary>Input0:former pass color, Input1:SeparateTranslucency.</summary>
        </member>
        <member name="F:UnrealEngine.EBlendableLocation.BL_ReplacingTonemapper">
            <summary>
            Input0:former pass color, Input1:SeparateTranslucency, Input2: BloomOutput
            vector parameters: Engine.FilmWhitePoint
            scalar parameters: Engine.FilmSaturation, Engine.FilmContrast
            </summary>
        </member>
        <member name="F:UnrealEngine.EBlendableLocation.BL_MAX">
            <summary>
            BL_AfterOpaque,
            BL_AfterFog,
            BL_AfterTranslucency,
            BL_AfterPostProcessAA,
            </summary>
        </member>
        <member name="T:UnrealEngine.EBlendMode">
            <summary>Note: This is mirrored in Lightmass, be sure to update the blend mode structure and logic there if this changes. // Note: Check UMaterialInstance::Serialize if changed!!</summary>
        </member>
        <member name="T:UnrealEngine.EBlendSpaceAxis">
            <summary>Interpolation data types.</summary>
        </member>
        <member name="F:UnrealEngine.EBloomMethod.BM_SOG">
            <summary>Sum of Gaussian formulation</summary>
        </member>
        <member name="F:UnrealEngine.EBloomMethod.BM_FFT">
            <summary>Fast Fourier Transform Image based convolution, intended for cinematics (too expensive for games)</summary>
        </member>
        <member name="T:UnrealEngine.EBlueprintStatus">
            <summary>Enumerates states a blueprint can be in.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintStatus.BS_Unknown">
            <summary>Blueprint is in an unknown state.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintStatus.BS_Dirty">
            <summary>Blueprint has been modified but not recompiled.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintStatus.BS_Error">
            <summary>Blueprint tried but failed to be compiled.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintStatus.BS_UpToDate">
            <summary>Blueprint has been compiled since it was last modified.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintStatus.BS_BeingCreated">
            <summary>Blueprint is in the process of being created for the first time.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintStatus.BS_UpToDateWithWarnings">
            <summary>Blueprint has been compiled since it was last modified. There are warnings.</summary>
        </member>
        <member name="T:UnrealEngine.EBlueprintType">
            <summary>Enumerates types of blueprints.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintType.BPTYPE_Normal">
            <summary>Normal blueprint.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintType.BPTYPE_Const">
            <summary>Blueprint that is const during execution (no state graph and methods cannot modify member variables).</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintType.BPTYPE_MacroLibrary">
            <summary>Blueprint that serves as a container for macros to be used in other blueprints.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintType.BPTYPE_Interface">
            <summary>Blueprint that serves as an interface to be implemented by other blueprints.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintType.BPTYPE_LevelScript">
            <summary>Blueprint that handles level scripting.</summary>
        </member>
        <member name="F:UnrealEngine.EBlueprintType.BPTYPE_FunctionLibrary">
            <summary>Blueprint that serves as a container for functions to be used in other blueprints.</summary>
        </member>
        <member name="T:UnrealEngine.EBoneSpaces">
            <summary>Values for specifying bone space.</summary>
        </member>
        <member name="F:UnrealEngine.EBoneSpaces.WorldSpace">
            <summary>Set absolute position of bone in world space.</summary>
        </member>
        <member name="F:UnrealEngine.EBoneSpaces.ComponentSpace">
            <summary>Set position of bone in components reference frame.</summary>
        </member>
        <member name="T:UnrealEngine.EBoneTranslationRetargetingMode">
            <summary>Bone translation retargeting mode.</summary>
        </member>
        <member name="F:UnrealEngine.EBoneTranslationRetargetingMode.Animation">
            <summary>Use translation from animation data.</summary>
        </member>
        <member name="F:UnrealEngine.EBoneTranslationRetargetingMode.Skeleton">
            <summary>Use fixed translation from Skeleton.</summary>
        </member>
        <member name="F:UnrealEngine.EBoneTranslationRetargetingMode.AnimationScaled">
            <summary>Use Translation from animation, but scale length by Skeleton's proportions.</summary>
        </member>
        <member name="F:UnrealEngine.EBoneTranslationRetargetingMode.AnimationRelative">
            <summary>Use Translation from animation, but also play the difference from retargeting pose as an additive.</summary>
        </member>
        <member name="F:UnrealEngine.EBrushType.Brush_Default">
            <summary>Default/builder brush.</summary>
        </member>
        <member name="F:UnrealEngine.EBrushType.Brush_Add">
            <summary>Add to world.</summary>
        </member>
        <member name="F:UnrealEngine.EBrushType.Brush_Subtract">
            <summary>Subtract from world.</summary>
        </member>
        <member name="T:UnrealEngine.EButtonClickMethod">
            <summary>Enumerates different methods that a button click can be triggered. Normally, DownAndUp is appropriate.</summary>
        </member>
        <member name="F:UnrealEngine.EButtonClickMethod.DownAndUp">
            <summary>
            User must press the button, then release while over the button to trigger the click.
            This is the most common type of button.
            </summary>
        </member>
        <member name="F:UnrealEngine.EButtonClickMethod.MouseDown">
            <summary>Click will be triggered immediately on mouse down, and mouse will not be captured.</summary>
        </member>
        <member name="F:UnrealEngine.EButtonClickMethod.MouseUp">
            <summary>
            Click will always be triggered when mouse button is released over the button,
            even if the button wasn't pressed down over it.
            </summary>
        </member>
        <member name="F:UnrealEngine.EButtonClickMethod.PreciseClick">
            <summary>
            Inside a list, buttons can only be clicked with precise tap.
            Moving the pointer will scroll the list, also allows drag-droppable buttons.
            </summary>
        </member>
        <member name="T:UnrealEngine.EButtonTouchMethod">
            <summary>Ways in which touch interactions trigger a "Clicked" event.</summary>
        </member>
        <member name="F:UnrealEngine.EButtonTouchMethod.DownAndUp">
            <summary>Most buttons behave this way.</summary>
        </member>
        <member name="F:UnrealEngine.EButtonTouchMethod.PreciseTap">
            <summary>
            Inside a list, buttons can only be clicked with precise tap.
            Moving the pointer will scroll the list.
            </summary>
        </member>
        <member name="F:UnrealEngine.ECameraAnimPlaySpace.CameraLocal">
            <summary>This anim is applied in camera space.</summary>
        </member>
        <member name="F:UnrealEngine.ECameraAnimPlaySpace.World">
            <summary>This anim is applied in world space.</summary>
        </member>
        <member name="F:UnrealEngine.ECameraAnimPlaySpace.UserDefined">
            <summary>This anim is applied in a user-specified space (defined by UserPlaySpaceMatrix).</summary>
        </member>
        <member name="T:UnrealEngine.ECameraProjectionMode">
            <summary>@TODO: Document</summary>
        </member>
        <member name="T:UnrealEngine.ECanBeCharacterBase">
            <summary>Determines whether a Character can attempt to step up onto a component when they walk in to it.</summary>
        </member>
        <member name="F:UnrealEngine.ECanBeCharacterBase.ECB_No">
            <summary>Character cannot step up onto this Component.</summary>
        </member>
        <member name="F:UnrealEngine.ECanBeCharacterBase.ECB_Yes">
            <summary>Character can step up onto this Component.</summary>
        </member>
        <member name="F:UnrealEngine.ECanBeCharacterBase.ECB_Owner">
            <summary>
            Owning actor determines whether character can step up onto this Component (default true unless overridden in code).
            @see AActor::CanBeBaseForCharacter()
            </summary>
        </member>
        <member name="T:UnrealEngine.EClearSceneOptions">
            <summary>Enumerates ways to clear a scene.</summary>
        </member>
        <member name="F:UnrealEngine.EClearSceneOptions.NoClear">
            <summary>This option is fastest but can cause artifacts unless you render to every pixel. Make sure to use a skybox with this option!</summary>
        </member>
        <member name="F:UnrealEngine.EClearSceneOptions.HardwareClear">
            <summary>Perform a full hardware clear before rendering. Most projects should use this option.</summary>
        </member>
        <member name="F:UnrealEngine.EClearSceneOptions.QuadAtMaxZ">
            <summary>Draws a quad to perform the clear at the far plane, this is faster than a hardware clear on some GPUs.</summary>
        </member>
        <member name="T:UnrealEngine.ECollisionChannel">
            <summary>Enum indicating different type of objects for rigid-body collision purposes.</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionChannel.ECC_EngineTraceChannel1">
            <summary>Reserved for gizmo collision</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionChannel.ECC_OverlapAll_Deprecated">
            <summary>Add only nonserialized/transient flags below // NOTE!!!! THESE ARE BEING DEPRECATED BUT STILL THERE FOR BLUEPRINT. PLEASE DO NOT USE THEM IN CODE</summary>
        </member>
        <member name="T:UnrealEngine.ECollisionEnabled">
            <summary>Enum used to describe what type of collision is enabled on a body.</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionEnabled.NoCollision">
            <summary>Will not create any representation in the physics engine. Cannot be used for spatial queries (raycasts, sweeps, overlaps) or simulation (rigid body, constraints). Best performance possible (especially for moving objects)</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionEnabled.QueryOnly">
            <summary>Only used for spatial queries (raycasts, sweeps, and overlaps). Cannot be used for simulation (rigid body, constraints). Useful for character movement and things that do not need physical simulation. Performance gains by keeping data out of simulation tree.</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionEnabled.PhysicsOnly">
            <summary>Only used only for physics simulation (rigid body, constraints). Cannot be used for spatial queries (raycasts, sweeps, overlaps). Useful for jiggly bits on characters that do not need per bone detection. Performance gains by keeping data out of query tree</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionEnabled.QueryAndPhysics">
            <summary>Can be used for both spatial queries (raycasts, sweeps, overlaps) and simulation (rigid body, constraints).</summary>
        </member>
        <member name="T:UnrealEngine.ECollisionResponse">
            <summary>Enum indicating how each type should respond</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionTraceFlag.CTF_UseDefault">
            <summary>Use project physics settings (DefaultShapeComplexity)</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionTraceFlag.CTF_UseSimpleAndComplex">
            <summary>Create both simple and complex shapes. Simple shapes are used for regular scene queries and collision tests. Complex shape (per poly) is used for complex scene queries.</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionTraceFlag.CTF_UseSimpleAsComplex">
            <summary>Create only simple shapes. Use simple shapes for all scene queries and collision tests.</summary>
        </member>
        <member name="F:UnrealEngine.ECollisionTraceFlag.CTF_UseComplexAsSimple">
            <summary>Create only complex shapes (per poly). Use complex shapes for all scene queries and collision tests. Can be used in simulation for static shapes only (i.e can be collided against but not moved through forces or velocity.)</summary>
        </member>
        <member name="T:UnrealEngine.EComponentMobility">
            <summary>Describes how often this component is allowed to move.</summary>
        </member>
        <member name="F:UnrealEngine.EComponentMobility.Static">
            <summary>
            Static objects cannot be moved or changed in game.
            - Allows baked lighting
            - Fastest rendering
            </summary>
        </member>
        <member name="F:UnrealEngine.EComponentMobility.Stationary">
            <summary>
            A stationary light will only have its shadowing and bounced lighting from static geometry baked by Lightmass, all other lighting will be dynamic.
            - It can change color and intensity in game.
            - Can't move
            - Allows partial baked lighting
            - Dynamic shadows
            </summary>
        </member>
        <member name="F:UnrealEngine.EComponentMobility.Movable">
            <summary>
            Movable objects can be moved and changed in game.
            - Totally dynamic
            - Can cast dynamic shadows
            - Slowest rendering
            </summary>
        </member>
        <member name="F:UnrealEngine.ECompositeTextureMode.CTM_NormalRoughnessToRed">
            <summary>CompositingTexture needs to be a normal map with the same or larger size.</summary>
        </member>
        <member name="F:UnrealEngine.ECompositeTextureMode.CTM_NormalRoughnessToGreen">
            <summary>CompositingTexture needs to be a normal map with the same or larger size.</summary>
        </member>
        <member name="F:UnrealEngine.ECompositeTextureMode.CTM_NormalRoughnessToBlue">
            <summary>CompositingTexture needs to be a normal map with the same or larger size.</summary>
        </member>
        <member name="F:UnrealEngine.ECompositeTextureMode.CTM_NormalRoughnessToAlpha">
            <summary>CompositingTexture needs to be a normal map with the same or larger size.</summary>
        </member>
        <member name="T:UnrealEngine.EConstraintFrame">
            <summary>Enum to indicate which frame we want.</summary>
        </member>
        <member name="T:UnrealEngine.EConstraintTransform">
            <summary>Constraint Transform Type. - currently unused</summary>
        </member>
        <member name="F:UnrealEngine.EConstraintTransform.Absolute">
            <summary>Absolute value.</summary>
        </member>
        <member name="F:UnrealEngine.EConstraintTransform.Relative">
            <summary>Apply relative transform from ref pose.</summary>
        </member>
        <member name="T:UnrealEngine.ECustomDepthStencil">
            <summary>Enumerates available options for custom depth.</summary>
        </member>
        <member name="F:UnrealEngine.ECustomDepthStencil.Enabled">
            <summary>Depth buffer created immediately. Stencil disabled.</summary>
        </member>
        <member name="F:UnrealEngine.ECustomDepthStencil.EnabledOnDemand">
            <summary>Depth buffer created on first use, can save memory but cause stalls. Stencil disabled.</summary>
        </member>
        <member name="F:UnrealEngine.ECustomDepthStencil.EnabledWithStencil">
            <summary>Depth buffer created immediately. Stencil available for read/write.</summary>
        </member>
        <member name="T:UnrealEngine.EDecalBlendMode">
            <summary>Defines how the GBuffer channels are getting manipulated by a decal material pass. Actual index is used to control shader parameters so don't change order.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_Translucent">
            <summary>Blend full material, updating the GBuffer, does not work for baked lighting.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_Stain">
            <summary>Modulate BaseColor, blend rest, updating the GBuffer, does not work for baked lighting.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_Normal">
            <summary>Only blend normal, updating the GBuffer, does not work for baked lighting.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_Emissive">
            <summary>Additive emissive only.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_ColorNormalRoughness">
            <summary>Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_TranslucentNormal if normal is not hooked up).</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_Color">
            <summary>Non metal, put into DBuffer to work for baked lighting as well.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_ColorNormal">
            <summary>Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Color if normal is not hooked up).</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_ColorRoughness">
            <summary>Non metal, put into DBuffer to work for baked lighting as well.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_Normal">
            <summary>Non metal, put into DBuffer to work for baked lighting as well.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_NormalRoughness">
            <summary>Non metal, put into DBuffer to work for baked lighting as well (becomes DBM_DBuffer_Roughness if normal is not hooked up).</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_DBuffer_Roughness">
            <summary>Non metal, put into DBuffer to work for baked lighting as well.</summary>
        </member>
        <member name="F:UnrealEngine.EDecalBlendMode.DBM_Volumetric_DistanceFunction">
            <summary>Output signed distance in Opacity depending on LightVector. Note: Can be costly, no shadow casting but receiving, no per pixel normal yet, no quality settings yet</summary>
        </member>
        <member name="T:UnrealEngine.EDepthOfFieldMethod">
            <summary>Used by FPostProcessSettings Depth of Fields</summary>
        </member>
        <member name="T:UnrealEngine.EDetailMode">
            <summary>Detail mode for scene component rendering.</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.Default">
            <summary>Inherits the degrees of freedom from the project settings.</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.SixDOF">
            <summary>Specifies which axis to freeze rotation and movement along.</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.YZPlane">
            <summary>Allows 2D movement along the Y-Z plane.</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.XZPlane">
            <summary>Allows 2D movement along the X-Z plane.</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.XYPlane">
            <summary>Allows 2D movement along the X-Y plane.</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.CustomPlane">
            <summary>Allows 2D movement along the plane of a given normal</summary>
        </member>
        <member name="F:UnrealEngine.EDOFMode.None">
            <summary>No constraints.</summary>
        </member>
        <member name="T:UnrealEngine.EEarlyZPass">
            <summary>Enumerates available options for early Z-passes.</summary>
        </member>
        <member name="F:UnrealEngine.EEarlyZPass.Auto">
            <summary>Let the engine decide what to render in the early Z pass based on the features being used.</summary>
        </member>
        <member name="T:UnrealEngine.EEasingFunc">
            <summary>Provides different easing functions that can be used in blueprints</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.Linear">
            <summary>Simple linear interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.Step">
            <summary>Simple step interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.SinusoidalIn">
            <summary>Sinusoidal in interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.SinusoidalOut">
            <summary>Sinusoidal out interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.SinusoidalInOut">
            <summary>Sinusoidal in/out interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.EaseIn">
            <summary>Smoothly accelerates, but does not decelerate into the target.  Ease amount controlled by BlendExp.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.EaseOut">
            <summary>Immediately accelerates, but smoothly decelerates into the target.  Ease amount controlled by BlendExp.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.EaseInOut">
            <summary>Smoothly accelerates and decelerates.  Ease amount controlled by BlendExp.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.ExpoIn">
            <summary>Easing in using an exponential</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.ExpoOut">
            <summary>Easing out using an exponential</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.ExpoInOut">
            <summary>Easing in/out using an exponential method</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.CircularIn">
            <summary>Easing is based on a half circle.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.CircularOut">
            <summary>Easing is based on an inverted half circle.</summary>
        </member>
        <member name="F:UnrealEngine.EEasingFunc.CircularInOut">
            <summary>Easing is based on two half circles.</summary>
        </member>
        <member name="T:UnrealEngine.EEdGraphPinDirection">
            <summary>Enum used to define which way data flows into or out of this pin.</summary>
        </member>
        <member name="T:UnrealEngine.EEmitterDynamicParameterValue">
            <summary>
            EmitterDynamicParameterValue
            Enumeration indicating the way a dynamic parameter should be set.
            </summary>
        </member>
        <member name="F:UnrealEngine.EEmitterDynamicParameterValue.EDPV_UserSet">
            <summary>UserSet - use the user set values in the distribution (the default)</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterDynamicParameterValue.EDPV_AutoSet">
            <summary>AutoSet - ignore values set in the distribution, another module will handle this data</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterDynamicParameterValue.EDPV_VelocityX">
            <summary>VelocityX - pass the particle velocity along the X-axis thru</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterDynamicParameterValue.EDPV_VelocityY">
            <summary>VelocityY - pass the particle velocity along the Y-axis thru</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterDynamicParameterValue.EDPV_VelocityZ">
            <summary>VelocityZ - pass the particle velocity along the Z-axis thru</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterDynamicParameterValue.EDPV_VelocityMag">
            <summary>VelocityMag - pass the particle velocity magnitude thru</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterNormalsMode.ENM_CameraFacing">
            <summary>Default mode, normals are based on the camera facing geometry.</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterNormalsMode.ENM_Spherical">
            <summary>Normals are generated from a sphere centered at NormalsSphereCenter.</summary>
        </member>
        <member name="F:UnrealEngine.EEmitterNormalsMode.ENM_Cylindrical">
            <summary>Normals are generated from a cylinder going through NormalsSphereCenter, in the direction NormalsCylinderDirection.</summary>
        </member>
        <member name="T:UnrealEngine.EEmitterRenderMode">
            <summary>Cascade-related</summary>
        </member>
        <member name="F:UnrealEngine.EEndPlayReason.Destroyed">
            <summary>When the Actor or Component is explicitly destroyed.</summary>
        </member>
        <member name="F:UnrealEngine.EEndPlayReason.LevelTransition">
            <summary>When the world is being unloaded for a level transition.</summary>
        </member>
        <member name="F:UnrealEngine.EEndPlayReason.EndPlayInEditor">
            <summary>When the world is being unloaded because PIE is ending.</summary>
        </member>
        <member name="F:UnrealEngine.EEndPlayReason.RemovedFromWorld">
            <summary>When the level it is a member of is streamed out.</summary>
        </member>
        <member name="F:UnrealEngine.EEndPlayReason.Quit">
            <summary>When the application is being exited.</summary>
        </member>
        <member name="T:UnrealEngine.EEvaluateCurveTableResult">
            <summary>Enum used to indicate success or failure of EvaluateCurveTableRow.</summary>
        </member>
        <member name="F:UnrealEngine.EEvaluateCurveTableResult.RowFound">
            <summary>Found the row successfully.</summary>
        </member>
        <member name="F:UnrealEngine.EEvaluateCurveTableResult.RowNotFound">
            <summary>Failed to find the row.</summary>
        </member>
        <member name="T:UnrealEngine.EFontImportCharacterSet">
            <summary>Font character set type for importing TrueType fonts.</summary>
        </member>
        <member name="F:UnrealEngine.EFrictionCombineMode.Average">
            <summary>Uses the average value of the materials touching: (a+b)/2</summary>
        </member>
        <member name="F:UnrealEngine.EFrictionCombineMode.Min">
            <summary>Uses the minimum value of the materials touching: min(a,b)</summary>
        </member>
        <member name="F:UnrealEngine.EFrictionCombineMode.Multiply">
            <summary>Uses the product of the values of the materials touching: a*b</summary>
        </member>
        <member name="F:UnrealEngine.EFrictionCombineMode.Max">
            <summary>Uses the maximum value of materials touching: max(a,b)</summary>
        </member>
        <member name="T:UnrealEngine.EFunctionInputType">
            <summary>Supported input types</summary>
        </member>
        <member name="T:UnrealEngine.EGBufferFormat">
            <summary>
            * Enumerates available GBufferFormats.
            // When this enum is updated please update CVarGBufferFormat comments
            </summary>
        </member>
        <member name="F:UnrealEngine.EGBufferFormat.Force8BitsPerChannel">
            <summary>Forces all GBuffers to 8 bits per channel. Intended as profiling for best performance.</summary>
        </member>
        <member name="F:UnrealEngine.EGBufferFormat.Default">
            <summary>See GBuffer allocation function for layout details.</summary>
        </member>
        <member name="F:UnrealEngine.EGBufferFormat.HighPrecisionNormals">
            <summary>Same as Default except normals are encoded at 16 bits per channel.</summary>
        </member>
        <member name="F:UnrealEngine.EGBufferFormat.Force16BitsPerChannel">
            <summary>Forces all GBuffers to 16 bits per channel. Intended as profiling for best quality.</summary>
        </member>
        <member name="F:UnrealEngine.EHasCustomNavigableGeometry.No">
            <summary>Primitive doesn't have custom navigation geometry, if collision is enabled then its convex/trimesh collision will be used for generating the navmesh</summary>
        </member>
        <member name="F:UnrealEngine.EHasCustomNavigableGeometry.Yes">
            <summary>If primitive would normally affect navmesh, DoCustomNavigableGeometryExport() should be called to export this primitive's navigable geometry</summary>
        </member>
        <member name="F:UnrealEngine.EHasCustomNavigableGeometry.EvenIfNotCollidable">
            <summary>DoCustomNavigableGeometryExport() should be called even if the mesh is non-collidable and wouldn't normally affect the navmesh</summary>
        </member>
        <member name="F:UnrealEngine.EHasCustomNavigableGeometry.DontExport">
            <summary>Don't export navigable geometry even if primitive is relevant for navigation (can still add modifiers)</summary>
        </member>
        <member name="T:UnrealEngine.EHMDTrackingOrigin">
            <summary>For HMDs that support it, this specifies whether the origin of the tracking universe will be at the floor, or at the user's eye height</summary>
        </member>
        <member name="T:UnrealEngine.EHorizontalAlignment">
            <summary>Enumerates horizontal alignment options, i.e. for widget slots.</summary>
        </member>
        <member name="F:UnrealEngine.EHorizontalAlignment.HAlign_Fill">
            <summary>Fill the entire width.</summary>
        </member>
        <member name="F:UnrealEngine.EHorizontalAlignment.HAlign_Left">
            <summary>Left-align.</summary>
        </member>
        <member name="F:UnrealEngine.EHorizontalAlignment.HAlign_Center">
            <summary>Center-align.</summary>
        </member>
        <member name="F:UnrealEngine.EHorizontalAlignment.HAlign_Right">
            <summary>Right-align.</summary>
        </member>
        <member name="T:UnrealEngine.EImpactDamageOverride">
            <summary>Chunks up to the depth DefaultImpactDamageDepth will take impact damage, unless IDO_On or IDO_Off is chosen.</summary>
        </member>
        <member name="F:UnrealEngine.EIndirectLightingCacheQuality.ILCQ_Off">
            <summary>The indirect lighting cache will be disabled for this object, so no GI from stationary lights on movable objects.</summary>
        </member>
        <member name="F:UnrealEngine.EIndirectLightingCacheQuality.ILCQ_Point">
            <summary>A single indirect lighting sample computed at the bounds origin will be interpolated which fades over time to newer results.</summary>
        </member>
        <member name="F:UnrealEngine.EIndirectLightingCacheQuality.ILCQ_Volume">
            <summary>The object will get a 5x5x5 stable volume of interpolated indirect lighting, which allows gradients of lighting intensity across the receiving object.</summary>
        </member>
        <member name="T:UnrealEngine.EInitialOscillatorOffset">
            <summary>Shake start offset parameter</summary>
        </member>
        <member name="F:UnrealEngine.EInitialOscillatorOffset.EOO_OffsetRandom">
            <summary>Start with random offset (default).</summary>
        </member>
        <member name="F:UnrealEngine.EInitialOscillatorOffset.EOO_OffsetZero">
            <summary>Start with zero offset.</summary>
        </member>
        <member name="F:UnrealEngine.EInputConsumeOptions.ICO_ConsumeAll">
            <summary>This component consumes all input and no components lower in the stack are processed.</summary>
        </member>
        <member name="F:UnrealEngine.EInputConsumeOptions.ICO_ConsumeBoundKeys">
            <summary>This component consumes all events for a keys it has bound (whether or not they are handled successfully).  Components lower in the stack will not receive events from these keys.</summary>
        </member>
        <member name="F:UnrealEngine.EInputConsumeOptions.ICO_ConsumeNone">
            <summary>All input events will be available to components lower in the stack.</summary>
        </member>
        <member name="T:UnrealEngine.EInputEvent">
            <summary>EInputEvent</summary>
        </member>
        <member name="T:UnrealEngine.EInterpCurveMode">
            <summary>Interpolation data types.</summary>
        </member>
        <member name="T:UnrealEngine.EInterpMoveAxis">
            <summary>List of axies this track can use</summary>
        </member>
        <member name="F:UnrealEngine.EInterpTrackMoveRotMode.IMR_Keyframed">
            <summary>Should take orientation from the keyframe.</summary>
        </member>
        <member name="F:UnrealEngine.EInterpTrackMoveRotMode.IMR_LookAtGroup">
            <summary>Point the X-Axis of the controlled Actor at the group specified by LookAtGroupName.</summary>
        </member>
        <member name="F:UnrealEngine.EInterpTrackMoveRotMode.IMR_Ignore">
            <summary>Do not change rotation. Ignore it.</summary>
        </member>
        <member name="T:UnrealEngine.EKinematicBonesUpdateToPhysics">
            <summary>
            This enum defines how you'd like to update bones to physics world.
                  If bone is simulating, you don't have to waste time on updating bone transform from kinematic.
                  But also sometimes you don't like fixed bones to be updated by animation data.
            </summary>
        </member>
        <member name="F:UnrealEngine.EKinematicBonesUpdateToPhysics.SkipSimulatingBones">
            <summary>Update any bones that are not simulating.</summary>
        </member>
        <member name="F:UnrealEngine.EKinematicBonesUpdateToPhysics.SkipAllBones">
            <summary>Skip physics update from kinematic changes.</summary>
        </member>
        <member name="T:UnrealEngine.ELerpInterpolationMode">
            <summary>Different methods for interpolating rotation between transforms</summary>
        </member>
        <member name="F:UnrealEngine.ELerpInterpolationMode.QuatInterp">
            <summary>Shortest Path or Quaternion interpolation for the rotation.</summary>
        </member>
        <member name="F:UnrealEngine.ELerpInterpolationMode.EulerInterp">
            <summary>Rotor or Euler Angle interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.ELerpInterpolationMode.DualQuatInterp">
            <summary>Dual quaternion interpolation, follows helix or screw-motion path between keyframes.</summary>
        </member>
        <member name="T:UnrealEngine.ELifetimeCondition">
            <summary>Secondary condition to check before considering the replication of a lifetime property.</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_InitialOnly">
            <summary>This property has no condition, and will send anytime it changes</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_OwnerOnly">
            <summary>This property will only attempt to send on the initial bunch</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_SkipOwner">
            <summary>This property will only send to the actor's owner</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_SimulatedOnly">
            <summary>This property send to every connection EXCEPT the owner</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_AutonomousOnly">
            <summary>This property will only send to simulated actors</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_SimulatedOrPhysics">
            <summary>This property will only send to autonomous actors</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_InitialOrOwner">
            <summary>This property will send to simulated OR bRepPhysics actors</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_Custom">
            <summary>This property will send on the initial packet, or to the actors owner</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_ReplayOrOwner">
            <summary>This property has no particular condition, but wants the ability to toggle on/off via SetCustomIsActiveOverride</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_ReplayOnly">
            <summary>This property will only send to the replay connection, or to the actors owner</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_SimulatedOnlyNoReplay">
            <summary>This property will only send to the replay connection</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_SimulatedOrPhysicsNoReplay">
            <summary>This property will send to actors only, but not to replay connections</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_SkipReplay">
            <summary>This property will send to simulated Or bRepPhysics actors, but not to replay connections</summary>
        </member>
        <member name="F:UnrealEngine.ELifetimeCondition.COND_Max">
            <summary>This property will not send to the replay connection</summary>
        </member>
        <member name="T:UnrealEngine.ELightingBuildQuality">
            <summary>Lighting build quality enumeration</summary>
        </member>
        <member name="T:UnrealEngine.ELinearConstraintMotion">
            <summary>LINEAR DOF</summary>
        </member>
        <member name="F:UnrealEngine.ELinearConstraintMotion.LCM_Free">
            <summary>No constraint against this axis.</summary>
        </member>
        <member name="F:UnrealEngine.ELinearConstraintMotion.LCM_Limited">
            <summary>Limited freedom along this axis.</summary>
        </member>
        <member name="F:UnrealEngine.ELinearConstraintMotion.LCM_Locked">
            <summary>Fully constraint against this axis.</summary>
        </member>
        <member name="T:UnrealEngine.EMaterialDecalResponse">
            <summary>Defines how the material reacts on DBuffer decals, later we can expose more variants between None and Default.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_None">
            <summary>Do not receive decals (Later we still can read the DBuffer channels to customize the effect, this frees up some interpolators).</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_ColorNormalRoughness">
            <summary>Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_Color">
            <summary>Receive Decals, applies color DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_ColorNormal">
            <summary>Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_ColorRoughness">
            <summary>Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_Normal">
            <summary>Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_NormalRoughness">
            <summary>Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDecalResponse.MDR_Roughness">
            <summary>Receive Decals, applies all DBuffer channels, assumes the decal is non metal and mask the subsurface scattering.</summary>
        </member>
        <member name="T:UnrealEngine.EMaterialDomain">
            <summary>Defines the domain of a material.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDomain.MD_Surface">
            <summary>The material's attributes describe a 3d surface.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDomain.MD_DeferredDecal">
            <summary>The material's attributes describe a deferred decal, and will be mapped onto the decal's frustum.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDomain.MD_LightFunction">
            <summary>The material's attributes describe a light's distribution.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDomain.MD_Volume">
            <summary>The material's attributes describe a 3d volume.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDomain.MD_PostProcess">
            <summary>The material will be used in a custom post process pass.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialDomain.MD_UI">
            <summary>The material will be used for UMG or Slate UI</summary>
        </member>
        <member name="T:UnrealEngine.EMaterialExposedTextureProperty">
            <summary>Selects the texture property to output</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedTextureProperty.TMTM_TextureSize">
            <summary>The texture's size.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedTextureProperty.TMTM_TexelSize">
            <summary>The texture's texel size in the UV space (1 / Texture Size)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_BufferSize">
            <summary>Horizontal and vertical size of the view's buffer in pixels</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_FieldOfView">
            <summary>Horizontal and vertical field of view angles in radian</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_TanHalfFieldOfView">
            <summary>Tan(FieldOfView * 0.5)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_ViewSize">
            <summary>Horizontal and vertical size of the view in pixels</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_WorldSpaceViewPosition">
            <summary>Absolute world space view position (differs from the camera position in the shadow passes)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_WorldSpaceCameraPosition">
            <summary>Absolute world space camera position</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialExposedViewProperty.MEVP_ViewportOffset">
            <summary>Horizontal and vertical position of the viewport in pixels within the buffer.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialPositionTransformSource.TRANSFORMPOSSOURCE_Local">
            <summary>Local space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialPositionTransformSource.TRANSFORMPOSSOURCE_World">
            <summary>Absolute world space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialPositionTransformSource.TRANSFORMPOSSOURCE_TranslatedWorld">
            <summary>Camera relative world space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialPositionTransformSource.TRANSFORMPOSSOURCE_View">
            <summary>View space (differs from camera space in the shadow passes)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialPositionTransformSource.TRANSFORMPOSSOURCE_Camera">
            <summary>Camera space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialPositionTransformSource.TRANSFORMPOSSOURCE_Particle">
            <summary>Particle space</summary>
        </member>
        <member name="T:UnrealEngine.EMaterialShadingModel">
            <summary>Note: Check UMaterialInstance::Serialize if changed!</summary>
        </member>
        <member name="T:UnrealEngine.EMaterialTessellationMode">
            <summary>This is used by the drawing passes to determine tessellation policy, so changes here need to be supported in native code.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialTessellationMode.MTM_NoTessellation">
            <summary>Tessellation disabled.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialTessellationMode.MTM_FlatTessellation">
            <summary>Simple tessellation.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialTessellationMode.MTM_PNTriangles">
            <summary>Simple spline based tessellation.</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransform.TRANSFORM_Tangent">
            <summary>Tangent space (relative to the surface)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransform.TRANSFORM_Local">
            <summary>Local space (relative to the rendered object, = object space)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransform.TRANSFORM_World">
            <summary>World space, a unit is 1cm</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransform.TRANSFORM_View">
            <summary>View space (relative to the camera/eye, = camera space, differs from camera space in the shadow passes)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransform.TRANSFORM_Camera">
            <summary>Camera space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransform.TRANSFORM_ParticleWorld">
            <summary>Particle space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransformSource.TRANSFORMSOURCE_Tangent">
            <summary>Tangent space (relative to the surface)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransformSource.TRANSFORMSOURCE_Local">
            <summary>Local space (relative to the rendered object, = object space)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransformSource.TRANSFORMSOURCE_World">
            <summary>World space, a unit is 1cm</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransformSource.TRANSFORMSOURCE_View">
            <summary>View space (relative to the camera/eye, = camera space, differs from camera space in the shadow passes)</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransformSource.TRANSFORMSOURCE_Camera">
            <summary>Camera space</summary>
        </member>
        <member name="F:UnrealEngine.EMaterialVectorCoordTransformSource.TRANSFORMSOURCE_ParticleWorld">
            <summary>Particle space</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.PreventNew">
            <summary>When Max Concurrent sounds are active do not start a new sound.</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.StopOldest">
            <summary>When Max Concurrent sounds are active stop the oldest and start a new one.</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.StopFarthestThenPreventNew">
            <summary>When Max Concurrent sounds are active stop the furthest sound.  If all sounds are the same distance then do not start a new sound.</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.StopFarthestThenOldest">
            <summary>When Max Concurrent sounds are active stop the furthest sound.  If all sounds are the same distance then stop the oldest.</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.StopLowestPriority">
            <summary>Stop the lowest priority sound in the group. If all sounds are the same priority, then it will stop the oldest sound in the group.</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.StopQuietest">
            <summary>Stop the sound that is quietest in the group.</summary>
        </member>
        <member name="F:UnrealEngine.EMaxConcurrentResolutionRule.StopLowestPriorityThenPreventNew">
            <summary>Stop the lowest priority sound in the group. If all sounds are the same priority, then it won't play a new sound.</summary>
        </member>
        <member name="T:UnrealEngine.EMenuPlacement">
            <summary>Enumerates possible placements for pop-up menus.</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_BelowAnchor">
            <summary>Place the menu immediately below the anchor</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_CenteredBelowAnchor">
            <summary>Place the menu immediately centered below the anchor</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_BelowRightAnchor">
            <summary>Place the menu immediately below the anchor aligned to the right of the content</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_ComboBox">
            <summary>Place the menu immediately below the anchor and match is width to the anchor's content</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_ComboBoxRight">
            <summary>Place the menu immediately below the anchor and match is width to the anchor's content. If the width overflows, align with the right edge of the anchor.</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_MenuRight">
            <summary>Place the menu to the right of the anchor</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_AboveAnchor">
            <summary>Place the menu immediately above the anchor, no transition effect</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_CenteredAboveAnchor">
            <summary>Place the menu immediately centered above the anchor, no transition effect</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_AboveRightAnchor">
            <summary>Place the menu immediately above the anchor aligned to the right of the content</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_MenuLeft">
            <summary>Place the menu to the left of the anchor</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_Center">
            <summary>Place the menu's center on top of the menu anchor's center point</summary>
        </member>
        <member name="F:UnrealEngine.EMenuPlacement.MenuPlacement_RightLeftCenter">
            <summary>Place the menu's vertical center on the left side at the menu anchor's vertical center on the right side</summary>
        </member>
        <member name="T:UnrealEngine.EMeshComponentUpdateFlag">
            <summary>Skinned Mesh Update Flag based on rendered or not.</summary>
        </member>
        <member name="F:UnrealEngine.EMeshComponentUpdateFlag.AlwaysTickPoseAndRefreshBones">
            <summary>Always Tick and Refresh BoneTransforms whether rendered or not.</summary>
        </member>
        <member name="F:UnrealEngine.EMeshComponentUpdateFlag.AlwaysTickPose">
            <summary>Always Tick, but Refresh BoneTransforms only when rendered.</summary>
        </member>
        <member name="F:UnrealEngine.EMeshComponentUpdateFlag.OnlyTickPoseWhenRendered">
            <summary>Tick only when rendered, and it will only RefreshBoneTransforms when rendered.</summary>
        </member>
        <member name="T:UnrealEngine.EMeshFeatureImportance">
            <summary>The importance of a mesh feature when automatically generating mesh LODs.</summary>
        </member>
        <member name="T:UnrealEngine.EMobileMSAASampleCount">
            <summary>Enumerates available mobile MSAA sample counts.</summary>
        </member>
        <member name="T:UnrealEngine.EMontageNotifyTickType">
            <summary>Ticking method for AnimNotifies in AnimMontages.</summary>
        </member>
        <member name="F:UnrealEngine.EMontageNotifyTickType.Queued">
            <summary>Queue notifies, and trigger them at the end of the evaluation phase (faster). Not suitable for changing sections or montage position.</summary>
        </member>
        <member name="F:UnrealEngine.EMontageNotifyTickType.BranchingPoint">
            <summary>Trigger notifies as they are encountered (Slower). Suitable for changing sections or montage position.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.None">
            <summary>Causes no mouse cursor to be visible.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.Default">
            <summary>Default cursor (arrow).</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.TextEditBeam">
            <summary>Text edit beam.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.ResizeLeftRight">
            <summary>Resize horizontal.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.ResizeUpDown">
            <summary>Resize vertical.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.ResizeSouthEast">
            <summary>Resize diagonal.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.ResizeSouthWest">
            <summary>Resize other diagonal.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.CardinalCross">
            <summary>MoveItem.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.Crosshairs">
            <summary>Target Cross.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.Hand">
            <summary>Hand cursor.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.GrabHand">
            <summary>Grab Hand cursor.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.GrabHandClosed">
            <summary>Grab Hand cursor closed.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.SlashedCircle">
            <summary>a circle with a diagonal line through it.</summary>
        </member>
        <member name="F:UnrealEngine.EMouseCursor.EyeDropper">
            <summary>Eye-dropper cursor for picking colors.</summary>
        </member>
        <member name="T:UnrealEngine.EMoveComponentAction">
            <summary>Enum used to indicate desired behavior for MoveComponentTo latent function.</summary>
        </member>
        <member name="F:UnrealEngine.EMoveComponentAction.Move">
            <summary>Move to target over specified time.</summary>
        </member>
        <member name="F:UnrealEngine.EMoveComponentAction.Stop">
            <summary>If currently moving, stop.</summary>
        </member>
        <member name="F:UnrealEngine.EMoveComponentAction.Return">
            <summary>If currently moving, return to where you started, over the time elapsed so far.</summary>
        </member>
        <member name="T:UnrealEngine.EMovementMode">
            <summary>Movement modes for Characters.</summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_None">
            <summary>None (movement is disabled).</summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_Walking">
            <summary>Walking on a surface.</summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_NavWalking">
            <summary>
            Simplified walking on navigation data (e.g. navmesh).
            If bGenerateOverlapEvents is true, then we will perform sweeps with each navmesh move.
            If bGenerateOverlapEvents is false then movement is cheaper but characters can overlap other objects without some extra process to repel/resolve their collisions.
            </summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_Falling">
            <summary>Falling under the effects of gravity, such as after jumping or walking off the edge of a surface.</summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_Swimming">
            <summary>Swimming through a fluid volume, under the effects of gravity and buoyancy.</summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_Flying">
            <summary>Flying, ignoring the effects of gravity. Affected by the current physics volume's fluid friction.</summary>
        </member>
        <member name="F:UnrealEngine.EMovementMode.MOVE_Custom">
            <summary>User-defined custom movement mode, including many possible sub-modes.</summary>
        </member>
        <member name="F:UnrealEngine.ENavigationOptionFlag.Disable">
            <summary>UHT was complaining when tried to use True as value instead of Enable</summary>
        </member>
        <member name="F:UnrealEngine.ENetRole.ROLE_None">
            <summary>No role at all.</summary>
        </member>
        <member name="F:UnrealEngine.ENetRole.ROLE_SimulatedProxy">
            <summary>Locally simulated proxy of this actor.</summary>
        </member>
        <member name="F:UnrealEngine.ENetRole.ROLE_AutonomousProxy">
            <summary>Locally autonomous proxy of this actor.</summary>
        </member>
        <member name="F:UnrealEngine.ENetRole.ROLE_Authority">
            <summary>Authoritative control over the actor.</summary>
        </member>
        <member name="T:UnrealEngine.ENetworkFailure">
            <summary>Types of network failures broadcast from the engine</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.NetDriverAlreadyExists">
            <summary>A relevant net driver has already been created for this service</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.NetDriverCreateFailure">
            <summary>The net driver creation failed</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.NetDriverListenFailure">
            <summary>The net driver failed its Listen() call</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.ConnectionLost">
            <summary>A connection to the net driver has been lost</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.ConnectionTimeout">
            <summary>A connection to the net driver has timed out</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.FailureReceived">
            <summary>The net driver received an NMT_Failure message</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.OutdatedClient">
            <summary>The client needs to upgrade their game</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.OutdatedServer">
            <summary>The server needs to upgrade their game</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.PendingConnectionFailure">
            <summary>There was an error during connection to the game</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.NetGuidMismatch">
            <summary>NetGuid mismatch</summary>
        </member>
        <member name="F:UnrealEngine.ENetworkFailure.NetChecksumMismatch">
            <summary>Network checksum mismatch</summary>
        </member>
        <member name="T:UnrealEngine.ENodeAdvancedPins">
            <summary>Enum to indicate if a node has advanced-display-pins, and whether they are shown.</summary>
        </member>
        <member name="F:UnrealEngine.ENodeAdvancedPins.NoPins">
            <summary>No advanced pins.</summary>
        </member>
        <member name="F:UnrealEngine.ENodeAdvancedPins.Shown">
            <summary>There are some advanced pins, and they are shown.</summary>
        </member>
        <member name="F:UnrealEngine.ENodeAdvancedPins.Hidden">
            <summary>There are some advanced pins, and they are hidden.</summary>
        </member>
        <member name="F:UnrealEngine.ENoiseFunction.NOISEFUNCTION_SimplexTex">
            <summary>
            High quality for direct use and bumps
            ~77 instructions per level, 4 texture lookups
            Cannot tile
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.ENoiseFunction.NOISEFUNCTION_GradientTex" -->
        <member name="F:UnrealEngine.ENoiseFunction.NOISEFUNCTION_GradientTex3D">
            <summary>
            High quality for direct use, BAD for bumps; doesn't work on Mobile
            ~16 instructions per level, 1 texture lookup
            Always tiles with a repeat of 16, "Tiling" mode is not an option for Fast Gradient noise
            </summary>
        </member>
        <member name="F:UnrealEngine.ENoiseFunction.NOISEFUNCTION_GradientALU">
            <summary>
            High quality for direct use and bumps
            Non-tiled: ~80 instructions per level, no textures
            Tiling: ~143 instructions per level, no textures
            </summary>
        </member>
        <member name="F:UnrealEngine.ENoiseFunction.NOISEFUNCTION_ValueALU">
            <summary>
            Low quality, but pure computation
            Non-tiled: ~53 instructions per level, no textures
            Tiling: ~118 instructions per level, no textures
            Formerly mis-labeled as Gradient noise
            </summary>
        </member>
        <member name="F:UnrealEngine.ENoiseFunction.NOISEFUNCTION_VoronoiALU">
            <summary>
            Also known as Worley or Cellular noise
            Quality=1 searches 8 cells, Quality=2 searches 16 cells
            Quality=3 searches 27 cells, Quality=4 searches 32 cells
            All are about 20 instructions per cell searched
            </summary>
        </member>
        <member name="T:UnrealEngine.ENotifyFilterType">
            <summary>Filtering method for deciding whether to trigger a notify.</summary>
        </member>
        <member name="F:UnrealEngine.ENotifyFilterType.NoFiltering">
            <summary>No filtering.</summary>
        </member>
        <member name="F:UnrealEngine.ENotifyFilterType.LOD">
            <summary>Filter By Skeletal Mesh LOD.</summary>
        </member>
        <member name="F:UnrealEngine.EOcclusionCombineMode.OCM_Minimum">
            <summary>Take the minimum occlusion value.  This is effective for avoiding over-occlusion from multiple methods, but can result in indoors looking too flat.</summary>
        </member>
        <member name="F:UnrealEngine.EOcclusionCombineMode.OCM_Multiply">
            <summary>
            Multiply together occlusion values from Distance Field Ambient Occlusion and Screen Space Ambient Occlusion.
            This gives a good sense of depth everywhere, but can cause over-occlusion.
            SSAO should be tweaked to be less strong compard to Minimum.
            </summary>
        </member>
        <member name="F:UnrealEngine.EOrbitChainMode.EOChainMode_Add">
            <summary>Add the module values to the previous results</summary>
        </member>
        <member name="F:UnrealEngine.EOrbitChainMode.EOChainMode_Scale">
            <summary>Multiply the module values by the previous results</summary>
        </member>
        <member name="F:UnrealEngine.EOrbitChainMode.EOChainMode_Link">
            <summary>'Break' the chain and apply the values from the previous results</summary>
        </member>
        <member name="T:UnrealEngine.EOrientation">
            <summary>Enumerates widget orientations.</summary>
        </member>
        <member name="F:UnrealEngine.EOrientation.Orient_Horizontal">
            <summary>Orient horizontally, i.e. left to right.</summary>
        </member>
        <member name="F:UnrealEngine.EOrientation.Orient_Vertical">
            <summary>Orient vertically, i.e. top to bottom.</summary>
        </member>
        <member name="T:UnrealEngine.EParticleAxisLock">
            <summary>Flags indicating lock</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_NONE">
            <summary>No locking to an axis...</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_X">
            <summary>Lock the sprite facing towards the positive X-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_Y">
            <summary>Lock the sprite facing towards the positive Y-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_Z">
            <summary>Lock the sprite facing towards the positive Z-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_NEGATIVE_X">
            <summary>Lock the sprite facing towards the negative X-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_NEGATIVE_Y">
            <summary>Lock the sprite facing towards the negative Y-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_NEGATIVE_Z">
            <summary>Lock the sprite facing towards the negative Z-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_ROTATE_X">
            <summary>Lock the sprite rotation on the X-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_ROTATE_Y">
            <summary>Lock the sprite rotation on the Y-axis</summary>
        </member>
        <member name="F:UnrealEngine.EParticleAxisLock.EPAL_ROTATE_Z">
            <summary>Lock the sprite rotation on the Z-axis</summary>
        </member>
        <member name="T:UnrealEngine.EParticleBurstMethod">
            <summary>Burst emissions</summary>
        </member>
        <member name="T:UnrealEngine.EParticleCollisionComplete">
            <summary>Flags indicating what to do with the particle when MaxCollisions is reached</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionComplete.EPCC_Kill">
            <summary>Kill the particle when MaxCollisions is reached</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionComplete.EPCC_Freeze">
            <summary>Freeze the particle in place</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionComplete.EPCC_HaltCollisions">
            <summary>Stop collision checks, but keep updating</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionComplete.EPCC_FreezeTranslation">
            <summary>Stop translations of the particle</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionComplete.EPCC_FreezeRotation">
            <summary>Stop rotations of the particle</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionComplete.EPCC_FreezeMovement">
            <summary>Stop all movement of the particle</summary>
        </member>
        <member name="T:UnrealEngine.EParticleCollisionResponse">
            <summary>How particles respond to collision events.</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionResponse.Bounce">
            <summary>The particle will bounce off of the surface.</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionResponse.Stop">
            <summary>The particle will stop on the surface.</summary>
        </member>
        <member name="F:UnrealEngine.EParticleCollisionResponse.Kill">
            <summary>The particle will be killed.</summary>
        </member>
        <member name="T:UnrealEngine.EParticleEventType">
            <summary>Event type</summary>
        </member>
        <member name="F:UnrealEngine.EParticleEventType.EPET_Any">
            <summary>Any - allow any event</summary>
        </member>
        <member name="F:UnrealEngine.EParticleEventType.EPET_Spawn">
            <summary>Spawn - a particle spawn event</summary>
        </member>
        <member name="F:UnrealEngine.EParticleEventType.EPET_Death">
            <summary>Death - a particle death event</summary>
        </member>
        <member name="F:UnrealEngine.EParticleEventType.EPET_Collision">
            <summary>Collision - a particle collision event</summary>
        </member>
        <member name="F:UnrealEngine.EParticleEventType.EPET_Burst">
            <summary>Burst - a particle burst event</summary>
        </member>
        <member name="F:UnrealEngine.EParticleEventType.EPET_Blueprint">
            <summary>Blueprint - an event generated by level script</summary>
        </member>
        <member name="T:UnrealEngine.EParticleSourceSelectionMethod">
            <summary>
            Particle Selection Method, for any emitters that utilize particles
            as the source points.
            </summary>
        </member>
        <member name="F:UnrealEngine.EParticleSourceSelectionMethod.EPSSM_Random">
            <summary>Random         - select a particle at random</summary>
        </member>
        <member name="F:UnrealEngine.EParticleSourceSelectionMethod.EPSSM_Sequential">
            <summary>Sequential     - select a particle in order</summary>
        </member>
        <member name="T:UnrealEngine.EParticleSubUVInterpMethod">
            <summary>SubUV-related</summary>
        </member>
        <member name="T:UnrealEngine.EParticleSysParamType">
            <summary>Enum for specifying type of a name instance parameter.</summary>
        </member>
        <member name="T:UnrealEngine.EParticleSystemOcclusionBoundsMethod">
            <summary>Occlusion method enumeration</summary>
        </member>
        <member name="F:UnrealEngine.EParticleSystemOcclusionBoundsMethod.EPSOBM_None">
            <summary>Don't determine occlusion on this particle system</summary>
        </member>
        <member name="F:UnrealEngine.EParticleSystemOcclusionBoundsMethod.EPSOBM_ParticleBounds">
            <summary>Use the bounds of the particle system component when determining occlusion</summary>
        </member>
        <member name="F:UnrealEngine.EParticleSystemOcclusionBoundsMethod.EPSOBM_CustomBounds">
            <summary>Use the custom occlusion bounds when determining occlusion</summary>
        </member>
        <member name="T:UnrealEngine.EParticleSystemUpdateMode">
            <summary>
            ParticleSystemUpdateMode
            Enumeration indicating the method by which the system should be updated
            </summary>
        </member>
        <member name="F:UnrealEngine.EParticleSystemUpdateMode.EPSUM_RealTime">
            <summary>RealTime       - update via the delta time passed in</summary>
        </member>
        <member name="F:UnrealEngine.EParticleSystemUpdateMode.EPSUM_FixedTime">
            <summary>FixedTime      - update via a fixed time step</summary>
        </member>
        <member name="T:UnrealEngine.EPhysBodyOp">
            <summary>PhysicsBody options when bone is hidden</summary>
        </member>
        <member name="F:UnrealEngine.EPhysBodyOp.PBO_None">
            <summary>Don't do anything.</summary>
        </member>
        <member name="F:UnrealEngine.EPhysBodyOp.PBO_Term">
            <summary>Terminate - if you terminate, you won't be able to re-init when unhidden.</summary>
        </member>
        <member name="T:UnrealEngine.EPhysicalSurface">
            <summary>Types of surfaces in the game.</summary>
        </member>
        <member name="F:UnrealEngine.EPhysicsType.PhysType_Default">
            <summary>Follow owner.</summary>
        </member>
        <member name="F:UnrealEngine.EPhysicsType.PhysType_Kinematic">
            <summary>Do not follow owner, but make kinematic.</summary>
        </member>
        <member name="F:UnrealEngine.EPhysicsType.PhysType_Simulated">
            <summary>Do not follow owner, but simulate.</summary>
        </member>
        <member name="T:UnrealEngine.EPixelFormat">
            <summary>
            @warning:      When you update this, you must add an entry to GPixelFormats(see RenderUtils.cpp)
            @warning:     When you update this, you must add an entries to PixelFormat.h, usually just copy the generated section on the header into EPixelFormat
            @warning:     The *Tools DLLs will also need to be recompiled if the ordering is changed, but should not need code changes.
            </summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_G8">
            <summary>UNORM red (0..1)</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_FloatRGB">
            <summary>A RGB FP format with platform-specific implementation, for use with render targets.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_FloatRGBA">
            <summary>A RGBA FP format with platform-specific implementation, for use with render targets.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_DepthStencil">
            <summary>A depth+stencil format with platform-specific implementation, for use with render targets.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ShadowDepth">
            <summary>A depth format with platform-specific implementation, for use with render targets.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_V8U8">
            <summary>SNORM red, green (-1..1). Not supported on all RHI e.g. Metal</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_FloatR11G11B10">
            <summary>A low precision floating point format.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_A8R8G8B8">
            <summary>Only used for legacy loading; do NOT use!</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_BC4">
            <summary>High precision single channel block compressed, equivalent to a single channel BC5, 8 bytes per 4x4 block.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_R8G8">
            <summary>UNORM red, green (0..1).</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ATC_RGB">
            <summary>ATITC format.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ATC_RGBA_E">
            <summary>ATITC format.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ATC_RGBA_I">
            <summary>ATITC format.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_X24_G8">
            <summary>Used for creating SRVs to alias a DepthStencil buffer to read Stencil.  Don't use for creating textures.</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ASTC_4x4">
            <summary>8.00 bpp</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ASTC_6x6">
            <summary>3.56 bpp</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ASTC_8x8">
            <summary>2.00 bpp</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ASTC_10x10">
            <summary>1.28 bpp</summary>
        </member>
        <member name="F:UnrealEngine.EPixelFormat.PF_ASTC_12x12">
            <summary>0.89 bpp</summary>
        </member>
        <member name="T:UnrealEngine.EProgressBarFillType">
            <summary>SProgressBar Fill Type</summary>
        </member>
        <member name="F:UnrealEngine.EProgressBarFillType.LeftToRight">
            <summary>will fill up from the left side to the right</summary>
        </member>
        <member name="F:UnrealEngine.EProgressBarFillType.RightToLeft">
            <summary>will fill up from the right side to the left side</summary>
        </member>
        <member name="F:UnrealEngine.EProgressBarFillType.FillFromCenter">
            <summary>will fill up from the center to the outer edges</summary>
        </member>
        <member name="F:UnrealEngine.EProgressBarFillType.TopToBottom">
            <summary>will fill up from the top to the the bottom</summary>
        </member>
        <member name="F:UnrealEngine.EProgressBarFillType.BottomToTop">
            <summary>will fill up from the bottom to the the top</summary>
        </member>
        <member name="F:UnrealEngine.EQuitPreference.Quit">
            <summary>Exit the game completely.</summary>
        </member>
        <member name="F:UnrealEngine.EQuitPreference.Background">
            <summary>Move the application to the background.</summary>
        </member>
        <member name="T:UnrealEngine.ERadialImpulseFalloff">
            <summary>Enum for controlling the falloff of strength of a radial impulse as a function of distance from Origin.</summary>
        </member>
        <member name="F:UnrealEngine.ERadialImpulseFalloff.RIF_Constant">
            <summary>Impulse is a constant strength, up to the limit of its range.</summary>
        </member>
        <member name="F:UnrealEngine.ERadialImpulseFalloff.RIF_Linear">
            <summary>Impulse should get linearly weaker the further from origin.</summary>
        </member>
        <member name="T:UnrealEngine.ERangeBoundTypes">
            <summary>Enumerates the valid types of range bounds.</summary>
        </member>
        <member name="F:UnrealEngine.ERangeBoundTypes.Exclusive">
            <summary>The range excludes the bound.</summary>
        </member>
        <member name="F:UnrealEngine.ERangeBoundTypes.Inclusive">
            <summary>The range includes the bound.</summary>
        </member>
        <member name="F:UnrealEngine.ERangeBoundTypes.Open">
            <summary>The bound is open.</summary>
        </member>
        <member name="T:UnrealEngine.ERecastPartitioning">
            <summary>keep in sync with rcRegionPartitioning enum!</summary>
        </member>
        <member name="T:UnrealEngine.ERefractionMode">
            <summary>Determines how the refraction offset should be computed for the material.</summary>
        </member>
        <member name="F:UnrealEngine.ERefractionMode.RM_IndexOfRefraction">
            <summary>
            Refraction is computed based on the camera vector entering a medium whose index of refraction is defined by the Refraction material input.
            The new medium's surface is defined by the material's normal.  With this mode, a flat plane seen from the side will have a constant refraction offset.
            This is a physical model of refraction but causes reading outside the scene color texture so is a poor fit for large refractive surfaces like water.
            </summary>
        </member>
        <member name="F:UnrealEngine.ERefractionMode.RM_PixelNormalOffset">
            <summary>
            The refraction offset into Scene Color is computed based on the difference between the per-pixel normal and the per-vertex normal.
            With this mode, a material whose normal is the default (0, 0, 1) will never cause any refraction.  This mode is only valid with tangent space normals.
            The refraction material input scales the offset, although a value of 1.0 maps to no refraction, and a value of 2 maps to a scale of 1.0 on the offset.
            This is a non-physical model of refraction but is useful on large refractive surfaces like water, since offsets have to stay small to avoid reading outside scene color.
            </summary>
        </member>
        <member name="T:UnrealEngine.ERelativeTransformSpace">
            <summary>The space for the transform</summary>
        </member>
        <member name="F:UnrealEngine.ERelativeTransformSpace.RTS_World">
            <summary>World space transform.</summary>
        </member>
        <member name="F:UnrealEngine.ERelativeTransformSpace.RTS_Actor">
            <summary>Actor space transform.</summary>
        </member>
        <member name="F:UnrealEngine.ERelativeTransformSpace.RTS_Component">
            <summary>Component space transform.</summary>
        </member>
        <member name="F:UnrealEngine.ERelativeTransformSpace.RTS_ParentBoneSpace">
            <summary>Parent bone space transform</summary>
        </member>
        <member name="T:UnrealEngine.ERichCurveExtrapolation">
            <summary>Enumerates extrapolation options.</summary>
        </member>
        <member name="T:UnrealEngine.ERichCurveInterpMode">
            <summary>Method of interpolation between this key and the next.</summary>
        </member>
        <member name="T:UnrealEngine.ERichCurveTangentMode">
            <summary>If using RCIM_Cubic, this enum describes how the tangents should be controlled in editor.</summary>
        </member>
        <member name="T:UnrealEngine.ERichCurveTangentWeightMode">
            <summary>Enumerates tangent weight modes.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionMode.NoRootMotionExtraction">
            <summary>Leave root motion in animation.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionMode.IgnoreRootMotion">
            <summary>Extract root motion but do not apply it.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionMode.RootMotionFromEverything">
            <summary>Root motion is taken from all animations contributing to the final pose, not suitable for network multiplayer setups.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionMode.RootMotionFromMontagesOnly">
            <summary>Root motion is only taken from montages, suitable for network multiplayer setups.</summary>
        </member>
        <member name="T:UnrealEngine.ERootMotionRootLock">
            <summary>Root Bone Lock options when extracting Root Motion.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionRootLock.RefPose">
            <summary>Use reference pose root bone position.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionRootLock.AnimFirstFrame">
            <summary>Use root bone position on first frame of animation.</summary>
        </member>
        <member name="F:UnrealEngine.ERootMotionRootLock.Zero">
            <summary>FTransform::Identity.</summary>
        </member>
        <member name="T:UnrealEngine.ERoundingMode">
            <summary>Provides rounding modes for converting numbers into localized text</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.HalfToEven">
            <summary>Rounds to the nearest place, equidistant ties go to the value which is closest to an even value: 1.5 becomes 2, 0.5 becomes 0</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.HalfFromZero">
            <summary>Rounds to nearest place, equidistant ties go to the value which is further from zero: -0.5 becomes -1.0, 0.5 becomes 1.0</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.HalfToZero">
            <summary>Rounds to nearest place, equidistant ties go to the value which is closer to zero: -0.5 becomes 0, 0.5 becomes 0.</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.FromZero">
            <summary>Rounds to the value which is further from zero, "larger" in absolute value: 0.1 becomes 1, -0.1 becomes -1</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.ToZero">
            <summary>Rounds to the value which is closer to zero, "smaller" in absolute value: 0.1 becomes 0, -0.1 becomes 0</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.ToNegativeInfinity">
            <summary>Rounds to the value which is more negative: 0.1 becomes 0, -0.1 becomes -1</summary>
        </member>
        <member name="F:UnrealEngine.ERoundingMode.ToPositiveInfinity">
            <summary>Rounds to the value which is more positive: 0.1 becomes 1, -0.1 becomes 0</summary>
        </member>
        <member name="F:UnrealEngine.ESamplerSourceMode.SSM_FromTextureAsset">
            <summary>Get the sampler from the texture.  Every unique texture will consume a sampler slot, which are limited in number.</summary>
        </member>
        <member name="F:UnrealEngine.ESamplerSourceMode.SSM_Wrap_WorldGroupSettings">
            <summary>Shared sampler source that does not consume a sampler slot.  Uses wrap addressing and gets filter mode from the world texture group.</summary>
        </member>
        <member name="F:UnrealEngine.ESamplerSourceMode.SSM_Clamp_WorldGroupSettings">
            <summary>Shared sampler source that does not consume a sampler slot.  Uses clamp addressing and gets filter mode from the world texture group.</summary>
        </member>
        <member name="T:UnrealEngine.ESceneDepthPriorityGroup">
            <summary>
            A priority for sorting scene elements by depth.
            Elements with higher priority occlude elements with lower priority, disregarding distance.
            </summary>
        </member>
        <member name="F:UnrealEngine.ESceneDepthPriorityGroup.SDPG_World">
            <summary>World scene DPG.</summary>
        </member>
        <member name="F:UnrealEngine.ESceneDepthPriorityGroup.SDPG_Foreground">
            <summary>Foreground scene DPG.</summary>
        </member>
        <member name="T:UnrealEngine.EScreenOrientation">
            <summary>The list of possible device/screen orientation for mobile devices</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.Unknown">
            <summary>The orientation is not known</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.Portrait">
            <summary>The orientation is portrait with the home button at the bottom</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.PortraitUpsideDown">
            <summary>The orientation is portrait with the home button at the top</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.LandscapeLeft">
            <summary>The orientation is landscape with the home button at the right side</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.LandscapeRight">
            <summary>The orientation is landscape with the home button at the left side</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.FaceUp">
            <summary>The orientation is as if place on a desk with the screen upward</summary>
        </member>
        <member name="F:UnrealEngine.EScreenOrientation.FaceDown">
            <summary>The orientation is as if place on a desk with the screen downward</summary>
        </member>
        <member name="T:UnrealEngine.ESearchCase">
            <summary>String search case used in UnrealString.h</summary>
        </member>
        <member name="T:UnrealEngine.ESearchDir">
            <summary>String search dir used in UnrealString.h</summary>
        </member>
        <member name="T:UnrealEngine.ESelectInfo">
            <summary>Additional information about a selection event</summary>
        </member>
        <member name="F:UnrealEngine.ESelectInfo.OnKeyPress">
            <summary>User selected via a key press</summary>
        </member>
        <member name="F:UnrealEngine.ESelectInfo.OnNavigation">
            <summary>User selected by navigating to the item</summary>
        </member>
        <member name="F:UnrealEngine.ESelectInfo.OnMouseClick">
            <summary>User selected by clicking on the item</summary>
        </member>
        <member name="F:UnrealEngine.ESelectInfo.Direct">
            <summary>Selection was directly set in code</summary>
        </member>
        <member name="F:UnrealEngine.ESelectionMode.None">
            <summary>Nothing can be selected and there is no hover cue for selection.  You can still handle mouse button events though.</summary>
        </member>
        <member name="F:UnrealEngine.ESelectionMode.Single">
            <summary>A single item can be selected at once, or no item may be selected.</summary>
        </member>
        <member name="F:UnrealEngine.ESelectionMode.SingleToggle">
            <summary>A single item can be selected at once, or no item may be selected.  You can click the item to toggle selection on and off.</summary>
        </member>
        <member name="F:UnrealEngine.ESelectionMode.Multi">
            <summary>Multiple items can be selected at the same time.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsDOF.Full3D">
            <summary>Allows for full 3D movement and rotation.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsDOF.YZPlane">
            <summary>Allows 2D movement along the Y-Z plane.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsDOF.XZPlane">
            <summary>Allows 2D movement along the X-Z plane.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsDOF.XYPlane">
            <summary>Allows 2D movement along the X-Y plane.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsLockedAxis.None">
            <summary>No axis is locked.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsLockedAxis.X">
            <summary>Lock movement along the x-axis.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsLockedAxis.Y">
            <summary>Lock movement along the y-axis.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsLockedAxis.Z">
            <summary>Lock movement along the z-axis.</summary>
        </member>
        <member name="F:UnrealEngine.ESettingsLockedAxis.Invalid">
            <summary>Used for backwards compatibility. Indicates that we've updated into the new struct.</summary>
        </member>
        <member name="T:UnrealEngine.EShadowMapFlags">
            <summary>Bit-field flags that affects storage (e.g. packing, streaming) and other info about a shadowmap.</summary>
        </member>
        <member name="F:UnrealEngine.EShadowMapFlags.SMF_None">
            <summary>No flags.</summary>
        </member>
        <member name="F:UnrealEngine.EShadowMapFlags.SMF_Streamed">
            <summary>Shadowmap should be placed in a streaming texture.</summary>
        </member>
        <member name="F:UnrealEngine.ESkyLightSourceType.SLS_CapturedScene">
            <summary>Construct the sky light from the captured scene, anything further than SkyDistanceThreshold from the sky light position will be included.</summary>
        </member>
        <member name="F:UnrealEngine.ESkyLightSourceType.SLS_SpecifiedCubemap">
            <summary>Construct the sky light from the specified cubemap.</summary>
        </member>
        <member name="T:UnrealEngine.ESlateBrushDrawType">
            <summary>Enumerates ways in which an image can be drawn.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushDrawType.NoDrawType">
            <summary>Don't do anything</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushDrawType.Box">
            <summary>Draw a 3x3 box, where the sides and the middle stretch based on the Margin</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushDrawType.Border">
            <summary>Draw a 3x3 border where the sides tile and the middle is empty</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushDrawType.Image">
            <summary>Draw an image; margin is ignored</summary>
        </member>
        <member name="T:UnrealEngine.ESlateBrushImageType">
            <summary>Enumerates brush image types.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushImageType.NoImage">
            <summary>No image is loaded.  Color only brushes, transparent brushes etc.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushImageType.FullColor">
            <summary>The image to be loaded is in full color.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushImageType.Linear">
            <summary>The image is a special texture in linear space (usually a rendering resource such as a lookup table).</summary>
        </member>
        <member name="T:UnrealEngine.ESlateBrushMirrorType">
            <summary>Possible options for mirroring the brush image</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushMirrorType.NoMirror">
            <summary>Don't mirror anything, just draw the texture as it is.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushMirrorType.Horizontal">
            <summary>Mirror the image horizontally.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushMirrorType.Vertical">
            <summary>Mirror the image vertically.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushMirrorType.Both">
            <summary>Mirror in both directions.</summary>
        </member>
        <member name="T:UnrealEngine.ESlateBrushTileType">
            <summary>Enumerates tiling options for image drawing.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushTileType.NoTile">
            <summary>Just stretch</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushTileType.Horizontal">
            <summary>Tile the image horizontally</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushTileType.Vertical">
            <summary>Tile the image vertically</summary>
        </member>
        <member name="F:UnrealEngine.ESlateBrushTileType.Both">
            <summary>Tile in both directions</summary>
        </member>
        <member name="T:UnrealEngine.ESlateCheckBoxType">
            <summary>Type of check box</summary>
        </member>
        <member name="F:UnrealEngine.ESlateCheckBoxType.CheckBox">
            <summary>Traditional check box with check button and label (or other content)</summary>
        </member>
        <member name="F:UnrealEngine.ESlateCheckBoxType.ToggleButton">
            <summary>Toggle button.  You provide button content (such as an image), and the user can press to toggle it.</summary>
        </member>
        <member name="T:UnrealEngine.ESlateColorStylingMode">
            <summary>
            Enumerates types of color values that can be held by Slate color.
            Should we use the specified color? If not, then which color from the style should we use.
            </summary>
        </member>
        <member name="F:UnrealEngine.ESlateColorStylingMode.UseColor_Specified">
            <summary>Color value is stored in this Slate color.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateColorStylingMode.UseColor_Specified_Link">
            <summary>Color value is stored in the linked color.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateColorStylingMode.UseColor_Foreground">
            <summary>Use the widget's foreground color.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateColorStylingMode.UseColor_Foreground_Subdued">
            <summary>Use the widget's subdued color.</summary>
        </member>
        <member name="T:UnrealEngine.ESlateSizeRule">
            <summary>The sizing options of UWidgets</summary>
        </member>
        <member name="F:UnrealEngine.ESlateSizeRule.Automatic">
            <summary>Only requests as much room as it needs based on the widgets desired size.</summary>
        </member>
        <member name="F:UnrealEngine.ESlateSizeRule.Fill">
            <summary>Greedily attempts to fill all available room based on the percentage value 0..1</summary>
        </member>
        <member name="T:UnrealEngine.ESplineCoordinateSpace">
            <summary>Types of coordinate space accepted by the functions.</summary>
        </member>
        <member name="T:UnrealEngine.ESplinePointType">
            <summary>Permitted spline point types for SplineComponent.</summary>
        </member>
        <member name="T:UnrealEngine.EStereoLayerShape">
            <summary>The shape to use for the stereo layer.  Note that some shapes might not be supported on all platforms!</summary>
        </member>
        <member name="F:UnrealEngine.EStereoLayerShape.SLSH_QuadLayer">
            <summary>Quad layer</summary>
        </member>
        <member name="F:UnrealEngine.EStereoLayerShape.SLSH_CylinderLayer">
            <summary>Cylinder layer</summary>
        </member>
        <member name="F:UnrealEngine.EStereoLayerShape.SLSH_CubemapLayer">
            <summary>Cubemap layer</summary>
        </member>
        <member name="T:UnrealEngine.EStereoLayerType">
            <summary>Used by IStereoLayer</summary>
        </member>
        <member name="F:UnrealEngine.EStereoLayerType.SLT_WorldLocked">
            <summary>Location within the world</summary>
        </member>
        <member name="F:UnrealEngine.EStereoLayerType.SLT_TrackerLocked">
            <summary>Location within the HMD tracking space</summary>
        </member>
        <member name="F:UnrealEngine.EStereoLayerType.SLT_FaceLocked">
            <summary>Location within the view space</summary>
        </member>
        <member name="T:UnrealEngine.EStreamingVolumeUsage">
            <summary>Enum for different usage cases of level streaming volumes.</summary>
        </member>
        <member name="F:UnrealEngine.EStretch.None">
            <summary>Does not scale the content.</summary>
        </member>
        <member name="F:UnrealEngine.EStretch.Fill">
            <summary>Scales the content non-uniformly filling the entire space of the area.</summary>
        </member>
        <member name="F:UnrealEngine.EStretch.ScaleToFit">
            <summary>
            Scales the content uniformly (preserving aspect ratio)
            until it can no longer scale the content without clipping it.
            </summary>
        </member>
        <member name="F:UnrealEngine.EStretch.ScaleToFitX">
            <summary>
            Scales the content uniformly (preserving aspect ratio)
            until it can no longer scale the content without clipping it along the x-axis,
            the y-axis can/will be clipped.
            </summary>
        </member>
        <member name="F:UnrealEngine.EStretch.ScaleToFitY">
            <summary>
            Scales the content uniformly (preserving aspect ratio)
            until it can no longer scale the content without clipping it along the y-axis,
            the x-axis can/will be clipped.
            </summary>
        </member>
        <member name="F:UnrealEngine.EStretch.ScaleToFill">
            <summary>
            Scales the content uniformly (preserving aspect ratio), until all sides meet
            or exceed the size of the area.  Will result in clipping the longer side.
            </summary>
        </member>
        <member name="F:UnrealEngine.EStretch.ScaleBySafeZone">
            <summary>Scales the content according to the size of the safe zone currently applied to the viewport.</summary>
        </member>
        <member name="F:UnrealEngine.EStretch.UserSpecified">
            <summary>Scales the content by the scale specified by the user.</summary>
        </member>
        <member name="F:UnrealEngine.EStretchDirection.Both">
            <summary>Will scale the content up or down.</summary>
        </member>
        <member name="F:UnrealEngine.EStretchDirection.DownOnly">
            <summary>Will only make the content smaller, will never scale it larger than the content's desired size.</summary>
        </member>
        <member name="F:UnrealEngine.EStretchDirection.UpOnly">
            <summary>Will only make the content larger, will never scale it smaller than the content's desired size.</summary>
        </member>
        <member name="T:UnrealEngine.ESubUVBoundingVertexCount">
            <summary>
            More bounding vertices results in reduced overdraw, but adds more triangle overhead.
            The eight vertex mode is best used when the SubUV texture has a lot of space to cut out that is not captured by the four vertex version,
            and when the particles using the texture will be few and large.
            </summary>
        </member>
        <member name="T:UnrealEngine.ESuggestProjVelocityTraceOption">
            <summary>Trace option to SuggestProjectileVelocity functions.</summary>
        </member>
        <member name="T:UnrealEngine.ETextCommit">
            <summary>Additional information about a text committal</summary>
        </member>
        <member name="F:UnrealEngine.ETextCommit.Default">
            <summary>Losing focus or similar event caused implicit commit</summary>
        </member>
        <member name="F:UnrealEngine.ETextCommit.OnEnter">
            <summary>User committed via the enter key</summary>
        </member>
        <member name="F:UnrealEngine.ETextCommit.OnUserMovedFocus">
            <summary>User committed via tabbing away or moving focus explicitly away</summary>
        </member>
        <member name="F:UnrealEngine.ETextCommit.OnCleared">
            <summary>Keyboard focus was explicitly cleared via the escape key or other similar action</summary>
        </member>
        <member name="F:UnrealEngine.ETextJustify.Left">
            <summary>
            Justify the text logically to the left.
            When text is flowing left-to-right, this will align text visually to the left.
            When text is flowing right-to-left, this will align text visually to the right.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETextJustify.Center">
            <summary>
            Justify the text in the center.
            Text flow direction has no impact on this justification mode.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETextJustify.Right">
            <summary>
            Justify the text logically to the right.
            When text is flowing left-to-right, this will align text visually to the right.
            When text is flowing right-to-left, this will align text visually to the left.
            </summary>
        </member>
        <member name="T:UnrealEngine.ETextureMipValueMode">
            <summary>defines how MipValue is used</summary>
        </member>
        <member name="F:UnrealEngine.ETextureMipValueMode.TMVM_None">
            <summary>Use hardware computed sample's mip level with automatic anisotropic filtering support.</summary>
        </member>
        <member name="F:UnrealEngine.ETextureMipValueMode.TMVM_MipLevel">
            <summary>Explicitly compute the sample's mip level. Disables anisotropic filtering.</summary>
        </member>
        <member name="F:UnrealEngine.ETextureMipValueMode.TMVM_MipBias">
            <summary>Bias the hardware computed sample's mip level. Disables anisotropic filtering.</summary>
        </member>
        <member name="F:UnrealEngine.ETextureMipValueMode.TMVM_Derivative">
            <summary>Explicitly compute the sample's DDX and DDY for anisotropic filtering.</summary>
        </member>
        <member name="T:UnrealEngine.ETexturePowerOfTwoSetting">
            <summary>Options for texture padding mode.</summary>
        </member>
        <member name="F:UnrealEngine.ETexturePowerOfTwoSetting.None">
            <summary>Do not modify the texture dimensions.</summary>
        </member>
        <member name="F:UnrealEngine.ETexturePowerOfTwoSetting.PadToPowerOfTwo">
            <summary>Pad the texture to the nearest power of two size.</summary>
        </member>
        <member name="F:UnrealEngine.ETexturePowerOfTwoSetting.PadToSquarePowerOfTwo">
            <summary>Pad the texture to the nearest square power of two size.</summary>
        </member>
        <member name="F:UnrealEngine.ETextureSourceFormat.TSF_RGBA8">
            <summary>@todo: Deprecated!</summary>
        </member>
        <member name="F:UnrealEngine.ETextureSourceFormat.TSF_RGBE8">
            <summary>@todo: Deprecated!</summary>
        </member>
        <member name="T:UnrealEngine.ETickingGroup">
            <summary>Determines which ticking group a tick function belongs to.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_PrePhysics">
            <summary>Any item that needs to be executed before physics simulation starts.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_StartPhysics">
            <summary>Special tick group that starts physics simulation.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_DuringPhysics">
            <summary>Any item that can be run in parallel with our physics simulation work.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_EndPhysics">
            <summary>Special tick group that ends physics simulation.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_PostPhysics">
            <summary>Any item that needs rigid body and cloth simulation to be complete before being executed.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_PostUpdateWork">
            <summary>Any item that needs the update work to be done before being ticked.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_LastDemotable">
            <summary>Catchall for anything demoted to the end.</summary>
        </member>
        <member name="F:UnrealEngine.ETickingGroup.TG_NewlySpawned">
            <summary>Special tick group that is not actually a tick group. After every tick group this is repeatedly re-run until there are no more newly spawned items to run.</summary>
        </member>
        <member name="T:UnrealEngine.ETimelineLengthMode">
            <summary>Whether or not the timeline should be finished after the specified length, or the last keyframe in the tracks</summary>
        </member>
        <member name="T:UnrealEngine.ETouchIndex">
            <summary>The number of entries in ETouchIndex must match the number of touch keys defined in EKeys and NUM_TOUCH_KEYS above</summary>
        </member>
        <member name="T:UnrealEngine.ETrackActiveCondition">
            <summary>Required condition for this track to be enabled</summary>
        </member>
        <member name="F:UnrealEngine.ETrackActiveCondition.ETAC_Always">
            <summary>Track is always active</summary>
        </member>
        <member name="F:UnrealEngine.ETrackActiveCondition.ETAC_GoreEnabled">
            <summary>Track is active when extreme content (gore) is enabled</summary>
        </member>
        <member name="F:UnrealEngine.ETrackActiveCondition.ETAC_GoreDisabled">
            <summary>Track is active when extreme content (gore) is disabled</summary>
        </member>
        <member name="T:UnrealEngine.ETrackToggleAction">
            <summary>Enumeration indicating toggle action</summary>
        </member>
        <member name="F:UnrealEngine.ETrail2SourceMethod.PET2SRCM_Default">
            <summary>
            Default        - use the emitter position.
                This is the fallback for when other modes can't be resolved.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETrail2SourceMethod.PET2SRCM_Particle">
            <summary>
            Particle       - use the particles from a given emitter in the system.
                The name of the emitter should be set in SourceName.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETrail2SourceMethod.PET2SRCM_Actor">
            <summary>
            Actor          - use the actor as the source.
                The name of the actor should be set in SourceName.
            </summary>
        </member>
        <member name="T:UnrealEngine.ETrailWidthMode">
            <summary>Controls the way that the width scale property affects animation trails.</summary>
        </member>
        <member name="T:UnrealEngine.ETransitionLogicType">
            <summary>@TODO: Document</summary>
        </member>
        <member name="T:UnrealEngine.ETransitionType">
            <summary>Enumerates transition types.</summary>
        </member>
        <member name="F:UnrealEngine.ETranslucencyLightingMode.TLM_VolumetricNonDirectional">
            <summary>
            Lighting will be calculated for a volume, without directionality.  Use this on particle effects like smoke and dust.
            This is the cheapest per-pixel lighting method, however the material normal is not taken into account.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETranslucencyLightingMode.TLM_VolumetricDirectional">
            <summary>
            Lighting will be calculated for a volume, with directionality so that the normal of the material is taken into account.
            Note that the default particle tangent space is facing the camera, so enable bGenerateSphericalParticleNormals to get a more useful tangent space.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETranslucencyLightingMode.TLM_VolumetricPerVertexNonDirectional">
            <summary>
            Same as Volumetric Non Directional, but lighting is only evaluated at vertices so the pixel shader cost is significantly less.
            Note that lighting still comes from a volume texture, so it is limited in range.  Directional lights become unshadowed in the distance.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETranslucencyLightingMode.TLM_VolumetricPerVertexDirectional">
            <summary>
            Same as Volumetric Directional, but lighting is only evaluated at vertices so the pixel shader cost is significantly less.
            Note that lighting still comes from a volume texture, so it is limited in range.  Directional lights become unshadowed in the distance.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETranslucencyLightingMode.TLM_Surface">
            <summary>
            Lighting will be calculated for a surface. The light in accumulated in a volume so the result is blurry,
            limited distance but the per pixel cost is very low. Use this on translucent surfaces like glass and water.
            Only diffuse lighting is supported.
            </summary>
        </member>
        <member name="F:UnrealEngine.ETranslucencyLightingMode.TLM_SurfacePerPixelLighting">
            <summary>
            Lighting will be calculated for a surface. Use this on translucent surfaces like glass and water.
            This is implemented with forward shading so specular highlights from local lights are supported, however many deferred-only features are not.
            This is the most expensive translucency lighting method as each light's contribution is computed per-pixel.
            </summary>
        </member>
        <member name="T:UnrealEngine.ETranslucentSortPolicy">
            <summary>Enumerates available options for the translucency sort policy.</summary>
        </member>
        <member name="F:UnrealEngine.ETranslucentSortPolicy.SortByDistance">
            <summary>Sort based on distance from camera centerpoint to bounding sphere centerpoint. (Default, best for 3D games.)</summary>
        </member>
        <member name="F:UnrealEngine.ETranslucentSortPolicy.SortByProjectedZ">
            <summary>Sort based on the post-projection Z distance to the camera.</summary>
        </member>
        <member name="F:UnrealEngine.ETranslucentSortPolicy.SortAlongAxis">
            <summary>Sort based on the projection onto a fixed axis. (Best for 2D games.)</summary>
        </member>
        <member name="T:UnrealEngine.ETravelFailure">
            <summary>Types of server travel failures broadcast by the engine</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.NoLevel">
            <summary>No level found in the loaded package</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.LoadMapFailure">
            <summary>LoadMap failed on travel (about to Browse to default map)</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.InvalidURL">
            <summary>Invalid URL specified</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.PackageMissing">
            <summary>A package is missing on the client</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.PackageVersion">
            <summary>A package version mismatch has occurred between client and server</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.NoDownload">
            <summary>A package is missing and the client is unable to download the file</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.TravelFailure">
            <summary>General travel failure</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.CheatCommands">
            <summary>Cheat commands have been used disabling travel</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.PendingNetGameCreateFailure">
            <summary>Failed to create the pending net game for travel</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.CloudSaveFailure">
            <summary>Failed to save before travel</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.ServerTravelFailure">
            <summary>There was an error during a server travel to a new map</summary>
        </member>
        <member name="F:UnrealEngine.ETravelFailure.ClientTravelFailure">
            <summary>There was an error during a client travel to a new map</summary>
        </member>
        <member name="T:UnrealEngine.ETravelType">
            <summary>Traveling from server to server.</summary>
        </member>
        <member name="F:UnrealEngine.ETravelType.TRAVEL_Absolute">
            <summary>Absolute URL.</summary>
        </member>
        <member name="F:UnrealEngine.ETravelType.TRAVEL_Partial">
            <summary>Partial (carry name, reset server).</summary>
        </member>
        <member name="F:UnrealEngine.ETravelType.TRAVEL_Relative">
            <summary>Relative URL.</summary>
        </member>
        <member name="T:UnrealEngine.ETriangleSortAxis">
            <summary>Enum to specify which axis to use for the forward vector when using TRISORT_CustomLeftRight sort mode.</summary>
        </member>
        <member name="T:UnrealEngine.EUMGSequencePlayMode">
            <summary>Describes playback modes for UMG sequences.</summary>
        </member>
        <member name="F:UnrealEngine.EUMGSequencePlayMode.Forward">
            <summary>Animation plays and loops from the beginning to the end.</summary>
        </member>
        <member name="F:UnrealEngine.EUMGSequencePlayMode.Reverse">
            <summary>Animation plays and loops from the end to the beginning.</summary>
        </member>
        <member name="F:UnrealEngine.EUMGSequencePlayMode.PingPong">
            <summary>Animation plays from the begging to the end and then from the end to beginning.</summary>
        </member>
        <member name="F:UnrealEngine.EUserDefinedStructureStatus.UDSS_UpToDate">
            <summary>Struct is in an unknown state.</summary>
        </member>
        <member name="F:UnrealEngine.EUserDefinedStructureStatus.UDSS_Dirty">
            <summary>Struct has been modified but not recompiled.</summary>
        </member>
        <member name="F:UnrealEngine.EUserDefinedStructureStatus.UDSS_Error">
            <summary>Struct tried but failed to be compiled.</summary>
        </member>
        <member name="F:UnrealEngine.EUserDefinedStructureStatus.UDSS_Duplicate">
            <summary>Struct is a duplicate, the original one was changed.</summary>
        </member>
        <member name="T:UnrealEngine.EVectorFieldConstructionOp">
            <summary>Operation used to construct the vector field from a 2D texture.</summary>
        </member>
        <member name="F:UnrealEngine.EVectorNoiseFunction.VNF_CellnoiseALU">
            <summary>
            Random color for each unit cell in 3D space.
            RGB output range 0 to 1
            R only = 9 instructions, RGB = 11 instructions
            </summary>
        </member>
        <member name="F:UnrealEngine.EVectorNoiseFunction.VNF_VectorALU">
            <summary>
            Perlin-style noise with 3D vector/color output.
            RGB output range -1 to 1
            R only = ~83 instructions, RGB = ~125 instructions
            </summary>
        </member>
        <member name="F:UnrealEngine.EVectorNoiseFunction.VNF_GradientALU">
            <summary>
            Gradient of Perlin noise, useful for bumps.
            RGB = Gradient of scalar noise (signed 3D vector)
            A = Base scalar noise with range -1 to 1
            A only = ~83 instructions, RGBA = ~106 instructions
            </summary>
        </member>
        <member name="F:UnrealEngine.EVectorNoiseFunction.VNF_CurlALU">
            <summary>
            Curl of Perlin noise, useful for 3D flow directions.
            RGB = signed curl vector
            ~162 instructions
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:UnrealEngine.EVectorNoiseFunction.VNF_VoronoiALU" -->
        <member name="T:UnrealEngine.EVertexAttributeStreamType">
            <summary>typical vertex attribute formats but as they are only CPU processed at the moment we could chnage that</summary>
        </member>
        <member name="F:UnrealEngine.EVertexAttributeStreamType.VAST_float3">
            <summary>FVector2D e.g. UV</summary>
        </member>
        <member name="F:UnrealEngine.EVertexAttributeStreamType.VAST_float4">
            <summary>FVector e.g. position</summary>
        </member>
        <member name="T:UnrealEngine.EVerticalAlignment">
            <summary>Enumerates vertical alignment options, i.e. for widget slots.</summary>
        </member>
        <member name="F:UnrealEngine.EVerticalAlignment.VAlign_Fill">
            <summary>Fill the entire height.</summary>
        </member>
        <member name="F:UnrealEngine.EVerticalAlignment.VAlign_Top">
            <summary>Top-align.</summary>
        </member>
        <member name="F:UnrealEngine.EVerticalAlignment.VAlign_Center">
            <summary>Center-align.</summary>
        </member>
        <member name="F:UnrealEngine.EVerticalAlignment.VAlign_Bottom">
            <summary>Bottom-align.</summary>
        </member>
        <member name="T:UnrealEngine.EViewTargetBlendFunction">
            <summary>
            Options that define how to blend when changing view targets.
            @see FViewTargetTransitionParams, SetViewTarget
            </summary>
        </member>
        <member name="F:UnrealEngine.EViewTargetBlendFunction.VTBlend_Linear">
            <summary>Camera does a simple linear interpolation.</summary>
        </member>
        <member name="F:UnrealEngine.EViewTargetBlendFunction.VTBlend_Cubic">
            <summary>Camera has a slight ease in and ease out, but amount of ease cannot be tweaked.</summary>
        </member>
        <member name="F:UnrealEngine.EViewTargetBlendFunction.VTBlend_EaseIn">
            <summary>Camera immediately accelerates, but smoothly decelerates into the target.  Ease amount controlled by BlendExp.</summary>
        </member>
        <member name="F:UnrealEngine.EViewTargetBlendFunction.VTBlend_EaseOut">
            <summary>Camera smoothly accelerates, but does not decelerate into the target.  Ease amount controlled by BlendExp.</summary>
        </member>
        <member name="F:UnrealEngine.EViewTargetBlendFunction.VTBlend_EaseInOut">
            <summary>Camera smoothly accelerates and decelerates.  Ease amount controlled by BlendExp.</summary>
        </member>
        <member name="T:UnrealEngine.EVisibilityTrackAction">
            <summary>Visibility track actions</summary>
        </member>
        <member name="F:UnrealEngine.EVisibilityTrackAction.EVTA_Hide">
            <summary>Hides the object</summary>
        </member>
        <member name="F:UnrealEngine.EVisibilityTrackAction.EVTA_Show">
            <summary>Shows the object</summary>
        </member>
        <member name="F:UnrealEngine.EVisibilityTrackAction.EVTA_Toggle">
            <summary>Toggles visibility of the object</summary>
        </member>
        <member name="T:UnrealEngine.EVisibilityTrackCondition">
            <summary>Required condition for firing this event</summary>
        </member>
        <member name="F:UnrealEngine.EVisibilityTrackCondition.EVTC_Always">
            <summary>Always play this event</summary>
        </member>
        <member name="F:UnrealEngine.EVisibilityTrackCondition.EVTC_GoreEnabled">
            <summary>Only play this event when extreme content (gore) is enabled</summary>
        </member>
        <member name="F:UnrealEngine.EVisibilityTrackCondition.EVTC_GoreDisabled">
            <summary>Only play this event when extreme content (gore) is disabled</summary>
        </member>
        <member name="T:UnrealEngine.EWalkableSlopeBehavior">
            <summary>
            Controls behavior of WalkableSlopeOverride, determining how to affect walkability of surfaces for Characters.
            @see FWalkableSlopeOverride
            @see UCharacterMovementComponent::GetWalkableFloorAngle(), UCharacterMovementComponent::SetWalkableFloorAngle()
            </summary>
        </member>
        <member name="F:UnrealEngine.EWalkableSlopeBehavior.WalkableSlope_Default">
            <summary>Don't affect the walkable slope. Walkable slope angle will be ignored.</summary>
        </member>
        <member name="F:UnrealEngine.EWalkableSlopeBehavior.WalkableSlope_Increase">
            <summary>
            Increase walkable slope.
            Makes it easier to walk up a surface, by allowing traversal over higher-than-usual angles.
            @see FWalkableSlopeOverride::WalkableSlopeAngle
            </summary>
        </member>
        <member name="F:UnrealEngine.EWalkableSlopeBehavior.WalkableSlope_Decrease">
            <summary>
            Decrease walkable slope.
            Makes it harder to walk up a surface, by restricting traversal to lower-than-usual angles.
            @see FWalkableSlopeOverride::WalkableSlopeAngle
            </summary>
        </member>
        <member name="F:UnrealEngine.EWalkableSlopeBehavior.WalkableSlope_Unwalkable">
            <summary>
            Make surface unwalkable.
            Note: WalkableSlopeAngle will be ignored.
            </summary>
        </member>
        <member name="T:UnrealEngine.EWidgetDesignFlags">
            <summary>Flags used by the widget designer.</summary>
        </member>
        <member name="T:UnrealEngine.EWindowMode">
            <summary>Supported windowing modes (mirrored from GenericWindow.h)</summary>
        </member>
        <member name="F:UnrealEngine.EWindowMode.Fullscreen">
            <summary>The window is in true fullscreen mode</summary>
        </member>
        <member name="F:UnrealEngine.EWindowMode.WindowedFullscreen">
            <summary>The window has no border and takes up the entire area of the screen</summary>
        </member>
        <member name="F:UnrealEngine.EWindowMode.Windowed">
            <summary>The window has a border and may not take up the entire screen area</summary>
        </member>
        <member name="T:UnrealEngine.EWorldPositionIncludedOffsets">
            <summary>Specifies which shader generated offsets should included in the world position (displacement/WPO etc.)</summary>
        </member>
        <member name="F:UnrealEngine.EWorldPositionIncludedOffsets.WPT_Default">
            <summary>Absolute world position with all material shader offsets applied</summary>
        </member>
        <member name="F:UnrealEngine.EWorldPositionIncludedOffsets.WPT_ExcludeAllShaderOffsets">
            <summary>Absolute world position with no material shader offsets applied</summary>
        </member>
        <member name="F:UnrealEngine.EWorldPositionIncludedOffsets.WPT_CameraRelative">
            <summary>Camera relative world position with all material shader offsets applied</summary>
        </member>
        <member name="F:UnrealEngine.EWorldPositionIncludedOffsets.WPT_CameraRelativeNoOffsets">
            <summary>Camera relative world position with no material shader offsets applied</summary>
        </member>
        <member name="T:UnrealEngine.ParticleSystemLODMethod">
            <summary>ParticleSystemLODMethod</summary>
        </member>
        <member name="F:UnrealEngine.ParticleSystemLODMethod.utomatic">
            <summary>Automatically set the LOD level, checking every LODDistanceCheckTime seconds.</summary>
        </member>
        <member name="F:UnrealEngine.ParticleSystemLODMethod.irectSet">
            <summary>LOD level is directly set by the game code.</summary>
        </member>
        <member name="F:UnrealEngine.ParticleSystemLODMethod.ctivateAutomatic">
            <summary>LOD level is determined at Activation time, then left alone unless directly set by game code.</summary>
        </member>
        <member name="T:UnrealEngine.ReverbPreset">
            <summary>
            DEPRECATED: Exists for backwards compatibility
            Indicates a reverb preset to use.
            </summary>
        </member>
        <member name="T:UnrealEngine.SkeletalMeshOptimizationImportance">
            <summary>Enum specifying the importance of properties when simplifying skeletal meshes.</summary>
        </member>
        <member name="T:UnrealEngine.SkeletalMeshOptimizationType">
            <summary>Enum specifying the reduction type to use when simplifying skeletal meshes.</summary>
        </member>
        <member name="T:UnrealEngine.TextureCompressionSettings">
            <summary>This needs to be mirrored in EditorFactories.cpp.</summary>
        </member>
        <member name="F:UnrealEngine.TextureFilter.TF_Default">
            <summary>Use setting from the Texture Group.</summary>
        </member>
        <member name="T:UnrealEngine.TextureGroup">
            <summary>
            @warning: if this is changed:
                update BaseEngine.ini [SystemSettings]
                you might have to update the update Game's DefaultEngine.ini [SystemSettings]
                order and actual name can never change (order is important!)
            TEXTUREGROUP_Cinematic: should be used for Cinematics which will be baked out
                                    and want to have the highest settings
            </summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.rocBuilding_Face">
            <summary>Obsolete - kept for backwards compatibility.</summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.rocBuilding_LightMap">
            <summary>Obsolete - kept for backwards compatibility.</summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.olorLookupTable">
            <summary>No compression, no mips.</summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.okeh">
            <summary>Using this TextureGroup triggers special mip map generation code only useful for the BokehDOF post process.</summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.ESLightProfile">
            <summary>No compression, created on import of a .IES file.</summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.ixels2D">
            <summary>Non-filtered, useful for 2D rendering.</summary>
        </member>
        <member name="F:UnrealEngine.TextureGroup.ierarchicalLOD">
            <summary>Hierarchical LOD generated textures</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_FromTextureGroup">
            <summary>Default for the "texture".</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_SimpleAverage">
            <summary>2x2 average, default for the "texture group".</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen0">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen1">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen2">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen3">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen4">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen5">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen6">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen7">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen8">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen9">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Sharpen10">
            <summary>8x8 with sharpening: 0=no sharpening but better quality which is softer, 1=little, 5=medium, 10=extreme.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_LeaveExistingMips">
            <summary>Do not touch existing mip chain as it contains generated data.</summary>
        </member>
        <member name="F:UnrealEngine.TextureMipGenSettings.TMGS_Blur1">
            <summary>Blur further (useful for image based reflections).</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.RemoveTickPrerequisiteComponent(UnrealEngine.UActorComponent)">
            <summary>Remove tick dependency on PrerequisiteComponent.</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.RemoveTickPrerequisiteActor(UnrealEngine.AActor)">
            <summary>Remove tick dependency on PrerequisiteActor.</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.AddTickPrerequisiteComponent(UnrealEngine.UActorComponent)">
            <summary>Make this component tick after PrerequisiteComponent.</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.AddTickPrerequisiteActor(UnrealEngine.AActor)">
            <summary>Make this component tick after PrerequisiteActor</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetTickGroup(UnrealEngine.ETickingGroup)">
            <summary>Changes the ticking group for this component</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.K2_DestroyComponent(UnrealEngine.UObject)">
            <summary>Unregister and mark for pending kill a component.  This may not be used to destroy a component is owned by an actor other than the one calling the function.</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.GetComponentTickInterval">
            <summary>Returns whether this component has tick enabled or not</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetComponentTickInterval(System.Single)">
            <summary>
            Sets the tick interval for this component's primary tick function. Does not enable the tick interval. Takes effect on next tick.
            @param TickInterval   The duration between ticks for this component's primary tick function
            </summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.IsComponentTickEnabled">
            <summary>Returns whether this component has tick enabled or not</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetComponentTickEnabled(System.Boolean)">
            <summary>
            Set this component's tick functions to be enabled or disabled. Only has an effect if the function is registered
            @param       bEnabled - Whether it should be enabled or not
            </summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetIsReplicated(System.Boolean)">
            <summary>Enable or disable replication. This is the equivalent of RemoteRole for actors (only a bool is required for components)</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetTickableWhenPaused(System.Boolean)">
            <summary>Sets whether this component can tick when paused.</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetAutoActivate(System.Boolean)">
            <summary>
            Sets whether the component should be auto activate or not. Only safe during construction scripts.
            @param bNewAutoActivate - The new auto activate state of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.IsActive">
            <summary>
            Returns whether the component is active or not
            @return - The active state of the component.
            </summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.ToggleActive">
            <summary>Toggles the active state of the component</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.SetActive(System.Boolean,System.Boolean)">
            <summary>
            Sets whether the component is active or not
            @param bNewActive - The new active state of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.Deactivate">
            <summary>Deactivates the SceneComponent.</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.Activate(System.Boolean)">
            <summary>
            Activates the SceneComponent
            @param bReset - The value to assign to HiddenGame.
            </summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.ComponentHasTag(System.String)">
            <summary>See if this component contains the supplied tag</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.GetOwner">
            <summary>Follow the Outer chain to get the  AActor  that 'Owns' this component</summary>
        </member>
        <member name="M:UnrealEngine.UActorComponent.IsBeingDestroyed">
            <summary>Returns whether the component is in the process of being destroyed.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetTimeToClosestMarker(System.String,System.String,System.Single@)">
            <summary>--- AI communication end ---</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.CalculateDirection(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>
            Returns degree of the angle betwee velocity and Rotation forward vector
            The range of return will be from [-180, 180], and this can be used to feed blendspace directional value
            </summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.ClearMorphTargets">
            <summary>Clears the current morph targets.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.SetMorphTarget(System.String,System.Single)">
            <summary>Sets a morph target to a certain weight.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetCurrentStateName(System.Int32)">
            <summary>Returns the name of a currently active state in a state machine.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetCurveValue(System.String)">
            <summary>Returns the value of a named curve.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetRelevantAnimTimeFraction(System.Int32,System.Int32)">
            <summary>Get the current accumulated time as a fraction of the length of the most relevant animation in the source state</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetRelevantAnimTime(System.Int32,System.Int32)">
            <summary>Get the current accumulated time in seconds for the most relevant animation in the source state</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetRelevantAnimLength(System.Int32,System.Int32)">
            <summary>Get the length in seconds of the most relevant animation in the source state</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetRelevantAnimTimeRemainingFraction(System.Int32,System.Int32)">
            <summary>Get the time remaining as a fraction of the duration for the most relevant animation in the source state</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetRelevantAnimTimeRemaining(System.Int32,System.Int32)">
            <summary>Get the time remaining in seconds for the most relevant animation in the source state</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceTransitionTimeElapsedFraction(System.Int32,System.Int32)">
            <summary>Get the elapsed time as a fraction of the crossfade duration of a specified transition</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceTransitionTimeElapsed(System.Int32,System.Int32)">
            <summary>Get the elapsed time in seconds of a specified transition</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceTransitionCrossfadeDuration(System.Int32,System.Int32)">
            <summary>Get the crossfade duration of a specified transition</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceCurrentStateElapsedTime(System.Int32)">
            <summary>Get the current elapsed time of a state within the specified state machine</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceStateWeight(System.Int32,System.Int32)">
            <summary>Get the blend weight of a specified state</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceMachineWeight(System.Int32)">
            <summary>Get the blend weight of a specified state machine</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceAssetPlayerTimeFromEndFraction(System.Int32)">
            <summary>Get the time as a fraction of the asset length of an animation in an asset player node</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceAssetPlayerTimeFromEnd(System.Int32)">
            <summary>Get the time in seconds from the end of an animation in an asset player node</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceAssetPlayerTimeFraction(System.Int32)">
            <summary>Get the current accumulated time as a fraction for an asset player node</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceAssetPlayerTime(System.Int32)">
            <summary>Get the current accumulated time in seconds for an asset player node</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetInstanceAssetPlayerLength(System.Int32)">
            <summary>Gets the length in seconds of the asset referenced in an asset player node</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.SetRootMotionMode(UnrealEngine.ERootMotionMode)">
            <summary>Set RootMotionMode</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetCurrentActiveMontage">
            <summary>
            Get a current Active Montage in this AnimInstance.
                          Note that there might be multiple Active at the same time. This will only return the first active one it finds. *
            </summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.IsAnyMontagePlaying">
            <summary>Returns true if any montage is playing currently. Doesn't mean it's active though, it could be blending out.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_GetPlayRate(UnrealEngine.UAnimMontage)">
            <summary>
            Get PlayRate for Montage.
                  If Montage reference is NULL, PlayRate for any Active Montage will be returned.
                  If Montage is not playing, 0 is returned.
            </summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_GetBlendTime(UnrealEngine.UAnimMontage)">
            <summary>
            Get the current blend time of the Montage.
                  If Montage reference is NULL, it will return the current blend time on the first active Montage found.
            </summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_GetIsStopped(UnrealEngine.UAnimMontage)">
            <summary>return true if Montage is not currently active. (not valid or blending out)</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_SetPosition(UnrealEngine.UAnimMontage,System.Single)">
            <summary>Set position.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_GetPosition(UnrealEngine.UAnimMontage)">
            <summary>Get Current Montage Position</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_GetCurrentSection(UnrealEngine.UAnimMontage)">
            <summary>Returns the name of the current animation montage section.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_IsPlaying(UnrealEngine.UAnimMontage)">
            <summary>
            Returns true if the animation montage is currently active and playing.
                  If reference is NULL, it will return true is ANY montage is currently active and playing.
            </summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_IsActive(UnrealEngine.UAnimMontage)">
            <summary>Returns true if the animation montage is active. If the Montage reference is NULL, it will return true if any Montage is active.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_SetPlayRate(UnrealEngine.UAnimMontage,System.Single)">
            <summary>Change AnimMontage play rate. NewPlayRate = 1.0 is the default playback rate.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_SetNextSection(System.String,System.String,UnrealEngine.UAnimMontage)">
            <summary>
            Relink new next section AFTER SectionNameToChange in run-time
                You can link section order the way you like in editor, but in run-time if you'd like to change it dynamically,
                use this function to relink the next section
                For example, you can have Start->Loop->Loop->Loop.... but when you want it to end, you can relink
                next section of Loop to be End to finish the montage, in which case, it stops looping by Loop->End.
            @param SectionNameToChange : This should be the name of the Montage Section after which you want to insert a new next section
            @param NextSection   : new next section
            </summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_JumpToSectionsEnd(System.String,UnrealEngine.UAnimMontage)">
            <summary>Makes a montage jump to the end of a named section. If Montage reference is NULL, it will do that to all active montages.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_JumpToSection(System.String,UnrealEngine.UAnimMontage)">
            <summary>Makes a montage jump to a named section. If Montage reference is NULL, it will do that to all active montages.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_Resume(UnrealEngine.UAnimMontage)">
            <summary>Resumes a paused animation montage. If reference is NULL, it will resume ALL active montages.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_Pause(UnrealEngine.UAnimMontage)">
            <summary>Pauses the animation montage. If reference is NULL, it will pause ALL active montages.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.Montage_Stop(System.Single,UnrealEngine.UAnimMontage)">
            <summary>Stops the animation montage. If reference is NULL, it will stop ALL active montages.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.IsPlayingSlotAnimation(UnrealEngine.UAnimSequenceBase,System.String)">
            <summary>Return true if it's playing the slot animation</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.StopSlotAnimation(System.Single,System.String)">
            <summary>Stops currently playing slot animation slot or all</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.PlaySlotAnimationAsDynamicMontage(UnrealEngine.UAnimSequenceBase,System.String,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>Play normal animation asset on the slot node by creating a dynamic UAnimMontage. You can only play one asset (whether montage or animsequence) at a time per SlotGroup.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetOwningComponent">
            <summary>Returns the skeletal mesh component that has created this AnimInstance</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.GetOwningActor">
            <summary>Returns the owning actor of this AnimInstance</summary>
        </member>
        <member name="M:UnrealEngine.UAnimInstance.SnapshotPose(UnrealEngine.FPoseSnapshot@)">
            <summary>
            Takes a snapshot of the current skeletal mesh component pose and saves it to the specified snapshot.
            The snapshot is taken at the current LOD, so if for example you took the snapshot at LOD1
            and then used it at LOD0 any bones not in LOD1 will use the reference pose
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UAnimInstance.SavePoseSnapshot(System.String)" -->
        <member name="M:UnrealEngine.UAnimInstance.TryGetPawnOwner">
            <summary>kismet event functions</summary>
        </member>
        <member name="M:UnrealEngine.UAnimSequenceBase.GetPlayLength">
            <summary>Returns the total play length of the montage, if played back with a speed of 1.0.</summary>
        </member>
        <member name="M:UnrealEngine.UAnimSingleNodeInstance.SetPreviewCurveOverride(System.String,System.Single,System.Boolean)">
            <summary>Set pose value</summary>
        </member>
        <member name="M:UnrealEngine.UAnimSingleNodeInstance.SetAnimationAsset(UnrealEngine.UAnimationAsset,System.Boolean,System.Single)">
            <summary>Set New Asset - calls InitializeAnimation, for now we need MeshComponent *</summary>
        </member>
        <member name="M:UnrealEngine.UAnimSingleNodeInstance.PlayAnim(System.Boolean,System.Single,System.Single)">
            <summary>For AnimSequence specific *</summary>
        </member>
        <member name="M:UnrealEngine.UArrowComponent.SetArrowColor(UnrealEngine.FLinearColor)">
            <summary>Updates the arrow's colour, and tells it to refresh</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetPrecomputeParams(System.Single,System.Int32,System.Int32)">
            <summary>Set PrecomputeParams, only valid in Editor mode</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.DisableGroundScattering(System.Boolean)">
            <summary>Set DisableGroundScattering</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.DisableSunDisk(System.Boolean)">
            <summary>Set DisableSunDisk</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetDistanceOffset(System.Single)">
            <summary>Set DistanceOffset</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetStartDistance(System.Single)">
            <summary>Set StartDistance</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetAltitudeScale(System.Single)">
            <summary>Set AltitudeScale</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetDistanceScale(System.Single)">
            <summary>Set DistanceScale</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetDensityOffset(System.Single)">
            <summary>Set DensityOffset</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetDensityMultiplier(System.Single)">
            <summary>Set DensityMultiplier</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetFogMultiplier(System.Single)">
            <summary>Set FogMultiplier</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetSunMultiplier(System.Single)">
            <summary>Set SunMultiplier</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetDefaultLightColor(UnrealEngine.FLinearColor)">
            <summary>Set color of the light</summary>
        </member>
        <member name="M:UnrealEngine.UAtmosphericFogComponent.SetDefaultBrightness(System.Single)">
            <summary>Set brightness of the light</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetSubmixSend(UnrealEngine.USoundSubmix,System.Single)">
            <summary>Sets how much audio the sound should send to the given submix.</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.AdjustAttenuation(UnrealEngine.FSoundAttenuationSettings)">
            <summary>Modify the attenuation settings of the audio component</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetUISound(System.Boolean)">
            <summary>Set whether sounds generated by this audio component should be considered UI sounds</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetPitchMultiplier(System.Single)">
            <summary>Set a new pitch multiplier</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetVolumeMultiplier(System.Single)">
            <summary>Set a new volume multiplier</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetIntParameter(System.String,System.Int32)">
            <summary>Set an integer instance parameter for use in sound cues played by this audio component</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetBoolParameter(System.String,System.Boolean)">
            <summary>Set a boolean instance parameter for use in sound cues played by this audio component</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetWaveParameter(System.String,UnrealEngine.USoundWave)">
            <summary>Set a sound wave instance parameter for use in sound cues played by this audio component</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetFloatParameter(System.String,System.Single)">
            <summary>Set a float instance parameter for use in sound cues played by this audio component</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.AdjustVolume(System.Single,System.Single)">
            <summary>This will allow one to adjust the volume of an AudioComponent on the fly</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.IsPlaying">
            <summary>@return true if this component is currently playing a SoundCue.</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetPaused(System.Boolean)">
            <summary>Pause an audio component playing its sound cue, issue any delegates if needed</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.Stop">
            <summary>Stop an audio component playing its sound cue, issue any delegates if needed</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.Play(System.Single)">
            <summary>Start a sound playing on an audio component</summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.FadeOut(System.Single,System.Single)">
            <summary>
            This is used in place of "stop" when it is desired to fade the volume of the sound before stopping.
            If FadeTime is 0.0, this is the same as calling Stop().
            If FadeTime is > 0.0, this will adjust the volume multiplier to FadeVolumeLevel over FadeInTime seconds
            and then stop the sound.
            @param FadeOutDuration how long it should take to reach the FadeVolumeLevel
            @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume in which to fade to
            </summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.FadeIn(System.Single,System.Single,System.Single)">
            <summary>
            This can be used in place of "play" when it is desired to fade in the sound over time.
            If FadeTime is 0.0, the change in volume is instant.
            If FadeTime is > 0.0, the multiplier will be increased from 0 to FadeVolumeLevel over FadeIn seconds.
            @param FadeInDuration how long it should take to reach the FadeVolumeLevel
            @param FadeVolumeLevel the percentage of the AudioComponents's calculated volume to fade to
            </summary>
        </member>
        <member name="M:UnrealEngine.UAudioComponent.SetSound(UnrealEngine.USoundBase)">
            <summary>Set what sound is played by this component</summary>
        </member>
        <member name="M:UnrealEngine.UAvoidanceManager.GetAvoidanceVelocity(UnrealEngine.FNavAvoidanceData,System.Single)">
            <summary>Only use if you want manual velocity planning. Will not ignore your own volume if you are registered.</summary>
        </member>
        <member name="M:UnrealEngine.UAvoidanceManager.GetAvoidanceVelocityIgnoringUID(UnrealEngine.FNavAvoidanceData,System.Single,System.Int32)">
            <summary>Only use if you want manual velocity planning. Provide your AvoidanceUID in order to avoid colliding with yourself.</summary>
        </member>
        <member name="M:UnrealEngine.UAvoidanceManager.GetAvoidanceVelocityForComponent(UnrealEngine.UMovementComponent)">
            <summary>Calculate avoidance velocity for component (avoids collisions with the supplied component)</summary>
        </member>
        <member name="M:UnrealEngine.UAvoidanceManager.RegisterMovementComponent(UnrealEngine.UMovementComponent,System.Single)">
            <summary>
            Register with the given avoidance manager.
            @param AvoidanceWeight      When avoiding each other, actors divert course in proportion to their relative weights. Range is 0.0 to 1.0. Special: at 1.0, actor will not divert course at all.
            </summary>
        </member>
        <member name="M:UnrealEngine.UAvoidanceManager.GetNewAvoidanceUID">
            <summary>Get appropriate UID for use when reporting to this function or requesting RVO assistance.</summary>
        </member>
        <member name="M:UnrealEngine.UAvoidanceManager.GetObjectCount">
            <summary>Get the number of avoidance objects currently in the manager.</summary>
        </member>
        <member name="M:UnrealEngine.UBillboardComponent.SetSpriteAndUV(UnrealEngine.UTexture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Change the sprite texture and the UV's used by this component</summary>
        </member>
        <member name="M:UnrealEngine.UBillboardComponent.SetUV(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Change the sprite's UVs</summary>
        </member>
        <member name="M:UnrealEngine.UBillboardComponent.SetSprite(UnrealEngine.UTexture2D)">
            <summary>Change the sprite texture used by this component</summary>
        </member>
        <member name="M:UnrealEngine.UBlueprintAsyncActionBase.Activate">
            <summary>Called to trigger the action once the delegates have been bound</summary>
        </member>
        <member name="M:UnrealEngine.UBlueprintPlatformLibrary.GetLaunchNotification(System.Boolean@,System.String@,System.Int32@)">
            <summary>
            Get the local notification that was used to launch the app
            @param NotificationLaunchedApp Return true if a notification was used to launch the app
            @param ActivationEvent Returns the name of the ActivationEvent if a notification was used to launch the app
            @param FireDate Returns the time the notification was activated
            </summary>
        </member>
        <member name="M:UnrealEngine.UBlueprintPlatformLibrary.CancelLocalNotification(System.String)">
            <summary>
            Cancel a local notification given the ActivationEvent
            @param ActivationEvent The string passed into the Schedule call for the notification to be cancelled
            </summary>
        </member>
        <member name="M:UnrealEngine.UBlueprintPlatformLibrary.ScheduleLocalNotificationFromNow(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Schedule a local notification to fire inSecondsFromNow from now
            @param inSecondsFromNow The seconds until the notification should fire
            @param LocalTime If true the provided time is in the local timezone, if false it is in UTC
            @param Title The title of the notification
            @param Body The more detailed description of the notification
            @param Action The text to be displayed on the slider controller
            @param ActivationEvent A string that is passed in the delegate callback when the app is brought into the foreground from the user activating the notification
            </summary>
        </member>
        <member name="M:UnrealEngine.UBlueprintPlatformLibrary.ScheduleLocalNotificationAtTime(UnrealEngine.FDateTime,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Schedule a local notification at a specific time, inLocalTime specifies the current local time or if UTC time should be used
            @param FireDateTime The time at which to fire the local notification
            @param LocalTime If true the provided time is in the local timezone, if false it is in UTC
            @param Title The title of the notification
            @param Body The more detailed description of the notification
            @param Action The text to be displayed on the slider controller
            @param ActivationEvent A string that is passed in the delegate callback when the app is brought into the foreground from the user activating the notification
            </summary>
        </member>
        <member name="M:UnrealEngine.UBlueprintPlatformLibrary.ClearAllLocalNotifications">
            <summary>Clear all pending local notifications. Typically this will be done before scheduling new notifications when going into the background</summary>
        </member>
        <member name="M:UnrealEngine.UBorder.SetDesiredSizeScale(UnrealEngine.FVector2D)">
            <summary>
            Sets the DesireSizeScale of this border.
            @param InScale    The X and Y multipliers for the desired size
            </summary>
        </member>
        <member name="M:UnrealEngine.UBoxComponent.GetUnscaledBoxExtent">
            <summary>@return the box extent, ignoring component scale.</summary>
        </member>
        <member name="M:UnrealEngine.UBoxComponent.GetScaledBoxExtent">
            <summary>@return the box extent, scaled by the component scale.</summary>
        </member>
        <member name="M:UnrealEngine.UBoxComponent.SetBoxExtent(UnrealEngine.FVector,System.Boolean)">
            <summary>
            Change the box extent size. This is the unscaled size, before component scale is applied.
            @param       InBoxExtent: new extent (radius) for the box.
            @param       bUpdateOverlaps: if true and this shape is registered and collides, updates touching array for owner actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UButton.IsPressed">
            <summary>
            Returns true if the user is actively pressing the button.  Do not use this for detecting 'Clicks', use the OnClicked event instead.
            @return true if the user is actively pressing the button otherwise false.
            </summary>
        </member>
        <member name="M:UnrealEngine.UButton.SetBackgroundColor(UnrealEngine.FLinearColor)">
            <summary>Sets the color multiplier for the button background</summary>
        </member>
        <member name="M:UnrealEngine.UButton.SetColorAndOpacity(UnrealEngine.FLinearColor)">
            <summary>Sets the color multiplier for the button content</summary>
        </member>
        <member name="M:UnrealEngine.UButton.SetStyle(UnrealEngine.FButtonStyle)">
            <summary>Sets the color multiplier for the button background</summary>
        </member>
        <member name="M:UnrealEngine.UCameraAnimInst.SetScale(System.Single)">
            <summary>Changes the scale of the animation while playing.</summary>
        </member>
        <member name="M:UnrealEngine.UCameraAnimInst.SetDuration(System.Single)">
            <summary>Changes the running duration of this active anim, while maintaining playback position.</summary>
        </member>
        <member name="M:UnrealEngine.UCameraAnimInst.Stop(System.Boolean)">
            <summary>Stops this instance playing whatever animation it is playing.</summary>
        </member>
        <member name="M:UnrealEngine.UCameraComponent.GetCameraView(System.Single,UnrealEngine.FMinimalViewInfo@)">
            <summary>
            Returns camera's Point of View.
            Called by Camera class. Subclass and postprocess to add any effects.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCameraModifier.EnableModifier">
            <summary>Enables this modifier.</summary>
        </member>
        <member name="M:UnrealEngine.UCameraModifier.DisableModifier(System.Boolean)">
            <summary>
            Disables this modifier.
            @param  bImmediate  - true to disable with no blend out, false (default) to allow blend out
            </summary>
        </member>
        <member name="M:UnrealEngine.UCameraModifier.GetViewTarget">
            <summary>@return Returns the actor the camera is currently viewing.</summary>
        </member>
        <member name="M:UnrealEngine.UCameraModifier.IsDisabled">
            <summary>@return Returns true if modifier is disabled, false otherwise.</summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_TextSize(UnrealEngine.UFont,System.String,UnrealEngine.FVector2D)">
            <summary>
            Returns the clipped text size in screen space coordinates.
            @param RenderFont                            Font to use when determining the size of the text. If this is null, then a default engine font is used.
            @param RenderText                            Text to determine the size of.
            @param Scale                                         Scale of the font to use when determining the size of the text.
            @return                                                      Returns the screen space size of the text.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_StrLen(UnrealEngine.UFont,System.String)">
            <summary>
            Returns the wrapped text size in screen space coordinates.
            @param RenderFont                            Font to use when determining the size of the text. If this is null, then a default engine font is used.
            @param RenderText                            Text to determine the size of.
            @return                                                      Returns the screen space size of the text.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_Deproject(UnrealEngine.FVector2D,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>
            Performs a deprojection of a screen space coordinate using the projection matrix set up for the Canvas.
            @param ScreenPosition                        Screen space position to deproject to the World.
            @param WorldOrigin                           Vector which is the world position of the screen space position.
            @param WorldDirection                        Vector which can be used in a trace to determine what is "behind" the screen space position. Useful for object picking.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_Project(UnrealEngine.FVector)">
            <summary>
            Performs a projection of a world space coordinates using the projection matrix set up for the Canvas.
            @param WorldLocation                         World space location to project onto the Canvas rendering plane.
            @return                                                      Returns a vector where X, Y defines a screen space position representing the world space location.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawPolygon(UnrealEngine.UTexture,UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Int32,UnrealEngine.FLinearColor)">
            <summary>
            Draws a polygon on the Canvas.
            @param RenderTexture                         Texture to use when rendering the triangles. If no texture is set, then the default white texture is used.
            @param ScreenPosition                        Screen space position to render the text.
            @param Radius                                        How large in pixels this polygon should be.
            @param NumberOfSides                         How many sides this polygon should have. This should be above or equal to three.
            @param RenderColor                           Color to tint the polygon.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawMaterialTriangle(UnrealEngine.UMaterialInterface,UnrealEngine.FCanvasUVTri[])">
            <summary>
            Draws a set of triangles on the Canvas.
            @param RenderMaterial                        Material to use when rendering. Remember that only the emissive channel is able to be rendered as no lighting is performed when rendering to the Canvas.
            @param Triangles                                     Triangles to render.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawTriangle(UnrealEngine.UTexture,UnrealEngine.FCanvasUVTri[])">
            <summary>
            Draws a set of triangles on the Canvas.
            @param RenderTexture                         Texture to use when rendering the triangles. If no texture is set, then the default white texture is used.
            @param Triangles                                     Triangles to render.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawBox(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single)">
            <summary>
            Draws an unfilled box on the Canvas.
            @param ScreenPosition                        Screen space position to render the text.
            @param ScreenSize                            Screen space size to render the texture.
            @param Thickness                                     How many pixels thick the box lines should be.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UCanvas.K2_DrawBorder(UnrealEngine.UTexture,UnrealEngine.UTexture,UnrealEngine.UTexture,UnrealEngine.UTexture,UnrealEngine.UTexture,UnrealEngine.UTexture,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FLinearColor,UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single,UnrealEngine.FVector2D,UnrealEngine.FVector2D)" -->
        <member name="M:UnrealEngine.UCanvas.K2_DrawText(UnrealEngine.UFont,System.String,UnrealEngine.FVector2D,UnrealEngine.FLinearColor,System.Single,UnrealEngine.FLinearColor,UnrealEngine.FVector2D,System.Boolean,System.Boolean,System.Boolean,UnrealEngine.FLinearColor)">
            <summary>
            Draws text on the Canvas.
            @param RenderFont                            Font to use when rendering the text. If this is null, then a default engine font is used.
            @param RenderText                            Text to render on the Canvas.
            @param ScreenPosition                        Screen space position to render the text.
            @param RenderColor                           Color to render the text.
            @param Kerning                                       Horizontal spacing adjustment to modify the spacing between each letter.
            @param ShadowColor                           Color to render the shadow of the text.
            @param ShadowOffset                          Pixel offset relative to the screen space position to render the shadow of the text.
            @param bCentreX                                      If true, then interpret the screen space position X coordinate as the center of the rendered text.
            @param bCentreY                                      If true, then interpret the screen space position Y coordinate as the center of the rendered text.
            @param bOutlined                                     If true, then the text should be rendered with an outline.
            @param OutlineColor                          Color to render the outline for the text.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawMaterial(UnrealEngine.UMaterialInterface,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single,UnrealEngine.FVector2D)">
            <summary>
            Draws a material on the Canvas.
            @param RenderMaterial                        Material to use when rendering. Remember that only the emissive channel is able to be rendered as no lighting is performed when rendering to the Canvas.
            @param ScreenPosition                        Screen space position to render the texture.
            @param ScreenSize                            Screen space size to render the texture.
            @param CoordinatePosition            Normalized UV starting coordinate to use when rendering the texture.
            @param CoordinateSize                        Normalized UV size coordinate to use when rendering the texture.
            @param Rotation                                      Rotation, in degrees, to render the texture.
            @param PivotPoint                            Normalized pivot point to use when rotating the texture.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawTexture(UnrealEngine.UTexture,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FLinearColor,UnrealEngine.EBlendMode,System.Single,UnrealEngine.FVector2D)">
            <summary>
            Draws a texture on the Canvas.
            @param RenderTexture                         Texture to use when rendering. If no texture is set then this will use the default white texture.
            @param ScreenPosition                        Screen space position to render the texture.
            @param ScreenSize                            Screen space size to render the texture.
            @param CoordinatePosition            Normalized UV starting coordinate to use when rendering the texture.
            @param CoordinateSize                        Normalized UV size coordinate to use when rendering the texture.
            @param RenderColor                           Color to use when rendering the texture.
            @param BlendMode                                     Blending mode to use when rendering the texture.
            @param Rotation                                      Rotation, in degrees, to render the texture.
            @param PivotPoint                            Normalized pivot point to use when rotating the texture.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvas.K2_DrawLine(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single,UnrealEngine.FLinearColor)">
            <summary>
            Draws a line on the Canvas.
            @param ScreenPositionA               Starting position of the line in screen space.
            @param ScreenPositionB               Ending position of the line in screen space.
            @param Thickness                             How many pixels thick this line should be.
            @param RenderColor                   Color to render the line.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetMaximum(UnrealEngine.FVector2D)">
            <summary>Sets the anchors on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetMinimum(UnrealEngine.FVector2D)">
            <summary>Sets the anchors on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetZOrder">
            <summary>Gets the z-order on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetZOrder(System.Int32)">
            <summary>Sets the z-order on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetAutoSize">
            <summary>Gets if the slot to be auto-sized</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetAutoSize(System.Boolean)">
            <summary>Sets if the slot to be auto-sized</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetAlignment">
            <summary>Gets the alignment on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetAlignment(UnrealEngine.FVector2D)">
            <summary>Sets the alignment on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetAnchors">
            <summary>Gets the anchors on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetAnchors(UnrealEngine.FAnchors)">
            <summary>Sets the anchors on the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetOffsets">
            <summary>Gets the offset data of the slot, which could be position and size, or margins depending on the anchor points</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetOffsets(UnrealEngine.FMargin)">
            <summary>Sets the offset data of the slot, which could be position and size, or margins depending on the anchor points</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetSize">
            <summary>Gets the size of the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetSize(UnrealEngine.FVector2D)">
            <summary>Sets the size of the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetPosition">
            <summary>Gets the position of the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetPosition(UnrealEngine.FVector2D)">
            <summary>Sets the position of the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.GetLayout">
            <summary>Gets the layout data of the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasPanelSlot.SetLayout(UnrealEngine.FAnchorData)">
            <summary>Sets the layout data of the slot</summary>
        </member>
        <member name="M:UnrealEngine.UCanvasRenderTarget2D.GetSize(System.Int32@,System.Int32@)">
            <summary>
            Gets a specific render target's size from the global map of canvas render targets.
            @param       Width   Output variable for the render target's width
            @param       Height  Output variable for the render target's height
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvasRenderTarget2D.CreateCanvasRenderTarget2D(UnrealEngine.UObject,UnrealEngine.TSubclassOf{UnrealEngine.UCanvasRenderTarget2D},System.Int32,System.Int32)">
            <summary>
            Creates a new canvas render target and initializes it to the specified dimensions
            @param       WorldContextObject      The world where this render target will be rendered for
            @param       CanvasRenderTarget2DClass       Class of the render target.  Unless you want to use a special sub-class, you can simply pass UCanvasRenderTarget2D::StaticClass() here.
            @param       Width                           Width of the render target.
            @param       Height                          Height of the render target.
            @return                                              Returns the instanced render target.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCanvasRenderTarget2D.UpdateResource">
            <summary>
            Updates the the canvas render target texture's resource. This is where the render target will create or
            find a canvas object to use.  It also calls UpdateResourceImmediate() to clear the render target texture
            from the deferred rendering list, to stop the texture from being cleared the next frame. From there it
            will ask the rendering thread to set up the RHI viewport. The canvas is then set up for rendering and
            then the user's update delegate is called.  The canvas is then flushed and the RHI resolves the
            texture to make it available for rendering.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetShapeScale">
            <summary>
            Get the scale used by this shape. This is a uniform scale that is the minimum of any non-uniform scaling.
            @return the scale used by this shape.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere(System.Single@,System.Single@)">
            <summary>
            Returns the capsule radius and half-height, ignoring component scaling. Half-height excludes the hemisphere end cap.
            @param OutRadius Radius of the capsule, ignoring component scaling.
            @param OutHalfHeightWithoutHemisphere Half-height of the capsule, scaled by the component scale. Excludes the hemisphere end cap.
            @return The capsule radius and half-height (excluding hemisphere end cap), ignoring component scaling.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetUnscaledCapsuleSize(System.Single@,System.Single@)">
            <summary>
            Returns the capsule radius and half-height scaled by the component scale. Half-height includes the hemisphere end cap.
            @param OutRadius Radius of the capsule, scaled by the component scale.
            @param OutHalfHeight Half-height of the capsule, scaled by the component scale. Includes the hemisphere end cap.
            @return The capsule radius and half-height scaled by the component scale.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere">
            <summary>
            Returns the capsule half-height minus radius (to exclude the hemisphere), ignoring component scaling. This excludes the hemisphere end cap.
            From the center of the capsule this is the vertical distance along the straight cylindrical portion to the point just before the curve of top hemisphere begins.
            @return The capsule half-height minus radius, ignoring component scaling.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetUnscaledCapsuleHalfHeight">
            <summary>
            Returns the capsule half-height, ignoring component scaling. This includes the hemisphere end cap.
            @return The capsule radius, ignoring component scaling.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetUnscaledCapsuleRadius">
            <summary>
            Returns the capsule radius, ignoring component scaling.
            @return the capsule radius, ignoring component scaling.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere(System.Single@,System.Single@)">
            <summary>
            Returns the capsule radius and half-height scaled by the component scale. Half-height excludes the hemisphere end cap.
            @param OutRadius Radius of the capsule, ignoring component scaling.
            @param OutHalfHeightWithoutHemisphere Half-height of the capsule, scaled by the component scale. Excludes the hemisphere end cap.
            @return The capsule radius and half-height scaled by the component scale.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetScaledCapsuleSize(System.Single@,System.Single@)">
            <summary>
            Returns the capsule radius and half-height scaled by the component scale. Half-height includes the hemisphere end cap.
            @param OutRadius Radius of the capsule, scaled by the component scale.
            @param OutHalfHeight Half-height of the capsule, scaled by the component scale. Includes the hemisphere end cap.
            @return The capsule radius and half-height scaled by the component scale.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere">
            <summary>
            Returns the capsule half-height minus radius (to exclude the hemisphere), scaled by the component scale.
            From the center of the capsule this is the vertical distance along the straight cylindrical portion to the point just before the curve of top hemisphere begins.
            @return The capsule half-height minus radius, scaled by the component scale.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetScaledCapsuleHalfHeight">
            <summary>
            Returns the capsule half-height scaled by the component scale. This includes both the cylinder and hemisphere cap.
            @return The capsule half-height scaled by the component scale.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.GetScaledCapsuleRadius">
            <summary>
            Returns the capsule radius scaled by the component scale.
            @return The capsule radius scaled by the component scale.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.SetCapsuleHalfHeight(System.Single,System.Boolean)">
            <summary>
            Set the capsule half-height. This is the unscaled half-height, before component scale is applied.
            If this capsule collides, updates touching array for owner actor.
            @param       HalfHeight : half-height, from capsule center to end of top or bottom hemisphere.
            @param       bUpdateOverlaps: if true and this shape is registered and collides, updates touching array for owner actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.SetCapsuleRadius(System.Single,System.Boolean)">
            <summary>
            Set the capsule radius. This is the unscaled radius, before component scale is applied.
            If this capsule collides, updates touching array for owner actor.
            @param       Radius : radius of end-cap hemispheres and center cylinder.
            @param       bUpdateOverlaps: if true and this shape is registered and collides, updates touching array for owner actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCapsuleComponent.SetCapsuleSize(System.Single,System.Single,System.Boolean)">
            <summary>
            Change the capsule size. This is the unscaled size, before component scale is applied.
            @param       InRadius : radius of end-cap hemispheres and center cylinder.
            @param       InHalfHeight : half-height, from capsule center to end of top or bottom hemisphere.
            @param       bUpdateOverlaps: if true and this shape is registered and collides, updates touching array for owner actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ClientAdjustRootMotionSourcePosition(System.Single,UnrealEngine.FRootMotionSourceGroup,System.Boolean,System.Single,UnrealEngine.FVector,UnrealEngine.FVector_NetQuantizeNormal,System.Single,UnrealEngine.UPrimitiveComponent,System.String,System.Boolean,System.Boolean,System.Byte)">
            <summary>Replicate root motion source correction to client when using root motion for movement.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ClientAdjustRootMotionPosition(System.Single,System.Single,UnrealEngine.FVector,UnrealEngine.FVector_NetQuantizeNormal,System.Single,UnrealEngine.UPrimitiveComponent,System.String,System.Boolean,System.Boolean,System.Byte)">
            <summary>Replicate position correction to client when using root motion for movement. (animation root motion specific)</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ClientVeryShortAdjustPosition(System.Single,UnrealEngine.FVector,UnrealEngine.UPrimitiveComponent,System.String,System.Boolean,System.Boolean,System.Byte)">
            <summary>Bandwidth saving version, when velocity is zeroed</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ClientAdjustPosition(System.Single,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.UPrimitiveComponent,System.String,System.Boolean,System.Boolean,System.Byte)">
            <summary>Replicate position correction to client, associated with a timestamped servermove.  Client will replay subsequent moves after applying adjustment.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ClientAckGoodMove(System.Single)">
            <summary>If no client adjustment is needed after processing received ServerMove(), ack the good move so client can remove it from SavedMoves</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ServerMoveOld(System.Single,UnrealEngine.FVector_NetQuantize10,System.Byte)">
            <summary>Resending an (important) old move. Process it if not already processed.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ServerMoveDualHybridRootMotion(System.Single,UnrealEngine.FVector_NetQuantize10,System.Byte,System.UInt32,System.Single,UnrealEngine.FVector_NetQuantize10,UnrealEngine.FVector_NetQuantize100,System.Byte,System.Byte,System.UInt32,UnrealEngine.UPrimitiveComponent,System.String,System.Byte)">
            <summary>Replicated function sent by client to server - contains client movement and view info for two moves. First move is non root motion, second is root motion.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ServerMoveDual(System.Single,UnrealEngine.FVector_NetQuantize10,System.Byte,System.UInt32,System.Single,UnrealEngine.FVector_NetQuantize10,UnrealEngine.FVector_NetQuantize100,System.Byte,System.Byte,System.UInt32,UnrealEngine.UPrimitiveComponent,System.String,System.Byte)">
            <summary>Replicated function sent by client to server - contains client movement and view info for two moves.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ServerMove(System.Single,UnrealEngine.FVector_NetQuantize10,UnrealEngine.FVector_NetQuantize100,System.Byte,System.Byte,System.UInt32,UnrealEngine.UPrimitiveComponent,System.String,System.Byte)">
            <summary>Replicated function sent by client to server - contains client movement and view info.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UCharacterMovementComponent.K2_ComputeFloorDist(UnrealEngine.FVector,System.Single,System.Single,System.Single,UnrealEngine.FFindFloorResult@)" -->
        <member name="M:UnrealEngine.UCharacterMovementComponent.K2_FindFloor(UnrealEngine.FVector,UnrealEngine.FFindFloorResult@)">
            <summary>
            Sweeps a vertical trace to find the floor for the capsule at the given location. Will attempt to perch if ShouldComputePerchResult() returns true for the downward sweep result.
            No floor will be found if collision is disabled on the capsule!
            @param CapsuleLocation                Location where the capsule sweep should originate
            @param FloorResult                    Result of the floor check
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.SetWalkableFloorZ(System.Single)">
            <summary>Set the Z component of the normal of the steepest walkable surface for the character. Also computes WalkableFloorAngle.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.K2_GetWalkableFloorZ">
            <summary>Get the Z component of the normal of the steepest walkable surface for the character. Any lower than this and it is not walkable.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.SetWalkableFloorAngle(System.Single)">
            <summary>Set the max angle in degrees of a walkable surface for the character. Also computes WalkableFloorZ.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.K2_GetWalkableFloorAngle">
            <summary>Get the max angle in degrees of a walkable surface for the character.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.IsWalkable(UnrealEngine.FHitResult)">
            <summary>Return true if the hit result should be considered a walkable surface for the character.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetValidPerchRadius">
            <summary>
            Returns the radius within which we can stand on the edge of a surface without falling (if this is a walkable surface).
            Simply computed as the capsule radius minus the result of GetPerchRadiusThreshold().
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetPerchRadiusThreshold">
            <summary>@return The distance from the edge of the capsule within which we don't allow the character to perch on the edge of a surface.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.AddForce(UnrealEngine.FVector)">
            <summary>
            Add force to character. Forces are accumulated each tick and applied together
            so multiple calls to this function will accumulate.
            Forces are scaled depending on timestep, so they can be applied each frame. If you want an
            instantaneous force, use AddImpulse.
            Adding a force always takes the actor's mass into account.
            Note that changing the momentum of characters like this can change the movement mode.
            @param       Force                   Force to apply.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.AddImpulse(UnrealEngine.FVector,System.Boolean)">
            <summary>
            Add impulse to character. Impulses are accumulated each tick and applied together
            so multiple calls to this function will accumulate.
            An impulse is an instantaneous force, usually applied once. If you want to continually apply
            forces each frame, use AddForce().
            Note that changing the momentum of characters like this can change the movement mode.
            @param       Impulse                         Impulse to apply.
            @param       bVelocityChange         Whether or not the impulse is relative to mass.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.ClearAccumulatedForces">
            <summary>Clears forces accumulated through AddImpulse() and AddForce(), and also pending launch velocity.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetAnalogInputModifier">
            <summary>@return Modifier [0..1] based on the magnitude of the last input vector, which is used to modify the acceleration and max speed during movement.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetCurrentAcceleration">
            <summary>@return Current acceleration, computed from input vector each update.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetMaxBrakingDeceleration">
            <summary>@return Maximum deceleration for the current state when braking (ie when there is no acceleration).</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetMaxAcceleration">
            <summary>@return Maximum acceleration for the current state.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetMaxJumpHeightWithJumpTime">
            <summary>
            Compute the max jump height based on the JumpZVelocity velocity and gravity.
            This does take into account the CharacterOwner's MaxJumpHoldTime.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetMaxJumpHeight">
            <summary>
            Compute the max jump height based on the JumpZVelocity velocity and gravity.
            This does not take into account the CharacterOwner's MaxJumpHoldTime.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.CalcVelocity(System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Updates Velocity and Acceleration based on the current state, applying the effects of friction and acceleration or deceleration. Does not apply gravity.
            This is used internally during movement updates. Normally you don't need to call this from outside code, but you might want to use it for custom movement modes.
            @param       DeltaTime                                               time elapsed since last frame.
            @param       Friction                                                coefficient of friction when not accelerating, or in the direction opposite acceleration.
            @param       bFluid                                                  true if moving through a fluid, causing Friction to always be applied regardless of acceleration.
            @param       BrakingDeceleration                             deceleration applied when not accelerating, or when exceeding max velocity.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetImpartedMovementBaseVelocity">
            <summary>
            If we have a movement base, get the velocity that should be imparted by that base, usually when jumping off of it.
            Only applies the components of the velocity enabled by bImpartBaseVelocityX, bImpartBaseVelocityY, bImpartBaseVelocityZ.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetMovementBase">
            <summary>Return PrimitiveComponent we are based on (standing and walking on).</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.DisableMovement">
            <summary>Make movement impossible (sets movement mode to MOVE_None).</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.IsWalking">
            <summary>@return true if the character is in the 'Walking' movement mode.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.SetMovementMode(UnrealEngine.EMovementMode,System.Byte)">
            <summary>
            Change movement mode.
            @param NewMovementMode       The new movement mode
            @param NewCustomMode         The new custom sub-mode, only applicable if NewMovementMode is Custom.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.GetCharacterOwner">
            <summary>Get the Character that owns UpdatedComponent.</summary>
        </member>
        <member name="M:UnrealEngine.UCharacterMovementComponent.SetAvoidanceEnabled(System.Boolean)">
            <summary>Change avoidance state and registers in RVO manager if needed</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.CheatScript(System.String)">
            <summary>Executes commands listed in CheatScript.ScriptName ini section of DefaultGame.ini</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.InvertMouse">
            <summary>Backwards compatibility exec function for people used to it instead of using InvertAxisKey</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.SetMouseSensitivityToDefault">
            <summary>Exec function to return the mouse sensitivity to its default value</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.SetWorldOrigin">
            <summary>Translate world origin to this player position</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.LogLoc">
            <summary>Logs the current location in bugit format without taking screenshot and further routing.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.FlushLog">
            <summary>This will force a flush of the output log to file</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.BugItStringCreator(UnrealEngine.FVector,UnrealEngine.FRotator,System.String@,System.String@)">
            <summary>This will create a BugItGo string for us.  Nice for calling form c++ where you just want the string and no Screenshots *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.BugIt(System.String)">
            <summary>
            This function is used to print out the BugIt location.  It prints out copy and paste versions for both IMing someone to type in
            and also a gameinfo ?options version so that you can append it to your launching url and be taken to the correct place.
            Additionally, it will take a screen shot so reporting bugs is a one command action!
            </summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.BugItGo(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This will move the player and set their rotation to the passed in values.
            We have this version of the BugIt family as it is easier to type in just raw numbers in the console.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DumpVoiceMutingState">
            <summary>Dump current state of voice chat</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DumpChatState">
            <summary>Dump known chat information</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DumpPartyState">
            <summary>Dump known party information</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DumpOnlineSessionState">
            <summary>Dump online session information</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.SetNavDrawDistance(System.Single)">
            <summary>Sets navigation drawing distance. Relevant only in non-editor modes. *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.RebuildNavigation">
            <summary>Builds the navigation mesh (or rebuilds it). *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.TestCollisionDistance">
            <summary>Test all volumes in the world to the player controller's view location*</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweepClear">
            <summary>Clear persistent list for trace capture *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweepPawn">
            <summary>Capture current local PC's pawn's location and add to persistent list *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweepCapture">
            <summary>Capture current trace and add to persistent list *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweepComplex(System.Boolean)">
            <summary>Change Trace Complex setting *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweepChannel(UnrealEngine.ECollisionChannel)">
            <summary>Change Trace Channel *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweepSize(System.Single,System.Single)">
            <summary>Change Trace capsule size *</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DebugCapsuleSweep">
            <summary>Toggle capsule trace debugging. Will trace a capsule from current view point and show where it hits the world</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ToggleAILogging">
            <summary>toggles AI logging</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ToggleDebugCamera">
            <summary>Toggle between debug camera/player camera without locking gameplay and with locking local player controller input.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.StreamLevelOut(System.String)">
            <summary>Stream out the given level.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.OnlyLoadLevel(System.String)">
            <summary>Load the given level.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.StreamLevelIn(System.String)">
            <summary>Stream in the given level.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ViewClass(UnrealEngine.TSubclassOf{UnrealEngine.AActor})">
            <summary>View from the point of view of an AActor of class DesiredClass.  Each subsequent ViewClass cycles through the list of actors of that class.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ViewActor(System.String)">
            <summary>View from the point of view of AActor with Name ActorName.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ViewPlayer(System.String)">
            <summary>View from the point of view of player with PlayerName S.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ViewSelf">
            <summary>Make controlled pawn the viewtarget again.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.PlayersOnly">
            <summary>Freeze everything in the level except for players.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.Summon(System.String)">
            <summary>Load Classname and spawn an actor of that class</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DestroyPawns(UnrealEngine.TSubclassOf{UnrealEngine.APawn})">
            <summary>Destroys (by calling destroy directly) all non-player pawns of class aClass in the level</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DestroyAllPawnsExceptTarget">
            <summary>Destroy all pawns except for the (pawn) target.  If no (pawn) target is found we don't destroy anything.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DestroyAll(UnrealEngine.TSubclassOf{UnrealEngine.AActor})">
            <summary>Destroy all actors of class aClass</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DestroyTarget">
            <summary>Destroy the actor you're looking at.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.DamageTarget(System.Single)">
            <summary>Damage the actor you're looking at (sourced from the player).</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.Slomo(System.Single)">
            <summary>Modify time dilation to change apparent speed of passage of time. e.g. "Slomo 0.1" makes everything move very slowly, while "Slomo 10" makes everything move very fast.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.God">
            <summary>Invulnerability cheat.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.Ghost">
            <summary>Pawn no longer collides with the world, and can fly</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.Walk">
            <summary>Return to walking movement mode from Fly or Ghost cheat.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.Fly">
            <summary>Pawn can fly.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.ChangeSize(System.Single)">
            <summary>Scale the player's size to be F * default size.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.Teleport">
            <summary>Teleport to surface player is looking at.</summary>
        </member>
        <member name="M:UnrealEngine.UCheatManager.FreezeFrame(System.Single)">
            <summary>Pause the game for Delay seconds.</summary>
        </member>
        <member name="M:UnrealEngine.UCheckBox.SetIsChecked(System.Boolean)">
            <summary>Sets the checked state.</summary>
        </member>
        <member name="M:UnrealEngine.UCheckBox.IsChecked">
            <summary>Returns true if the checkbox is currently checked</summary>
        </member>
        <member name="M:UnrealEngine.UCheckBox.IsPressed">
            <summary>Returns true if this button is currently pressed</summary>
        </member>
        <member name="M:UnrealEngine.UCircularThrobber.SetRadius(System.Single)">
            <summary>Sets the radius of the circle.</summary>
        </member>
        <member name="M:UnrealEngine.UCircularThrobber.SetPeriod(System.Single)">
            <summary>Sets the amount of time for a full circle (in seconds).</summary>
        </member>
        <member name="M:UnrealEngine.UCircularThrobber.SetNumberOfPieces(System.Int32)">
            <summary>Sets how many pieces there are.</summary>
        </member>
        <member name="M:UnrealEngine.UComboBoxString.GetOptionCount">
            <summary>@return The number of options</summary>
        </member>
        <member name="M:UnrealEngine.UComboBoxString.RefreshOptions">
            <summary>
            Refreshes the list of options.  If you added new ones, and want to update the list even if it's
            currently being displayed use this.
            </summary>
        </member>
        <member name="M:UnrealEngine.UCurveBase.GetValueRange(System.Single@,System.Single@)">
            <summary>Get the value range across all curves</summary>
        </member>
        <member name="M:UnrealEngine.UCurveBase.GetTimeRange(System.Single@,System.Single@)">
            <summary>Get the time range across all curves</summary>
        </member>
        <member name="M:UnrealEngine.UCurveFloat.GetFloatValue(System.Single)">
            <summary>Evaluate this float curve at the specified time</summary>
        </member>
        <member name="M:UnrealEngine.UCurveVector.GetVectorValue(System.Single)">
            <summary>Evaluate this float curve at the specified time</summary>
        </member>
        <member name="M:UnrealEngine.UDataTableFunctionLibrary.GetDataTableRowFromName(UnrealEngine.UDataTable,System.String,UnrealEngine.FTableRowBase@)">
            <summary>Get a Row from a DataTable given a RowName</summary>
        </member>
        <member name="M:UnrealEngine.UDecalComponent.CreateDynamicMaterialInstance">
            <summary>Utility to allocate a new Dynamic Material Instance, set its parent to the currently applied material, and assign it</summary>
        </member>
        <member name="M:UnrealEngine.UDecalComponent.GetDecalMaterial">
            <summary>Accessor for decal material</summary>
        </member>
        <member name="M:UnrealEngine.UDecalComponent.SetDecalMaterial(UnrealEngine.UMaterialInterface)">
            <summary>setting decal material on decal component. This will force the decal to reattach</summary>
        </member>
        <member name="M:UnrealEngine.UDecalComponent.SetSortOrder(System.Int32)">
            <summary>Sets the sort order for the decal component. Higher values draw later (on top). This will force the decal to reattach</summary>
        </member>
        <member name="M:UnrealEngine.UDecalComponent.SetFadeOut(System.Single,System.Single,System.Boolean)">
            <summary>
            Sets the decal's fade start time, duration and if the owning actor should be destroyed after the decal is fully faded out.
            The default value of 0 for FadeStartDelay and FadeDuration makes the decal persistent. See DecalLifetimeOpacity material
            node to control the look of "fading out."
            @param StartDelay - Time in seconds to wait before beginning to fade out the decal.
            @param Duration - Time in second for the decal to fade out.
            @param DestroyOwnerAfterFade - Should the owning actor automatically be destroyed after it is completely faded out.
            </summary>
        </member>
        <member name="M:UnrealEngine.UDestructibleComponent.ApplyRadiusDamage(System.Single,UnrealEngine.FVector,System.Single,System.Single,System.Boolean)">
            <summary>Take radius damage</summary>
        </member>
        <member name="M:UnrealEngine.UDestructibleComponent.ApplyDamage(System.Single,UnrealEngine.FVector,UnrealEngine.FVector,System.Single)">
            <summary>Take damage</summary>
        </member>
        <member name="M:UnrealEngine.UEditableText.SetText(System.String)">
            <summary>
            Directly sets the widget text.
            Warning: This will wipe any binding created for the Text property!
            @param InText The text to assign to the widget
            </summary>
        </member>
        <member name="M:UnrealEngine.UEditableText.GetText">
            <summary>
            Gets the widget text
            @return The widget text
            </summary>
        </member>
        <member name="M:UnrealEngine.UForceFeedbackComponent.AdjustAttenuation(UnrealEngine.FForceFeedbackAttenuationSettings)">
            <summary>Modify the attenuation settings of the component</summary>
        </member>
        <member name="M:UnrealEngine.UForceFeedbackComponent.SetIntensityMultiplier(System.Single)">
            <summary>Set a new intensity multiplier</summary>
        </member>
        <member name="M:UnrealEngine.UForceFeedbackComponent.Stop">
            <summary>Stop playing the feedback effect</summary>
        </member>
        <member name="M:UnrealEngine.UForceFeedbackComponent.Play(System.Single)">
            <summary>Start a feedback effect playing</summary>
        </member>
        <member name="M:UnrealEngine.UForceFeedbackComponent.SetForceFeedbackEffect(UnrealEngine.UForceFeedbackEffect)">
            <summary>Set what force feedback effect is played by this component</summary>
        </member>
        <member name="M:UnrealEngine.UGameInstance.DebugRemovePlayer(System.Int32)">
            <summary>
            Debug console command to remove the player with a given controller ID.
            @param ControllerId - The controller ID to search for.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameInstance.DebugCreatePlayer(System.Int32)">
            <summary>
            Debug console command to create a player.
            @param ControllerId - The controller ID the player should accept input from.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.HasLaunchOption(System.String)">
            <summary>
            Checks the commandline to see if the desired option was specified on the commandline (e.g. -demobuild)
            @return                               True if the launch option was specified on the commandline, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetIntOption(System.String,System.String,System.Int32)">
            <summary>
            Find an option in the options string and return it as an integer.
            @param Options               The string containing the options.
            @param Key                   The key to find the value of in Options.
            @return                              The value associated with Key as an integer if Key found in Options string, otherwise DefaultValue.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.HasOption(System.String,System.String)">
            <summary>
            Returns whether a key exists in an options string.
            @param Options               The string containing the options.
            @param Key                   The key to determine if it exists in Options.
            @return                              Whether Key was found in Options.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ParseOption(System.String,System.String)">
            <summary>
            Find an option in the options string and return it.
            @param Options               The string containing the options.
            @param Key                   The key to find the value of in Options.
            @return                              The value associated with Key if Key found in Options string.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetKeyValue(System.String,System.String@,System.String@)">
            <summary>
            Break up a key=value pair into its key and value.
            @param Pair                  The string containing a pair to split apart.
            @param Key                   (out) Key portion of Pair. If no = in string will be the same as Pair.
            @param Value                 (out) Value portion of Pair. If no = in string will be empty.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ProjectWorldToScreen(UnrealEngine.APlayerController,UnrealEngine.FVector,UnrealEngine.FVector2D@,System.Boolean)">
            <summary>
            Transforms the given 3D world-space point into a its 2D screen space coordinate.
            @param Player                        Project using this player's view.
            @param WorldPosition         World position to project.
            @param ScreenPosition        (out) Corresponding 2D position in screen space
            @param bPlayerViewportRelative       Should this be relative to the player viewport subregion (useful when using player attached widgets in split screen)
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.DeprojectScreenToWorld(UnrealEngine.APlayerController,UnrealEngine.FVector2D,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>
            Transforms the given 2D screen space coordinate into a 3D world-space point and direction.
            @param Player                        Deproject using this player's view.
            @param ScreenPosition        2D screen space to deproject.
            @param WorldPosition         (out) Corresponding 3D position in world space.
            @param WorldDirection        (out) World space direction vector away from the camera at the given 2d point.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GrassOverlappingSphereCount(UnrealEngine.UObject,UnrealEngine.UStaticMesh,UnrealEngine.FVector,System.Single)">
            <summary>
            Counts how many grass foliage instances overlap a given sphere.
            @param        Mesh                    The static mesh we are interested in counting.
            @param        CenterPosition  The center position of the sphere.
            @param        Radius                  The radius of the sphere.
            @return Number of foliage instances with their mesh set to Mesh that overlap the sphere.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.RebaseZeroOriginOntoLocal(UnrealEngine.UObject,UnrealEngine.FVector)">
            <summary>Returns local location for origin based position.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.RebaseLocalOriginOntoZero(UnrealEngine.UObject,UnrealEngine.FVector)">
            <summary>Returns origin based position for local world location.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetWorldOriginLocation(UnrealEngine.UObject,UnrealEngine.FIntVector)">
            <summary>Requests a new location for a world origin.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetWorldOriginLocation(UnrealEngine.UObject)">
            <summary>Returns world origin current location.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SuggestProjectileVelocity_CustomArc(UnrealEngine.UObject,UnrealEngine.FVector@,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single)">
            <summary>
            Returns the launch velocity needed for a projectile at rest at StartPos to land on EndPos.
            Assumes a medium arc (e.g. 45 deg on level ground). Projectile velocity is variable and unconstrained.
            Does no tracing.
            @param OutLaunchVelocity                      Returns the launch velocity required to reach the EndPos
            @param StartPos                                       Start position of the simulation
            @param EndPos                                         Desired end location for the simulation
            @param OverrideGravityZ                       Optional override of WorldGravityZ
            @param ArcParam                                       Change height of arc between 0.0-1.0 where 0.5 is the default medium arc
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.Blueprint_PredictProjectilePath_Advanced(UnrealEngine.UObject,UnrealEngine.FPredictProjectilePathParams,UnrealEngine.FPredictProjectilePathResult@)">
            <summary>
            Predict the arc of a virtual projectile affected by gravity with collision checks along the arc.
            Returns true if it hit something.
            @param PredictParams                          Input params to the trace (start location, velocity, time to simulate, etc).
            @param PredictResult                          Output result of the trace (Hit result, array of location/velocity/times for each trace step, etc).
            @return                                                       True if hit something along the path (if tracing with collision).
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel(UnrealEngine.UObject,UnrealEngine.FHitResult@,UnrealEngine.FVector[]@,UnrealEngine.FVector@,UnrealEngine.FVector,UnrealEngine.FVector,System.Boolean,System.Single,UnrealEngine.ECollisionChannel,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Predict the arc of a virtual projectile affected by gravity with collision checks along the arc. Returns a list of positions of the simulated arc and the destination reached by the simulation.
            Returns true if it hit something (if tracing with collision).
            @param OutPathPositions                       Predicted projectile path. Ordered series of positions from StartPos to the end. Includes location at point of impact if it hit something.
            @param OutHit                                         Predicted hit result, if the projectile will hit something
            @param OutLastTraceDestination        Goal position of the final trace it did. Will not be in the path if there is a hit.
            @param StartPos                                       First start trace location
            @param LaunchVelocity                         Velocity the "virtual projectile" is launched at
            @param bTracePath                                     Trace along the entire path to look for blocking hits
            @param ProjectileRadius                       Radius of the virtual projectile to sweep against the environment
            @param TraceChannel                           TraceChannel to trace against, if bTracePath is true.
            @param bTraceComplex                          Use TraceComplex (trace against triangles not primitives)
            @param ActorsToIgnore                         Actors to exclude from the traces
            @param DrawDebugType                          Debug type (one-frame, duration, persistent)
            @param DrawDebugTime                          Duration of debug lines (only relevant for DrawDebugType::Duration)
            @param SimFrequency                           Determines size of each sub-step in the simulation (chopping up MaxSimTime)
            @param MaxSimTime                                     Maximum simulation time for the virtual projectile.
            @param OverrideGravityZ                       Optional override of Gravity (if 0, uses WorldGravityZ)
            @return                                                       True if hit something along the path (if tracing with collision).
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.Blueprint_PredictProjectilePath_ByObjectType(UnrealEngine.UObject,UnrealEngine.FHitResult@,UnrealEngine.FVector[]@,UnrealEngine.FVector@,UnrealEngine.FVector,UnrealEngine.FVector,System.Boolean,System.Single,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Predict the arc of a virtual projectile affected by gravity with collision checks along the arc. Returns a list of positions of the simulated arc and the destination reached by the simulation.
            Returns true if it hit something.
            @param OutPathPositions                       Predicted projectile path. Ordered series of positions from StartPos to the end. Includes location at point of impact if it hit something.
            @param OutHit                                         Predicted hit result, if the projectile will hit something
            @param OutLastTraceDestination        Goal position of the final trace it did. Will not be in the path if there is a hit.
            @param StartPos                                       First start trace location
            @param LaunchVelocity                         Velocity the "virtual projectile" is launched at
            @param bTracePath                                     Trace along the entire path to look for blocking hits
            @param ProjectileRadius                       Radius of the virtual projectile to sweep against the environment
            @param ObjectTypes                            ObjectTypes to trace against, if bTracePath is true.
            @param bTraceComplex                          Use TraceComplex (trace against triangles not primitives)
            @param ActorsToIgnore                         Actors to exclude from the traces
            @param DrawDebugType                          Debug type (one-frame, duration, persistent)
            @param DrawDebugTime                          Duration of debug lines (only relevant for DrawDebugType::Duration)
            @param SimFrequency                           Determines size of each sub-step in the simulation (chopping up MaxSimTime)
            @param MaxSimTime                                     Maximum simulation time for the virtual projectile.
            @param OverrideGravityZ                       Optional override of Gravity (if 0, uses WorldGravityZ)
            @return                                                       True if hit something along the path if tracing for collision.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.BlueprintSuggestProjectileVelocity(UnrealEngine.UObject,UnrealEngine.FVector@,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.ESuggestProjVelocityTraceOption,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Calculates an launch velocity for a projectile to hit a specified point.
            @param TossVelocity          (output) Result launch velocity.
            @param StartLocation         Intended launch location
            @param EndLocation           Desired landing location
            @param LaunchSpeed           Desired launch speed
            @param OverrideGravityZ      Optional gravity override.  0 means "do not override".
            @param TraceOption           Controls whether or not to validate a clear path by tracing along the calculated arc
            @param CollisionRadius       Radius of the projectile (assumed spherical), used when tracing
            @param bFavorHighArc         If true and there are 2 valid solutions, will return the higher arc.  If false, will favor the lower arc.
            @param bDrawDebug            When true, a debug arc is drawn (red for an invalid arc, green for a valid arc)
            @return                                      Returns false if there is no valid solution or the valid solutions are blocked.  Returns true otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetPlatformName">
            <summary>
            Returns the string name of the current platform, to perform different behavior based on platform.
            (Platform names include Windows, Mac, IOS, Android, PS4, XboxOne, HTML5, Linux)
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.EnableLiveStreaming(System.Boolean)">
            <summary>
            Toggle live DVR streaming.
            @param Enable                        If true enable streaming, otherwise disable.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetAudioTimeSeconds(UnrealEngine.UObject)">
            <summary>Returns time in seconds since world was brought up for play, IS stopped when game pauses, NOT dilated/clamped.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetRealTimeSeconds(UnrealEngine.UObject)">
            <summary>Returns time in seconds since world was brought up for play, does NOT stop when game pauses, NOT dilated/clamped</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetUnpausedTimeSeconds(UnrealEngine.UObject)">
            <summary>Returns time in seconds since world was brought up for play, adjusted by time dilation and IS NOT stopped when game pauses</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetTimeSeconds(UnrealEngine.UObject)">
            <summary>Returns time in seconds since world was brought up for play, adjusted by time dilation and IS stopped when game pauses</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetWorldDeltaSeconds(UnrealEngine.UObject)">
            <summary>Returns the frame delta time in seconds, adjusted by time dilation.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.DeleteGameInSlot(System.String,System.Int32)">
            <summary>
            Delete a save game in a particular slot.
                 @param SlotName                 Name of save game slot to delete.
             @param UserIndex            For some platforms, master user index to identify the user doing the deletion.
             @return True if a file was actually able to be deleted. use DoesSaveGameExist to distinguish between delete failures and failure due to file not existing.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.LoadGameFromSlot(System.String,System.Int32)">
            <summary>
            Load the contents from a given slot.
            @param SlotName                 Name of the save game slot to load from.
            @param UserIndex            For some platforms, master user index to identify the user doing the loading.
            @return SaveGameObject  Object containing loaded game state (NULL if load fails)
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.DoesSaveGameExist(System.String,System.Int32)">
            <summary>
            See if a save game exists with the specified name.
            @param SlotName                 Name of save game slot.
            @param UserIndex            For some platforms, master user index to identify the user doing the saving.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SaveGameToSlot(UnrealEngine.USaveGame,System.String,System.Int32)">
            <summary>
            Save the contents of the SaveGameObject to a slot.
            @param SaveGameObject   Object that contains data about the save game that we want to write out
            @param SlotName                 Name of save game slot to save to.
            @param UserIndex            For some platforms, master user index to identify the user doing the saving.
            @return                                 Whether we successfully saved this information
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.CreateSaveGameObject(UnrealEngine.TSubclassOf{UnrealEngine.USaveGame})">
            <summary>
            Create a new, empty SaveGame object to set data on and then pass to SaveGameToSlot.
            @param  SaveGameClass   Class of SaveGame to create
            @return                                 New SaveGame object to write data to
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.FindCollisionUV(UnrealEngine.FHitResult,System.Int32,UnrealEngine.FVector2D@)">
            <summary>Try and find the UV for a collision impact. Note this ONLY works if 'Support UV From Hit Results' is enabled in Physics Settings.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetSurfaceType(UnrealEngine.FHitResult)">
            <summary>
            Returns the EPhysicalSurface type of the given Hit.
            To edit surface type for your project, use ProjectSettings/Physics/PhysicalSurface section
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.MakeHitResult(System.Boolean,System.Boolean,System.Single,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.UPhysicalMaterial,UnrealEngine.AActor,UnrealEngine.UPrimitiveComponent,System.String,System.Int32,System.Int32,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Create a HitResult struct
            @param Hit                   The source HitResult.
            @param bBlockingHit  True if there was a blocking hit, false otherwise.
            @param bInitialOverlap True if the hit started in an initial overlap. In this case some other values should be interpreted differently. Time will be 0, ImpactPoint will equal Location, and normals will be equal and indicate a depenetration vector.
            @param Time                  'Time' of impact along trace direction ranging from [0.0 to 1.0) if there is a hit, indicating time between start and end. Equals 1.0 if there is no hit.
            @param Location              Location of the hit in world space. If this was a swept shape test, this is the location where we can place the shape in the world where it will not penetrate.
            @param Normal                Normal of the hit in world space, for the object that was swept (e.g. for a sphere trace this points towards the sphere's center). Equal to ImpactNormal for line tests.
            @param ImpactPoint   Location of the actual contact point of the trace shape with the surface of the hit object. Equal to Location in the case of an initial overlap.
            @param ImpactNormal  Normal of the hit in world space, for the object that was hit by the sweep.
            @param PhysMat               Physical material that was hit. Must set bReturnPhysicalMaterial to true in the query params for this to be returned.
            @param HitActor              Actor hit by the trace.
            @param HitComponent  PrimitiveComponent hit by the trace.
            @param HitBoneName   Name of the bone hit (valid only if we hit a skeletal mesh).
            @param HitItem               Primitive-specific data recording which item in the primitive was hit
            @param FaceIndex             If colliding with trimesh or landscape, index of face that was hit.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.BreakHitResult(UnrealEngine.FHitResult,System.Boolean@,System.Boolean@,System.Single@,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.UPhysicalMaterial@,UnrealEngine.AActor@,UnrealEngine.UPrimitiveComponent@,System.String@,System.Int32@,System.Int32@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>
            Extracts data from a HitResult.
            @param Hit                   The source HitResult.
            @param bBlockingHit  True if there was a blocking hit, false otherwise.
            @param bInitialOverlap True if the hit started in an initial overlap. In this case some other values should be interpreted differently. Time will be 0, ImpactPoint will equal Location, and normals will be equal and indicate a depenetration vector.
            @param Time                  'Time' of impact along trace direction ranging from [0.0 to 1.0) if there is a hit, indicating time between start and end. Equals 1.0 if there is no hit.
            @param Location              Location of the hit in world space. If this was a swept shape test, this is the location where we can place the shape in the world where it will not penetrate.
            @param Normal                Normal of the hit in world space, for the object that was swept (e.g. for a sphere trace this points towards the sphere's center). Equal to ImpactNormal for line tests.
            @param ImpactPoint   Location of the actual contact point of the trace shape with the surface of the hit object. Equal to Location in the case of an initial overlap.
            @param ImpactNormal  Normal of the hit in world space, for the object that was hit by the sweep.
            @param PhysMat               Physical material that was hit. Must set bReturnPhysicalMaterial to true in the query params for this to be returned.
            @param HitActor              Actor hit by the trace.
            @param HitComponent  PrimitiveComponent hit by the trace.
            @param HitBoneName   Name of the bone hit (valid only if we hit a skeletal mesh).
            @param HitItem               Primitive-specific data recording which item in the primitive was hit
            @param FaceIndex             If colliding with trimesh or landscape, index of face that was hit.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnDecalAttached(UnrealEngine.UMaterialInterface,UnrealEngine.FVector,UnrealEngine.USceneComponent,System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EAttachLocation,System.Single)">
            <summary>
            Spawns a decal attached to and following the specified component. Does not replicate.
            @param DecalMaterial - decal's material
            @param DecalSize - size of decal
            @param AttachComponent - Component to attach to.
            @param AttachPointName - Optional named point within the AttachComponent to spawn the emitter at
            @param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset
            @param Rotation - Depending on the value of LocationType this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a realative offset
            @param LocationType - Specifies whether Location is a relative offset or an absolute world position
            @param LifeSpan - destroy decal component after time runs out (0 = infinite)
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnDecalAtLocation(UnrealEngine.UObject,UnrealEngine.UMaterialInterface,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,System.Single)">
            <summary>
            Spawns a decal at the given location and rotation, fire and forget. Does not replicate.
            @param DecalMaterial - decal's material
            @param DecalSize - size of decal
            @param Location - location to place the decal in world space
            @param Rotation - rotation to place the decal in world space
            @param LifeSpan - destroy decal component after time runs out (0 = infinite)
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetCurrentReverbEffect(UnrealEngine.UObject)">
            <summary>Returns the highest priority reverb settings currently active from any source (volumes or manual setting).</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.DeactivateReverbEffect(UnrealEngine.UObject,System.String)">
            <summary>
            Deactivates a Reverb Effect not applied by a volume
            @param TagName Tag associated with Reverb Effect to remove
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ActivateReverbEffect(UnrealEngine.UObject,UnrealEngine.UReverbEffect,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Activates a Reverb Effect without the need for a volume
            @param ReverbEffect Reverb Effect to use
            @param TagName Tag to associate with Reverb Effect
            @param Priority Priority of the Reverb Effect
            @param Volume Volume level of Reverb Effect
            @param FadeTime Time before Reverb Effect is fully active
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ClearSoundMixModifiers(UnrealEngine.UObject)">
            <summary>Clear all sound mix modifiers from the audio system *</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PopSoundMixModifier(UnrealEngine.UObject,UnrealEngine.USoundMix)">
            <summary>Pop a sound mix modifier from the audio system *</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PushSoundMixModifier(UnrealEngine.UObject,UnrealEngine.USoundMix)">
            <summary>Push a sound mix modifier onto the audio system *</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ClearSoundMixClassOverride(UnrealEngine.UObject,UnrealEngine.USoundMix,UnrealEngine.USoundClass,System.Single)">
            <summary>
            Clears the override of the sound class adjuster in the given sound mix. If the override did not exist in the sound mix, this will do nothing.
            @param InSoundMixModifier The sound mix to modify.
            @param InSoundClass The sound class to override (or add) in the sound mix.
            @param FadeOutTime The interpolation time to use to go from the current sound class adjuster override values to the non-override values.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetSoundMixClassOverride(UnrealEngine.UObject,UnrealEngine.USoundMix,UnrealEngine.USoundClass,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Overrides the sound class adjuster in the given sound mix. If the sound class does not exist in the input sound mix, the sound class adjustment will be added to the sound mix.
            @param InSoundMixModifier The sound mix to modify.
            @param InSoundClass The sound class to override (or add) in the sound mix.
            @param Volume The volume scale to set the sound class adjuster to.
            @param Pitch The pitch scale to set the sound class adjuster to.
            @param FadeInTime The interpolation time to use to go from the current sound class adjuster values to the new values.
            @param bApplyToChildren Whether or not to apply this override to the sound class' children or to just the specified sound class.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetBaseSoundMix(UnrealEngine.UObject,UnrealEngine.USoundMix)">
            <summary>Set the sound mix of the audio system for special EQing *</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.AreSubtitlesEnabled">
            <summary>
            Returns whether or not subtitles are currently enabled.
            @return true if subtitles are enabled.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetSubtitlesEnabled(System.Boolean)">
            <summary>
            Will set subtitles to be enabled or disabled.
            @param bEnabled will enable subtitle drawing if true, disable if false.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnForceFeedbackAttached(UnrealEngine.UForceFeedbackEffect,UnrealEngine.USceneComponent,System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EAttachLocation,System.Boolean,System.Boolean,System.Single,System.Single,UnrealEngine.UForceFeedbackAttenuation,System.Boolean)">
            <summary>
            Plays a force feedback effect attached to and following the specified component. This is a fire and forget effect. Replication is also not handled at this point.
            @param ForceFeedbackEffect - effect to play
            @param AttachComponent - Component to attach to.
            @param AttachPointName - Optional named point within the AttachComponent to attach to
            @param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset
            @param Rotation - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a relative offset
            @param LocationType - Specifies whether Location is a relative offset or an absolute world position
            @param bStopWhenAttachedToDestroyed - Specifies whether the feedback effect should stop playing when the owner of the attach to component is destroyed.
            @param IntensityMultiplier - Intensity multiplier
            @param StartTime - How far in to the feedback effect to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play effect with
            @param bAutoDestroy - Whether the returned force feedback component will be automatically cleaned up when the feedback patern finishes (by completing or stopping) or whether it can be reactivated
            @return Force Feedback Component to manipulate the playing feedback effect with
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnForceFeedbackAtLocation(UnrealEngine.UObject,UnrealEngine.UForceFeedbackEffect,UnrealEngine.FVector,UnrealEngine.FRotator,System.Boolean,System.Single,System.Single,UnrealEngine.UForceFeedbackAttenuation,System.Boolean)">
            <summary>
            Plays a force feedback effect at the given location. This is a fire and forget effect and does not travel with any actor. Replication is also not handled at this point.
            @param ForceFeedbackEffect - effect to play
            @param Location - World position to center the effect at
            @param Rotation - World rotation to center the effect at
            @param IntensityMultiplier - Intensity multiplier
            @param StartTime - How far in to the feedback effect to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play effect with
            @param bAutoDestroy - Whether the returned force feedback component will be automatically cleaned up when the feedback patern finishes (by completing or stopping) or whether it can be reactivated
            @return Force Feedback Component to manipulate the playing feedback effect with
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnDialogueAttached(UnrealEngine.UDialogueWave,UnrealEngine.FDialogueContext,UnrealEngine.USceneComponent,System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EAttachLocation,System.Boolean,System.Single,System.Single,System.Single,UnrealEngine.USoundAttenuation,System.Boolean)">
            <summary>
            Spawns a dialogue attached to and following the specified component. This is a fire and forget sound. Replication is also not handled at this point.
            @param Dialogue - dialogue to play
            @param Context - context the dialogue is to play in
            @param AttachComponent - Component to attach to.
            @param AttachPointName - Optional named point within the AttachComponent to play the sound at
            @param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset
            @param Rotation - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a relative offset
            @param LocationType - Specifies whether Location is a relative offset or an absolute world position
            @param bStopWhenAttachedToDestroyed - Specifies whether the sound should stop playing when the owner of the attach to component is destroyed.
            @param VolumeMultiplier - Volume multiplier
            @param PitchMultiplier - PitchMultiplier
            @param StartTime - How far in to the dialogue to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play sound with
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return Audio Component to manipulate the playing dialogue with
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnDialogueAtLocation(UnrealEngine.UObject,UnrealEngine.UDialogueWave,UnrealEngine.FDialogueContext,UnrealEngine.FVector,UnrealEngine.FRotator,System.Single,System.Single,System.Single,UnrealEngine.USoundAttenuation,System.Boolean)">
            <summary>
            Plays a dialogue at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.
            @param Dialogue - dialogue to play
            @param Context - context the dialogue is to play in
            @param Location - World position to play dialogue at
            @param Rotation - World rotation to play dialogue at
            @param VolumeMultiplier - Volume multiplier
            @param PitchMultiplier - PitchMultiplier
            @param StartTime - How far in to the dialogue to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play sound with
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return Audio Component to manipulate the playing dialogue with
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PlayDialogueAtLocation(UnrealEngine.UObject,UnrealEngine.UDialogueWave,UnrealEngine.FDialogueContext,UnrealEngine.FVector,UnrealEngine.FRotator,System.Single,System.Single,System.Single,UnrealEngine.USoundAttenuation)">
            <summary>
            Plays a dialogue at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.
            @param Dialogue - dialogue to play
            @param Context - context the dialogue is to play in
            @param Location - World position to play dialogue at
            @param Rotation - World rotation to play dialogue at
            @param VolumeMultiplier - Volume multiplier
            @param PitchMultiplier - Pitch multiplier
            @param StartTime - How far in to the dialogue to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play sound with
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnDialogue2D(UnrealEngine.UObject,UnrealEngine.UDialogueWave,UnrealEngine.FDialogueContext,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Spawns a dialogue with no attenuation, perfect for UI.
            * Not Replicated.
            @param Dialogue - dialogue to play
            @param Context - context the dialogue is to play in
            @param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.
            @param PitchMultiplier - Multiplies the pitch.
            @param StartTime - How far in to the dialogue to begin playback at
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return An audio component to manipulate the spawned sound
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PlayDialogue2D(UnrealEngine.UObject,UnrealEngine.UDialogueWave,UnrealEngine.FDialogueContext,System.Single,System.Single,System.Single)">
            <summary>
            Plays a dialogue directly with no attenuation, perfect for UI.
            * Fire and Forget.
            * Not Replicated.
            @param Dialogue - dialogue to play
            @param Context - context the dialogue is to play in
            @param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.
            @param PitchMultiplier - Multiplies the pitch.
            @param StartTime - How far in to the dialogue to begin playback at
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnSoundAttached(UnrealEngine.USoundBase,UnrealEngine.USceneComponent,System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EAttachLocation,System.Boolean,System.Single,System.Single,System.Single,UnrealEngine.USoundAttenuation,UnrealEngine.USoundConcurrency,System.Boolean)">
            <summary>
            Plays a sound attached to and following the specified component. This is a fire and forget sound. Replication is also not handled at this point.
            @param Sound - sound to play
            @param AttachComponent - Component to attach to.
            @param AttachPointName - Optional named point within the AttachComponent to play the sound at
            @param Location - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world position that will be translated to a relative offset
            @param Rotation - Depending on the value of Location Type this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a relative offset
            @param LocationType - Specifies whether Location is a relative offset or an absolute world position
            @param bStopWhenAttachedToDestroyed - Specifies whether the sound should stop playing when the owner of the attach to component is destroyed.
            @param VolumeMultiplier - Volume multiplier
            @param PitchMultiplier - PitchMultiplier
            @param StartTime - How far in to the sound to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play sound with
            @param ConcurrencySettings - Override concurrency settings package to play sound with
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return An audio component to manipulate the spawned sound
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnSoundAtLocation(UnrealEngine.UObject,UnrealEngine.USoundBase,UnrealEngine.FVector,UnrealEngine.FRotator,System.Single,System.Single,System.Single,UnrealEngine.USoundAttenuation,UnrealEngine.USoundConcurrency,System.Boolean)">
            <summary>
            Spawns a sound at the given location. This does not travel with any actor. Replication is also not handled at this point.
            @param Sound - sound to play
            @param Location - World position to play sound at
            @param Rotation - World rotation to play sound at
            @param VolumeMultiplier - Volume multiplier
            @param PitchMultiplier - PitchMultiplier
            @param StartTime - How far in to the sound to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play sound with
            @param ConcurrencySettings - Override concurrency settings package to play sound with
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return An audio component to manipulate the spawned sound
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PlaySoundAtLocation(UnrealEngine.UObject,UnrealEngine.USoundBase,UnrealEngine.FVector,UnrealEngine.FRotator,System.Single,System.Single,System.Single,UnrealEngine.USoundAttenuation,UnrealEngine.USoundConcurrency)">
            <summary>
            Plays a sound at the given location. This is a fire and forget sound and does not travel with any actor. Replication is also not handled at this point.
            @param Sound - sound to play
            @param Location - World position to play sound at
            @param Rotation - World rotation to play sound at
            @param VolumeMultiplier - Volume multiplier
            @param PitchMultiplier - PitchMultiplier
            @param StartTime - How far in to the sound to begin playback at
            @param AttenuationSettings - Override attenuation settings package to play sound with
            @param ConcurrencySettings - Override concurrency settings package to play sound with
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.CreateSound2D(UnrealEngine.UObject,UnrealEngine.USoundBase,System.Single,System.Single,System.Single,UnrealEngine.USoundConcurrency,System.Boolean,System.Boolean)">
            <summary>
            Creates a sound with no attenuation, perfect for UI sounds. This does NOT play the sound
            * Not Replicated.
            @param Sound - Sound to create.
            @param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.
            @param PitchMultiplier - Multiplies the pitch.
            @param StartTime - How far in to the sound to begin playback at
            @param ConcurrencySettings - Override concurrency settings package to play sound with
            @param PersistAcrossLevelTransition - Whether the sound should continue to play when the map it was played in is unloaded
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return An audio component to manipulate the created sound
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnSound2D(UnrealEngine.UObject,UnrealEngine.USoundBase,System.Single,System.Single,System.Single,UnrealEngine.USoundConcurrency,System.Boolean,System.Boolean)">
            <summary>
            Spawns a sound with no attenuation, perfect for UI sounds.
            * Not Replicated.
            @param Sound - Sound to play.
            @param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.
            @param PitchMultiplier - Multiplies the pitch.
            @param StartTime - How far in to the sound to begin playback at
            @param ConcurrencySettings - Override concurrency settings package to play sound with
            @param PersistAcrossLevelTransition - Whether the sound should continue to play when the map it was played in is unloaded
            @param bAutoDestroy - Whether the returned audio component will be automatically cleaned up when the sound finishes (by completing or stopping) or whether it can be reactivated
            @return An audio component to manipulate the spawned sound
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PlaySound2D(UnrealEngine.UObject,UnrealEngine.USoundBase,System.Single,System.Single,System.Single,UnrealEngine.USoundConcurrency)">
            <summary>
            Plays a sound directly with no attenuation, perfect for UI sounds.
            * Fire and Forget.
            * Not Replicated.
            @param Sound - Sound to play.
            @param VolumeMultiplier - Multiplied with the volume to make the sound louder or softer.
            @param PitchMultiplier - Multiplies the pitch.
            @param ConcurrencySettings - Override concurrency settings package to play sound with
            @param StartTime - How far in to the sound to begin playback at
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UGameplayStatics.SetGlobalListenerFocusParameters(UnrealEngine.UObject,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" -->
        <member name="M:UnrealEngine.UGameplayStatics.SetGlobalPitchModulation(UnrealEngine.UObject,System.Single,System.Single)">
            <summary>
            Sets a global pitch modulation scalar that will apply to all non-UI sounds
            * Fire and Forget.
            * Not Replicated.
            @param PitchModulation - A pitch modulation value to globally set.
            @param TimeSec - A time value to linearly interpolate the global modulation pitch over from it's current value.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.AreAnyListenersWithinRange(UnrealEngine.UObject,UnrealEngine.FVector,System.Single)">
            <summary>
            Determines if any audio listeners are within range of the specified location
            @param Location              The location to potentially play a sound at
            @param MaximumRange  The maximum distance away from Location that a listener can be
            @note This will always return false if there is no audio device, or the audio device is disabled.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnEmitterAttached(UnrealEngine.UParticleSystem,UnrealEngine.USceneComponent,System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EAttachLocation,System.Boolean)">
            <summary>
            Plays the specified effect attached to and following the specified component. The system will go away when the effect is complete. Does not replicate.
            @param EmitterTemplate - particle system to create
            @param AttachComponent - Component to attach to.
            @param AttachPointName - Optional named point within the AttachComponent to spawn the emitter at
            @param Location - Depending on the value of LocationType this is either a relative offset from the attach component/point or an absolute world location that will be translated to a relative offset (if LocationType is KeepWorldPosition).
            @param Rotation - Depending on the value of LocationType this is either a relative offset from the attach component/point or an absolute world rotation that will be translated to a relative offset (if LocationType is KeepWorldPosition).
            @param LocationType - Specifies whether Location is a relative offset or an absolute world position
            @param bAutoDestroy - Whether the component will automatically be destroyed when the particle system completes playing or whether it can be reactivated
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnEmitterAtLocation(UnrealEngine.UObject,UnrealEngine.UParticleSystem,UnrealEngine.FVector,UnrealEngine.FRotator,System.Boolean)">
            <summary>
            Plays the specified effect at the given location and rotation, fire and forget. The system will go away when the effect is complete. Does not replicate.
            @param WorldContextObject - Object that we can obtain a world context from
            @param EmitterTemplate - particle system to create
            @param Location - location to place the effect in world space
            @param Rotation - rotation to place the effect in world space
            @param bAutoDestroy - Whether the component will automatically be destroyed when the particle system completes playing or whether it can be reactivated
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.PlayWorldCameraShake(UnrealEngine.UObject,UnrealEngine.TSubclassOf{UnrealEngine.UCameraShake},UnrealEngine.FVector,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays an in-world camera shake that affects all nearby local players, with distance-based attenuation. Does not replicate.
            @param WorldContextObject - Object that we can obtain a world context from
            @param Shake - Camera shake asset to use
            @param Epicenter - location to place the effect in world space
            @param InnerRadius - Cameras inside this radius are ignored
            @param OuterRadius - Cameras outside of InnerRadius and inside this are effected
            @param Falloff - Affects falloff of effect as it nears OuterRadius
            @param bOrientShakeTowardsEpicenter - Changes the rotation of shake to point towards epicenter instead of forward
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ApplyDamage(UnrealEngine.AActor,System.Single,UnrealEngine.AController,UnrealEngine.AActor,UnrealEngine.TSubclassOf{UnrealEngine.UDamageType})">
            <summary>
            Hurts the specified actor with generic damage.
            @param DamagedActor - Actor that will be damaged.
            @param BaseDamage - The base damage to apply.
            @param EventInstigator - Controller that was responsible for causing this damage (e.g. player who shot the weapon)
            @param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded)
            @param DamageTypeClass - Class that describes the damage that was done.
            @return Actual damage the ended up being applied to the actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ApplyPointDamage(UnrealEngine.AActor,System.Single,UnrealEngine.FVector,UnrealEngine.FHitResult,UnrealEngine.AController,UnrealEngine.AActor,UnrealEngine.TSubclassOf{UnrealEngine.UDamageType})">
            <summary>
            Hurts the specified actor with the specified impact.
            @param DamagedActor - Actor that will be damaged.
            @param BaseDamage - The base damage to apply.
            @param HitFromDirection - Direction the hit came FROM
            @param HitInfo - Collision or trace result that describes the hit
            @param EventInstigator - Controller that was responsible for causing this damage (e.g. player who shot the weapon)
            @param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded)
            @param DamageTypeClass - Class that describes the damage that was done.
            @return Actual damage the ended up being applied to the actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ApplyRadialDamageWithFalloff(UnrealEngine.UObject,System.Single,System.Single,UnrealEngine.FVector,System.Single,System.Single,System.Single,UnrealEngine.TSubclassOf{UnrealEngine.UDamageType},UnrealEngine.AActor[],UnrealEngine.AActor,UnrealEngine.AController,UnrealEngine.ECollisionChannel)">
            <summary>
            Hurt locally authoritative actors within the radius. Will only hit components that block the Visibility channel.
            @param BaseDamage - The base damage to apply, i.e. the damage at the origin.
            @param Origin - Epicenter of the damage area.
            @param DamageInnerRadius - Radius of the full damage area, from Origin
            @param DamageOuterRadius - Radius of the minimum damage area, from Origin
            @param DamageFalloff - Falloff exponent of damage from DamageInnerRadius to DamageOuterRadius
            @param DamageTypeClass - Class that describes the damage that was done.
            @param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded)
            @param InstigatedByController - Controller that was responsible for causing this damage (e.g. player who threw the grenade)
            @param bFullDamage - if true, damage not scaled based on distance from Origin
            @param DamagePreventionChannel - Damage will not be applied to victim if there is something between the origin and the victim which blocks traces on this channel
            @return true if damage was applied to at least one actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.ApplyRadialDamage(UnrealEngine.UObject,System.Single,UnrealEngine.FVector,System.Single,UnrealEngine.TSubclassOf{UnrealEngine.UDamageType},UnrealEngine.AActor[],UnrealEngine.AActor,UnrealEngine.AController,System.Boolean,UnrealEngine.ECollisionChannel)">
            <summary>
            Hurt locally authoritative actors within the radius. Will only hit components that block the Visibility channel.
            @param BaseDamage - The base damage to apply, i.e. the damage at the origin.
            @param Origin - Epicenter of the damage area.
            @param DamageRadius - Radius of the damage area, from Origin
            @param DamageTypeClass - Class that describes the damage that was done.
            @param DamageCauser - Actor that actually caused the damage (e.g. the grenade that exploded).  This actor will not be damaged and it will not block damage.
            @param InstigatedByController - Controller that was responsible for causing this damage (e.g. player who threw the grenade)
            @param bFullDamage - if true, damage not scaled based on distance from Origin
            @param DamagePreventionChannel - Damage will not be applied to victim if there is something between the origin and the victim which blocks traces on this channel
            @return true if damage was applied to at least one actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.IsGamePaused(UnrealEngine.UObject)">
            <summary>
            Returns the game's paused state
            @return      Whether the game is currently paused or not
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetGamePaused(UnrealEngine.UObject,System.Boolean)">
            <summary>
            Sets the game's paused state
            @param       bPaused         Whether the game should be paused or not
            @return      Whether the game was successfully paused/unpaused
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetGlobalTimeDilation(UnrealEngine.UObject,System.Single)">
            <summary>
            Sets the global time dilation.
            @param       TimeDilation    value to set the global time dilation to
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetGlobalTimeDilation(UnrealEngine.UObject)">
            <summary>
            Gets the current global time dilation.
            @return Current time dilation.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetObjectClass(UnrealEngine.UObject)">
            <summary>Returns the class of a passed in Object, will always be valid if Object is not NULL</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetGameState(UnrealEngine.UObject)">
            <summary>Returns the current GameStateBase or Null if it can't be retrieved</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetGameMode(UnrealEngine.UObject)">
            <summary>Returns the current GameModeBase or Null if it can't be retrieved, such as on the client</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetCurrentLevelName(UnrealEngine.UObject,System.Boolean)">
            <summary>
            Get the name of the currently-open level.
            @param bRemovePrefixString    remove any streaming- or editor- added prefixes from the level name.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.OpenLevel(UnrealEngine.UObject,System.String,System.Boolean,System.String)">
            <summary>
            Travel to another level
            @param       LevelName                       the level to open
            @param       bAbsolute                       if true options are reset, if false options are carried over from current level
            @param       Options                         a string of options to use for the travel URL
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.CancelAsyncLoading">
            <summary>Cancels all currently queued streaming packages</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.FlushLevelStreaming(UnrealEngine.UObject)">
            <summary>Flushes level streaming in blocking fashion and returns when all sub-levels are loaded / visible / hidden</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetStreamingLevel(UnrealEngine.UObject,System.String)">
            <summary>Returns level streaming object with specified level package name</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.UnloadStreamLevel(UnrealEngine.UObject,System.String,UnrealEngine.FLatentActionInfo)">
            <summary>Unload a streamed in level</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.LoadStreamLevel(UnrealEngine.UObject,System.String,System.Boolean,System.Boolean,UnrealEngine.FLatentActionInfo)">
            <summary>Stream the level with the LevelName ; Calling again before it finishes has no effect</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SetPlayerControllerID(UnrealEngine.APlayerController,System.Int32)">
            <summary>
            Sets what controller ID a Player should be using
            @param Player                        The player controller of the player to change the controller ID of
            @param ControllerId          The controller ID to assign to this player
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetPlayerControllerID(UnrealEngine.APlayerController)">
            <summary>
            Gets what controller ID a Player is using
            @param Player         The player controller of the player to get the ID of
            @return                       The ID of the passed in player. -1 if there is no controller for the passed in player
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.RemovePlayer(UnrealEngine.APlayerController,System.Boolean)">
            <summary>
            Removes a player from this game.
            @param Player                       The player controller of the player to be removed
            @param bDestroyPawn         Whether the controlled pawn should be deleted as well
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.CreatePlayer(UnrealEngine.UObject,System.Int32,System.Boolean)">
            <summary>
            Create a new player for this game.
            @param ControllerId         The ID of the controller that the should control the newly created player.  A value of -1 specifies to use the next available ID
            @param bSpawnPawn           Whether a pawn should be spawned immediately. If false a pawn will not be created until transition to the next map.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetPlayerCameraManager(UnrealEngine.UObject,System.Int32)">
            <summary>Returns the player's camera manager for the specified player index</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetPlayerCharacter(UnrealEngine.UObject,System.Int32)">
            <summary>Returns the player character (NULL if the player pawn doesn't exist OR is not a character) at the specified player index</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetPlayerPawn(UnrealEngine.UObject,System.Int32)">
            <summary>Returns the player pawn at the specified player index</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetPlayerController(UnrealEngine.UObject,System.Int32)">
            <summary>Returns the player controller at the specified player index</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetGameInstance(UnrealEngine.UObject)">
            <summary>Returns the game instance object</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetAllActorsWithTag(UnrealEngine.UObject,System.String,UnrealEngine.AActor[]@)">
            <summary>
            Find all Actors in the world with the specified tag.
            This is a slow operation, use with caution e.g. do not use every frame.
            @param  Tag                     Tag to find. Must be specified or result array will be empty.
            @param  OutActors       Output array of Actors of the specified tag.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetAllActorsWithInterface(UnrealEngine.UObject,UnrealEngine.TSubclassOf{UnrealEngine.UInterface},UnrealEngine.AActor[]@)">
            <summary>
            Find all Actors in the world with the specified interface.
            This is a slow operation, use with caution e.g. do not use every frame.
            @param  Interface       Interface to find. Must be specified or result array will be empty.
            @param  OutActors       Output array of Actors of the specified interface.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetAllActorsOfClass(UnrealEngine.UObject,UnrealEngine.TSubclassOf{UnrealEngine.AActor},UnrealEngine.AActor[]@)">
            <summary>
            Find all Actors in the world of the specified class.
            This is a slow operation, use with caution e.g. do not use every frame.
            @param  ActorClass      Class of Actor to find. Must be specified or result array will be empty.
            @param  OutActors       Output array of Actors of the specified class.
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetActorArrayBounds(UnrealEngine.AActor[],System.Boolean,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Bind the bounds of an array of Actors</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.GetActorArrayAverageLocation(UnrealEngine.AActor[])">
            <summary>Find the average location (centroid) of an array of Actors</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.FinishSpawningActor(UnrealEngine.AActor,UnrealEngine.FTransform)">
            <summary>'Finish' spawning an actor.  This will run the construction script.</summary>
        </member>
        <member name="M:UnrealEngine.UGameplayStatics.SpawnObject(UnrealEngine.TSubclassOf{UnrealEngine.UObject},UnrealEngine.UObject)">
            <summary>--- Create Object</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetCurrentHDRDisplayNits">
            <summary>Returns 0 if HDR isn't supported or is turned off</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.EnableHDRDisplayOutput(System.Boolean,System.Int32)">
            <summary>Enables or disables HDR display output. Can be called again to change the desired nit level</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SupportsHDRDisplayOutput">
            <summary>Whether the curently running system supports HDR display output</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.ApplyHardwareBenchmarkResults">
            <summary>Applies the settings stored in ScalabilityQuality and saves settings</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.RunHardwareBenchmark(System.Int32,System.Single,System.Single)">
            <summary>Runs the hardware benchmark and populates ScalabilityQuality as well as the last benchmark results config members, but does not apply the settings it determines. Designed to be called in conjunction with ApplyHardwareBenchmarkResults</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetGameUserSettings">
            <summary>Returns the game local machine settings (resolution, windowing mode, scalability settings, etc...)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetDefaultWindowMode">
            <summary>@return The default window mode when no mode is set</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetDefaultWindowPosition">
            <summary>@return The default window position when no position is set</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetDefaultResolution">
            <summary>@return The default resolution when no resolution is set</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetRecommendedResolutionScale">
            <summary>Gets the recommended resolution quality based on LastRecommendedScreenWidth/Height and the current screen resolution</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetDefaultResolutionScale">
            <summary>Gets the desired resolution quality based on DesiredScreenWidth/Height and the current screen resolution</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.ResetToCurrentSettings">
            <summary>This function resets all settings to the current system settings</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SaveSettings">
            <summary>Save the user settings to persistent storage (automatically happens as part of ApplySettings)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.LoadSettings(System.Boolean)">
            <summary>Loads the user settings from persistent storage</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.ValidateSettings">
            <summary>Validates and resets bad user settings to default. Deletes stale user settings file if necessary.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.IsDirty">
            <summary>Checks if any user settings is different from current</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetFoliageQuality">
            <summary>Returns the post-processing quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetFoliageQuality(System.Int32)">
            <summary>Sets the post-processing quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetPostProcessingQuality">
            <summary>Returns the post-processing quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetPostProcessingQuality(System.Int32)">
            <summary>Sets the post-processing quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetVisualEffectQuality">
            <summary>Returns the visual effects quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetVisualEffectQuality(System.Int32)">
            <summary>Sets the visual effects quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetTextureQuality">
            <summary>Returns the texture quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetTextureQuality(System.Int32)">
            <summary>Sets the texture quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetAntiAliasingQuality">
            <summary>Returns the anti-aliasing quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetAntiAliasingQuality(System.Int32)">
            <summary>Sets the anti-aliasing quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetShadowQuality">
            <summary>Returns the shadow quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetShadowQuality(System.Int32)">
            <summary>Sets the shadow quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetViewDistanceQuality">
            <summary>Returns the view distance quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetViewDistanceQuality(System.Int32)">
            <summary>Sets the view distance quality (0..3, higher is better)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetResolutionScaleNormalized(System.Single)">
            <summary>Sets the current resolution scale as a normalized 0..1 value between MinScaleValue and MaxScaleValue</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetResolutionScaleValueEx(System.Single)">
            <summary>Sets the current resolution scale</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetResolutionScaleInformationEx(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>Returns the current resolution scale and the range</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetOverallScalabilityLevel">
            <summary>Returns the overall scalability level (can return -1 if the settings are custom)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetOverallScalabilityLevel(System.Int32)">
            <summary>
            Changes all scalability settings at once based on a single overall quality level
            @param Value 0:low, 1:medium, 2:high, 3:epic
            </summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetFrameRateLimit">
            <summary>Gets the user's frame rate limit (0 indiciates the frame rate limit is disabled)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetFrameRateLimit(System.Single)">
            <summary>Sets the user's frame rate limit (0 will disable frame rate limiting)</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetAudioQualityLevel">
            <summary>Returns the user's audio quality level setting</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetAudioQualityLevel(System.Int32)">
            <summary>Sets the user's audio quality level setting</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetBenchmarkFallbackValues">
            <summary>Set scalability settings to sensible fallback values, for use when the benchmark fails or potentially causes a crash</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.RevertVideoMode">
            <summary>Revert video mode (fullscreenmode/resolution) back to the last user confirmed values</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.ConfirmVideoMode">
            <summary>Mark current video mode settings (fullscreenmode/resolution) as being confirmed by the user</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.IsVSyncDirty">
            <summary>Checks if the vsync user setting is different from current system setting</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.IsFullscreenModeDirty">
            <summary>Checks if the FullscreenMode user setting is different from current</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.IsScreenResolutionDirty">
            <summary>Checks if the Screen Resolution user setting is different from current</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.IsVSyncEnabled">
            <summary>Returns the user setting for vsync.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetVSyncEnabled(System.Boolean)">
            <summary>Sets the user setting for vsync. See UGameUserSettings::bUseVSync.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetPreferredFullscreenMode">
            <summary>Returns the user setting for game window fullscreen mode.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetFullscreenMode(UnrealEngine.EWindowMode)">
            <summary>Sets the user setting for the game window fullscreen mode. See UGameUserSettings::FullscreenMode.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetLastConfirmedFullscreenMode">
            <summary>Returns the last confirmed user setting for game window fullscreen mode.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetFullscreenMode">
            <summary>Returns the user setting for game window fullscreen mode.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.SetScreenResolution(UnrealEngine.FIntPoint)">
            <summary>Sets the user setting for game screen resolution, in pixels.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetDesktopResolution">
            <summary>Returns user's desktop resolution, in pixels.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetLastConfirmedScreenResolution">
            <summary>Returns the last confirmed user setting for game screen resolution, in pixels.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.GetScreenResolution">
            <summary>Returns the user setting for game screen resolution, in pixels.</summary>
        </member>
        <member name="M:UnrealEngine.UGameUserSettings.ApplySettings(System.Boolean)">
            <summary>Applies all current user settings to the game and saves to permanent storage (e.g. file), optionally checking for command line overrides.</summary>
        </member>
        <member name="M:UnrealEngine.UGameViewportClient.SetConsoleTarget(System.Int32)">
            <summary>Sets the player which console commands will be executed in the context of.</summary>
        </member>
        <member name="M:UnrealEngine.UGameViewportClient.ShowTitleSafeArea">
            <summary>Exec for toggling the display of the title safe area</summary>
        </member>
        <member name="M:UnrealEngine.UGameViewportClient.SSSwapControllers">
            <summary>Rotates controller ids among gameplayers, useful for testing splitscreen with only one controller.</summary>
        </member>
        <member name="M:UnrealEngine.UGridSlot.SetLayer(System.Int32)">
            <summary>Sets positive values offset this cell to be hit-tested and drawn on top of others.</summary>
        </member>
        <member name="M:UnrealEngine.UGridSlot.SetColumnSpan(System.Int32)">
            <summary>How many columns this slot spans over</summary>
        </member>
        <member name="M:UnrealEngine.UGridSlot.SetColumn(System.Int32)">
            <summary>Sets the column index of the slot, this determines what cell the slot is in the panel</summary>
        </member>
        <member name="M:UnrealEngine.UGridSlot.SetRowSpan(System.Int32)">
            <summary>How many rows this this slot spans over</summary>
        </member>
        <member name="M:UnrealEngine.UGridSlot.SetRow(System.Int32)">
            <summary>Sets the row index of the slot, this determines what cell the slot is in the panel</summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetVRFocusState(System.Boolean@,System.Boolean@)">
            <summary>
            Returns current state of VR focus.
            @param bUseFocus             (out) if set to true, then this App does use VR focus.
            @param bHasFocus             (out) if set to true, then this App currently has VR focus.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetTrackingOrigin">
            <summary>Returns current tracking origin type (eye level or floor level).</summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.SetTrackingOrigin(UnrealEngine.EHMDTrackingOrigin)">
            <summary>Sets current tracking origin type (eye level or floor level).</summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetWorldToMetersScale(UnrealEngine.UObject)">
            <summary>
            Returns the World to Meters scale, which corresponds to the scale of the world as perceived by the player
            @return       How many Unreal units correspond to one meter in the real world
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.SetWorldToMetersScale(UnrealEngine.UObject,System.Single)">
            <summary>
            Sets the World to Meters scale, which changes the scale of the world as perceived by the player
            @param NewScale       Specifies how many Unreal units correspond to one meter in the real world
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetScreenPercentage">
            <summary>
            Returns screen percentage to be used in VR mode.
            @return (float)      The screen percentage to be used in VR mode.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.SetClippingPlanes(System.Single,System.Single)">
            <summary>
            Sets near and far clipping planes (NCP and FCP) for stereo rendering. Similar to 'stereo ncp= fcp' console command, but NCP and FCP set by this
            call won't be saved in .ini file.
            @param Near                          (in) Near clipping plane, in centimeters
            @param Far                           (in) Far clipping plane, in centimeters
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.ResetOrientationAndPosition(System.Single,UnrealEngine.EOrientPositionSelector)">
            <summary>
            Resets orientation by setting roll and pitch to 0, assuming that current yaw is forward direction and assuming
            current position as a 'zero-point' (for positional tracking).
            @param Yaw                           (in) the desired yaw to be set after orientation reset.
            @param Options                       (in) specifies either position, orientation or both should be reset.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetTrackingSensorParameters(UnrealEngine.FVector@,UnrealEngine.FRotator@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Boolean@,System.Int32)">
            <summary>
            If the HMD has a positional sensor, this will return the game-world location of it, as well as the parameters for the bounding region of tracking.
            This allows an in-game representation of the legal positional tracking range.  All values will be zeroed if the sensor is not available or the HMD does not support it.
            @param Index                         (in) Index of the tracking sensor to query
            @param Origin                        (out) Origin, in world-space, of the sensor
            @param Rotation                      (out) Rotation, in world-space, of the sensor
            @param LeftFOV                       (out) Field-of-view, left from center, in degrees, of the valid tracking zone of the sensor
            @param RightFOV                      (out) Field-of-view, right from center, in degrees, of the valid tracking zone of the sensor
            @param TopFOV                        (out) Field-of-view, top from center, in degrees, of the valid tracking zone of the sensor
            @param BottomFOV                     (out) Field-of-view, bottom from center, in degrees, of the valid tracking zone of the sensor
            @param Distance                      (out) Nominal distance to sensor, in world-space
            @param NearPlane                     (out) Near plane distance of the tracking volume, in world-space
            @param FarPlane                      (out) Far plane distance of the tracking volume, in world-space
            @param IsActive                      (out) True, if the query for the specified sensor succeeded.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetNumOfTrackingSensors">
            <summary>If the HMD has multiple positional tracking sensors, return a total number of them currently connected.</summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.HasValidTrackingPosition">
            <summary>If the HMD supports positional tracking, whether or not we are currently being tracked</summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetOrientationAndPosition(UnrealEngine.FRotator@,UnrealEngine.FVector@)">
            <summary>
            Grabs the current orientation and position for the HMD.  If positional tracking is not available, DevicePosition will be a zero vector
            @param DeviceRotation        (out) The device's current rotation
            @param DevicePosition        (out) The device's current position, in its own tracking space
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.GetHMDDeviceName">
            <summary>
            Returns the name of the device, so scripts can modify their behaviour appropriately
            @return      FName specific to the currently active HMD device type.  "None" implies no device, "Unknown" implies a device with no description.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.EnableHMD(System.Boolean)">
            <summary>
            Switches to/from using HMD and stereo rendering.
            @param bEnable                       (in) 'true' to enable HMD / stereo; 'false' otherwise
            @return (Boolean)            True, if the request was successful.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayConnected">
            <summary>
            Returns whether or not the HMD hardware is connected and ready to use.  It may or may not actually be in use.
            @return (Boolean)  status whether the HMD hardware is connected and ready to use.  It may or may not actually be in use.
            </summary>
        </member>
        <member name="M:UnrealEngine.UHeadMountedDisplayFunctionLibrary.IsHeadMountedDisplayEnabled">
            <summary>
            Returns whether or not we are currently using the head mounted display.
            @return (Boolean)  status of HMD
            </summary>
        </member>
        <member name="M:UnrealEngine.UHierarchicalInstancedStaticMeshComponent.RemoveInstances(System.Int32[])">
            <summary>Removes all the instances with indices specified in the InstancesToRemove array. Returns true on success.</summary>
        </member>
        <member name="M:UnrealEngine.UInputKeySelector.GetIsSelectingKey">
            <summary>Returns true if the widget is currently selecting a key, otherwise returns false.</summary>
        </member>
        <member name="M:UnrealEngine.UInputKeySelector.SetAllowModifierKeys(System.Boolean)">
            <summary>Sets whether or not modifier keys are allowed in the selected key.</summary>
        </member>
        <member name="M:UnrealEngine.UInputKeySelector.SetKeySelectionText(System.String)">
            <summary>Sets the text which is displayed while selecting keys.</summary>
        </member>
        <member name="M:UnrealEngine.UInputKeySelector.SetSelectedKey(UnrealEngine.FInputChord)">
            <summary>Sets the currently selected key.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.GetInstancesOverlappingBox(UnrealEngine.FBox,System.Boolean)">
            <summary>Returns the instances with instance bounds overlapping the specified box. The return value is an array of instance indices.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.GetInstancesOverlappingSphere(UnrealEngine.FVector,System.Single,System.Boolean)">
            <summary>Returns the instances with instance bounds overlapping the specified sphere. The return value is an array of instance indices.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.SetCullDistances(System.Int32,System.Int32)">
            <summary>Sets the fading start and culling end distances for this component.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.GetInstanceCount">
            <summary>Get the number of instances in this component.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.ClearInstances">
            <summary>Clear all instances being rendered by this component.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.RemoveInstance(System.Int32)">
            <summary>Remove the instance specified. Returns True on success. Note that this will leave the array in order, but may shrink it.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.UpdateInstanceTransform(System.Int32,UnrealEngine.FTransform,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update the transform for the instance specified.
            @param InstanceIndex                  The index of the instance to update
            @param NewInstanceTransform   The new transform
            @param bWorldSpace                    If true, the new transform interpreted as a World Space transform, otherwise it is interpreted as Local Space
            @param bMarkRenderStateDirty  If true, the change should be visible immediately. If you are updating many instances you should only set this to true for the last instance.
            @param bTeleport                              Whether or not the instance's physics should be moved normally, or teleported (moved instantly, ignoring velocity).
            @return                                               True on success.
            </summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.GetInstanceTransform(System.Int32,UnrealEngine.FTransform@,System.Boolean)">
            <summary>Get the transform for the instance specified. Instance is returned in local space of this component unless bWorldSpace is set.  Returns True on success.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.AddInstanceWorldSpace(UnrealEngine.FTransform)">
            <summary>Add an instance to this component. Transform is given in world space.</summary>
        </member>
        <member name="M:UnrealEngine.UInstancedStaticMeshComponent.AddInstance(UnrealEngine.FTransform)">
            <summary>Add an instance to this component. Transform is given in local space of this component.</summary>
        </member>
        <member name="M:UnrealEngine.UInterpToMovementComponent.FinaliseControlPoints">
            <summary>Initialise the control points array. Call after adding control points if they are add after begin play .</summary>
        </member>
        <member name="M:UnrealEngine.UInterpToMovementComponent.RestartMovement(System.Single)">
            <summary>Reset to start. Sets time to zero and direction to 1.</summary>
        </member>
        <member name="M:UnrealEngine.UInterpToMovementComponent.StopSimulating(UnrealEngine.FHitResult)">
            <summary>Clears the reference to UpdatedComponent, fires stop event, and stops ticking.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.Parse_StringToGuid(System.String,UnrealEngine.FGuid@,System.Boolean@)">
            <summary>Converts a String of format EGuidFormats to a Guid. Returns Guid OutGuid, Returns bool Success</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.Conv_GuidToString(UnrealEngine.FGuid)">
            <summary>Converts a GUID value to a string, in the form 'A-B-C-D'</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.NewGuid">
            <summary>Returns a new unique GUID</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.Invalidate_Guid(UnrealEngine.FGuid@)">
            <summary>Invalidates the given GUID</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.IsValid_Guid(UnrealEngine.FGuid)">
            <summary>Checks whether the given GUID is valid</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.NotEqual_GuidGuid(UnrealEngine.FGuid,UnrealEngine.FGuid)">
            <summary>Returns true if the values are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetGuidLibrary.EqualEqual_GuidGuid(UnrealEngine.FGuid,UnrealEngine.FGuid)">
            <summary>Returns true if the values are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetGestureDelta(UnrealEngine.FPointerEvent)">
            <summary>@return The change in gesture value since the last gesture event of the same type.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_IsTouchEvent(UnrealEngine.FPointerEvent)">
            <summary>@return Is this event a result from a touch (as opposed to a mouse)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetTouchpadIndex(UnrealEngine.FPointerEvent)">
            <summary>@return The index of the touch pad that generated this event (for platforms with multiple touch pads per user)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetPointerIndex(UnrealEngine.FPointerEvent)">
            <summary>@return The unique identifier of the pointer (e.g., finger index)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetUserIndex(UnrealEngine.FPointerEvent)">
            <summary>@return The index of the user that caused the event</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetWheelDelta(UnrealEngine.FPointerEvent)">
            <summary>How much did the mouse wheel turn since the last mouse event</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetEffectingButton(UnrealEngine.FPointerEvent)">
            <summary>Mouse button that caused this event to be raised (possibly EB_None)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_IsMouseButtonDown(UnrealEngine.FPointerEvent,UnrealEngine.FKey)">
            <summary>Mouse buttons that are currently pressed</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetCursorDelta(UnrealEngine.FPointerEvent)">
            <summary>@return the distance the mouse traveled since the last event was handled.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetLastScreenSpacePosition(UnrealEngine.FPointerEvent)">
            <summary>@return The position of the cursor in screen space last time we handled an input event</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.PointerEvent_GetScreenSpacePosition(UnrealEngine.FPointerEvent)">
            <summary>@return The position of the cursor in screen space</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.GetKey(UnrealEngine.FKeyEvent)">
            <summary>
            Returns the key for this event.
            @return  Key name
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsRightCommandDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if right command key was down when this event occurred
            @return  True if right command is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsLeftCommandDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if left command key was down when this event occurred
            @return  True if left command is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsCommandDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if either command key was down when this event occurred
            @return  True if command is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsRightAltDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if right alt key was down when this event occurred
            @return  True if right alt is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsLeftAltDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if left alt key was down when this event occurred
            @return  True if left alt is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsAltDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if either alt key was down when this event occurred
            @return  True if alt is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsRightControlDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if left control key was down when this event occurred
            @return  True if left control is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsLeftControlDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if left control key was down when this event occurred
            @return  True if left control is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsControlDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if either control key was down when this event occurred
            @return  True if control is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsRightShiftDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if right shift key was down when this event occurred
            @return True if right shift is pressed.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsLeftShiftDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if left shift key was down when this event occurred
            @return True if left shift is pressed.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsShiftDown(UnrealEngine.FInputEvent)">
            <summary>
            Returns true if either shift key was down when this event occurred
            @return  True if shift is pressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.InputEvent_IsRepeat(UnrealEngine.FInputEvent)">
            <summary>
            Returns whether or not this character is an auto-repeated keystroke
            @return  True if this character is a repeat
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_GetDisplayName(UnrealEngine.FKey)">
            <summary>@returns The display name of the key.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_IsVectorAxis(UnrealEngine.FKey)">
            <summary>@returns True if the key is a vector axis</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_IsFloatAxis(UnrealEngine.FKey)">
            <summary>@returns True if the key is a float axis</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_IsKeyboardKey(UnrealEngine.FKey)">
            <summary>@returns True if the key is a keyboard button</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_IsMouseButton(UnrealEngine.FKey)">
            <summary>@returns True if the key is a mouse button</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_IsGamepadKey(UnrealEngine.FKey)">
            <summary>@returns True if the key is a gamepad button</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.Key_IsModifierKey(UnrealEngine.FKey)">
            <summary>@returns True if the key is a modifier key: Ctrl, Command, Alt, Shift</summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.EqualEqual_InputChordInputChord(UnrealEngine.FInputChord,UnrealEngine.FInputChord)">
            <summary>
            Test if the input chords are equal (A == B)
            @param A - The chord to compare against
            @param B - The chord to compare
            @returns True if the chords are equal, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.EqualEqual_KeyKey(UnrealEngine.FKey,UnrealEngine.FKey)">
            <summary>
            Test if the input key are equal (A == B)
            @param A - The key to compare against
            @param B - The key to compare
            @returns True if the key are equal, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetInputLibrary.CalibrateTilt">
            <summary>Calibrate the tilt for the input device</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMaterialLibrary.CreateDynamicMaterialInstance(UnrealEngine.UObject,UnrealEngine.UMaterialInterface)">
            <summary>Creates a Dynamic Material Instance which you can modify during gameplay.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMaterialLibrary.GetVectorParameterValue(UnrealEngine.UObject,UnrealEngine.UMaterialParameterCollection,System.String)">
            <summary>Gets a vector parameter value from the material collection instance. Logs if ParameterName is invalid.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMaterialLibrary.GetScalarParameterValue(UnrealEngine.UObject,UnrealEngine.UMaterialParameterCollection,System.String)">
            <summary>Gets a scalar parameter value from the material collection instance. Logs if ParameterName is invalid.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMaterialLibrary.SetVectorParameterValue(UnrealEngine.UObject,UnrealEngine.UMaterialParameterCollection,System.String,UnrealEngine.FLinearColor)">
            <summary>Sets a vector parameter value on the material collection instance. Logs if ParameterName is invalid.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMaterialLibrary.SetScalarParameterValue(UnrealEngine.UObject,UnrealEngine.UMaterialParameterCollection,System.String,System.Single)">
            <summary>Sets a scalar parameter value on the material collection instance. Logs if ParameterName is invalid.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.LinePlaneIntersection_OriginNormal(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,System.Single@,UnrealEngine.FVector@)">
            <summary>
            Computes the intersection point between a line and a plane.
            @param               T - The t of the intersection between the line and the plane
            @param               Intersection - The point of intersection between the line and the plane
            @return              True if the intersection test was successful.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.LinePlaneIntersection(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FPlane,System.Single@,UnrealEngine.FVector@)">
            <summary>
            Computes the intersection point between a line and a plane.
            @param               T - The t of the intersection between the line and the plane
            @param               Intersection - The point of intersection between the line and the plane
            @return              True if the intersection test was successful.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.IsPointInBoxWithTransform(UnrealEngine.FVector,UnrealEngine.FTransform,UnrealEngine.FVector)">
            <summary>
            Determines whether a given point is in a box with a given transform. Includes points on the box.
            @param Point                          Point to test
            @param BoxWorldTransform      Component-to-World transform of the box.
            @param BoxExtent                      Extents of the box (distance in each axis from origin), in component space.
            @return Whether the point is in the box.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.IsPointInBox(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Determines whether the given point is in a box. Includes points on the box.
            @param Point                 Point to test
            @param BoxOrigin             Origin of the box
            @param BoxExtent             Extents of the box (distance in each axis from origin)
            @return Whether the point is in the box.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.PointsAreCoplanar(UnrealEngine.FVector[],System.Single)">
            <summary>
            Determines whether a given set of points are coplanar, with a tolerance. Any three points or less are always coplanar.
            @param Points - The set of points to determine coplanarity for.
            @param Tolerance - Larger numbers means more variance is allowed.
            @return Whether the points are relatively coplanar, based on the tolerance
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MinimumAreaRectangle(UnrealEngine.UObject,UnrealEngine.FVector[],UnrealEngine.FVector,UnrealEngine.FVector@,UnrealEngine.FRotator@,System.Single@,System.Single@,System.Boolean)">
            <summary>
            Finds the minimum area rectangle that encloses all of the points in InVerts
            Uses algorithm found in http://www.geometrictools.com/Documentation/MinimumAreaRectangle.pdf
            @param               InVerts - Points to enclose in the rectangle
            @outparam    OutRectCenter - Center of the enclosing rectangle
            @outparam    OutRectSideA - Vector oriented and sized to represent one edge of the enclosing rectangle, orthogonal to OutRectSideB
            @outparam    OutRectSideB - Vector oriented and sized to represent one edge of the enclosing rectangle, orthogonal to OutRectSideA
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SetRandomStreamSeed(UnrealEngine.FRandomStream@,System.Int32)">
            <summary>Set the seed of a random stream to a specific number</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SeedRandomStream(UnrealEngine.FRandomStream@)">
            <summary>Create a new random seed for a random stream</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ResetRandomStream(UnrealEngine.FRandomStream)">
            <summary>Reset a random stream</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomRotatorFromStream(System.Boolean,UnrealEngine.FRandomStream)">
            <summary>Create a random rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomUnitVectorFromStream(UnrealEngine.FRandomStream)">
            <summary>Returns a random vector with length of 1.0</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomFloatInRangeFromStream(System.Single,System.Single,UnrealEngine.FRandomStream)">
            <summary>Generate a random number between Min and Max</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomFloatFromStream(UnrealEngine.FRandomStream)">
            <summary>Returns a random float between 0 and 1</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomBoolFromStream(UnrealEngine.FRandomStream)">
            <summary>Returns a random bool</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.RandomIntegerInRangeFromStream(System.Int32,System.Int32,UnrealEngine.FRandomStream)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomIntegerFromStream(System.Int32,UnrealEngine.FRandomStream)">
            <summary>Returns a uniformly distributed random number between 0 and Max - 1</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ResetVectorSpringState(UnrealEngine.FVectorSpringState@)">
            <summary>Resets the state of a given spring</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ResetFloatSpringState(UnrealEngine.FFloatSpringState@)">
            <summary>Resets the state of a given spring</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VectorSpringInterp(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVectorSpringState@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Uses a simple spring model to interpolate a vector from Current to Target.
            @param Current                                Current value
            @param Target                                 Target value
            @param SpringState                    Data related to spring model (velocity, error, etc..) - Create a unique variable per spring
            @param Stiffness                              How stiff the spring model is (more stiffness means more oscillation around the target value)
            @param CriticalDampingFactor  How much damping to apply to the spring (0 means no damping, 1 means critically damped which means no oscillation)
            @param Mass                                   Multiplier that acts like mass on a spring
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FloatSpringInterp(System.Single,System.Single,UnrealEngine.FFloatSpringState@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Uses a simple spring model to interpolate a float from Current to Target.
            @param Current                               Current value
            @param Target                                Target value
            @param SpringState                   Data related to spring model (velocity, error, etc..) - Create a unique variable per spring
            @param Stiffness                             How stiff the spring model is (more stiffness means more oscillation around the target value)
            @param CriticalDampingFactor How much damping to apply to the spring (0 means no damping, 1 means critically damped which means no oscillation)
            @param Mass                                  Multiplier that acts like mass on a spring
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.CInterpTo(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>
            Interpolates towards a varying target color smoothly.
            @param               Current                 Current Color
            @param               Target                  Target Color
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated Color
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RInterpTo_Constant(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Single,System.Single)">
            <summary>
            Tries to reach Target rotation at a constant rate.
            @param               Current                 Actual rotation
            @param               Target                  Target rotation
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RInterpTo(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Single,System.Single)">
            <summary>
            Tries to reach Target rotation based on Current rotation, giving a nice smooth feeling when rotating to Target rotation.
            @param               Current                 Actual rotation
            @param               Target                  Target rotation
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Vector2DInterpTo_Constant(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single,System.Single)">
            <summary>
            Tries to reach Target at a constant rate.
            @param               Current                 Actual position
            @param               Target                  Target position
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Vector2DInterpTo(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single,System.Single)">
            <summary>
            Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.
            @param               Current                 Actual position
            @param               Target                  Target position
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VInterpTo_Constant(UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single)">
            <summary>
            Tries to reach Target at a constant rate.
            @param               Current                 Actual position
            @param               Target                  Target position
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VInterpTo(UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single)">
            <summary>
            Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.
            @param               Current                 Actual position
            @param               Target                  Target position
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FInterpTo_Constant(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Tries to reach Target at a constant rate.
            @param               Current                 Actual position
            @param               Target                  Target position
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FInterpTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Tries to reach Target based on distance from Current position, giving a nice smooth feeling when tracking a position.
            @param               Current                 Actual position
            @param               Target                  Target position
            @param               DeltaTime               Time since last tick
            @param               InterpSpeed             Interpolation speed
            @return              New interpolated position
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_Vector2DVector2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single)">
            <summary>Returns true if vector2D A is not equal to vector2D B (A != B) within a specified error tolerance</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_Vector2DVector2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Single)">
            <summary>Returns true if vector2D A is equal to vector2D B (A == B) within a specified error tolerance</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_Vector2DFloat(UnrealEngine.FVector2D,System.Single)">
            <summary>Returns Vector A subtracted by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_Vector2DFloat(UnrealEngine.FVector2D,System.Single)">
            <summary>Returns Vector A added by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_Vector2DFloat(UnrealEngine.FVector2D,System.Single)">
            <summary>Returns Vector A divided by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_Vector2DVector2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
            <summary>Element-wise Vector multiplication (Result = {A.x*B.x, A.y*B.y})</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_Vector2DFloat(UnrealEngine.FVector2D,System.Single)">
            <summary>Returns Vector A scaled by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_Vector2DVector2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
            <summary>Returns subtraction of Vector B from Vector A (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_Vector2DVector2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
            <summary>Returns addition of Vector A and Vector B (A + B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NearlyEqual_TransformTransform(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single,System.Single,System.Single)">
            <summary>
            Returns true if transform A is nearly equal to B
            @param LocationTolerance        How close position of transforms need to be to be considered equal
            @param RotationTolerance        How close rotations of transforms need to be to be considered equal
            @param Scale3DTolerance         How close scale of transforms need to be to be considered equal
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_TransformTransform(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            <summary>Returns true if transform A is equal to transform B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TInterpTo(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single,System.Single)">
            <summary>Tries to reach a target transform.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TEase(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single,UnrealEngine.EEasingFunc,System.Single,System.Int32)">
            <summary>Ease between A and B using a specified easing function.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TLerp(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single,UnrealEngine.ELerpInterpolationMode)">
            <summary>Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.InvertTransform(UnrealEngine.FTransform)">
            <summary>
            Returns the inverse of the given transform T.
            Example: Given a LocalToWorld transform, WorldToLocal will be returned.
            @param       T       The transform you wish to invert
            @return      The inverse of T.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ConvertTransformToRelative(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            <summary>
            Returns the given transform, converted to be relative to the given ParentTransform.
            Example: AToB = ConvertTransformToRelative(AToWorld, BToWorld) to compute A relative to B.
            @param               Transform               The transform you wish to convert
            @param               ParentTransform The transform the conversion is relative to (in the same space as Transform)
            @return              The new relative transform
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ComposeTransforms(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            <summary>
            Compose two transforms in order: A * B.
            Order matters when composing transforms:
            A * B will yield a transform that logically first applies A then B to any subsequent transformation.
            Example: LocalToWorld = ComposeTransforms(DeltaRotation, LocalToWorld) will change rotation in local space by DeltaRotation.
            Example: LocalToWorld = ComposeTransforms(LocalToWorld, DeltaRotation) will change rotation in world space by DeltaRotation.
            @return New transform: A * B
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.InverseTransformDirection(UnrealEngine.FTransform,UnrealEngine.FVector)">
            <summary>
            Transform a direction vector by the inverse of the supplied transform - will not change its length.
            For example, if T was an object's transform, would transform a direction from world space to local space.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.InverseTransformLocation(UnrealEngine.FTransform,UnrealEngine.FVector)">
            <summary>
            Transform a position by the inverse of the supplied transform.
            For example, if T was an object's transform, would transform a position from world space to local space.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TransformDirection(UnrealEngine.FTransform,UnrealEngine.FVector)">
            <summary>
            Transform a direction vector by the supplied transform - will not change its length.
            For example, if T was an object's transform, would transform a direction from local space to world space.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TransformLocation(UnrealEngine.FTransform,UnrealEngine.FVector)">
            <summary>
            Transform a position by the supplied transform.
            For example, if T was an object's transform, would transform a position from local space to world space.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_NameName(System.String,System.String)">
            <summary>Returns true if A and B are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_NameName(System.String,System.String)">
            <summary>Returns true if A and B are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ClassIsChildOf(UnrealEngine.TSubclassOf{UnrealEngine.UObject},UnrealEngine.TSubclassOf{UnrealEngine.UObject})">
            <summary>
            Determine if a class is a child of another class.
            @return      true if TestClass == ParentClass, or if TestClass is a child of ParentClass; false otherwise, or if either
                                 the value for either parameter is 'None'.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_ClassClass(UnrealEngine.UClass,UnrealEngine.UClass)">
            <summary>Returns true if A and B are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_ClassClass(UnrealEngine.UClass,UnrealEngine.UClass)">
            <summary>Returns true if A and B are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_ObjectObject(UnrealEngine.UObject,UnrealEngine.UObject)">
            <summary>Returns true if A and B are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_ObjectObject(UnrealEngine.UObject,UnrealEngine.UObject)">
            <summary>Returns true if A and B are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_RotatorToVector(UnrealEngine.FRotator)">
            <summary>Get the X direction vector after this rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_VectorToRotator(UnrealEngine.FVector)">
            <summary>Create a rotator which orients X along the supplied direction vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotationFromAxes(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Build a reference frame from three axes</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectClass(UnrealEngine.UClass,UnrealEngine.UClass,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectObject(UnrealEngine.UObject,UnrealEngine.UObject,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectTransform(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectColor(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectRotator(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectVector(UnrealEngine.FVector,UnrealEngine.FVector,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectFloat(System.Single,System.Single,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectInt(System.Int32,System.Int32,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.SelectString(System.String,System.String,System.Boolean)">
            <summary>If bPickA is true, A is returned, otherwise B is</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RGBToHSV_Vector(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor@)">
            <summary>Converts a RGB linear color to HSV (where H is in R, S is in G, and V is in B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.HSVToRGB_Vector(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor@)">
            <summary>Converts a HSV linear color (where H is in R, S is in G, and V is in B) to RGB</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RGBToHSV(UnrealEngine.FLinearColor,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>Breaks apart a color into individual HSV components (as well as alpha)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.HSVToRGB(System.Single,System.Single,System.Single,System.Single)">
            <summary>Make a color from individual color components (HSV space)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakColor(UnrealEngine.FLinearColor,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>Breaks apart a color into individual RGB components (as well as alpha)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>Make a color from individual color components (RGB space)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakRandomStream(UnrealEngine.FRandomStream,System.Int32@)">
            <summary>Breaks apart a random number generator</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRandomStream(System.Int32)">
            <summary>Makes a SRand-based random number generator</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakTransform(UnrealEngine.FTransform,UnrealEngine.FVector@,UnrealEngine.FRotator@,UnrealEngine.FVector@)">
            <summary>Breaks apart a transform into location, rotation and scale</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeTransform(UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.FVector)">
            <summary>Make a transform from location, rotation and scale</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakRotIntoAxes(UnrealEngine.FRotator,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Breaks apart a rotator into its component axes</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakRotator(UnrealEngine.FRotator,System.Single@,System.Single@,System.Single@)">
            <summary>Breaks apart a rotator into {Roll, Pitch, Yaw} angles in degrees</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromZY(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Builds a matrix with given Z and Y axes. Z will remain fixed, Y may be changed minimally to enforce orthogonality. X will be computed. Inputs need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromZX(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Builds a matrix with given Z and X axes. Z will remain fixed, X may be changed minimally to enforce orthogonality. Y will be computed. Inputs need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromYZ(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Builds a matrix with given Y and Z axes. Y will remain fixed, Z may be changed minimally to enforce orthogonality. X will be computed. Inputs need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromYX(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Builds a matrix with given Y and X axes. Y will remain fixed, X may be changed minimally to enforce orthogonality. Z will be computed. Inputs need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromXZ(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Builds a matrix with given X and Z axes. X will remain fixed, Z may be changed minimally to enforce orthogonality. Y will be computed. Inputs need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromXY(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Builds a matrix with given X and Y axes. X will remain fixed, Y may be changed minimally to enforce orthogonality. Z will be computed. Inputs need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromZ(UnrealEngine.FVector)">
            <summary>Builds a rotation matrix given only a ZAxis. X and Y are unspecified but will be orthonormal. ZAxis need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromY(UnrealEngine.FVector)">
            <summary>Builds a rotation matrix given only a YAxis. X and Z are unspecified but will be orthonormal. YAxis need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotFromX(UnrealEngine.FVector)">
            <summary>Builds a rotator given only a XAxis. Y and Z are unspecified but will be orthonormal. XAxis need not be normalized.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FindLookAtRotation(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Find a rotation for an object at Start location to point at Target location.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeRotator(System.Single,System.Single,System.Single)">
            <summary>Makes a rotator {Roll, Pitch, Yaw} from rotation values supplied in degrees</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetYawPitchFromVector(UnrealEngine.FVector,System.Single@,System.Single@)">
            <summary>Breaks a vector apart into Yaw, Pitch rotation values given in degrees. (non-clamped)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.CreateVectorFromYawPitch(System.Single,System.Single,System.Single)">
            <summary>Creates a directional vector from rotation values {Pitch, Yaw} supplied in degrees with specified Length</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetUpVector(UnrealEngine.FRotator)">
            <summary>Rotate the world up vector by the given rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetRightVector(UnrealEngine.FRotator)">
            <summary>Rotate the world right vector by the given rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetForwardVector(UnrealEngine.FRotator)">
            <summary>Rotate the world forward vector by the given rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakVector2D(UnrealEngine.FVector2D,System.Single@,System.Single@)">
            <summary>Breaks a 2D vector apart into X, Y.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeVector2D(System.Single,System.Single)">
            <summary>Makes a 2d vector {X, Y}</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakVector(UnrealEngine.FVector,System.Single@,System.Single@,System.Single@)">
            <summary>Breaks a vector apart into X, Y, Z</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeVector(System.Single,System.Single,System.Single)">
            <summary>Makes a vector {X, Y, Z}</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeBox2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
            <summary>Makes an FBox2D from Min and Max and sets IsValid to true</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeBox(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Makes an FBox from Min and Max and sets IsValid to true</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_FloatToLinearColor(System.Single)">
            <summary>Convert a float into a LinearColor, where each element is that float</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_FloatToVector(System.Single)">
            <summary>Convert a float into a vector, where each element is that float</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_IntVectorToVector(UnrealEngine.FIntVector)">
            <summary>Convert an IntVector to a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_Vector2DToVector(UnrealEngine.FVector2D,System.Single)">
            <summary>Convert a Vector2D to a Vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_VectorToVector2D(UnrealEngine.FVector)">
            <summary>Convert a Vector to a Vector2D</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_VectorToTransform(UnrealEngine.FVector)">
            <summary>Convert a vector to a transform. Uses vector as location</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_LinearColorToColor(UnrealEngine.FLinearColor)">
            <summary>Converts a LinearColor to a color</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_ColorToLinearColor(UnrealEngine.FColor)">
            <summary>Converts a color to LinearColor</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_LinearColorToVector(UnrealEngine.FLinearColor)">
            <summary>Converts a LinearColor to a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_VectorToLinearColor(UnrealEngine.FVector)">
            <summary>Converts a vector to LinearColor</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_ByteToInt(System.Byte)">
            <summary>Converts a byte to an integer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_BoolToByte(System.Boolean)">
            <summary>Converts a bool to a byte</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_BoolToFloat(System.Boolean)">
            <summary>Converts a bool to a float (0.0f or 1.0f)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_BoolToInt(System.Boolean)">
            <summary>Converts a bool to an int</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_IntToBool(System.Int32)">
            <summary>Converts a int to a bool</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_IntToIntVector(System.Int32)">
            <summary>Converts an integer to an IntVector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_IntToByte(System.Int32)">
            <summary>Converts an integer to a byte (if the integer is too large, returns the low 8 bits)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_IntToFloat(System.Int32)">
            <summary>Converts an integer to a float</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Conv_ByteToFloat(System.Byte)">
            <summary>Converts a byte to a float</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TimespanFromString(System.String,UnrealEngine.FTimespan@)">
            <summary>Converts a time span string to a Timespan object</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TimespanZeroValue">
            <summary>Returns a zero time span value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TimespanRatio(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Returns the ratio between two time spans (A / B), handles zero values</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TimespanMinValue">
            <summary>Returns the minimum time span value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.TimespanMaxValue">
            <summary>Returns the maximum time span value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FromSeconds(System.Single)">
            <summary>Returns a time span that represents the specified number of seconds</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FromMinutes(System.Single)">
            <summary>Returns a time span that represents the specified number of minutes</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FromMilliseconds(System.Single)">
            <summary>Returns a time span that represents the specified number of milliseconds</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FromHours(System.Single)">
            <summary>Returns a time span that represents the specified number of hours</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FromDays(System.Single)">
            <summary>Returns a time span that represents the specified number of days</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTotalSeconds(UnrealEngine.FTimespan)">
            <summary>Returns the total number of seconds in A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTotalMinutes(UnrealEngine.FTimespan)">
            <summary>Returns the total number of minutes in A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTotalMilliseconds(UnrealEngine.FTimespan)">
            <summary>Returns the total number of milliseconds in A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTotalHours(UnrealEngine.FTimespan)">
            <summary>Returns the total number of hours in A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTotalDays(UnrealEngine.FTimespan)">
            <summary>Returns the total number of days in A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetSeconds(UnrealEngine.FTimespan)">
            <summary>Returns the seconds component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMinutes(UnrealEngine.FTimespan)">
            <summary>Returns the minutes component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMilliseconds(UnrealEngine.FTimespan)">
            <summary>Returns the milliseconds component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetHours(UnrealEngine.FTimespan)">
            <summary>Returns the hours component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetDuration(UnrealEngine.FTimespan)">
            <summary>Returns the absolute value of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetDays(UnrealEngine.FTimespan)">
            <summary>Returns the days component of A</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.LessEqual_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.Less_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.GreaterEqual_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Returns true if A is greater than or equal to B (A >= B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Greater_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Returns true if A is greater than B (A > B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Returns true if the values are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Returns true if the values are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_TimespanFloat(UnrealEngine.FTimespan,System.Single)">
            <summary>Scalar multiplication (A * s)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Subtraction (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_TimespanTimespan(UnrealEngine.FTimespan,UnrealEngine.FTimespan)">
            <summary>Addition (A + B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakTimespan(UnrealEngine.FTimespan,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Breaks a Timespan into its components</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeTimespan(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Makes a Timespan struct</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DateTimeFromString(System.String,UnrealEngine.FDateTime@)">
            <summary>Converts a date string to a DateTime object</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DateTimeFromIsoString(System.String,UnrealEngine.FDateTime@)">
            <summary>Converts a date string in ISO-8601 format to a DateTime object</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.UtcNow">
            <summary>Returns the UTC date and time on this computer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Today">
            <summary>Returns the local date on this computer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Now">
            <summary>Returns the local date and time on this computer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DateTimeMinValue">
            <summary>Returns the minimum date and time value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DateTimeMaxValue">
            <summary>Returns the maximum date and time value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.IsLeapYear(System.Int32)">
            <summary>Returns whether given year is a leap year</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DaysInYear(System.Int32)">
            <summary>Returns the number of days in the given year</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DaysInMonth(System.Int32,System.Int32)">
            <summary>Returns the number of days in the given year and month</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.IsMorning(UnrealEngine.FDateTime)">
            <summary>Returns whether A's time is in the morning</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.IsAfternoon(UnrealEngine.FDateTime)">
            <summary>Returns whether A's time is in the afternoon</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetYear(UnrealEngine.FDateTime)">
            <summary>Returns the year component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTimeOfDay(UnrealEngine.FDateTime)">
            <summary>Returns the time elapsed since midnight of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetSecond(UnrealEngine.FDateTime)">
            <summary>Returns the second component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMonth(UnrealEngine.FDateTime)">
            <summary>Returns the month component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMinute(UnrealEngine.FDateTime)">
            <summary>Returns the minute component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMillisecond(UnrealEngine.FDateTime)">
            <summary>Returns the millisecond component of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetHour12(UnrealEngine.FDateTime)">
            <summary>Returns the hour component of A (12h format)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetHour(UnrealEngine.FDateTime)">
            <summary>Returns the hour component of A (24h format)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetDayOfYear(UnrealEngine.FDateTime)">
            <summary>Returns the day of year of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetDay(UnrealEngine.FDateTime)">
            <summary>Returns the day component of A (1 to 31)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetDate(UnrealEngine.FDateTime)">
            <summary>Returns the date component of A</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.LessEqual_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.Less_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.GreaterEqual_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)">
            <summary>Returns true if A is greater than or equal to B (A >= B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Greater_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)">
            <summary>Returns true if A is greater than B (A > B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)">
            <summary>Returns true if the values are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)">
            <summary>Returns true if the values are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_DateTimeDateTime(UnrealEngine.FDateTime,UnrealEngine.FDateTime)">
            <summary>Subtraction (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_DateTimeTimespan(UnrealEngine.FDateTime,UnrealEngine.FTimespan)">
            <summary>Subtraction (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_DateTimeTimespan(UnrealEngine.FDateTime,UnrealEngine.FTimespan)">
            <summary>Addition (A + B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BreakDateTime(UnrealEngine.FDateTime,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>Breaks a DateTime into its components</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakeDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Makes a DateTime struct</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakePlaneFromPointAndNormal(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Creates a plane with a facing direction of Normal at the given Point
            @param Point  A point on the plane
            @param Normal  The Normal of the plane at Point
            @return Plane instance
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_LinearColorFloat(UnrealEngine.FLinearColor,System.Single)">
            <summary>Element-wise multiplication of a linear color by a float (F*R, F*G, F*B, F*A)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_LinearColorLinearColor(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor)">
            <summary>Element-wise multiplication of two linear colors (R*R, G*G, B*B, A*A)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.LinearColorLerpUsingHSV(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Linearly interpolates between two colors by the specified Alpha amount (100% of A when Alpha=0 and 100% of B when Alpha=1).  The interpolation is performed in HSV color space taking the shortest path to the new color's hue.  This can give better results than a normal lerp, but is much more expensive.  The incoming colors are in RGB space, and the output color will be RGB.  The alpha value will also be interpolated.
            @param       A               The color and alpha to interpolate from as linear RGBA
            @param       B               The color and alpha to interpolate to as linear RGBA
            @param       Alpha   Scalar interpolation amount (usually between 0.0 and 1.0 inclusive)
            @return      The interpolated color in linear RGB space along with the interpolated alpha value
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.LinearColorLerp(UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NormalizeAxis(System.Single)">
            <summary>
            Clamps an angle to the range of [-180, 180].
            @param Angle The Angle to clamp.
            @return The clamped angle.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ClampAxis(System.Single)">
            <summary>
            Clamps an angle to the range of [0, 360].
            @param Angle The angle to clamp.
            @return The clamped angle.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RotatorFromAxisAndAngle(UnrealEngine.FVector,System.Single)">
            <summary>Create a rotation from an axis and and angle (in degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NormalizedDeltaRotator(UnrealEngine.FRotator,UnrealEngine.FRotator)">
            <summary>Normalized A-B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.REase(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Single,System.Boolean,UnrealEngine.EEasingFunc,System.Single,System.Int32)">
            <summary>Easeing  between A and B using a specified easing function</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RLerp(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Single,System.Boolean)">
            <summary>Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomRotator(System.Boolean)">
            <summary>Generates a random rotation, with optional random roll.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetAxes(UnrealEngine.FRotator,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Get the reference frame direction vectors (axes) described by this rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NegateRotator(UnrealEngine.FRotator)">
            <summary>Negate a rotator</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ComposeRotators(UnrealEngine.FRotator,UnrealEngine.FRotator)">
            <summary>Combine 2 rotations to give you the resulting rotation</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_RotatorInt(UnrealEngine.FRotator,System.Int32)">
            <summary>Returns rotator representing rotator A scaled by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_RotatorFloat(UnrealEngine.FRotator,System.Single)">
            <summary>Returns rotator representing rotator A scaled by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_RotatorRotator(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Single)">
            <summary>Returns true if rotator A is not equal to rotator B (A != B) within a specified error tolerance</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_RotatorRotator(UnrealEngine.FRotator,UnrealEngine.FRotator,System.Single)">
            <summary>Returns true if rotator A is equal to rotator B (A == B) within a specified error tolerance</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetDirectionUnitVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Find the unit direction vector from one position to another.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetVectorArrayAverage(UnrealEngine.FVector[])">
            <summary>Find the average of an array of vectors</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMaxElement(UnrealEngine.FVector)">
            <summary>Find the maximum element (X, Y or Z) of a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetMinElement(UnrealEngine.FVector)">
            <summary>Find the minimum element (X, Y or Z) of a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ClampVectorSize(UnrealEngine.FVector,System.Single,System.Single)">
            <summary>Clamp the vector size between a min and max length</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NegateVector(UnrealEngine.FVector)">
            <summary>Negate a vector.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ProjectVectorOnToPlane(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Projects a vector onto a plane defined by a normalized vector (PlaneNormal).
            @param  V Vector to project onto the plane.
            @param  PlaneNormal Normal of the plane.
            @return Vector projected onto the plane.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ProjectPointOnToPlane(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Projects a point onto a plane defined by a point on the plane and a plane normal.
            @param  Point Point to project onto the plane.
            @param  PlaneBase A point on the plane.
            @param  PlaneNormal Normal of the plane.
            @return Point projected onto the plane.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetPointDistanceToLine(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Find the distance from a point to the closest point on an infinite line.
            @param Point                  Point for which we find the distance to the closest point on the line.
            @param LineOrigin             Point of reference on the line.
            @param LineDirection  Direction of the line. Not required to be normalized.
            @return The distance from the given point to the closest point on the line.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetPointDistanceToSegment(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Find the distance from a point to the closest point on a segment.
            @param Point                  Point for which we find the distance to the closest point on the segment.
            @param SegmentStart   Start of the segment.
            @param SegmentEnd             End of the segment.
            @return The distance from the given point to the closest point on the segment.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FindClosestPointOnLine(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Find the closest point on an infinite line to a given point.
            @param Point                 Point for which we find the closest point on the line.
            @param LineOrigin    Point of reference on the line.
            @param LineDirection Direction of the line. Not required to be normalized.
            @return The closest point on the line to the given point.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FindClosestPointOnSegment(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Find the closest point on a segment to a given point.
            @param Point                 Point for which we find the closest point on the segment.
            @param SegmentStart  Start of the segment.
            @param SegmentEnd    End of the segment.
            @return The closest point on the segment to the given point.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FindNearestPointsOnLineSegments(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>
            Find closest points between 2 segments.
            @param       Segment1Start   Start of the 1st segment.
            @param       Segment1End             End of the 1st segment.
            @param       Segment2Start   Start of the 2nd segment.
            @param       Segment2End             End of the 2nd segment.
            @param       Segment1Point   Closest point on segment 1 to segment 2.
            @param       Segment2Point   Closest point on segment 2 to segment 1.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetReflectionVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Given a direction vector and a surface normal, returns the vector reflected across the surface normal.
            Produces a result like shining a laser at a mirror!
            @param Direction Direction vector the ray is coming from.
            @param SurfaceNormal A normal of the surface the ray should be reflected on.
            @returns Reflected vector.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ProjectVectorOnToVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Projects one vector (V) onto another (Target) and returns the projected vector.
            If Target is nearly zero in length, returns the zero vector.
            @param  V Vector to project.
            @param  Target Vector on which we are projecting.
            @return V projected on to Target.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MirrorVectorByNormal(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Mirrors a vector by a normal</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomUnitVectorInConeWithYawAndPitch(UnrealEngine.FVector,System.Single,System.Single)">
            <summary>
            RandomUnitVectorWithYawAndPitch
            @param MaxYaw - The Yaw-angle of the cone (from ConeDir to horizontal-edge), in degrees.
            @param MaxPitch - The Pitch-angle of the cone (from ConeDir to vertical-edge), in degrees.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomUnitVectorInCone(UnrealEngine.FVector,System.Single)">
            <summary>
            Returns a random vector with length of 1, within the specified cone, with uniform random distribution.
            @param ConeDir       The base "center" direction of the cone.
            @param ConeHalfAngle         The half-angle of the cone (from ConeDir to edge), in radians.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomPointInBoundingBox(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Returns a random point within the specified bounding box</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomUnitVector">
            <summary>Returns a random vector with length of 1</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VEase(UnrealEngine.FVector,UnrealEngine.FVector,System.Single,UnrealEngine.EEasingFunc,System.Single,System.Int32)">
            <summary>Easeing  between A and B using a specified easing function</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VLerp(UnrealEngine.FVector,UnrealEngine.FVector,System.Single)">
            <summary>Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Normal2D(UnrealEngine.FVector2D)">
            <summary>Returns a unit normal version of the vector2d A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Normal(UnrealEngine.FVector)">
            <summary>Returns a unit normal version of the FVector A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VSize2DSquared(UnrealEngine.FVector2D)">
            <summary>Returns the squared length of a 2d FVector.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VSizeSquared(UnrealEngine.FVector)">
            <summary>Returns the squared length of the FVector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VSize2D(UnrealEngine.FVector2D)">
            <summary>Returns the length of a 2d FVector.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.VSize(UnrealEngine.FVector)">
            <summary>Returns the length of the FVector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.CrossProduct2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
            <summary>Returns the cross product of two 2d vectors</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DotProduct2D(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
            <summary>Returns the dot product of two 2d vectors</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Cross_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Returns the cross product of two 3d vectors</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Dot_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Returns the dot product of two 3d vectors</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector,System.Single)">
            <summary>Returns true if vector A is not equal to vector B (A != B) within a specified error tolerance</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector,System.Single)">
            <summary>Returns true if vector A is equal to vector B (A == B) within a specified error tolerance</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RotateAngleAxis(UnrealEngine.FVector,System.Single,UnrealEngine.FVector)">
            <summary>Returns result of vector A rotated by AngleDeg around Axis</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GreaterGreater_VectorRotator(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>Returns result of vector A rotated by Rotator B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.LessLess_VectorRotator(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>Returns result of vector A rotated by the inverse of Rotator B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_VectorInt(UnrealEngine.FVector,System.Int32)">
            <summary>Subtracts an integer from each component of a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_VectorFloat(UnrealEngine.FVector,System.Single)">
            <summary>Subtracts a float from each component of a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Vector subtraction</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_VectorInt(UnrealEngine.FVector,System.Int32)">
            <summary>Adds an integer to each component of a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_VectorFloat(UnrealEngine.FVector,System.Single)">
            <summary>Adds a float to each component of a vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Vector addition</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Vector divide by vector</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_VectorInt(UnrealEngine.FVector,System.Int32)">
            <summary>Vector divide by an integer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_VectorFloat(UnrealEngine.FVector,System.Single)">
            <summary>Vector divide by a float</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_VectorVector(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Element-wise Vector multiplication (Result = {A.x*B.x, A.y*B.y, A.z*B.z})</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_VectorInt(UnrealEngine.FVector,System.Int32)">
            <summary>Scales Vector A by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_VectorFloat(UnrealEngine.FVector,System.Single)">
            <summary>Scales Vector A by B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FixedTurn(System.Single,System.Single,System.Single)">
            <summary>
            Returns a new rotation component value
            @param InCurrent is the current rotation value
            @param InDesired is the desired rotation value
            @param  is the rotation amount to apply
            @return a new rotation component value clamped in the range (-360,360)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MakePulsatingValue(System.Single,System.Single,System.Single)">
            <summary>
            Simple function to create a pulsating scalar value
            @param  InCurrentTime  Current absolute time
            @param  InPulsesPerSecond  How many full pulses per second?
            @param  InPhase  Optional phase amount, between 0.0 and 1.0 (to synchronize pulses)
            @return  Pulsating value (0.0-1.0)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FInterpEaseInOut(System.Single,System.Single,System.Single,System.Single)">
            <summary>Interpolate between A and B, applying an ease in/out function.  Exp controls the degree of the curve.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MultiplyByPi(System.Single)">
            <summary>Multiplies the input value by pi.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MapRangeClamped(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns Value mapped from one range into another where the Value is clamped to the Input Range.  (e.g. 0.5 normalized from the range 0->1 to 0->50 would result in 25)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MapRangeUnclamped(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Returns Value mapped from one range into another.  (e.g. 20 normalized from the range 10->50 to 20->40 would result in 25)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NormalizeToRange(System.Single,System.Single,System.Single)">
            <summary>Returns Value normalized to the given range.  (e.g. 20 normalized to the range 10->50 would result in 0.25)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.SignOfFloat(System.Single)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.FMod(System.Single,System.Single,System.Single@)">
            <summary>Returns the number of times Divisor will go into Dividend (i.e., Dividend divided by Divisor), as well as the remainder</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FCeil(System.Single)">
            <summary>Rounds A to the smallest following integer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FTruncVector(UnrealEngine.FVector)">
            <summary>Rounds A to an integer with truncation towards zero for each element in a vector.  (e.g. -1.7 truncated to -1, 2.8 truncated to 2)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FTrunc(System.Single)">
            <summary>Rounds A to an integer with truncation towards zero.  (e.g. -1.7 truncated to -1, 2.8 truncated to 2)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FFloor(System.Single)">
            <summary>Rounds A to the largest previous integer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Round(System.Single)">
            <summary>Rounds A to the nearest integer</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Ease(System.Single,System.Single,System.Single,UnrealEngine.EEasingFunc,System.Single,System.Int32)">
            <summary>Easeing  between A and B using a specified easing function</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Returns the fraction (alpha) of the range B-A that corresponds to Value, e.g.,
                  inputs A = 0, B = 8, Value = 3 : outputs Return Value = 3/8, indicating Value is 3/8 from A to B
                  inputs A = 8, B = 0, Value = 3 : outputs Return Value = 5/8, indicating Value is 5/8 from A to B
            Named InverseLerp because Lerp( A, B, InverseLerp(A, B, Value) ) == Value
            @param A The "from" value this float could be, usually but not necessarily a minimum. Returned as 0.
            @param B The "to" value this float could be, usually but not necessarily a maximum. Returned as 1.
            @param Value A value intended to be normalized relative to B-A
            @return A normalized alpha value considering A and B.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Lerp(System.Single,System.Single,System.Single)">
            <summary>Linearly interpolates between A and B based on Alpha (100% of A when Alpha=0 and 100% of B when Alpha=1)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MinOfByteArray(System.Byte[],System.Int32@,System.Byte@)">
            <summary>Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MaxOfByteArray(System.Byte[],System.Int32@,System.Byte@)">
            <summary>Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MinOfFloatArray(System.Single[],System.Int32@,System.Single@)">
            <summary>Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MaxOfFloatArray(System.Single[],System.Int32@,System.Single@)">
            <summary>Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MinOfIntArray(System.Int32[],System.Int32@,System.Int32@)">
            <summary>Returns min of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MaxOfIntArray(System.Int32[],System.Int32@,System.Int32@)">
            <summary>Returns max of all array entries and the index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FClamp(System.Single,System.Single,System.Single)">
            <summary>Returns V clamped to be between A and B (inclusive)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FMax(System.Single,System.Single)">
            <summary>Returns the maximum value of A and B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.FMin(System.Single,System.Single)">
            <summary>Returns the minimum value of A and B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.ClampAngle(System.Single,System.Single,System.Single)">
            <summary>
            Clamps an arbitrary angle to be between the given angles.  Will clamp to nearest boundary.
            @param MinAngleDegrees       "from" angle that defines the beginning of the range of valid angles (sweeping clockwise)
            @param MaxAngleDegrees       "to" angle that defines the end of the range of valid angles
            @return Returns clamped angle in the range -180..180.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegAtan2(System.Single,System.Single)">
            <summary>Returns the inverse tan (atan2) of A/B (result is in Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegAtan(System.Single)">
            <summary>Returns the inverse tan (atan) (result is in Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegTan(System.Single)">
            <summary>Returns the tan of A (expects Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegAcos(System.Single)">
            <summary>Returns the inverse cos (arccos) of A (result is in Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegCos(System.Single)">
            <summary>Returns the cos of A (expects Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegAsin(System.Single)">
            <summary>Returns the inverse sin (arcsin) of A (result is in Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegSin(System.Single)">
            <summary>Returns the sin of A (expects Degrees)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RadiansToDegrees(System.Single)">
            <summary>Returns degrees value based on the input radians</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.DegreesToRadians(System.Single)">
            <summary>Returns radians value based on the input degrees</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetTAU">
            <summary>Returns the value of TAU (= 2 * PI)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GetPI">
            <summary>Returns the value of PI</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomFloatInRange(System.Single,System.Single)">
            <summary>Generate a random number between Min and Max</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomFloat">
            <summary>Returns a random float between 0 and 1</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Square(System.Single)">
            <summary>Returns square of A (A*A)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Sqrt(System.Single)">
            <summary>Returns square root of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Loge(System.Single)">
            <summary>Returns natural log of A (if e^R == A, returns R)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Log(System.Single,System.Single)">
            <summary>Returns log of A base B (if B^R == A, returns R)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Exp(System.Single)">
            <summary>Returns exponential(e) to the power A (e^A)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Atan2(System.Single,System.Single)">
            <summary>Returns the inverse tan (atan2) of A/B (result is in Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Atan(System.Single)">
            <summary>Returns the inverse tan (atan) (result is in Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Tan(System.Single)">
            <summary>Returns the tan of A (expects Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Acos(System.Single)">
            <summary>Returns the inverse cosine (arccos) of A (result is in Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Cos(System.Single)">
            <summary>Returns the cosine of A (expects Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Asin(System.Single)">
            <summary>Returns the inverse sine (arcsin) of A (result is in Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Sin(System.Single)">
            <summary>Returns the sine of A (expects Radians)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Abs(System.Single)">
            <summary>Returns the absolute (positive) value of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GridSnap_Float(System.Single,System.Single)">
            <summary>
            Snaps a value to the nearest grid multiple. E.g.,
                        Location = 5.1, GridSize = 10.0 : return value = 10.0
            If GridSize is 0 Location is returned
            if GridSize is very small precision issues may occur.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Hypotenuse(System.Single,System.Single)">
            <summary>Returns the hypotenuse of a right-angled triangle given the width and height.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.InRange_FloatFloat(System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>Returns V clamped to be between A and B (inclusive)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_FloatFloat(System.Single,System.Single)">
            <summary>Returns true if A does not equal B (A != B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.NearlyEqual_FloatFloat(System.Single,System.Single,System.Single)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_FloatFloat(System.Single,System.Single)">
            <summary>Returns true if A is exactly equal to B (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GreaterEqual_FloatFloat(System.Single,System.Single)">
            <summary>Returns true if A is greater than or equal to B (A >= B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.LessEqual_FloatFloat(System.Single,System.Single)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.Greater_FloatFloat(System.Single,System.Single)">
            <summary>Returns true if A is greater than B (A > B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.Less_FloatFloat(System.Single,System.Single)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_FloatFloat(System.Single,System.Single)">
            <summary>Subtraction (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_FloatFloat(System.Single,System.Single)">
            <summary>Addition (A + B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Fraction(System.Single)">
            <summary>Returns the fractional part of a float.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Percent_FloatFloat(System.Single,System.Single)">
            <summary>Modulo (A % B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_FloatFloat(System.Single,System.Single)">
            <summary>Division (A / B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_IntFloat(System.Int32,System.Single)">
            <summary>Multiplication (A * B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_FloatFloat(System.Single,System.Single)">
            <summary>Multiplication (A * B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.MultiplyMultiply_FloatFloat(System.Single,System.Single)">
            <summary>Power (Base to the Exp-th power)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Abs_Int(System.Int32)">
            <summary>Returns the absolute (positive) value of A</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>Returns Value clamped to be between A and B (inclusive)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Max(System.Int32,System.Int32)">
            <summary>Returns the maximum value of A and B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Min(System.Int32,System.Int32)">
            <summary>Returns the minimum value of A and B</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.RandomIntegerInRange(System.Int32,System.Int32)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomInteger(System.Int32)">
            <summary>Returns a uniformly distributed random number between 0 and Max - 1</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.SignOfInteger(System.Int32)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.Not_Int(System.Int32)">
            <summary>Bitwise NOT (~A)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Or_IntInt(System.Int32,System.Int32)">
            <summary>Bitwise OR (A | B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Xor_IntInt(System.Int32,System.Int32)">
            <summary>Bitwise XOR (A ^ B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.And_IntInt(System.Int32,System.Int32)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_IntInt(System.Int32,System.Int32)">
            <summary>Returns true if A is not equal to B (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_IntInt(System.Int32,System.Int32)">
            <summary>Returns true if A is equal to B (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GreaterEqual_IntInt(System.Int32,System.Int32)">
            <summary>Returns true if A is greater than or equal to B (A >= B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.LessEqual_IntInt(System.Int32,System.Int32)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.Greater_IntInt(System.Int32,System.Int32)">
            <summary>Returns true if A is greater than B (A > B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.Less_IntInt(System.Int32,System.Int32)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_IntInt(System.Int32,System.Int32)">
            <summary>Subtraction (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_IntInt(System.Int32,System.Int32)">
            <summary>Addition (A + B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Percent_IntInt(System.Int32,System.Int32)">
            <summary>Modulo (A % B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_IntInt(System.Int32,System.Int32)">
            <summary>Division (A / B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_IntInt(System.Int32,System.Int32)">
            <summary>Multiplication (A * B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_ByteByte(System.Byte,System.Byte)">
            <summary>Returns true if A is not equal to B (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_ByteByte(System.Byte,System.Byte)">
            <summary>Returns true if A is equal to B (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.GreaterEqual_ByteByte(System.Byte,System.Byte)">
            <summary>Returns true if A is greater than or equal to B (A >= B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.LessEqual_ByteByte(System.Byte,System.Byte)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.Greater_ByteByte(System.Byte,System.Byte)">
            <summary>Returns true if A is greater than B (A > B)</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetMathLibrary.Less_ByteByte(System.Byte,System.Byte)" -->
        <member name="M:UnrealEngine.UKismetMathLibrary.BMax(System.Byte,System.Byte)">
            <summary>Returns the maximum value of A and B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BMin(System.Byte,System.Byte)">
            <summary>Returns the minimum value of A and B</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Subtract_ByteByte(System.Byte,System.Byte)">
            <summary>Subtraction (A - B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Add_ByteByte(System.Byte,System.Byte)">
            <summary>Addition (A + B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Percent_ByteByte(System.Byte,System.Byte)">
            <summary>Modulo (A % B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Divide_ByteByte(System.Byte,System.Byte)">
            <summary>Division (A / B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Multiply_ByteByte(System.Byte,System.Byte)">
            <summary>Multiplication (A * B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BooleanNOR(System.Boolean,System.Boolean)">
            <summary>Returns the logical Not OR of two values (A NOR B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BooleanXOR(System.Boolean,System.Boolean)">
            <summary>Returns the logical eXclusive OR of two values (A XOR B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BooleanOR(System.Boolean,System.Boolean)">
            <summary>Returns the logical OR of two values (A OR B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BooleanNAND(System.Boolean,System.Boolean)">
            <summary>Returns the logical NAND of two values (A AND B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.BooleanAND(System.Boolean,System.Boolean)">
            <summary>Returns the logical AND of two values (A AND B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.NotEqual_BoolBool(System.Boolean,System.Boolean)">
            <summary>Returns true if the values are not equal (A != B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.EqualEqual_BoolBool(System.Boolean,System.Boolean)">
            <summary>Returns true if the values are equal (A == B)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.Not_PreBool(System.Boolean)">
            <summary>Returns the logical complement of the Boolean value (NOT A)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomBoolWithWeightFromStream(System.Single,UnrealEngine.FRandomStream)">
            <summary>
            Get a random chance with the specified weight. Range of weight is 0.0 - 1.0 E.g.,
                          Weight = .6 return value = True 60% of the time
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomBoolWithWeight(System.Single)">
            <summary>
            Get a random chance with the specified weight. Range of weight is 0.0 - 1.0 E.g.,
                         Weight = .6 return value = True 60% of the time
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetMathLibrary.RandomBool">
            <summary>Returns a uniformly distributed random bool</summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetEnumeratorValueFromIndex(UnrealEngine.UEnum,System.Byte)">
            <summary>
            @param Enum - Enumeration
            @param EnumeratorIndex - Input index
            @return - The value of the enumerator, or INDEX_NONE
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetValidValue(UnrealEngine.UEnum,System.Byte)">
            <summary>
            @param Enum - Enumeration
            @param EnumeratorIndex - Input value
            @return - if EnumeratorIndex is valid return EnumeratorIndex, otherwise return MAX value of Enum
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetEnumeratorUserFriendlyName(UnrealEngine.UEnum,System.Byte)">
            <summary>
            Gets enumerator name as FString. Use DeisplayName when possible.
            @param Enum - Enumeration
            @param EnumeratorValue - Value of searched enumeration
            @return - name of the searched enumerator, or NAME_None
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetEnumeratorName(UnrealEngine.UEnum,System.Byte)">
            <summary>
            Gets enumerator name.
            @param Enum - Enumeration
            @param EnumeratorValue - Value of searched enumeration
            @return - name of the searched enumerator, or NAME_None
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetFirstUnmarkedBit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the first index not already marked starting from a specific index and returns the bit index selected
            @param Data - The integer containing the bits that are being set
            @param StartIdx - The index to start looking for an available index from
            @param NumBits - The logical number of bits we want to track
            @return - The index that was selected (returns INDEX_NONE if there was no unmarked bits to choose from)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetRandomUnmarkedBit(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a random not already marked bit and returns the bit index selected
            @param Data - The integer containing the bits that are being set
            @param NumBits - The logical number of bits we want to track
            @return - The index that was selected (returns INDEX_NONE if there was no unmarked bits to choose from)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.GetUnmarkedBit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an already unmarked bit and returns the bit index selected
            @param Data - The integer containing the bits that are being set
            @param StartIdx - The index to start with when determining the selection'
            @param NumBits - The logical number of bits we want to track
            @param bRandom - Whether to select a random index or not
            @return - The index that was selected (returns INDEX_NONE if there was no unmarked bits to choose from)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.HasMarkedBit(System.Int32,System.Int32)">
            <summary>
            Returns whether there exists a marked bit in the data
            @param Data - The data being tested against
            @param NumBits - The logical number of bits we want to track
            @return - Whether there is a bit marked in the data
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.HasUnmarkedBit(System.Int32,System.Int32)">
            <summary>
            Returns whether there exists an unmarked bit in the data
            @param Data - The data being tested against
            @param NumBits - The logical number of bits we want to track
            @return - Whether there is a bit not marked in the data
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.ClearAllBits(System.Int32@)">
            <summary>
            Clears all of the bit in the data
            @param Data - The integer containing the bits that are being cleared
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.ClearBit(System.Int32@,System.Int32)">
            <summary>
            Clears the bit at index "Index" in the data
            @param Data - The integer containing the bits that are being cleared
            @param Index - The bit index into the Data that we are clearing
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.MarkBit(System.Int32@,System.Int32)">
            <summary>
            Sets the bit at index "Index" in the data
            @param Data - The integer containing the bits that are being set
            @param Index - The bit index into the Data that we are setting
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetNodeHelperLibrary.BitIsMarked(System.Int32,System.Int32)">
            <summary>
            Returns whether the bit at index "Index" is set or not in the data
            @param Data - The integer containing the bits that are being tested against
            @param Index - The bit index into the Data that we are inquiring
            @return  - Whether the bit at index "Index" is set or not
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.EndDrawCanvasToRenderTarget(UnrealEngine.UObject,UnrealEngine.FDrawToRenderTargetContext)">
            <summary>Must be paired with a BeginDrawCanvasToRenderTarget to complete rendering to a render target.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.BeginDrawCanvasToRenderTarget(UnrealEngine.UObject,UnrealEngine.UTextureRenderTarget2D,UnrealEngine.UCanvas@,UnrealEngine.FVector2D@,UnrealEngine.FDrawToRenderTargetContext@)">
            <summary>
            Returns a Canvas object that can be used to draw to the specified render target.
            Canvas has functions like DrawMaterial with size parameters that can be used to draw to a specific area of a render target.
            Be sure to call EndDrawCanvasToRenderTarget to complete the rendering!
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.ExportTexture2D(UnrealEngine.UObject,UnrealEngine.UTexture2D,System.String,System.String)">
            <summary>Exports a Texture2D as a HDR image onto the disk.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.ExportRenderTarget(UnrealEngine.UObject,UnrealEngine.UTextureRenderTarget2D,System.String,System.String)">
            <summary>Exports a render target as a HDR image onto the disk.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly(UnrealEngine.UObject,UnrealEngine.UTextureRenderTarget2D,UnrealEngine.UTexture2D)">
            <summary>
            Copies the contents of a render target to a UTexture2D
            Only works in the editor
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.DrawMaterialToRenderTarget(UnrealEngine.UObject,UnrealEngine.UTextureRenderTarget2D,UnrealEngine.UMaterialInterface)">
            <summary>
            Renders a quad with the material applied to the specified render target.
            This sets the render target even if it is already set, which is an expensive operation.
            Use BeginDrawCanvasToRenderTarget / EndDrawCanvasToRenderTarget instead if rendering multiple primitives to the same render target.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.CreateRenderTarget2D(UnrealEngine.UObject,System.Int32,System.Int32)">
            <summary>Creates a new render target and initializes it to the specified dimensions</summary>
        </member>
        <member name="M:UnrealEngine.UKismetRenderingLibrary.ClearRenderTarget2D(UnrealEngine.UObject,UnrealEngine.UTextureRenderTarget2D,UnrealEngine.FLinearColor)">
            <summary>Clears the specified render target with the given ClearColor.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.TimeSecondsToString(System.Single)">
            <summary>Convert a number of seconds into minutes:seconds.milliseconds format string</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Mid(System.String,System.Int32,System.Int32)">
            <summary>@return the substring from Start position for Count characters.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.RightChop(System.String,System.Int32)">
            <summary>@return the string to the right of the specified location, counting forward from the left (from the beginning of the word).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Right(System.String,System.Int32)">
            <summary>@return the string to the right of the specified location, counting back from the right (end of the word).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.LeftChop(System.String,System.Int32)">
            <summary>@return the left most characters from the string chopping the given number of characters from the end</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Left(System.String,System.Int32)">
            <summary>@return the left most given number of characters</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Split(System.String,System.String,System.String@,System.String@,UnrealEngine.ESearchCase,UnrealEngine.ESearchDir)">
            <summary>
            Splits this string at given string position case sensitive.
            @param InStr The string to search and split at
            @param LeftS out the string to the left of InStr, not updated if return is false
            @param RightS out the string to the right of InStr, not updated if return is false
            @param SearchCase             Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @param SearchDir                      Indicates whether the search starts at the begining or at the end ( defaults to ESearchDir::FromStart )
            @return true if string is split, otherwise false
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.ReplaceInline(System.String@,System.String,System.String,UnrealEngine.ESearchCase)">
            <summary>
            Replace all occurrences of SearchText with ReplacementText in this string.
            @param       SearchText      the text that should be removed from this string
            @param       ReplacementText         the text to insert in its place
            @param SearchCase    Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @return      the number of occurrences of SearchText that were replaced.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Replace(System.String,System.String,System.String,UnrealEngine.ESearchCase)">
            <summary>
            Replace all occurrences of a substring in this string
            @param From substring to replace
            @param To substring to replace From with
            @param SearchCase    Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @return a copy of this string with the replacement made
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Reverse(System.String)">
            <summary>Returns a copy of this string, with the characters in reverse order</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.CullArray(System.String,UnrealEngine.FString[]@)">
            <summary>
            Takes an array of strings and removes any zero length entries.
            @param       InArray The array to cull
            @return      The number of elements left in InArray
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.TrimTrailing(System.String)">
            <summary>Removes trailing whitespace characters</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Trim(System.String)">
            <summary>Removes whitespace characters from the front of this string.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.MatchesWildcard(System.String,System.String,UnrealEngine.ESearchCase)">
            <summary>
            Searches this string for a given wild card
            @param Wildcard              *?-type wildcard
            @param SearchCase    Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @return true if this string matches the *?-type wildcard given.
            @warning This is a simple, SLOW routine. Use with caution
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.EndsWith(System.String,System.String,UnrealEngine.ESearchCase)">
            <summary>
            Test whether this string ends with given string.
            @param SearchCase            Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @return true if this string ends with specified text, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.StartsWith(System.String,System.String,UnrealEngine.ESearchCase)">
            <summary>
            Test whether this string starts with given string.
            @param SearchCase            Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @return true if this string begins with specified text, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.IsNumeric(System.String)">
            <summary>
            * Checks if a string contains only numeric characters
            * @param       SourceString    The string to check
            * @return true if the string only contains numeric characters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.RightPad(System.String,System.Int32)">
            <summary>
            * Pad the right of this string for a specified number of characters
            * @param       SourceString    The string to pad
            * @param       ChCount                 Amount of padding required
            * @return      The padded string
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.LeftPad(System.String,System.Int32)">
            <summary>
            * Pad the left of this string for a specified number of characters
            * @param       SourceString    The string to pad
            * @param       ChCount                 Amount of padding required
            * @return      The padded string
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.ToLower(System.String)">
            <summary>
            Returns a string converted to Lower case
            @param        SourceString    The string to convert
            @return       The string in lower case
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.ToUpper(System.String)">
            <summary>
            Returns a string converted to Upper case
            @param       SourceString    The string to convert
            @return      The string in upper case
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.GetCharacterArrayFromString(System.String)">
            <summary>
            Returns an array that contains one entry for each character in SourceString
            @param        SourceString    The string to break apart into characters
            @return       An array containing one entry for each character in SourceString
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.JoinStringArray(UnrealEngine.FString[],System.String)">
            <summary>
            Concatenates an array of strings into a single string.
            @param SourceArray - The array of strings to concatenate.
            @param Separator - The string used to separate each element.
            @return The final, joined, separated string.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.ParseIntoArray(System.String,System.String,System.Boolean)">
            <summary>
            Gets an array of strings from a source string divided up by a separator and empty strings can optionally be culled.
            @param SourceString - The string to chop up
            @param Delimiter - The string to delimit on
            @param CullEmptyStrings = true - Cull (true) empty strings or add them to the array (false)
            @return The array of string that have been separated
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.GetCharacterAsNumber(System.String,System.Int32)">
            <summary>
            Gets a single character from the string (as an integer)
            @param SourceString - The string to convert
            @param Index - Location of the character whose value is required
            @return The integer value of the character or 0 if index is out of range
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns whether this string contains the specified substring.
            @param SubStr                 Find to search for
            @param SearchCase             Indicates whether the search is case sensitive or not ( defaults to ESearchCase::IgnoreCase )
            @param SearchDir                      Indicates whether the search starts at the begining or at the end ( defaults to ESearchDir::FromStart )
            @return                                       Returns whether the string contains the substring
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.FindSubstring(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Finds the starting index of a substring in the a specified string
            @param SearchIn The string to search within
            @param Substring The string to look for in the SearchIn string
            @param bUseCase Whether or not to be case-sensitive
            @param bSearchFromEnd Whether or not to start the search from the end of the string instead of the beginning
            @param StartPosition The position to start the search from
            @return The index (starting from 0 if bSearchFromEnd is false) of the first occurence of the substring
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.GetSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Returns a substring from the string starting at the specified position
            @param SourceString - The string to get the substring from
            @param StartIndex - The location in SourceString to use as the start of the substring
            @param Length The length of the requested substring
            @return The requested substring
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Len(System.String)">
            <summary>
            Returns the number of characters in the string
            @param SourceString - The string to measure
            @return The number of chars in the string
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.NotEqual_StriStri(System.String,System.String)">
            <summary>
            Test if the input string are not equal (A != B), ignoring case differences
            @param A - The string to compare against
            @param B - The string to compare
            @return Returns true if the input strings are not equal, false if they are equal
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.NotEqual_StrStr(System.String,System.String)">
            <summary>
            Test if the input string are not equal (A != B)
            @param A - The string to compare against
            @param B - The string to compare
            @return Returns true if the input strings are not equal, false if they are equal
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.EqualEqual_StriStri(System.String,System.String)">
            <summary>
            Test if the input strings are equal (A == B), ignoring case
            @param A - The string to compare against
            @param B - The string to compare
            @returns True if the strings are equal, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.EqualEqual_StrStr(System.String,System.String)">
            <summary>
            Test if the input strings are equal (A == B)
            @param A - The string to compare against
            @param B - The string to compare
            @returns True if the strings are equal, false otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Concat_StrStr(System.String,System.String)">
            <summary>
            Concatenates two strings together to make a new string
            @param A - The original string
            @param B - The string to append to A
            @returns A new string which is the concatenation of A+B
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Name(System.String,System.String,System.String,System.String)">
            <summary>
            Converts a color->string, creating a new string in the form AppendTo+Prefix+InName+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InName - The name value to convert
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Color(System.String,System.String,UnrealEngine.FLinearColor,System.String)">
            <summary>
            Converts a color->string, creating a new string in the form AppendTo+Prefix+InColor+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InColor - The linear color value to convert. Uses the standard ToString conversion
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Object(System.String,System.String,UnrealEngine.UObject,System.String)">
            <summary>
            Converts a object->string, creating a new string in the form AppendTo+Prefix+object name+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InObj - The object to convert. Will insert the name of the object into the conversion string
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Rotator(System.String,System.String,UnrealEngine.FRotator,System.String)">
            <summary>
            Converts a rotator->string, creating a new string in the form AppendTo+Prefix+InRot+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InRot - The rotator value to convert. Uses the standard ToString conversion
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Vector2d(System.String,System.String,UnrealEngine.FVector2D,System.String)">
            <summary>
            Converts a vector2d->string, creating a new string in the form AppendTo+Prefix+InVector2d+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InVector2d - The vector2d value to convert. Uses the standard FVector2D::ToString conversion
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_IntVector(System.String,System.String,UnrealEngine.FIntVector,System.String)">
            <summary>
            Converts an IntVector->string, creating a new string in the form AppendTo+Prefix+InIntVector+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InIntVector - The intVector value to convert. Uses the standard FVector::ToString conversion
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Vector(System.String,System.String,UnrealEngine.FVector,System.String)">
            <summary>
            Converts a vector->string, creating a new string in the form AppendTo+Prefix+InVector+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InVector - The vector value to convert. Uses the standard FVector::ToString conversion
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Bool(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Converts a boolean->string, creating a new string in the form AppendTo+Prefix+InBool+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InBool - The bool value to convert. Will add "true" or "false" to the conversion string
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Int(System.String,System.String,System.Int32,System.String)">
            <summary>
            Converts a int->string, creating a new string in the form AppendTo+Prefix+InInt+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InInt - The int value to convert
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.BuildString_Float(System.String,System.String,System.Single,System.String)">
            <summary>
            Converts a float->string, create a new string in the form AppendTo+Prefix+InFloat+Suffix
            @param AppendTo - An existing string to use as the start of the conversion string
            @param Prefix - A string to use as a prefix, after the AppendTo string
            @param InFloat - The float value to convert
            @param Suffix - A suffix to append to the end of the conversion string
            @return A new string built from the passed parameters
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToColor(System.String,UnrealEngine.FLinearColor@,System.Boolean@)">
            <summary>Convert String Back To Color. IsValid indicates whether or not the string could be successfully converted.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToRotator(System.String,UnrealEngine.FRotator@,System.Boolean@)">
            <summary>Convert String Back To Rotator. IsValid indicates whether or not the string could be successfully converted.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToVector2D(System.String,UnrealEngine.FVector2D@,System.Boolean@)">
            <summary>Convert String Back To Vector2D. IsValid indicates whether or not the string could be successfully converted.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToVector(System.String,UnrealEngine.FVector@,System.Boolean@)">
            <summary>Convert String Back To Vector. IsValid indicates whether or not the string could be successfully converted.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToFloat(System.String)">
            <summary>Converts a string to a float value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToInt(System.String)">
            <summary>Converts a string to a int value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_StringToName(System.String)">
            <summary>Converts a string to a name value</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_NameToString(System.String)">
            <summary>Converts a name value to a string</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_ColorToString(UnrealEngine.FLinearColor)">
            <summary>Converts a linear color value to a string, in the form '(R=,G=,B=,A=)'</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_ObjectToString(UnrealEngine.UObject)">
            <summary>Converts a UObject value to a string by calling the object's GetName method</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_TransformToString(UnrealEngine.FTransform)">
            <summary>Converts a transform value to a string, in the form 'Translation: X= Y= Z= Rotation: P= Y= R= Scale: X= Y= Z='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_RotatorToString(UnrealEngine.FRotator)">
            <summary>Converts a rotator value to a string, in the form 'P= Y= R='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_Vector2dToString(UnrealEngine.FVector2D)">
            <summary>Converts a vector2d value to a string, in the form 'X= Y='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_IntVectorToString(UnrealEngine.FIntVector)">
            <summary>Converts an IntVector value to a string, in the form 'X= Y= Z='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_VectorToString(UnrealEngine.FVector)">
            <summary>Converts a vector value to a string, in the form 'X= Y= Z='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_BoolToString(System.Boolean)">
            <summary>Converts a boolean value to a string, either 'true' or 'false'</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_ByteToString(System.Byte)">
            <summary>Converts a byte value to a string</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_IntToString(System.Int32)">
            <summary>Converts an integer value to a string</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringLibrary.Conv_FloatToString(System.Single)">
            <summary>Converts a float value to a string</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry(System.String,System.String)">
            <summary>Returns an array of all meta-data IDs within the given string table entry</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.GetKeysFromStringTable(System.String)">
            <summary>Returns an array of all keys within the given string table</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.GetRegisteredStringTables">
            <summary>Returns an array of all registered string table IDs</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.GetTableEntryMetaData(System.String,System.String,System.String)">
            <summary>Returns the specified meta-data of the given string table entry (or an empty string).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.GetTableEntrySourceString(System.String,System.String)">
            <summary>Returns the source string of the given string table entry (or an empty string).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.GetTableNamespace(System.String)">
            <summary>Returns the namespace of the given string table.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.IsRegisteredTableEntry(System.String,System.String)">
            <summary>Returns true if the given table ID corresponds to a registered string table, and that table has.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetStringTableLibrary.IsRegisteredTableId(System.String)">
            <summary>Returns true if the given table ID corresponds to a registered string table.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetCommandLine">
            <summary>Returns the command line that the process was launched with.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetUserActivity(UnrealEngine.FUserActivity)">
            <summary>Tells the engine what the user is doing for debug, analytics, etc.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.RegisterForRemoteNotifications">
            <summary>
            Requests permission to send remote notifications to the user's device.
            (iOS only)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetLocalCurrencySymbol">
            <summary>
            Returns the currency symbol associated with the device's locale
            @return the currency symbol associated with the device's locale
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetLocalCurrencyCode">
            <summary>
            Returns the currency code associated with the device's locale
            @return the currency code associated with the device's locale
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetDefaultLocale">
            <summary>
            Returns the user's preferred language and region
            @return A language ID indicating the user's language and region
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetPreferredLanguages">
            <summary>
            Returns an array of the user's preferred languages in order of preference
            @return An array of language IDs ordered from most preferred to least
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetSuppressViewportTransitionMessage(UnrealEngine.UObject,System.Boolean)">
            <summary>
            Sets the state of the transition message rendered by the viewport. (The blue text displayed when the game is paused and so forth.)
            @param WorldContextObject    World context
            @param State                                 set true to suppress transition message
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsControllerAssignedToGamepad(System.Int32)">
            <summary>Returns true if controller id assigned to a gamepad (Android only)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ResetGamepadAssignmentToController(System.Int32)">
            <summary>* Resets the gamepad assignment to player controller id (Android only)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ResetGamepadAssignments">
            <summary>Resets the gamepad to player controller id assignments (Android only)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetVolumeButtonsHandledBySystem">
            <summary>Returns true if system default handling of volume up and volume down buttons enabled (Android only)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetVolumeButtonsHandledBySystem(System.Boolean)">
            <summary>
            Allows or inhibits system default handling of volume up and volume down buttons (Android only)
            @param       bEnabled                                If true, allow Android to handle volume up and down events
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ControlScreensaver(System.Boolean)">
            <summary>
            Allows or inhibits screensaver
            @param       bAllowScreenSaver               If false, don't allow screensaver if possible, otherwise allow default behavior
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsLoggedIn(UnrealEngine.APlayerController)">
            <summary>
            Returns whether the player is logged in to the currently active online subsystem.
            @param Player Specific player's login status to get. May not be supported on all platforms. If null, defaults to the player with ControllerId 0.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ShowPlatformSpecificAchievementsScreen(UnrealEngine.APlayerController)">
            <summary>
            Displays the built-in achievements GUI (iOS and Android only; this function may be renamed or moved in a future release)
            @param SpecificPlayer Specific player's achievements to show. May not be supported on all platforms. If null, defaults to the player with ControllerId 0
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen(System.String)">
            <summary>Displays the built-in leaderboard GUI (iOS and Android only; this function may be renamed or moved in a future release)</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ShowInterstitialAd">
            <summary>
            Shows the loaded interstitial ad (loaded with LoadInterstitialAd)
            (Android only)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsInterstitialAdRequested">
            <summary>
            Returns true if the requested interstitial ad has been successfully requested (false if load request fails)
            (Android only)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsInterstitialAdAvailable">
            <summary>
            Returns true if the requested interstitial ad is loaded and ready
            (Android only)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LoadInterstitialAd(System.Int32)">
            <summary>
            Will load a fullscreen interstitial AdMob ad. Call this before using ShowInterstitialAd
            (Android only)
            @param AdIdIndex The index of the ID to select for the ad to show
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ForceCloseAdBanner">
            <summary>
            Forces closed any displayed ad. Can lead to loss of revenue
            (iOS and Android only)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.HideAdBanner">
            <summary>
            Hides the ad banner (iAd on iOS, or AdMob on Android). Will force close the ad if it's open
            (iOS and Android only)
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetAdIDCount">
            <summary>Retrieves the total number of Ad IDs that can be selected between</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ShowAdBanner(System.Int32,System.Boolean)">
            <summary>
            Will show an ad banner (iAd on iOS, or AdMob on Android) on the top or bottom of screen, on top of the GL view (doesn't resize the view)
            (iOS and Android only)
            @param AdIdIndex The index of the ID to select for the ad to show
            @param bShowOnBottomOfScreen If true, the iAd will be shown at the bottom of the screen, top otherwise
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CollectGarbage">
            <summary>
            Deletes all unreferenced objects, keeping only referenced objects (this command will be queued and happen at the end of the frame)
            Note: This can be a slow operation, and should only be performed where a hitch would be acceptable
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LaunchURL(System.String)">
            <summary>Opens the specified URL in the platform's web browser of choice</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetMinYResolutionFor3DView">
            <summary>
            Gets the smallest Y resolution we want to support in the 3D view, clamped within reasons
            @return value in pixels
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetMinYResolutionForUI">
            <summary>
            Gets the smallest Y resolution we want to support in the UI, clamped within reasons
            @return value in pixels
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetConvenientWindowedResolutions(UnrealEngine.FIntPoint[]@)">
            <summary>
            Gets the list of windowed resolutions which are convenient for the current primary display size.
            @return true if successfully queried the device for available resolutions.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetSupportedFullscreenResolutions(UnrealEngine.FIntPoint[]@)">
            <summary>
            Gets the list of support fullscreen resolutions.
            @return true if successfully queried the device for available resolutions.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetRenderingMaterialQualityLevel">
            <summary>
            Get the clamped state of r.MaterialQualityLevel, see console variable help (allows for scalability, cannot be used in construction scripts)
            0: low
            1: high
            2: medium
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetRenderingDetailMode">
            <summary>
            Get the clamped state of r.DetailMode, see console variable help (allows for scalability, cannot be used in construction scripts)
            0: low, show only object with DetailMode low or higher
            1: medium, show all object with DetailMode medium or higher
            2: high, show all objects
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetComponentBounds(UnrealEngine.USceneComponent,UnrealEngine.FVector@,UnrealEngine.FVector@,System.Single@)">
            <summary>Get bounds</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CreateCopyForUndoBuffer(UnrealEngine.UObject)">
            <summary>Mark as modified.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugFloatHistoryLocation(UnrealEngine.UObject,UnrealEngine.FDebugFloatHistory,UnrealEngine.FVector,UnrealEngine.FVector2D,UnrealEngine.FLinearColor,System.Single)">
            <summary>Draws a 2D Histogram of size 'DrawSize' based FDebugFloatHistory struct, using DrawLocation for the location in the world, rotation will face camera of first player.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugFloatHistoryTransform(UnrealEngine.UObject,UnrealEngine.FDebugFloatHistory,UnrealEngine.FTransform,UnrealEngine.FVector2D,UnrealEngine.FLinearColor,System.Single)">
            <summary>Draws a 2D Histogram of size 'DrawSize' based FDebugFloatHistory struct, using DrawTransform for the position in the world.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugCamera(UnrealEngine.ACameraActor,UnrealEngine.FLinearColor,System.Single)">
            <summary>Draw a debug camera shape.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugFrustum(UnrealEngine.UObject,UnrealEngine.FTransform,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>Draws a debug frustum.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.FlushPersistentDebugLines(UnrealEngine.UObject)">
            <summary>
            Flush all persistent debug lines and shapes.
            @param WorldContext  World context
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugPlane(UnrealEngine.UObject,UnrealEngine.FPlane,UnrealEngine.FVector,System.Single,UnrealEngine.FLinearColor,System.Single)">
            <summary>Draws a debug plane.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.FlushDebugStrings(UnrealEngine.UObject)">
            <summary>
            Removes all debug strings.
            @param WorldContext  World context
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugString(UnrealEngine.UObject,UnrealEngine.FVector,System.String,UnrealEngine.AActor,UnrealEngine.FLinearColor,System.Single)">
            <summary>Draw a debug string at a 3d world location.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugCapsule(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.FRotator,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>Draw a debug capsule</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugConeInDegrees(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,System.Single,System.Int32,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>
            Draw a debug cone
            Angles are specified in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugCylinder(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Int32,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>Draw a debug cylinder</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugSphere(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,System.Int32,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>Draw a debug sphere</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugCoordinateSystem(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FRotator,System.Single,System.Single,System.Single)">
            <summary>Draw a debug coordinate system.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugBox(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FLinearColor,UnrealEngine.FRotator,System.Single,System.Single)">
            <summary>Draw a debug box</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugArrow(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>Draw directional arrow, pointing from LineStart to LineEnd.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugPoint(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,UnrealEngine.FLinearColor,System.Single)">
            <summary>Draw a debug point</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugCircle(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,System.Int32,UnrealEngine.FLinearColor,System.Single,System.Single,UnrealEngine.FVector,UnrealEngine.FVector,System.Boolean)">
            <summary>Draw a debug circle!</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.DrawDebugLine(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FLinearColor,System.Single,System.Single)">
            <summary>Draw a debug line</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetActorListFromComponentList(UnrealEngine.UPrimitiveComponent[],UnrealEngine.UClass,UnrealEngine.AActor[]@)">
            <summary>
            Returns an array of unique actors represented by the given list of components.
            @param ComponentList         List of components.
            @param ClassFilter           If set, will only return results of this class or subclasses of it.
            @param OutActorList          Start of line segment.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleTraceMultiByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweep a capsule against the world and return all initial overlaps using a specific profile, then overlapping hits and then first blocking hit
            Results are sorted, so a blocking hit (if found) will be the last element of the array
            Only the single closest blocking result will be generated, no tests will be done after that
            @param WorldContext   World context
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param Radius                 Radius of the capsule to sweep
            @param HalfHeight             Distance from center of capsule to tip of hemisphere endcap.
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHits                A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                               True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleTraceSingleByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweep a capsule against the world and return the first blocking hit using a specific profile
            @param WorldContext   World context
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param Radius                 Radius of the capsule to sweep
            @param HalfHeight             Distance from center of capsule to tip of hemisphere endcap.
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit                 Properties of the trace hit.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxTraceMultiByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweep a box against the world and return all initial overlaps using a specific profile, then overlapping hits and then first blocking hit
            Results are sorted, so a blocking hit (if found) will be the last element of the array
            Only the single closest blocking result will be generated, no tests will be done after that
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param HalfSize           Distance from the center of box along each axis
            @param Orientation    Orientation of the box
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHits                A list of hits, sorted along the trace from start to finish. The blocking hit will be the last hit, if there was one.
            @return                               True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxTraceSingleByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweep a box against the world and return the first blocking hit using a specific profile
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param HalfSize           Distance from the center of box along each axis
            @param Orientation    Orientation of the box
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit                 Properties of the trace hit.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereTraceMultiByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweep a sphere against the world and return all initial overlaps using a specific profile, then overlapping hits and then first blocking hit
            Results are sorted, so a blocking hit (if found) will be the last element of the array
            Only the single closest blocking result will be generated, no tests will be done after that
            @param WorldContext   World context
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param Radius         Radius of the sphere to sweep
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHits                A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                               True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereTraceSingleByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweep a sphere against the world and return the first blocking hit using a specific profile
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param Radius                 Radius of the sphere to sweep
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit                 Properties of the trace hit.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LineTraceMultiByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Trace a ray against the world using a specific profile and return overlapping hits and then first blocking hit
            Results are sorted, so a blocking hit (if found) will be the last element of the array
            Only the single closest blocking result will be generated, no tests will be done after that
            @param WorldContext   World context
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit         Properties of the trace hit.
            @return                               True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LineTraceSingleByProfile(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.String,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Trace a ray against the world using a specific profile and return the first blocking hit
            @param WorldContext   World context
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param ProfileName    The 'profile' used to determine which components to hit
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit                 Properties of the trace hit.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleTraceMultiForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a capsule along the given line and returns all hits encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the capsule to sweep
            @param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.
            @param ObjectTypes   Array of Object Types to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleTraceSingleForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a capsule along the given line and returns the first hit encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the capsule to sweep
            @param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.
            @param ObjectTypes   Array of Object Types to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxTraceMultiForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a box along the given line and returns all hits encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param Orientation
            @param HalfSize               Radius of the sphere to sweep
            @param ObjectTypes    Array of Object Types to trace
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHits                A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxTraceSingleForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a box along the given line and returns the first hit encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param Orientation
            @param HalfSize               Radius of the sphere to sweep
            @param ObjectTypes    Array of Object Types to trace
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit                 Properties of the trace hit.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereTraceMultiForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a sphere along the given line and returns all hits encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the sphere to sweep
            @param ObjectTypes   Array of Object Types to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereTraceSingleForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a sphere along the given line and returns the first hit encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the sphere to sweep
            @param ObjectTypes   Array of Object Types to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LineTraceMultiForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Does a collision trace along the given line and returns all hits encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param ObjectTypes   Array of Object Types to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LineTraceSingleForObjects(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.EObjectTypeQuery[],System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Does a collision trace along the given line and returns the first hit encountered.
            This only finds objects that are of a type specified by ObjectTypes.
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param ObjectTypes   Array of Object Types to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleTraceMulti(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a capsule along the given line and returns all hits encountered up to and including the first blocking hit.
            This trace finds the objects that RESPOND to the given TraceChannel
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the capsule to sweep
            @param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.
            @param TraceChannel
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                              True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleTraceSingle(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a capsule along the given line and returns the first blocking hit encountered.
            This trace finds the objects that RESPOND to the given TraceChannel
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the capsule to sweep
            @param HalfHeight    Distance from center of capsule to tip of hemisphere endcap.
            @param TraceChannel
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxTraceMulti(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a box along the given line and returns all hits encountered.
            This trace finds the objects that RESPONDS to the given TraceChannel
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param HalfSize           Distance from the center of box along each axis
            @param Orientation    Orientation of the box
            @param TraceChannel
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHits                A list of hits, sorted along the trace from start to finish. The blocking hit will be the last hit, if there was one.
            @return                               True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxTraceSingle(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a box along the given line and returns the first blocking hit encountered.
            This trace finds the objects that RESPONDS to the given TraceChannel
            @param Start                  Start of line segment.
            @param End                    End of line segment.
            @param HalfSize           Distance from the center of box along each axis
            @param Orientation    Orientation of the box
            @param TraceChannel
            @param bTraceComplex  True to test against complex collision, false to test against simplified collision.
            @param OutHit                 Properties of the trace hit.
            @return                               True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereTraceMulti(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a sphere along the given line and returns all hits encountered up to and including the first blocking hit.
            This trace finds the objects that RESPOND to the given TraceChannel
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the sphere to sweep
            @param TraceChannel
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHits               A list of hits, sorted along the trace from start to finish.  The blocking hit will be the last hit, if there was one.
            @return                              True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereTraceSingle(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Sweeps a sphere along the given line and returns the first blocking hit encountered.
            This trace finds the objects that RESPONDS to the given TraceChannel
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param Radius                Radius of the sphere to sweep
            @param TraceChannel
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LineTraceMulti(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult[]@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Does a collision trace along the given line and returns all hits encountered up to and including the first blocking hit.
            This trace finds the objects that RESPOND to the given TraceChannel
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param TraceChannel  The channel to trace
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a blocking hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.LineTraceSingle(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.ETraceTypeQuery,System.Boolean,UnrealEngine.AActor[],UnrealEngine.EDrawDebugTrace,UnrealEngine.FHitResult@,System.Boolean,UnrealEngine.FLinearColor,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Does a collision trace along the given line and returns the first blocking hit encountered.
            This trace finds the objects that RESPONDS to the given TraceChannel
            @param WorldContext  World context
            @param Start                 Start of line segment.
            @param End                   End of line segment.
            @param TraceChannel
            @param bTraceComplex True to test against complex collision, false to test against simplified collision.
            @param OutHit                Properties of the trace hit.
            @return                              True if there was a hit, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ComponentOverlapComponents(UnrealEngine.UPrimitiveComponent,UnrealEngine.FTransform,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.UPrimitiveComponent[]@)">
            <summary>
            Returns an array of components that overlap the given component.
            @param Component                             Component to test with.
            @param ComponentTransform    Defines where to place the component for overlap testing.
            @param Filter                                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter                   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors                             Returned array of actors. Unsorted.
            @return                                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ComponentOverlapActors(UnrealEngine.UPrimitiveComponent,UnrealEngine.FTransform,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.AActor[]@)">
            <summary>
            Returns an array of actors that overlap the given component.
            @param Component                             Component to test with.
            @param ComponentTransform    Defines where to place the component for overlap testing.
            @param Filter                                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter                   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors                             Returned array of actors. Unsorted.
            @return                                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleOverlapComponents(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.UPrimitiveComponent[]@)">
            <summary>
            Returns an array of components that overlap the given capsule.
            @param WorldContext  World context
            @param CapsulePos    Center of the capsule.
            @param Radius                Radius of capsule hemispheres and radius of center cylinder portion.
            @param HalfHeight    Half-height of the capsule (from center of capsule to tip of hemisphere.
            @param Filter                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors             Returned array of actors. Unsorted.
            @return                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.CapsuleOverlapActors(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.AActor[]@)">
            <summary>
            Returns an array of actors that overlap the given capsule.
            @param WorldContext  World context
            @param CapsulePos    Center of the capsule.
            @param Radius                Radius of capsule hemispheres and radius of center cylinder portion.
            @param HalfHeight    Half-height of the capsule (from center of capsule to tip of hemisphere.
            @param Filter                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors             Returned array of actors. Unsorted.
            @return                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxOverlapComponents(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.UPrimitiveComponent[]@)">
            <summary>
            Returns an array of components that overlap the given axis-aligned box.
            @param WorldContext  World context
            @param BoxPos                Center of box.
            @param BoxExtent             Extents of box.
            @param Filter                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors             Returned array of actors. Unsorted.
            @return                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.BoxOverlapActors(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.AActor[]@)">
            <summary>
            Returns an array of actors that overlap the given axis-aligned box.
            @param WorldContext  World context
            @param BoxPos                Center of box.
            @param BoxExtent             Extents of box.
            @param Filter                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors             Returned array of actors. Unsorted.
            @return                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereOverlapComponents(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.UPrimitiveComponent[]@)">
            <summary>
            Returns an array of components that overlap the given sphere.
            @param WorldContext  World context
            @param SpherePos             Center of sphere.
            @param SphereRadius  Size of sphere.
            @param Filter                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors             Returned array of actors. Unsorted.
            @return                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SphereOverlapActors(UnrealEngine.UObject,UnrealEngine.FVector,System.Single,UnrealEngine.EObjectTypeQuery[],UnrealEngine.UClass,UnrealEngine.AActor[],UnrealEngine.AActor[]@)">
            <summary>
            Returns an array of actors that overlap the given sphere.
            @param WorldContext  World context
            @param SpherePos             Center of sphere.
            @param SphereRadius  Size of sphere.
            @param Filter                Option to restrict results to only static or only dynamic.  For efficiency.
            @param ClassFilter   If set, will only return results of this class or subclasses of it.
            @param ActorsToIgnore                Ignore these actors in the list
            @param OutActors             Returned array of actors. Unsorted.
            @return                              true if there was an overlap that passed the filters, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetStructurePropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.FGenericStruct)">
            <summary>Set a custom structure property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetCollisionProfileNameProperty(UnrealEngine.UObject,System.String,UnrealEngine.FCollisionProfileName)">
            <summary>Set a CollisionProfileName property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetTransformPropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.FTransform)">
            <summary>Set a TRANSFORM property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetLinearColorPropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.FLinearColor)">
            <summary>Set a LINEAR COLOR property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetRotatorPropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.FRotator)">
            <summary>Set a ROTATOR property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetVectorPropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.FVector)">
            <summary>Set a VECTOR property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetTextPropertyByName(UnrealEngine.UObject,System.String,System.String)">
            <summary>Set a TEXT property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetStringPropertyByName(UnrealEngine.UObject,System.String,System.String)">
            <summary>Set a STRING property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetNamePropertyByName(UnrealEngine.UObject,System.String,System.String)">
            <summary>Set a NAME property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetClassPropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.TSubclassOf{UnrealEngine.UObject})">
            <summary>Set a CLASS property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetObjectPropertyByName(UnrealEngine.UObject,System.String,UnrealEngine.UObject)">
            <summary>Set an OBJECT property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetBoolPropertyByName(UnrealEngine.UObject,System.String,System.Boolean)">
            <summary>Set a bool property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetFloatPropertyByName(UnrealEngine.UObject,System.String,System.Single)">
            <summary>Set a float property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetBytePropertyByName(UnrealEngine.UObject,System.String,System.Byte)">
            <summary>Set an uint8 or enum property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetIntPropertyByName(UnrealEngine.UObject,System.String,System.Int32)">
            <summary>Set an int32 property by name</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_GetTimerRemainingTime(UnrealEngine.UObject,System.String)">
            <summary>
            Returns time until the timer will next execute its delegate.
            @param Object                Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.
            @return                              How long is remaining in the current iteration of the timer.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_GetTimerElapsedTime(UnrealEngine.UObject,System.String)">
            <summary>
            Returns elapsed time for the given delegate (time since current countdown iteration began).
            @param Object                Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.
            @return                              How long has elapsed since the current iteration of the timer began.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_TimerExists(UnrealEngine.UObject,System.String)">
            <summary>
            Returns true is a timer for the given delegate exists, false otherwise.
            @param Object         Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName   Delegate function name. Can be a K2 function or a Custom Event.
            @return                               True if the timer exists.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_IsTimerPaused(UnrealEngine.UObject,System.String)">
            <summary>
            Returns true if a timer exists and is paused for the given delegate, false otherwise.
            @param Object         Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName   Delegate function name. Can be a K2 function or a Custom Event.
            @return                               True if the timer exists and is paused.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_IsTimerActive(UnrealEngine.UObject,System.String)">
            <summary>
            Returns true if a timer exists and is active for the given delegate, false otherwise.
            @param Object                Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.
            @return                              True if the timer exists and is active.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_UnPauseTimer(UnrealEngine.UObject,System.String)">
            <summary>
            Resumes a paused timer from its current elapsed time.
            @param Object                Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_PauseTimer(UnrealEngine.UObject,System.String)">
            <summary>
            Pauses a set timer at its current elapsed time.
            @param Object                Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_ClearTimer(UnrealEngine.UObject,System.String)">
            <summary>
            Clears a set timer.
            @param Object                Object that implements the delegate function. Defaults to self (this blueprint)
            @param FunctionName  Delegate function name. Can be a K2 function or a Custom Event.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetSystemLibrary.K2_SetTimer(UnrealEngine.UObject,System.String,System.Single,System.Boolean)" -->
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_GetTimerRemainingTimeHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Returns time until the timer will next execute its handle.
            @param Handle                The handle of the timer to time remaining of.
            @return                              How long is remaining in the current iteration of the timer.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_GetTimerElapsedTimeHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Returns elapsed time for the given handle (time since current countdown iteration began).
            @param Handle                The handle of the timer to get the elapsed time of.
            @return                              How long has elapsed since the current iteration of the timer began.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_TimerExistsHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Returns true is a timer for the given handle exists, false otherwise.
            @param Handle                The handle to check whether it exists.
            @return                              True if the timer exists.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_IsTimerPausedHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Returns true if a timer exists and is paused for the given handle, false otherwise.
            @param Handle                The handle of the timer to check whether it is paused.
            @return                              True if the timer exists and is paused.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_IsTimerActiveHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Returns true if a timer exists and is active for the given handle, false otherwise.
            @param Handle                The handle of the timer to check whether it is active.
            @return                              True if the timer exists and is active.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_UnPauseTimerHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Resumes a paused timer from its current elapsed time.
            @param Handle                The handle of the timer to unpause.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_PauseTimerHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle)">
            <summary>
            Pauses a set timer at its current elapsed time.
            @param Handle                The handle of the timer to pause.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_ClearAndInvalidateTimerHandle(UnrealEngine.UObject,UnrealEngine.FTimerHandle@)">
            <summary>
            Clears a set timer.
            @param Handle                The handle of the timer to clear.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_InvalidateTimerHandle(UnrealEngine.FTimerHandle@)">
            <summary>
            Returns whether the timer handle is valid. This does not indicate that there is an active timer that this handle references, but rather that it once referenced a valid timer.
            @param Handle                The handle of the timer to check validity of.
            @return                              Return the invalidated timer handle for convenience.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.K2_IsValidTimerHandle(UnrealEngine.FTimerHandle)">
            <summary>
            Returns whether the timer handle is valid. This does not indicate that there is an active timer that this handle references, but rather that it once referenced a valid timer.
            @param Handle                The handle of the timer to check validity of.
            @return                              Whether the timer handle is valid.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MoveComponentTo(UnrealEngine.USceneComponent,UnrealEngine.FVector,UnrealEngine.FRotator,System.Boolean,System.Boolean,System.Single,System.Boolean,UnrealEngine.EMoveComponentAction,UnrealEngine.FLatentActionInfo)">
            <summary>
            * Interpolate a component to the specified relative location and rotation over the course of OverTime seconds.
            * @param Component                                             Component to interpolate
            * @param TargetRelativeLocation                Relative target location
            * @param TargetRelativeRotation                Relative target rotation
            * @param bEaseOut                                              if true we will ease out (ie end slowly) during interpolation
            * @param bEaseIn                                               if true we will ease in (ie start slowly) during interpolation
            * @param OverTime                                              duration of interpolation
            * @param bForceShortestRotationPath    if true we will always use the shortest path for rotation
            * @param MoveAction                                    required movement behavior @see EMoveComponentAction
            * @param LatentInfo                                    The latent action
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.RetriggerableDelay(UnrealEngine.UObject,System.Single,UnrealEngine.FLatentActionInfo)">
            <summary>
            Perform a latent action with a retriggerable delay (specified in seconds).  Calling again while it is counting down will reset the countdown to Duration.
            @param WorldContext  World context.
            @param Duration              length of delay (in seconds).
            @param LatentInfo    The latent action.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.Delay(UnrealEngine.UObject,System.Single,UnrealEngine.FLatentActionInfo)">
            <summary>
            Perform a latent action with a delay (specified in seconds).  Calling again while it is counting down will be ignored.
            @param WorldContext  World context.
            @param Duration              length of delay (in seconds).
            @param LatentInfo    The latent action.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.QuitGame(UnrealEngine.UObject,UnrealEngine.APlayerController,UnrealEngine.EQuitPreference)">
            <summary>
            Exit the current game
            @param       SpecificPlayer  The specific player to quit the game. If not specified, player 0 will quit.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.ExecuteConsoleCommand(UnrealEngine.UObject,System.String,UnrealEngine.APlayerController)">
            <summary>
            Executes a console command, optionally on a specific controller
            @param       Command                 Command to send to the console
            @param       SpecificPlayer  If specified, the console command will be routed through the specified player
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.SetWindowTitle(System.String)">
            <summary>Sets the game window title</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.PrintWarning(System.String)">
            <summary>
            Prints a warning string to the log and the screen. Meant to be used as a way to inform the user that they misused the node.
            WARNING!! Don't change the signature of this function without fixing up all nodes using it in the compiler
            @param       InString                The string to log out
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.PrintText(UnrealEngine.UObject,System.String,System.Boolean,System.Boolean,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Prints text to the log, and optionally, to the screen
            If Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.
            @param       InText                  The text to log out
            @param       bPrintToScreen  Whether or not to print the output to the screen
            @param       bPrintToLog             Whether or not to print the output to the log
            @param       bPrintToConsole Whether or not to print the output to the console
            @param       TextColor               Whether or not to print the output to the console
            @param       Duration                The display duration (if Print to Screen is True). Using negative number will result in loading the duration time from the config.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.PrintString(UnrealEngine.UObject,System.String,System.Boolean,System.Boolean,UnrealEngine.FLinearColor,System.Single)">
            <summary>
            Prints a string to the log, and optionally, to the screen
            If Print To Log is true, it will be visible in the Output Log window.  Otherwise it will be logged only as 'Verbose', so it generally won't show up.
            @param       InString                The string to log out
            @param       bPrintToScreen  Whether or not to print the output to the screen
            @param       bPrintToLog             Whether or not to print the output to the log
            @param       bPrintToConsole Whether or not to print the output to the console
            @param       TextColor               Whether or not to print the output to the console
            @param       Duration                The display duration (if Print to Screen is True). Using negative number will result in loading the duration time from the config.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralText(System.String)">
            <summary>
            Creates a literal FText
            @param       Value   value to set the FText to
            @return      The literal FText
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralString(System.String)">
            <summary>
            Creates a literal string
            @param       Value   value to set the string to
            @return      The literal string
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralByte(System.Byte)">
            <summary>
            Creates a literal byte
            @param       Value   value to set the byte to
            @return      The literal byte
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralName(System.String)">
            <summary>
            Creates a literal name
            @param       Value   value to set the name to
            @return      The literal name
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralBool(System.Boolean)">
            <summary>
            Creates a literal bool
            @param       Value   value to set the bool to
            @return      The literal bool
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralFloat(System.Single)">
            <summary>
            Creates a literal float
            @param       Value   value to set the float to
            @return      The literal float
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.MakeLiteralInt(System.Int32)">
            <summary>
            Creates a literal integer
            @param       Value   value to set the integer to
            @return      The literal integer
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetDeviceId">
            <summary>Returns the platform specific unique device id</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsPackagedForDistribution">
            <summary>Returns whether this is a build that is packaged for distribution</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsStandalone(UnrealEngine.UObject)">
            <summary>Returns whether this game instance is stand alone (no networking).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsDedicatedServer(UnrealEngine.UObject)">
            <summary>Returns whether this is running on a dedicated server</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsServer(UnrealEngine.UObject)">
            <summary>Returns whether the world this object is in is the host or not</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetGameTimeInSeconds(UnrealEngine.UObject)">
            <summary>
            Get the current game time, in seconds. This stops when the game is paused and is affected by slomo.
            @param WorldContextObject    World context
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetPlatformUserName">
            <summary>Get the current user name from the OS</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetGameBundleId">
            <summary>
            Retrieves the game's platform-specific bundle identifier or package name of the game
            @return The game's bundle identifier or package name.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetGameName">
            <summary>Get the name of the current game</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetEngineVersion">
            <summary>Engine build number, for displaying to end users.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetClassDisplayName(UnrealEngine.UClass)">
            <summary>Returns the display name of a class</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetDisplayName(UnrealEngine.UObject)">
            <summary>
            Returns the display name (or actor label), for displaying as a debugging aid.
            Note: In editor builds, this is the actor label.  In non-editor builds, this is the actual object name.  This function should not be used to uniquely identify actors!
            It is not localized and should not be used for display to an end user of a game.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetPathName(UnrealEngine.UObject)">
            <summary>Returns the full path to the specified object.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.GetObjectName(UnrealEngine.UObject)">
            <summary>Returns the actual object name.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsValidClass(UnrealEngine.UClass)">
            <summary>Return true if the class is usable : non-null and not pending kill</summary>
        </member>
        <member name="M:UnrealEngine.UKismetSystemLibrary.IsValid(UnrealEngine.UObject)">
            <summary>Return true if the object is usable : non-null and not pending kill</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.StringTableIdAndKeyFromText(System.String,System.String@,System.String@)">
            <summary>
            Attempts to find the String Table ID and key used by the given text.
            @return True if the String Table ID and key were found, false otherwise.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextFromStringTable(System.String,System.String)">
            <summary>
            Attempts to create a text instance from a string table ID and key.
            @note This exists to allow programmatic ‎look-up of a string table entry from dynamic content - you should favor setting your string table reference on a text property or pin wherever possible as it is significantly more robust (see "Make Literal Text").
            @return The found text, or a dummy text if the entry could not be found.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextIsFromStringTable(System.String)">
            <summary>Returns true if the given text is referencing a string table.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Format(System.String,UnrealEngine.FFormatArgumentData[])">
            <summary>Used for formatting text using the FText::Format function and utilized by the UK2Node_FormatText</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.AsTimespan_Timespan(UnrealEngine.FTimespan)">
            <summary>Converts a passed in time span to a text, formatted as a time span</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsTimeZoneTime_DateTime(UnrealEngine.FDateTime,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsTime_DateTime(UnrealEngine.FDateTime)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsTimeZoneDateTime_DateTime(UnrealEngine.FDateTime,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsDateTime_DateTime(UnrealEngine.FDateTime)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsTimeZoneDate_DateTime(UnrealEngine.FDateTime,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsDate_DateTime(UnrealEngine.FDateTime)" -->
        <member name="M:UnrealEngine.UKismetTextLibrary.AsPercent_Float(System.Single,UnrealEngine.ERoundingMode,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Converts a passed in float to a text, formatted as a percent</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.AsCurrency_Float(System.Single,UnrealEngine.ERoundingMode,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Converts a passed in float to a text formatted as a currency</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.AsCurrency_Integer(System.Int32,UnrealEngine.ERoundingMode,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Converts a passed in integer to a text formatted as a currency</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UKismetTextLibrary.AsCurrencyBase(System.Int32,System.String)" -->
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_FloatToText(System.Single,UnrealEngine.ERoundingMode,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Converts a passed in float to a text based on formatting options</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_IntToText(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>Converts a passed in integer to a text based on formatting options</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_ByteToText(System.Byte)">
            <summary>Converts a byte value to text</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_BoolToText(System.Boolean)">
            <summary>Converts a boolean value to text, either 'true' or 'false'</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.NotEqual_IgnoreCase_TextText(System.String,System.String)">
            <summary>Returns true if A and B are linguistically not equal (A != B), ignoring case.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.NotEqual_TextText(System.String,System.String)">
            <summary>Returns true if A and B are linguistically not equal (A != B).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.EqualEqual_IgnoreCase_TextText(System.String,System.String)">
            <summary>Returns true if A and B are linguistically equal (A == B), ignoring case.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.EqualEqual_TextText(System.String,System.String)">
            <summary>Returns true if A and B are linguistically equal (A == B).</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.FindTextInLocalizationTable(System.String,System.String,System.String@)">
            <summary>Attempts to find existing Text using the representation found in the loc tables for the specified namespace and key.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.GetEmptyText">
            <summary>Returns an empty piece of text.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextTrimPrecedingAndTrailing(System.String)">
            <summary>Removes whitespace characters from the front and end of the text.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextTrimTrailing(System.String)">
            <summary>Removes trailing whitespace characters.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextTrimPreceding(System.String)">
            <summary>Removes whitespace characters from the front of the text.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextToUpper(System.String)">
            <summary>
            Transforms the text to uppercase in a culture correct way.
            @note The returned instance is linked to the original and will be rebuilt if the active culture is changed.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextToLower(System.String)">
            <summary>
            Transforms the text to lowercase in a culture correct way.
            @note The returned instance is linked to the original and will be rebuilt if the active culture is changed.
            </summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextIsCultureInvariant(System.String)">
            <summary>Returns true if text is culture invariant.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextIsTransient(System.String)">
            <summary>Returns true if text is transient.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.TextIsEmpty(System.String)">
            <summary>Returns true if text is empty.</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_NameToText(System.String)">
            <summary>Converts string to localizable text</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_StringToText(System.String)">
            <summary>Converts string to localizable text</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_TextToString(System.String)">
            <summary>Converts localizable text to the string</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_ColorToText(UnrealEngine.FLinearColor)">
            <summary>Converts a linear color value to a localizable text, in the form '(R=,G=,B=,A=)'</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_ObjectToText(UnrealEngine.UObject)">
            <summary>Converts a UObject value to a localizable text by calling the object's GetName method</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_TransformToText(UnrealEngine.FTransform)">
            <summary>Converts a transform value to a localizable text, in the form 'Translation: X= Y= Z= Rotation: P= Y= R= Scale: X= Y= Z='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_RotatorToText(UnrealEngine.FRotator)">
            <summary>Converts a rotator value to a localizable text, in the form 'P= Y= R='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_Vector2dToText(UnrealEngine.FVector2D)">
            <summary>Converts a vector2d value to a localizable text, in the form 'X= Y='</summary>
        </member>
        <member name="M:UnrealEngine.UKismetTextLibrary.Conv_VectorToText(UnrealEngine.FVector)">
            <summary>Converts a vector value to a localizable text, in the form 'X= Y= Z='</summary>
        </member>
        <member name="M:UnrealEngine.ULevelStreaming.GetLevelScriptActor">
            <summary>Returns the Level Script Actor of the level if the level is loaded and valid</summary>
        </member>
        <member name="M:UnrealEngine.ULevelStreaming.IsStreamingStatePending">
            <summary>Returns whether level has streaming state change pending</summary>
        </member>
        <member name="M:UnrealEngine.ULevelStreaming.IsLevelLoaded">
            <summary>Returns whether streaming level is loaded</summary>
        </member>
        <member name="M:UnrealEngine.ULevelStreaming.IsLevelVisible">
            <summary>Returns whether streaming level is visible</summary>
        </member>
        <member name="M:UnrealEngine.ULightComponent.SetLightColor(UnrealEngine.FLinearColor,System.Boolean)">
            <summary>Set color of the light</summary>
        </member>
        <member name="M:UnrealEngine.ULightComponent.SetIntensity(System.Single)">
            <summary>Set intensity of the light</summary>
        </member>
        <member name="M:UnrealEngine.ULightComponentBase.GetLightColor">
            <summary>Gets the light color as a linear color</summary>
        </member>
        <member name="M:UnrealEngine.ULightComponentBase.SetCastShadows(System.Boolean)">
            <summary>Sets whether this light casts shadows</summary>
        </member>
        <member name="M:UnrealEngine.UMaterialBillboardComponent.AddElement(UnrealEngine.UMaterialInterface,UnrealEngine.UCurveFloat,System.Boolean,System.Single,System.Single,UnrealEngine.UCurveFloat)">
            <summary>Adds an element to the sprite.</summary>
        </member>
        <member name="M:UnrealEngine.UMaterialBillboardComponent.SetElements(UnrealEngine.FMaterialSpriteElement[])">
            <summary>Set all elements of this material billboard component</summary>
        </member>
        <member name="M:UnrealEngine.UMaterialInterface.GetPhysicalMaterial">
            <summary>
            Return a pointer to the physical material used by this material instance.
            @return The physical material.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMaterialInterface.GetBaseMaterial">
            <summary>Walks up parent chain and finds the base Material that this is an instance of. Just calls the virtual GetMaterial()</summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.HasOpenSubMenus">
            <summary>@return Whether this menu has open submenus</summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.GetMenuPosition">
            <summary>@return The current menu position</summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.ShouldOpenDueToClick">
            <summary>
            @return true if we should open the menu due to a click. Sometimes we should not, if
            the same MouseDownEvent that just closed the menu is about to re-open it because it
            happens to land on the button.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.IsOpen">
            <summary>@return true if the popup is open; false otherwise.</summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.Close">
            <summary>Closes the menu if it is currently open.</summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.Open(System.Boolean)">
            <summary>Opens the menu if it is not already open</summary>
        </member>
        <member name="M:UnrealEngine.UMenuAnchor.ToggleOpen(System.Boolean)">
            <summary>
            Toggles the menus open state.
            @param bFocusOnOpen  Should we focus the popup as soon as it opens?
            </summary>
        </member>
        <member name="M:UnrealEngine.UMeshComponent.SetVectorParameterValueOnMaterials(System.String,UnrealEngine.FVector)">
            <summary>Set all occurrences of Vector Material Parameters with ParameterName in the set of materials of the SkeletalMesh to ParameterValue</summary>
        </member>
        <member name="M:UnrealEngine.UMeshComponent.SetScalarParameterValueOnMaterials(System.String,System.Single)">
            <summary>Set all occurrences of Scalar Material Parameters with ParameterName in the set of materials of the SkeletalMesh to ParameterValue</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.SnapUpdatedComponentToPlane">
            <summary>Snap the updated component to the plane constraint, if enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.ConstrainNormalToPlane(UnrealEngine.FVector)">
            <summary>Constrain a normal vector (of unit length) to the plane constraint, if enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.ConstrainLocationToPlane(UnrealEngine.FVector)">
            <summary>Constrain a position vector to the plane constraint, if enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.ConstrainDirectionToPlane(UnrealEngine.FVector)">
            <summary>
            Constrain a direction vector to the plane constraint, if enabled.
            @see SetPlaneConstraint
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.GetPlaneConstraintOrigin">
            <summary>
            Get the plane constraint origin. This defines the behavior of snapping a position to the plane, such as by SnapUpdatedComponentToPlane().
            @return The origin of the plane that constrains movement, if the plane constraint is enabled.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.GetPlaneConstraintNormal">
            <summary>@return The normal of the plane that constrains movement, enforced if the plane constraint is enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.SetPlaneConstraintEnabled(System.Boolean)">
            <summary>Sets whether or not the plane constraint is enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.SetPlaneConstraintOrigin(UnrealEngine.FVector)">
            <summary>Sets the origin of the plane that constrains movement, enforced if the plane constraint is enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.SetPlaneConstraintFromVectors(UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Uses the Forward and Up vectors to compute the plane that constrains movement, enforced if the plane constraint is enabled.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.SetPlaneConstraintNormal(UnrealEngine.FVector)">
            <summary>
            Sets the normal of the plane that constrains movement, enforced if the plane constraint is enabled.
            Changing the normal automatically sets PlaneConstraintAxisSetting to "Custom".
            @param PlaneNormal   The normal of the plane. If non-zero in length, it will be normalized.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.K2_MoveUpdatedComponent(UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.FHitResult@,System.Boolean,System.Boolean)">
            <summary>
            Moves our UpdatedComponent by the given Delta, and sets rotation to NewRotation.
            Respects the plane constraint, if enabled.
            @return True if some movement occurred, false if no movement occurred. Result of any impact will be stored in OutHit.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.SetUpdatedComponent(UnrealEngine.USceneComponent)">
            <summary>Assign the component we move and update.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.PhysicsVolumeChanged(UnrealEngine.APhysicsVolume)">
            <summary>Delegate when PhysicsVolume of UpdatedComponent has been changed *</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.GetPhysicsVolume">
            <summary>@return PhysicsVolume this MovementComponent is using, or the world's default physics volume if none. *</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.StopMovementImmediately">
            <summary>Stops movement immediately (zeroes velocity, usually zeros acceleration for components with acceleration).</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.IsExceedingMaxSpeed(System.Single)">
            <summary>
            Returns true if the current velocity is exceeding the given max speed (usually the result of GetMaxSpeed()), within a small error tolerance.
            Note that under normal circumstances updates cause by acceleration will not cause this to be true, however external forces or changes in the max speed limit
            can cause the max speed to be violated.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.K2_GetModifiedMaxSpeed">
            <summary>@return the result of GetMaxSpeed() * GetMaxSpeedModifier().</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.GetMaxSpeed">
            <summary>@return Maximum speed of component in current movement mode.</summary>
        </member>
        <member name="M:UnrealEngine.UMovementComponent.GetGravityZ">
            <summary>@return gravity that affects this component</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.GetPlaybackEnd">
            <summary>Get the offset within the level sequence to finish playing</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.GetPlaybackStart">
            <summary>Get the offset within the level sequence to start playing</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.SetPlaybackRange(System.Single,System.Single)">
            <summary>
            Sets the range in time to be played back by this player, overriding the default range stored in the asset
            @param       NewStartTime    The new starting time for playback
            @param       NewEndTime              The new ending time for playback.  Must be larger than the start time.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.SetPlayRate(System.Single)">
            <summary>
            Set the playback rate of this player. Negative values will play the animation in reverse.
            @param PlayRate - The new rate of playback for the animation.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.GetPlayRate">
            <summary>Get the playback rate of this player.</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.GetLength">
            <summary>Get the playback length of the sequence</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.IsPlaying">
            <summary>Check whether the sequence is actively playing.</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.SetPlaybackPosition(System.Single)">
            <summary>
            Set the current playback position
            @param NewPlaybackPosition - The new playback position to set.
            If the animation is currently playing, it will continue to do so from the new position
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.GetPlaybackPosition">
            <summary>Get the current playback position</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.Stop">
            <summary>Stop playback.</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.Pause">
            <summary>Pause playback.</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.StartPlayingNextTick">
            <summary>Start playback from the current time cursor position, using the current play rate. Does not update the animation until next tick.</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.PlayLooping(System.Int32)">
            <summary>
            Start playback from the current time cursor position, looping the specified number of times.
            @param NumLoops - The number of loops to play. -1 indicates infinite looping.
            </summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.ChangePlaybackDirection">
            <summary>Changes the direction of playback (go in reverse if it was going forward, or vice versa)</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.PlayReverse">
            <summary>Reverse playback.</summary>
        </member>
        <member name="M:UnrealEngine.UMovieSceneSequencePlayer.Play">
            <summary>Start playback forwards from the current time cursor position, using the current play rate.</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationPath.EnableRecalculationOnInvalidation(UnrealEngine.ENavigationOptionFlag)">
            <summary>if enabled path will request recalculation if it gets invalidated due to a change to underlying navigation</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationPath.GetDebugString">
            <summary>UObject end</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.OnNavigationBoundsUpdated(UnrealEngine.ANavMeshBoundsVolume)">
            <summary>@todo document</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.UnregisterNavigationInvoker(UnrealEngine.AActor)">
            <summary>
            Removes given actor from the list of active navigation enforcers.
                @see RegisterNavigationInvoker for more details
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.RegisterNavigationInvoker(UnrealEngine.AActor,System.Single,System.Single)">
            <summary>
            Registers given actor as a "navigation enforcer" which means navigation system will
                make sure navigation is being generated in specified radius around it.
                @note: you need NavigationSystem's GenerateNavigationOnlyAroundNavigationInvokers to be set to true
                        to take advantage of this feature
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.ResetMaxSimultaneousTileGenerationJobsCount">
            <summary>Brings limit of simultaneous navmesh tile generation jobs back to Project Setting's default value</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.SetMaxSimultaneousTileGenerationJobsCount(System.Int32)">
            <summary>
            will limit the number of simultaneously running navmesh tile generation jobs to specified number.
                @param MaxNumberOfJobs gets trimmed to be at least 1. You cannot use this function to pause navmesh generation
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.NavigationRaycast(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector@,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter},UnrealEngine.AController)">
            <summary>
            Performs navigation raycast on NavigationData appropriate for given Querier.
                @param Querier if not passed default navigation data will be used
                @param HitLocation if line was obstructed this will be set to hit location. Otherwise it contains SegmentEnd
                @return true if line from RayStart to RayEnd was obstructed. Also, true when no navigation data present
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.FindPathToActorSynchronously(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.AActor,System.Single,UnrealEngine.AActor,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter})">
            <summary>
            Finds path instantly, in a FindPath Synchronously. Main advantage over FindPathToLocationSynchronously is that
                the resulting path will automatically get updated if goal actor moves more than TetherDistance away from last path node
                @param PathfindingContext could be one of following: NavigationData (like Navmesh actor), Pawn or Controller. This parameter determines parameters of specific pathfinding query
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.FindPathToLocationSynchronously(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.AActor,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter})">
            <summary>
            Finds path instantly, in a FindPath Synchronously.
                @param PathfindingContext could be one of following: NavigationData (like Navmesh actor), Pawn or Controller. This parameter determines parameters of specific pathfinding query
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.GetPathLength(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single@,UnrealEngine.ANavigationData,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter})">
            <summary>Potentially expensive. Use with caution</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.GetPathCost(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector,System.Single@,UnrealEngine.ANavigationData,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter})">
            <summary>Potentially expensive. Use with caution. Consider using UPathFollowingComponent::GetRemainingPathCost instead</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.K2_GetRandomPointInNavigableRadius(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector@,System.Single,UnrealEngine.ANavigationData,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter})">
            <summary>
            Generates a random location in navigable space within given radius of Origin.
                @return Return Value represents if the call was successful
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.K2_GetRandomReachablePointInRadius(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector@,System.Single,UnrealEngine.ANavigationData,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter})">
            <summary>
            Generates a random location reachable from given Origin location.
                @return Return Value represents if the call was successful
            </summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.K2_ProjectPointToNavigation(UnrealEngine.UObject,UnrealEngine.FVector,UnrealEngine.FVector@,UnrealEngine.ANavigationData,UnrealEngine.TSubclassOf{UnrealEngine.UNavigationQueryFilter},UnrealEngine.FVector)">
            <summary>Project a point onto the NavigationData</summary>
        </member>
        <member name="M:UnrealEngine.UNavigationSystem.GetNavigationSystem(UnrealEngine.UObject)">
            <summary>Blueprint functions</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.IsFlying">
            <summary>@return true if currently flying (moving through a non-fluid volume without resting on the ground)</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.IsSwimming">
            <summary>@return true if currently swimming (moving through a fluid volume)</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.IsMovingOnGround">
            <summary>@return true if currently moving on the ground (e.g. walking or driving)</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.IsFalling">
            <summary>@return true if currently falling (not flying, in a non-fluid volume, and not on the ground)</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.IsCrouching">
            <summary>@return true if currently crouching</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.StopMovementKeepPathing">
            <summary>Stops movement immediately (reset velocity) but keeps following current path</summary>
        </member>
        <member name="M:UnrealEngine.UNavMovementComponent.StopActiveMovement">
            <summary>Stops applying further movement (usually zeros acceleration).</summary>
        </member>
        <member name="M:UnrealEngine.UObject.TypeClass(System.Type)">
            <summary>
            ·µ»ØÀàÐÍµÄUClassÀà
            </summary>
            <param name="type">±ØÐë¼Ì³ÐÓÚUObject</param>
            <returns></returns>
        </member>
        <member name="M:UnrealEngine.UObject.TypeClass``1">
            <summary>
            ·µ»Ø·ºÐÍTµÄUClass
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:UnrealEngine.UObject.Cast``1(UnrealEngine.UObject)">
            <summary>
            ÀàÐÍ×ª»»¡£
            ×¢Òâ£ºÈç¹ûT·ÇUMonoActorComponent×ÓÀà£¬Õâ¸ö·½·¨¿ÉÄÜ·µ»ØÐÂ¶ÔÏó¡£
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealEngine.UOnlineBlueprintCallProxyBase.Activate">
            <summary>Called to trigger the actual online action once the delegates have been bound</summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.ClearChildren">
            <summary>Remove all child widgets from the panel widget.</summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.HasAnyChildren">
            <summary>@return true if there are any child widgets in the panel</summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.RemoveChild(UnrealEngine.UWidget)">
            <summary>
            Removes a specific widget from the container.
            @return true if the widget was found and removed.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.AddChild(UnrealEngine.UWidget)">
            <summary>
            Adds a new child widget to the container.  Returns the base slot type,
            requires casting to turn it into the type specific to the container.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.RemoveChildAt(System.Int32)">
            <summary>Removes a child by it's index.</summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.HasChild(UnrealEngine.UWidget)">
            <summary>@return true if panel contains this widget</summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.GetChildIndex(UnrealEngine.UWidget)">
            <summary>Gets the index of a specific child widget</summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.GetChildAt(System.Int32)">
            <summary>
            Gets the widget at an index.
            @param Index The index of the widget.
            @return The widget at the given index, or nothing if there is no widget there.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPanelWidget.GetChildrenCount">
            <summary>Gets number of child widgets in the container.</summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GenerateParticleEvent(System.String,System.Single,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>
            Record a kismet event.
            @param  InEventName                             The name of the event that fired.
            @param  InEmitterTime                   The emitter time when the event fired.
            @param  InLocation                              The location of the particle when the event fired.
            @param  InVelocity                              The velocity of the particle when the event fired.
            @param  InNormal                                Normal vector of the collision in coordinate system of the returner. Zero=none.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetNamedMaterial(System.String)">
            <summary>Returns a named material. If this named material is not found, returns NULL.</summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.CreateNamedDynamicMaterialInstance(System.String,UnrealEngine.UMaterialInterface)">
            <summary>
            Creates a Dynamic Material Instance for the specified named material override, optionally from the supplied material.
            @param Name - The slot name of the material to replace.  If invalid, the material is unchanged and NULL is returned.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetTrailSourceData(System.String,System.String,UnrealEngine.ETrailWidthMode,System.Single)">
            <summary>
            Sets the defining data for all trails in this component.
            @param        InFirstSocketName       The name of the first socket for the trail.
            @param        InSecondSocketName      The name of the second socket for the trail.
            @param        InWidthMode                     How the width value is applied to the trail.
            @param        InWidth                         The width of the trail.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.EndTrails">
            <summary>Ends all trail emitters in this component.</summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.BeginTrails(System.String,System.String,UnrealEngine.ETrailWidthMode,System.Single)">
            <summary>
            Begins all trail emitters in this component.
            @param        InFirstSocketName       The name of the first socket for the trail.
            @param        InSecondSocketName      The name of the second socket for the trail.
            @param        InWidthMode                     How the width value is applied to the trail.
            @param        InWidth                         The width of the trail.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetNumActiveParticles">
            <summary>Get the current number of active particles in this system</summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetTemplate(UnrealEngine.UParticleSystem)">
            <summary>Change the ParticleSystem used by this ParticleSystemComponent</summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetMaterialParameter(System.String,UnrealEngine.UMaterialInterface)">
            <summary>
            Set a named material instance parameter on this ParticleSystemComponent.
            Updates the parameter if it already exists, or creates a new entry if not.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetActorParameter(System.String,UnrealEngine.AActor)">
            <summary>
            Set a named actor instance parameter on this ParticleSystemComponent.
            Updates the parameter if it already exists, or creates a new entry if not.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetColorParameter(System.String,UnrealEngine.FLinearColor)">
            <summary>
            Set a named color instance parameter on this ParticleSystemComponent.
            Updates the parameter if it already exists, or creates a new entry if not.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetVectorParameter(System.String,UnrealEngine.FVector)">
            <summary>
            Set a named vector instance parameter on this ParticleSystemComponent.
            Updates the parameter if it already exists, or creates a new entry if not.
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetFloatParameter(System.String,System.Single)">
            <summary>Change a named float parameter</summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetEmitterEnable(System.String,System.Boolean)">
            <summary>
            Enables/Disables a sub-emitter
            @param  EmitterName                     The name of the sub-emitter to set it on
            @param  bNewEnableState         The value to set it to
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamTargetStrength(System.Int32,System.Int32,System.Single@)">
            <summary>
            Get the beam target strength
            @param  EmitterIndex            The index of the emitter to get
            @param  TargetIndex                     Which beam within the emitter to get
            @param  OutTargetStrength       Value of target tangent
            @return true            EmitterIndex and TargetIndex are valid - OutTargetStrength is valid
                            false           EmitterIndex or TargetIndex is invalid - OutTargetStrength is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamTargetTangent(System.Int32,System.Int32,UnrealEngine.FVector@)">
            <summary>
            Get the beam target tangent
            @param  EmitterIndex            The index of the emitter to get
            @param  TargetIndex                     Which beam within the emitter to get
            @param  OutTangentPoint         Value of target tangent
            @return true            EmitterIndex and TargetIndex are valid - OutTangentPoint is valid
                            false           EmitterIndex or TargetIndex is invalid - OutTangentPoint is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamTargetPoint(System.Int32,System.Int32,UnrealEngine.FVector@)">
            <summary>
            Get the beam target point
            @param  EmitterIndex            The index of the emitter to get
            @param  TargetIndex                     Which beam within the emitter to get
            @param  OutTargetPoint          Value of target point
            @return true            EmitterIndex and TargetIndex are valid - OutTargetPoint is valid
                            false           EmitterIndex or TargetIndex is invalid - OutTargetPoint is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamSourceStrength(System.Int32,System.Int32,System.Single@)">
            <summary>
            Get the beam source strength
            @param  EmitterIndex            The index of the emitter to get
            @param  SourceIndex                     Which beam within the emitter to get
            @param  OutSourceStrength               Value of source tangent
            @return true            EmitterIndex and SourceIndex are valid - OutSourceStrength is valid
                            false           EmitterIndex or SourceIndex is invalid - OutSourceStrength is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamSourceTangent(System.Int32,System.Int32,UnrealEngine.FVector@)">
            <summary>
            Get the beam source tangent
            @param  EmitterIndex            The index of the emitter to get
            @param  SourceIndex                     Which beam within the emitter to get
            @param  OutTangentPoint         Value of source tangent
            @return true            EmitterIndex and SourceIndex are valid - OutTangentPoint is valid
                            false           EmitterIndex or SourceIndex is invalid - OutTangentPoint is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamSourcePoint(System.Int32,System.Int32,UnrealEngine.FVector@)">
            <summary>
            Get the beam source point
            @param  EmitterIndex            The index of the emitter to get
            @param  SourceIndex                     Which beam within the emitter to get
            @param  OutSourcePoint          Value of source point
            @return true            EmitterIndex and SourceIndex are valid - OutSourcePoint is valid
                            false           EmitterIndex or SourceIndex is invalid - OutSourcePoint is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.GetBeamEndPoint(System.Int32,UnrealEngine.FVector@)">
            <summary>
            Get the beam end point
            @param  EmitterIndex            The index of the emitter to get the value of
            @return true            EmitterIndex is valid and End point is set - OutEndPoint is valid
                            false           EmitterIndex invalid or End point is not set - OutEndPoint is invalid
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamTargetStrength(System.Int32,System.Single,System.Int32)">
            <summary>
            Set the beam target strength
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewTargetStrength       The value to set it to
            @param  TargetIndex                     Which beam within the emitter to set it on
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamTargetTangent(System.Int32,UnrealEngine.FVector,System.Int32)">
            <summary>
            Set the beam target tangent
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewTangentPoint         The value to set it to
            @param  TargetIndex                     Which beam within the emitter to set it on
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamTargetPoint(System.Int32,UnrealEngine.FVector,System.Int32)">
            <summary>
            Set the beam target point
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewTargetPoint          The value to set it to
            @param  TargetIndex                     Which beam within the emitter to set it on
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamSourceStrength(System.Int32,System.Single,System.Int32)">
            <summary>
            Set the beam source strength
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewSourceStrength       The value to set it to
            @param  SourceIndex                     Which beam within the emitter to set it on
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamSourceTangent(System.Int32,UnrealEngine.FVector,System.Int32)">
            <summary>
            Set the beam source tangent
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewTangentPoint         The value to set it to
            @param  SourceIndex                     Which beam within the emitter to set it on
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamSourcePoint(System.Int32,UnrealEngine.FVector,System.Int32)">
            <summary>
            Set the beam source point
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewSourcePoint          The value to set it to
            @param  SourceIndex                     Which beam within the emitter to set it on
            </summary>
        </member>
        <member name="M:UnrealEngine.UParticleSystemComponent.SetBeamEndPoint(System.Int32,UnrealEngine.FVector)">
            <summary>
            Set the beam end point
            @param  EmitterIndex            The index of the emitter to set it on
            @param  NewEndPoint                     The value to set it to
            </summary>
        </member>
        <member name="M:UnrealEngine.UPawnMovementComponent.GetPawnOwner">
            <summary>Return the Pawn that owns UpdatedComponent.</summary>
        </member>
        <member name="M:UnrealEngine.UPawnMovementComponent.IsMoveInputIgnored">
            <summary>Helper to see if move input is ignored. If there is no Pawn or UpdatedComponent, returns true, otherwise defers to the Pawn's implementation of IsMoveInputIgnored().</summary>
        </member>
        <member name="M:UnrealEngine.UPawnMovementComponent.ConsumeInputVector">
            <summary>
            Returns the pending input vector and resets it to zero.
                   * This should be used during a movement update (by the Pawn or PawnMovementComponent) to prevent accumulation of control input between frames.
                   * Copies the pending input vector to the saved input vector (GetLastMovementInputVector()).
                   * @return The pending input vector.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPawnMovementComponent.GetLastInputVector">
            <summary>
            Return the last input vector in world space that was processed by ConsumeInputVector(), which is usually done by the Pawn or PawnMovementComponent.
            Any user that needs to know about the input that last affected movement should use this function.
            @return The last input vector in world space that was processed by ConsumeInputVector().
            @see AddInputVector(), ConsumeInputVector(), GetPendingInputVector()
            </summary>
        </member>
        <member name="M:UnrealEngine.UPawnMovementComponent.GetPendingInputVector">
            <summary>
            Return the pending input vector in world space. This is the most up-to-date value of the input vector, pending ConsumeMovementInputVector() which clears it.
            PawnMovementComponents implementing movement usually want to use either this or ConsumeInputVector() as these functions represent the most recent state of input.
            @return The pending input vector in world space.
            @see AddInputVector(), ConsumeInputVector(), GetLastInputVector()
            </summary>
        </member>
        <member name="M:UnrealEngine.UPawnMovementComponent.AddInputVector(UnrealEngine.FVector,System.Boolean)">
            <summary>
            Adds the given vector to the accumulated input in world space. Input vectors are usually between 0 and 1 in magnitude.
            They are accumulated during a frame then applied as acceleration during the movement update.
            @param WorldDirection        Direction in world space to apply input
            @param ScaleValue            Scale to apply to input. This can be used for analog input, ie a value of 0.5 applies half the normal value.
            @param bForce                        If true always add the input, ignoring the result of IsMoveInputIgnored().
            @see APawn::AddMovementInput()
            </summary>
        </member>
        <member name="M:UnrealEngine.UPawnNoiseEmitterComponent.MakeNoise(UnrealEngine.AActor,System.Single,UnrealEngine.FVector)">
            <summary>
            Cache noises instigated by the owning pawn for AI sensing
            @param NoiseMaker - is the actual actor which made the noise
            @param Loudness - is the relative loudness of the noise (0.0 to 1.0)
            @param NoiseLocation - is the position of the noise
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicalAnimationComponent.GetBodyTargetTransform(System.String)">
            <summary>Returns the target transform for the given body. If physical animation component is not controlling this body, returns its current transform.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Applies the physical animation profile to the body given and all bodies below.
            @param  BodyName                     The body from which we'd like to start applying the physical animation profile. Finds all bodies below in the skeleton hierarchy. None implies all bodies
            @param  ProfileName          The physical animation profile we'd like to apply. For each body in the physics asset we search for physical animation settings with this name.
            @param  bIncludeSelf         Whether to include the provided body name in the list of bodies we act on (useful to ignore for cases where a root has multiple children)
            @param  bClearNotFound       If true, bodies without the given profile name will have any existing physical animation settings cleared. If false, bodies without the given profile name are left untouched.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicalAnimationComponent.SetStrengthMultiplyer(System.Single)">
            <summary>Updates strength multiplyer and any active motors</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow(System.String,UnrealEngine.FPhysicalAnimationData,System.Boolean)">
            <summary>Applies the physical animation settings to the body given and all bodies below.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicalAnimationComponent.ApplyPhysicalAnimationSettings(System.String,UnrealEngine.FPhysicalAnimationData)">
            <summary>Applies the physical animation settings to the body given.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicalAnimationComponent.SetSkeletalMeshComponent(UnrealEngine.USkeletalMeshComponent)">
            <summary>Sets the skeletal mesh we are driving through physical animation. Will erase any existing physical animation data.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.GetConstraintForce(UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Retrieve the constraint force most recently applied to maintain this constraint. Returns 0 forces if the constraint is not initialized or broken.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetDisableCollision(System.Boolean)">
            <summary>If true, the collision between the two rigid bodies of the constraint will be disabled.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetConstraintReferenceOrientation(UnrealEngine.EConstraintFrame,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Pass in reference orientation in (maintains reference position). If the constraint is currently active, this will set its active local pose. Otherwise the change will take affect in InitConstraint.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetConstraintReferencePosition(UnrealEngine.EConstraintFrame,UnrealEngine.FVector)">
            <summary>Pass in reference position in (maintains reference orientation). If the constraint is currently active, this will set its active local pose. Otherwise the change will take affect in InitConstraint.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetConstraintReferenceFrame(UnrealEngine.EConstraintFrame,UnrealEngine.FTransform)">
            <summary>Pass in reference frame in. If the constraint is currently active, this will set its active local pose. Otherwise the change will take affect in InitConstraint.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.GetCurrentSwing2">
            <summary>Gets the current Swing2 of the constraint</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.GetCurrentSwing1">
            <summary>Gets the current Swing1 of the constraint</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.GetCurrentTwist">
            <summary>Gets the current Angular Twist of the constraint</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularTwistLimit(UnrealEngine.EAngularConstraintMotion,System.Single)">
            <summary>
            Sets the Angular Twist Motion Type
                 @param ConstraintType   New Constraint Type
                 @param TwistLimitAngle  Size of limit in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularSwing2Limit(UnrealEngine.EAngularConstraintMotion,System.Single)">
            <summary>
            Sets the Angular Swing2 Motion Type
                 @param ConstraintType   New Constraint Type
                 @param Swing2LimitAngle Size of limit in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularSwing1Limit(UnrealEngine.EAngularConstraintMotion,System.Single)">
            <summary>
            Sets the Angular Swing1 Motion Type
                 @param ConstraintType   New Constraint Type
                 @param Swing1LimitAngle Size of limit in degrees
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearZLimit(UnrealEngine.ELinearConstraintMotion,System.Single)">
            <summary>
            Sets the LinearZ Motion Type
                 @param ConstraintType   New Constraint Type
                 @param LimitSize                Size of limit
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearYLimit(UnrealEngine.ELinearConstraintMotion,System.Single)">
            <summary>
            Sets the LinearY Motion Type
                 @param ConstraintType   New Constraint Type
                 @param LimitSize                Size of limit
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearXLimit(UnrealEngine.ELinearConstraintMotion,System.Single)">
            <summary>
            Sets the LinearX Motion Type
                 @param ConstraintType   New Constraint Type
                 @param LimitSize                Size of limit
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularDriveParams(System.Single,System.Single,System.Single)">
            <summary>
            Sets the drive params for the angular drive.
                @param PositionStrength         Positional strength for the drive (stiffness)
                @param VelocityStrength         Velocity strength of the drive (damping)
                @param InForceLimit     Max force applied by the drive
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularVelocityTarget(UnrealEngine.FVector)">
            <summary>
            Sets the target velocity for the angular drive.
                @param InVelTarget              Target velocity
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularOrientationTarget(UnrealEngine.FRotator)">
            <summary>
            Sets the target orientation for the angular drive.
                @param InPosTarget              Target orientation
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearDriveParams(System.Single,System.Single,System.Single)">
            <summary>
            Sets the drive params for the linear drive.
                @param PositionStrength         Positional strength for the drive (stiffness)
                @param VelocityStrength         Velocity strength of the drive (damping)
                @param InForceLimit     Max force applied by the drive
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearVelocityTarget(UnrealEngine.FVector)">
            <summary>
            Sets the target velocity for the linear drive.
                @param InVelTarget              Target velocity
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearPositionTarget(UnrealEngine.FVector)">
            <summary>
            Sets the target position for the linear drive.
                @param InPosTarget              Target position
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularDriveMode(UnrealEngine.EAngularDriveMode)">
            <summary>
            Switches the angular drive mode between SLERP and Twist And Swing
                 @param DriveMode        The angular drive mode to use. SLERP uses shortest spherical path, but will not work if any angular constraints are locked. Twist and Swing decomposes the path into the different angular degrees of freedom but may experience gimbal lock
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularVelocityDriveSLERP(System.Boolean)">
            <summary>
            Enables/Disables the angular velocity slerp drive. Only relevant if the AngularDriveMode is set to SLERP
                 @param bEnableSLERP             Indicates whether the SLERP drive should be enabled. Only relevant if the AngularDriveMode is set to SLERP
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing(System.Boolean,System.Boolean)">
            <summary>
            Enables/Disables angular velocity twist and swing drive. Only relevant if the AngularDriveMode is set to Twist and Swing
                 @param bEnableSwingDrive        Indicates whether the drive for the swing axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing
                 @param bEnableTwistDrive        Indicates whether the drive for the twist axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetOrientationDriveSLERP(System.Boolean)">
            <summary>
            Enables/Disables the angular orientation slerp drive. Only relevant if the AngularDriveMode is set to SLERP
                 @param bEnableSLERP             Indicates whether the SLERP drive should be enabled. Only relevant if the AngularDriveMode is set to SLERP
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetOrientationDriveTwistAndSwing(System.Boolean,System.Boolean)">
            <summary>
            Enables/Disables angular orientation drive. Only relevant if the AngularDriveMode is set to Twist and Swing
                 @param bEnableSwingDrive        Indicates whether the drive for the swing axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing
                 @param bEnableTwistDrive        Indicates whether the drive for the twist axis should be enabled. Only relevant if the AngularDriveMode is set to Twist and Swing
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearVelocityDrive(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enables/Disables linear position drive
                @param bEnableDriveX    Indicates whether the drive for the X-Axis should be enabled
                @param bEnableDriveY    Indicates whether the drive for the Y-Axis should be enabled
                @param bEnableDriveZ    Indicates whether the drive for the Z-Axis should be enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetLinearPositionDrive(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Enables/Disables linear position drive
                @param bEnableDriveX    Indicates whether the drive for the X-Axis should be enabled
                @param bEnableDriveY    Indicates whether the drive for the Y-Axis should be enabled
                @param bEnableDriveZ    Indicates whether the drive for the Z-Axis should be enabled
            </summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.BreakConstraint">
            <summary>Break this constraint</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsConstraintComponent.SetConstrainedComponents(UnrealEngine.UPrimitiveComponent,System.String,UnrealEngine.UPrimitiveComponent,System.String)">
            <summary>Directly specify component to connect. Will update frames based on current position.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetInterpolationSpeed(System.Single)">
            <summary>Set interpolation speed</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetAngularStiffness(System.Single)">
            <summary>Set angular stiffness</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetAngularDamping(System.Single)">
            <summary>Set angular damping</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetLinearStiffness(System.Single)">
            <summary>Set linear stiffness</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetLinearDamping(System.Single)">
            <summary>Set linear damping</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.GetTargetLocationAndRotation(UnrealEngine.FVector@,UnrealEngine.FRotator@)">
            <summary>Get the current location and rotation</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetTargetLocationAndRotation(UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>Set target location and rotation</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetTargetRotation(UnrealEngine.FRotator)">
            <summary>Set the target rotation</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.SetTargetLocation(UnrealEngine.FVector)">
            <summary>Set the target location</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.GetGrabbedComponent">
            <summary>Returns the currently grabbed component, or null if nothing is grabbed.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.ReleaseComponent">
            <summary>Release the currently held component</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.GrabComponentAtLocationWithRotation(UnrealEngine.UPrimitiveComponent,System.String,UnrealEngine.FVector,UnrealEngine.FRotator)">
            <summary>Grab the specified component at a given location and rotation. Constrains rotation.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsHandleComponent.GrabComponentAtLocation(UnrealEngine.UPrimitiveComponent,System.String,UnrealEngine.FVector)">
            <summary>Grab the specified component at a given location. Does NOT constraint rotation which means the handle will pivot about GrabLocation.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsSpringComponent.GetSpringDirection">
            <summary>Returns the spring direction from start to resting point</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsSpringComponent.GetSpringCurrentEndPoint">
            <summary>Returns the spring current end point in world space.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsSpringComponent.GetSpringRestingPoint">
            <summary>Returns the spring resting point in world space.</summary>
        </member>
        <member name="M:UnrealEngine.UPhysicsSpringComponent.GetNormalizedCompressionScalar">
            <summary>
            Returns the spring compression as a normalized scalar along spring direction.
            0 implies spring is at rest
            1 implies fully compressed
            </summary>
        </member>
        <member name="M:UnrealEngine.UPlatformEventsComponent.SupportsConvertibleLaptops">
            <summary>
            Check whether the platform supports convertible laptops.
            Note: This does not necessarily mean that the platform is a convertible laptop.
            For example, convertible laptops running Windows 7 or older will return false,
            and regular laptops running Windows 8 or newer will return true.
            @return true for convertible laptop platforms, false otherwise.
            @see IsInLaptopMode, IsInTabletMode
            </summary>
        </member>
        <member name="M:UnrealEngine.UPlatformEventsComponent.IsInTabletMode">
            <summary>
            Check whether a convertible laptop is laptop mode.
            @return true if in tablet mode, false otherwise or if not a convertible laptop.
            @see IsInLaptopMode, SupportsConvertibleLaptops
            </summary>
        </member>
        <member name="M:UnrealEngine.UPlatformEventsComponent.IsInLaptopMode">
            <summary>
            Check whether a convertible laptop is laptop mode.
            @return true if in laptop mode, false otherwise or if not a convertible laptop.
            @see IsInTabletMode, SupportsConvertibleLaptops
            </summary>
        </member>
        <member name="M:UnrealEngine.UPlatformInterfaceWebResponse.GetHeaderValue(System.String)">
            <summary>@return the value for the given header (or "" if no matching header)</summary>
        </member>
        <member name="M:UnrealEngine.UPlatformInterfaceWebResponse.GetHeader(System.Int32,System.String@,System.String@)">
            <summary>Retrieve the header and value for the given index of header/value pair</summary>
        </member>
        <member name="M:UnrealEngine.UPlatformInterfaceWebResponse.GetNumHeaders">
            <summary>@return the number of header/value pairs</summary>
        </member>
        <member name="M:UnrealEngine.UPlayerInput.ClearSmoothing">
            <summary>Exec function to reset mouse smoothing values</summary>
        </member>
        <member name="M:UnrealEngine.UPlayerInput.InvertAxis(System.String)">
            <summary>Exec function to invert an axis mapping</summary>
        </member>
        <member name="M:UnrealEngine.UPlayerInput.InvertAxisKey(UnrealEngine.FKey)">
            <summary>Exec function to invert an axis key</summary>
        </member>
        <member name="M:UnrealEngine.UPlayerInput.SetBind(System.String,System.String)">
            <summary>Exec function to add a debug exec command</summary>
        </member>
        <member name="M:UnrealEngine.UPlayerInput.SetMouseSensitivity(System.Single)">
            <summary>Exec function to change the mouse sensitivity</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.CanCharacterStepUp(UnrealEngine.APawn)">
            <summary>
            Return true if the given Pawn can step up onto this component.
            This controls whether they can try to step up on it when they bump in to it, not whether they can walk on it after landing on it.
            @param Pawn the Pawn that wants to step onto this component.
            @see CanCharacterStepUpOn
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCullDistance(System.Single)">
            <summary>
            Changes the value of CullDistance.
            @param NewCullDistance - The value to assign to CullDistance.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetPhysMaterialOverride(UnrealEngine.UPhysicalMaterial)">
            <summary>
            Changes the current PhysMaterialOverride for this component.
            Note that if physics is already running on this component, this will _not_ alter its mass/inertia etc,
            it will only change its surface properties like friction.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCollisionResponseToAllChannels(UnrealEngine.ECollisionResponse)">
            <summary>
            Changes all ResponseToChannels container for this PrimitiveComponent. to be NewResponse
            @param       NewResponse  What the new response should be to the supplied Channel
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCollisionResponseToChannel(UnrealEngine.ECollisionChannel,UnrealEngine.ECollisionResponse)">
            <summary>
            Changes a member of the ResponseToChannels container for this PrimitiveComponent.
            @param       Channel      The channel to change the response of
            @param       NewResponse  What the new response should be to the supplied Channel
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.IsAnyRigidBodyAwake">
            <summary>Returns if any body in this component is currently awake and simulating.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.ScaleByMomentOfInertia(UnrealEngine.FVector,System.String)">
            <summary>Scales the given vector by the world space moment of inertia. Useful for computing the torque needed to rotate an object.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetInertiaTensor(System.String)">
            <summary>Returns the inertia tensor of this component in kg cm^2. The inertia tensor is in local component space.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetMass">
            <summary>Returns the mass of this component in kg.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetMassOverrideInKg(System.String,System.Single,System.Boolean)">
            <summary>
            Override the mass (in Kg) of a single physics body.
            Note that in the case where multiple bodies are attached together, the override mass will be set for the entire group.
            Set the Override Mass to false if you want to reset the body's mass to the auto-calculated physx mass.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetAllMassScale(System.Single)">
            <summary>Change the mass scale used fo all bodies in this component</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetMassScale(System.String)">
            <summary>Returns the mass scale used to calculate the mass of a single physics body</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetMassScale(System.String,System.Single)">
            <summary>Change the mass scale used to calculate the mass of a single physics body</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetAngularDamping">
            <summary>Returns the angular damping of this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetAngularDamping(System.Single)">
            <summary>Sets the angular damping of this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetLinearDamping">
            <summary>Returns the linear damping of this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetLinearDamping(System.Single)">
            <summary>Sets the linear damping of this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.IsGravityEnabled">
            <summary>Returns whether this component is affected by gravity. Returns always false if the component is not simulated.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetEnableGravity(System.Boolean)">
            <summary>Enables/disables whether this component is affected by gravity. This applies only to components with bSimulatePhysics set to true.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.WakeAllRigidBodies">
            <summary>Ensure simulation is running for all bodies in this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetAllPhysicsAngularVelocity(UnrealEngine.FVector,System.Boolean)">
            <summary>
            Set the angular velocity of all bodies in this component.
            @param NewAngVel                New angular velocity to apply to physics, in degrees per second.
            @param bAddToCurrent    If true, NewAngVel is added to the existing angular velocity of all bodies.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetCollisionObjectType">
            <summary>Gets the collision object type</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetCollisionResponseToChannel(UnrealEngine.ECollisionChannel)">
            <summary>Gets the response type given a specific channel</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.K2_IsPhysicsCollisionEnabled">
            <summary>Utility to see if there is any physics collision enabled on this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.K2_IsQueryCollisionEnabled">
            <summary>Utility to see if there is any query collision enabled on this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.K2_IsCollisionEnabled">
            <summary>Utility to see if there is any form of collision (query or physics) enabled on this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetCollisionEnabled">
            <summary>Returns the form of collision for this component</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.UPrimitiveComponent.GetClosestPointOnCollision(UnrealEngine.FVector,UnrealEngine.FVector@,System.String)" -->
        <member name="M:UnrealEngine.UPrimitiveComponent.GetNumMaterials">
            <summary>@return number of material elements in this primitive</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetRenderInMono(System.Boolean)">
            <summary>Sets bRenderInMono property and marks the render state dirty.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetRenderInMainPass(System.Boolean)">
            <summary>Sets bRenderInMainPass property and marks the render state dirty.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCustomDepthStencilValue(System.Int32)">
            <summary>Sets the CustomDepth stencil value (0 - 255) and marks the render state dirty.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetRenderCustomDepth(System.Boolean)">
            <summary>Sets the bRenderCustomDepth property and marks the render state dirty.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.K2_LineTraceComponent(UnrealEngine.FVector,UnrealEngine.FVector,System.Boolean,System.Boolean,UnrealEngine.FVector@,UnrealEngine.FVector@,System.String@,UnrealEngine.FHitResult@)">
            <summary>Perform a line trace against a single component</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCollisionObjectType(UnrealEngine.ECollisionChannel)">
            <summary>
            Changes the collision channel that this object uses when it moves
            @param      Channel     The new channel for this component to use
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetCollisionProfileName">
            <summary>Get the collision profile name</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCollisionProfileName(System.String)">
            <summary>
            Set Collision Profile Name
            This function is called by constructors when they set ProfileName
            This will change current CollisionProfileName to be this, and overwrite Collision Setting
            @param InCollisionProfileName : New Profile Name
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCollisionEnabled(UnrealEngine.ECollisionEnabled)">
            <summary>Controls what kind of collision is enabled for this body</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetTranslucentSortPriority(System.Int32)">
            <summary>Changes the value of TranslucentSortPriority.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCastShadow(System.Boolean)">
            <summary>Changes the value of CastShadow.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetOnlyOwnerSee(System.Boolean)">
            <summary>Changes the value of bOnlyOwnerSee.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetOwnerNoSee(System.Boolean)">
            <summary>Changes the value of bOwnerNoSee.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetNotifyRigidBodyCollision(System.Boolean)">
            <summary>
            Changes the value of bNotifyRigidBodyCollision
            @param bNewNotifyRigidBodyCollision - The value to assign to bNotifyRigidBodyCollision
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.PutRigidBodyToSleep(System.String)">
            <summary>
            Force a single body back to sleep.
            @param  BoneName        If a SkeletalMeshComponent, name of body to put to sleep. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.WakeRigidBody(System.String)">
            <summary>
            'Wake' physics simulation for a single body.
            @param  BoneName        If a SkeletalMeshComponent, name of body to wake. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetCenterOfMass(UnrealEngine.FVector,System.String)">
            <summary>
            Set the center of mass of a single body. This will offset the physx-calculated center of mass.
            Note that in the case where multiple bodies are attached together, the center of mass will be set for the entire group.
            @param CenterOfMassOffset               User specified offset for the center of mass of this object, from the calculated location.
            @param BoneName                 If a SkeletalMeshComponent, name of body to set center of mass of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetCenterOfMass(System.String)">
            <summary>
            Get the center of mass of a single body. In the case of a welded body this will return the center of mass of the entire welded body (including its parent and children)
            Objects that are not simulated return (0,0,0) as they do not have COM
            @param BoneName                 If a SkeletalMeshComponent, name of body to get center of mass of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetPhysicsAngularVelocity(System.String)">
            <summary>
            Get the angular velocity of a single body, in degrees per second.
            @param BoneName                 If a SkeletalMeshComponent, name of body to get velocity of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetPhysicsMaxAngularVelocity(System.Single,System.Boolean,System.String)">
            <summary>
            Set the maximum angular velocity of a single body.
            @param NewMaxAngVel             New maximum angular velocity to apply to body, in degrees per second.
            @param bAddToCurrent    If true, NewMaxAngVel is added to the existing maximum angular velocity of the body.
            @param BoneName                 If a SkeletalMeshComponent, name of body to modify maximum angular velocity of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetPhysicsAngularVelocity(UnrealEngine.FVector,System.Boolean,System.String)">
            <summary>
            Set the angular velocity of a single body.
            This should be used cautiously - it may be better to use AddTorque or AddImpulse.
            @param NewAngVel                New angular velocity to apply to body, in degrees per second.
            @param bAddToCurrent    If true, NewAngVel is added to the existing angular velocity of the body.
            @param BoneName                 If a SkeletalMeshComponent, name of body to modify angular velocity of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetAllPhysicsLinearVelocity(UnrealEngine.FVector,System.Boolean)">
            <summary>
            Set the linear velocity of all bodies in this component.
            @param NewVel                   New linear velocity to apply to physics.
            @param bAddToCurrent    If true, NewVel is added to the existing velocity of the body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetPhysicsLinearVelocityAtPoint(UnrealEngine.FVector,System.String)">
            <summary>
            Get the linear velocity of a point on a single body.
            @param Point                    Point is specified in world space.
            @param BoneName                 If a SkeletalMeshComponent, name of body to get velocity of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetPhysicsLinearVelocity(System.String)">
            <summary>
            Get the linear velocity of a single body.
            @param BoneName                 If a SkeletalMeshComponent, name of body to get velocity of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetPhysicsLinearVelocity(UnrealEngine.FVector,System.Boolean,System.String)">
            <summary>
            Set the linear velocity of a single body.
            This should be used cautiously - it may be better to use AddForce or AddImpulse.
            @param NewVel                   New linear velocity to apply to physics.
            @param bAddToCurrent    If true, NewVel is added to the existing velocity of the body.
            @param BoneName                 If a SkeletalMeshComponent, name of body to modify velocity of. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddTorque(UnrealEngine.FVector,System.String,System.Boolean)">
            <summary>
            Add a torque to a single rigid body.
            @param Torque           Torque to apply. Direction is axis of rotation and magnitude is strength of torque.
            @param BoneName         If a SkeletalMeshComponent, name of body to apply torque to. 'None' indicates root body.
            @param bAccelChange If true, Torque is taken as a change in angular acceleration instead of a physical torque (i.e. mass will have no affect).
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddRadialForce(UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.ERadialImpulseFalloff,System.Boolean)">
            <summary>
            Add a force to all bodies in this component, originating from the supplied world-space location.
            @param Origin           Origin of force in world space.
            @param Radius           Radius within which to apply the force.
            @param Strength         Strength of force to apply.
            @param Falloff              Allows you to control the strength of the force as a function of distance from Origin.
            @param bAccelChange If true, Strength is taken as a change in acceleration instead of a physical force (i.e. mass will have no affect).
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddForceAtLocationLocal(UnrealEngine.FVector,UnrealEngine.FVector,System.String)">
            <summary>
            Add a force to a single rigid body at a particular location. Both Force and Location should be in body space.
            This is like a 'thruster'. Good for adding a burst over some (non zero) time. Should be called every frame for the duration of the force.
            @param Force            Force vector to apply. Magnitude indicates strength of force.
            @param Location         Location to apply force, in component space.
            @param BoneName         If a SkeletalMeshComponent, name of body to apply force to. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddForceAtLocation(UnrealEngine.FVector,UnrealEngine.FVector,System.String)">
            <summary>
            Add a force to a single rigid body at a particular location in world space.
            This is like a 'thruster'. Good for adding a burst over some (non zero) time. Should be called every frame for the duration of the force.
            @param Force            Force vector to apply. Magnitude indicates strength of force.
            @param Location         Location to apply force, in world space.
            @param BoneName         If a SkeletalMeshComponent, name of body to apply force to. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddForce(UnrealEngine.FVector,System.String,System.Boolean)">
            <summary>
            Add a force to a single rigid body.
            This is like a 'thruster'. Good for adding a burst over some (non zero) time. Should be called every frame for the duration of the force.
            @param  Force            Force vector to apply. Magnitude indicates strength of force.
            @param  BoneName         If a SkeletalMeshComponent, name of body to apply force to. 'None' indicates root body.
            @param  bAccelChange If true, Force is taken as a change in acceleration instead of a physical force (i.e. mass will have no affect).
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddRadialImpulse(UnrealEngine.FVector,System.Single,System.Single,UnrealEngine.ERadialImpulseFalloff,System.Boolean)">
            <summary>
            Add an impulse to all rigid bodies in this component, radiating out from the specified position.
            @param Origin                Point of origin for the radial impulse blast, in world space
            @param Radius                Size of radial impulse. Beyond this distance from Origin, there will be no affect.
            @param Strength              Maximum strength of impulse applied to body.
            @param Falloff               Allows you to control the strength of the impulse as a function of distance from Origin.
            @param bVelChange    If true, the Strength is taken as a change in velocity instead of an impulse (ie. mass will have no affect).
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddImpulseAtLocation(UnrealEngine.FVector,UnrealEngine.FVector,System.String)">
            <summary>
            Add an impulse to a single rigid body at a specific location.
            @param  Impulse         Magnitude and direction of impulse to apply.
            @param  Location        Point in world space to apply impulse at.
            @param  BoneName        If a SkeletalMeshComponent, name of bone to apply impulse to. 'None' indicates root body.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddAngularImpulse(UnrealEngine.FVector,System.String,System.Boolean)">
            <summary>
            Add an angular impulse to a single rigid body. Good for one time instant burst.
            @param  AngularImpulse  Magnitude and direction of impulse to apply. Direction is axis of rotation.
            @param  BoneName        If a SkeletalMeshComponent, name of body to apply angular impulse to. 'None' indicates root body.
            @param  bVelChange      If true, the Strength is taken as a change in angular velocity instead of an impulse (ie. mass will have no affect).
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.AddImpulse(UnrealEngine.FVector,System.String,System.Boolean)">
            <summary>
            Add an impulse to a single rigid body. Good for one time instant burst.
            @param  Impulse         Magnitude and direction of impulse to apply.
            @param  BoneName        If a SkeletalMeshComponent, name of body to apply impulse to. 'None' indicates root body.
            @param  bVelChange      If true, the Strength is taken as a change in velocity instead of an impulse (ie. mass will have no affect).
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetConstraintMode(UnrealEngine.EDOFMode)">
            <summary>
            Sets the constraint mode of the component.
            @param ConstraintMode        The type of constraint to use.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetSimulatePhysics(System.Boolean)">
            <summary>
            Sets whether or not a single body should use physics simulation, or should be 'fixed' (kinematic).
            @param  bSimulate       New simulation state for single body
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetWalkableSlopeOverride(UnrealEngine.FWalkableSlopeOverride)">
            <summary>Sets a new slope override for this component instance.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetWalkableSlopeOverride">
            <summary>Returns the slope override struct for this component.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetMaterialFromCollisionFaceIndex(System.Int32)">
            <summary>Try and retrieve the material applied to a particular collision face of mesh. Used with face index returned from collision trace.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.CreateDynamicMaterialInstance(System.Int32,UnrealEngine.UMaterialInterface)">
            <summary>
            Creates a Dynamic Material Instance for the specified element index, optionally from the supplied material.
            @param ElementIndex - The index of the skin to replace the material for.  If invalid, the material is unchanged and NULL is returned.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetMaterialByName(System.String,UnrealEngine.UMaterialInterface)">
            <summary>
            Changes the material applied to an element of the mesh.
            @param MaterialSlotName - The slot name to access the material of.
            @return the material used by the indexed element of this mesh.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetMaterial(System.Int32,UnrealEngine.UMaterialInterface)">
            <summary>
            Changes the material applied to an element of the mesh.
            @param ElementIndex - The element to access the material of.
            @return the material used by the indexed element of this mesh.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetMaterial(System.Int32)">
            <summary>
            Returns the material used by the element at the specified index
            @param ElementIndex - The element to access the material of.
            @return the material used by the indexed element of this mesh.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.SetBoundsScale(System.Single)">
            <summary>Scale the bounds of this object, used for frustum culling. Useful for features like WorldPositionOffset.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetOverlapInfos">
            <summary>Returns list of components this component is overlapping.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetOverlappingComponents(UnrealEngine.UPrimitiveComponent[]@)">
            <summary>Returns list of components this component is overlapping.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.GetOverlappingActors(UnrealEngine.AActor[]@,UnrealEngine.TSubclassOf{UnrealEngine.AActor})">
            <summary>
            Returns a list of actors that this component is overlapping.
            @param OverlappingActors             [out] Returned list of overlapping actors
            @param ClassFilter                   [optional] If set, only returns actors of this class or subclasses
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.IsOverlappingActor(UnrealEngine.AActor)">
            <summary>
            Check whether this component is overlapping any component of the given Actor.
            @param Other Actor to test this component against.
            @return Whether this component is overlapping any component of the given Actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.IsOverlappingComponent(UnrealEngine.UPrimitiveComponent)">
            <summary>
            Check whether this component is overlapping another component.
            @param OtherComp Component to test this component against.
            @return Whether this component is overlapping another component.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.ClearMoveIgnoreComponents">
            <summary>Clear the list of components we ignore when moving.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.CopyArrayOfMoveIgnoreComponents">
            <summary>Returns the list of actors we currently ignore when moving.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.IgnoreComponentWhenMoving(UnrealEngine.UPrimitiveComponent,System.Boolean)">
            <summary>
            Tells this component whether to ignore collision with another component when this component is moved.
            The other components may also need to be told to do the same when they move.
            Does not affect movement of this component when simulating physics.
            </summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.ClearMoveIgnoreActors">
            <summary>Clear the list of actors we ignore when moving.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.CopyArrayOfMoveIgnoreActors">
            <summary>Returns the list of actors we currently ignore when moving.</summary>
        </member>
        <member name="M:UnrealEngine.UPrimitiveComponent.IgnoreActorWhenMoving(UnrealEngine.AActor,System.Boolean)">
            <summary>
            Tells this component whether to ignore collision with all components of a specific Actor when this component is moved.
            Components on the other Actor may also need to be told to do the same when they move.
            Does not affect movement of this component when simulating physics.
            </summary>
        </member>
        <member name="M:UnrealEngine.UProgressBar.SetIsMarquee(System.Boolean)">
            <summary>Sets the progress bar to show as a marquee.</summary>
        </member>
        <member name="M:UnrealEngine.UProgressBar.SetFillColorAndOpacity(UnrealEngine.FLinearColor)">
            <summary>Sets the fill color of the progress bar.</summary>
        </member>
        <member name="M:UnrealEngine.UProgressBar.SetPercent(System.Single)">
            <summary>Sets the current value of the ProgressBar.</summary>
        </member>
        <member name="M:UnrealEngine.UProjectileMovementComponent.StopSimulating(UnrealEngine.FHitResult)">
            <summary>Clears the reference to UpdatedComponent, fires stop event (OnProjectileStop), and stops ticking (if bAutoUpdateTickRegistration is true).</summary>
        </member>
        <member name="M:UnrealEngine.UProjectileMovementComponent.SetVelocityInLocalSpace(UnrealEngine.FVector)">
            <summary>Sets the velocity to the new value, rotated into Actor space.</summary>
        </member>
        <member name="M:UnrealEngine.URadialForceComponent.RemoveObjectTypeToAffect(UnrealEngine.EObjectTypeQuery)">
            <summary>Remove an object type that is affected by this radial force</summary>
        </member>
        <member name="M:UnrealEngine.URadialForceComponent.AddObjectTypeToAffect(UnrealEngine.EObjectTypeQuery)">
            <summary>Add an object type for this radial force to affect</summary>
        </member>
        <member name="M:UnrealEngine.URadialForceComponent.FireImpulse">
            <summary>Fire a single impulse</summary>
        </member>
        <member name="M:UnrealEngine.URetainerBox.SetTextureParameter(System.String)">
            <summary>Sets the name of the texture parameter to set the render target to on the material.</summary>
        </member>
        <member name="M:UnrealEngine.URetainerBox.SetEffectMaterial(UnrealEngine.UMaterialInterface)">
            <summary>Set a new effect material to the retainer widget.</summary>
        </member>
        <member name="M:UnrealEngine.URetainerBox.GetEffectMaterial">
            <summary>Get the current dynamic effect material applied to the retainer box.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.SetCaptureSortPriority(System.Int32)">
            <summary>Changes the value of TranslucentSortPriority.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.ClearShowOnlyComponents(UnrealEngine.UPrimitiveComponent)">
            <summary>Clears the Show Only list.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.RemoveShowOnlyActorComponents(UnrealEngine.AActor)">
            <summary>Removes a actor's components from the Show Only list.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.RemoveShowOnlyComponent(UnrealEngine.UPrimitiveComponent)">
            <summary>Removes a component from the Show Only list.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.ShowOnlyActorComponents(UnrealEngine.AActor)">
            <summary>Adds all primitive components in the actor to our list of show-only components.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.ShowOnlyComponent(UnrealEngine.UPrimitiveComponent)">
            <summary>Adds the component to our list of show-only components.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.HideActorComponents(UnrealEngine.AActor)">
            <summary>Adds all primitive components in the actor to our list of hidden components.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent.HideComponent(UnrealEngine.UPrimitiveComponent)">
            <summary>Adds the component to our list of hidden components.</summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponent2D.CaptureScene">
            <summary>
            Render the scene to the texture target immediately.
            This should not be used if bCaptureEveryFrame is enabled, or the scene capture will render redundantly.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneCaptureComponentCube.CaptureScene">
            <summary>
            Render the scene to the texture target immediately.
            This should not be used if bCaptureEveryFrame is enabled, or the scene capture will render redundantly.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetWorldLocationAndRotation(UnrealEngine.FVector,UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the relative location and rotation of the component to put it at the supplied pose in world space.
            @param NewLocation           New location in world space for the component.
            @param NewRotation           New rotation in world space for the component.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.SetAbsolute(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Set which parts of the relative transform should be relative to parent, and which should be relative to world</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetRelativeLocationAndRotation(UnrealEngine.FVector,UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the location and rotation of the component relative to its parent
            @param NewLocation           New location of the component relative to its parent.
            @param NewRotation           New rotation of the component relative to its parent.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetPhysicsVolume">
            <summary>Get the PhysicsVolume overlapping this component.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.SetHiddenInGame(System.Boolean,System.Boolean)">
            <summary>
            Changes the value of HiddenGame.
            @param NewHidden     - The value to assign to HiddenGame.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.ToggleVisibility(System.Boolean)">
            <summary>Toggle visibility of the component</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.SetVisibility(System.Boolean,System.Boolean)">
            <summary>Set visibility of the component, if during game use this to turn on/off</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.IsVisible">
            <summary>
            Is this component visible or not in game
            @return true if visible
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetComponentVelocity">
            <summary>
            Get velocity of the component: either ComponentVelocity, or the velocity of the physics body if simulating physics.
            @return Velocity of the component
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.DoesSocketExist(System.String)">
            <summary>
            return true if socket with the given name exists
            @param InSocketName Name of the socket or the bone to get the transform
            @return true if the socket with the given name exists. Otherwise, return false
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetSocketRotation(System.String)">
            <summary>
            Get world-space socket or bone  FRotator rotation.
            @param InSocketName Name of the socket or the bone to get the transform
            @return Socket transform in world space if socket if found. Otherwise it will return component's transform in world space.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetSocketLocation(System.String)">
            <summary>
            Get world-space socket or bone location.
            @param InSocketName Name of the socket or the bone to get the transform
            @return Socket transform in world space if socket if found. Otherwise it will return component's transform in world space.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetSocketTransform(System.String,UnrealEngine.ERelativeTransformSpace)">
            <summary>
            Get world-space socket transform.
            @param InSocketName Name of the socket or the bone to get the transform
            @return Socket transform in world space if socket if found. Otherwise it will return component's transform in world space.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetAllSocketNames">
            <summary>
            Gets the names of all the sockets on the component.
            @return Get the names of all the sockets on the component.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AttachTo(UnrealEngine.USceneComponent,System.String,UnrealEngine.EAttachLocation,System.Boolean)">
            <summary>
            Attach this component to another scene component, optionally at a named socket. It is valid to call this on components whether or not they have been Registered.
            @param  InParent                             Parent to attach to.
            @param  InSocketName                 Optional socket to attach to on the parent.
            @param  AttachType                   How to handle transform when attaching (Keep relative offset, keep world position, etc).
            @param  bWeldSimulatedBodies Whether to weld together simulated physics bodies.
            @return True if attachment is successful (or already attached to requested parent/socket), false if attachment is rejected and there is no change in AttachParent.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetChildrenComponents(System.Boolean,UnrealEngine.USceneComponent[]@)">
            <summary>
            Gets all the attached child components
            @param bIncludeAllDescendants Whether to include all descendants in the list of children (i.e. grandchildren, great grandchildren, etc.)
            @param Children The list of attached child components
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetChildComponent(System.Int32)">
            <summary>Gets the attached child component at the specified location</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetNumChildrenComponents">
            <summary>Gets the number of attached children components</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetParentComponents(UnrealEngine.USceneComponent[]@)">
            <summary>Gets all parent components up to and including the root component</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetAttachSocketName">
            <summary>Get the socket we are attached to.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetAttachParent">
            <summary>Get the SceneComponent we are attached to.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.IsAnySimulatingPhysics">
            <summary>Returns whether the specified body is currently using physics simulation</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.IsSimulatingPhysics(System.String)">
            <summary>Returns whether the specified body is currently using physics simulation</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetRightVector">
            <summary>Get the right (Y) unit direction vector from this component, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetUpVector">
            <summary>Get the up (Z) unit direction vector from this component, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetForwardVector">
            <summary>Get the forward (X) unit direction vector from this component, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_GetComponentToWorld">
            <summary>Get the current component-to-world transform for this component</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_GetComponentScale">
            <summary>Returns scale of the component, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_GetComponentRotation">
            <summary>Returns rotation of the component, in world space.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_GetComponentLocation">
            <summary>Return location of the component, in world space</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddWorldTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the transform of the component in world space. Scale is unchanged.
            @param DeltaTransform        Change in transform in world space for the component. Scale is unchanged.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddWorldRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the rotation of the component in world space.
            @param DeltaRotation         Change in rotation in world space for the component.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination (currently not supported for rotation).
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddWorldOffset(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the location of the component in world space.
            @param DeltaLocation         Change in location in world space for the component.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetWorldTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the transform of the component in world space.
            @param NewTransform          New transform in world space for the component.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.SetWorldScale3D(UnrealEngine.FVector)">
            <summary>
            Set the relative scale of the component to put it at the supplied scale in world space.
            @param NewScale              New scale in world space for this component.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetWorldRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            * Put this component at the specified rotation in world space. Updates relative rotation to achieve the final world rotation.
            * @param NewRotation           New rotation in world space for the component.
            * @param SweepHitResult        Hit result from any impact if sweep is true.
            * @param bSweep                        Whether we sweep to the destination (currently not supported for rotation).
            * @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
            *                                                      If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
            *                                                      If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
            *                                                      If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetWorldLocation(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Put this component at the specified location in world space. Updates relative location to achieve the final world location.
            @param NewLocation           New location in world space for the component.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddLocalTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the transform of the component in its local reference frame. Scale is unchanged.
            @param DeltaTransform        Change in transform of the component in its local reference frame. Scale is unchanged.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddLocalRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the rotation of the component in its local reference frame
            @param DeltaRotation         Change in rotation of the component in its local reference frame.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination (currently not supported for rotation).
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddLocalOffset(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the location of the component in its local reference frame
            @param DeltaLocation         Change in location of the component in its local reference frame.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddRelativeRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta the rotation of the component relative to its parent
            @param DeltaRotation         Change in rotation of the component relative to is parent.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination (currently not supported for rotation).
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_AddRelativeLocation(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Adds a delta to the translation of the component relative to its parent
            @param DeltaLocation         Change in location of the component relative to its parent
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.SetRelativeScale3D(UnrealEngine.FVector)">
            <summary>Set the non-uniform scale of the component relative to its parent</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.ResetRelativeTransform">
            <summary>Reset the transform of the component relative to its parent. Sets relative location to zero, relative rotation to no rotation, and Scale to 1.</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.GetRelativeTransform">
            <summary>Returns the transform of the component relative to its parent</summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetRelativeTransform(UnrealEngine.FTransform,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the transform of the component relative to its parent
            @param NewTransform          New transform of the component relative to its parent.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination (currently not supported for rotation).
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetRelativeRotation(UnrealEngine.FRotator,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the rotation of the component relative to its parent
            @param NewRotation           New rotation of the component relative to its parent
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination (currently not supported for rotation).
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
            </summary>
        </member>
        <member name="M:UnrealEngine.USceneComponent.K2_SetRelativeLocation(UnrealEngine.FVector,System.Boolean,UnrealEngine.FHitResult@,System.Boolean)">
            <summary>
            Set the location of the component relative to its parent
            @param NewLocation           New location of the component relative to its parent.
            @param SweepHitResult        Hit result from any impact if sweep is true.
            @param bSweep                        Whether we sweep to the destination location, triggering overlaps along the way and stopping short of the target if blocked by something.
                                                                 Only the root component is swept and checked for blocking collision, child components move without sweeping. If collision is off, this has no effect.
            @param bTeleport                     Whether we teleport the physics state (if physics collision is enabled for this object).
                                                                 If true, physics velocity for this object is unchanged (so ragdoll parts are not affected by change in location).
                                                                 If false, physics velocity is updated based on the change in position (affecting ragdoll parts).
                                                                 If CCD is on and not teleporting, this will affect objects along the entire sweep volume.
            </summary>
        </member>
        <member name="M:UnrealEngine.UScrollBar.SetState(System.Single,System.Single)">
            <summary>
            Set the offset and size of the track's thumb.
            Note that the maximum offset is 1.0-ThumbSizeFraction.
            If the user can view 1/3 of the items in a single page, the maximum offset will be ~0.667f
            @param InOffsetFraction     Offset of the thumbnail from the top as a fraction of the total available scroll space.
            @param InThumbSizeFraction  Size of thumbnail as a fraction of the total available scroll space.
            </summary>
        </member>
        <member name="M:UnrealEngine.UScrollBox.ScrollWidgetIntoView(UnrealEngine.UWidget,System.Boolean)">
            <summary>Scrolls the ScrollBox to the widget during the next layout pass.</summary>
        </member>
        <member name="M:UnrealEngine.UScrollBox.ScrollToEnd">
            <summary>Scrolls the ScrollBox to the bottom instantly during the next layout pass.</summary>
        </member>
        <member name="M:UnrealEngine.UScrollBox.ScrollToStart">
            <summary>Scrolls the ScrollBox to the top instantly</summary>
        </member>
        <member name="M:UnrealEngine.UScrollBox.GetScrollOffset">
            <summary>Gets the scroll offset of the scrollbox in Slate Units.</summary>
        </member>
        <member name="M:UnrealEngine.UScrollBox.SetScrollOffset(System.Single)">
            <summary>
            Updates the scroll offset of the scrollbox.
            @param NewScrollOffset is in Slate Units.
            </summary>
        </member>
        <member name="M:UnrealEngine.USizeBox.SetMaxDesiredHeight(System.Single)">
            <summary>When specified, will report the MaxDesiredHeight if smaller than the content's desired height.</summary>
        </member>
        <member name="M:UnrealEngine.USizeBox.SetMaxDesiredWidth(System.Single)">
            <summary>When specified, will report the MaxDesiredWidth if smaller than the content's desired width.</summary>
        </member>
        <member name="M:UnrealEngine.USizeBox.SetMinDesiredHeight(System.Single)">
            <summary>When specified, will report the MinDesiredHeight if larger than the content's desired height.</summary>
        </member>
        <member name="M:UnrealEngine.USizeBox.SetMinDesiredWidth(System.Single)">
            <summary>When specified, will report the MinDesiredWidth if larger than the content's desired width.</summary>
        </member>
        <member name="M:UnrealEngine.USizeBox.SetHeightOverride(System.Single)">
            <summary>When specified, ignore the content's desired size and report the HeightOverride as the Box's desired height.</summary>
        </member>
        <member name="M:UnrealEngine.USizeBox.SetWidthOverride(System.Single)">
            <summary>When specified, ignore the content's desired size and report the WidthOverride as the Box's desired width.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.IsSectionUsingCloth(System.Int32,System.Boolean)">
            <summary>
            Checks whether the provided section is using APEX cloth. if bCheckCorrespondingSections is true
            disabled sections will defer to correspond sections to see if they use cloth (non-cloth sections
            are disabled and another section added when cloth is enabled, using this flag allows for a check
            on the original section to succeed)
            @param InSectionIndex Index to check
            @param bCheckCorrespondingSections Whether to check corresponding sections for disabled sections
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.GetSocketByIndex(System.Int32)">
            <summary>Returns a socket by index. Max index is NumSockets(). The meshes sockets are accessed first, then the skeletons.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.NumSockets">
            <summary>Returns the number of sockets available. Both on this mesh and it's skeleton.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.FindSocketAndIndex(System.String,System.Int32@)">
            <summary>
            Find a socket object in this SkeletalMesh by name.
            Entering NAME_None will return NULL. If there are multiple sockets with the same name, will return the first one.
            Also returns the index for the socket allowing for future fast access via GetSocketByIndex()
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.FindSocket(System.String)">
            <summary>
            Find a socket object in this SkeletalMesh by name.
            Entering NAME_None will return NULL. If there are multiple sockets with the same name, will return the first one.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.GetImportedBounds">
            <summary>Get the original imported bounds of the skel mesh</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMesh.GetBounds">
            <summary>Get the extended bounds of this mesh (imported bounds plus bounds extension)</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetCurrentJointAngles(System.String,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the current Angular state for a named bone constraint
            @param InBoneName  Name of bone to get constraint ranges for
            @param Swing1Angle current angular state of the constraint
            @param TwistAngle  current angular state of the constraint
            @param Swing2Angle current angular state of the constraint
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAngularLimits(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Sets the Angular Motion Ranges for a named bone
            @param InBoneName  Name of bone to adjust constraint ranges for
            @param Swing1LimitAngle       Size of limit in degrees, 0 means locked, 180 means free
            @param TwistLimitAngle        Size of limit in degrees, 0 means locked, 180 means free
            @param Swing2LimitAngle       Size of limit in degrees, 0 means locked, 180 means free
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.BreakConstraint(UnrealEngine.FVector,UnrealEngine.FVector,System.String)">
            <summary>
            Break a constraint off a Gore mesh.
            @param       Impulse vector of impulse
            @param       HitLocation     location of the hit
            @param       InBoneName      Name of bone to break constraint for
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.FindConstraintBoneName(System.Int32)">
            <summary>
            Find Constraint Name from index
            @param       ConstraintIndex Index of constraint to look for
            @return      Constraint Joint Name
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetConstraintProfileForAll(System.String,System.Boolean)">
            <summary>Sets the constraint profile properties (limits, motors, etc...) to match the constraint profile as defined in the physics asset for all constraints. If profile name is not found the joint is set to use the default constraint profile.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetConstraintProfile(System.String,System.String,System.Boolean)">
            <summary>Sets the constraint profile properties (limits, motors, etc...) to match the constraint profile as defined in the physics asset. If profile name is not found the joint is set to use the default constraint profile.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAllMotorsAngularDriveParams(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Set Angular Drive motors params for all constraint instances</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAllMotorsAngularVelocityDrive(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Enable or Disable AngularVelocityDrive. If motor is in SLERP mode it will be turned on if either EnableSwingDrive OR EnableTwistDrive are enabled. In Twist and Swing mode the twist and the swing can be controlled individually.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAllMotorsAngularPositionDrive(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Enable or Disable AngularPositionDrive. If motor is in SLERP mode it will be turned on if either EnableSwingDrive OR EnableTwistDrive are enabled. In Twist and Swing mode the twist and the swing can be controlled individually.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight(System.String,System.Single,System.Boolean)">
            <summary>Accumulate AddPhysicsBlendWeight to physics blendweight for all of the bones below passed in bone to be simulated</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight(System.String,System.Single,System.Boolean,System.Boolean)">
            <summary>Set all of the bones below passed in bone to be simulated</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.ResetAllBodiesSimulatePhysics">
            <summary>Allows you to reset bodies Simulate state based on where bUsePhysics is set to true in the BodySetup.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics(System.String,System.Boolean,System.Boolean)">
            <summary>Set all of the bones below passed in bone to be simulated</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetEnablePhysicsBlending(System.Boolean)">
            <summary>Disable physics blending of bones *</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetPhysicsBlendWeight(System.Single)">
            <summary>
            This is global set up for setting physics blend weight
            This does multiple things automatically
            If PhysicsBlendWeight == 1.f, it will enable Simulation, and if PhysicsBlendWeight == 0.f, it will disable Simulation.
            Also it will respect each body's setup, so if the body is fixed, it won't simulate. Vice versa
            So if you'd like all bodies to change manually, do not use this function, but SetAllBodiesPhysicsBlendWeight
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAllBodiesSimulatePhysics(System.Boolean)">
            <summary>Set bSimulatePhysics to true for all bone bodies. Does not change the component bSimulatePhysics flag.</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.AddImpulseToAllBodiesBelow(UnrealEngine.FVector,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add impulse to all single rigid bodies below. Good for one time instant burst.
            @param  Impulse         Magnitude and direction of impulse to apply.
            @param  BoneName        If a SkeletalMeshComponent, name of body to apply impulse to. 'None' indicates root body.
            @param  bVelChange      If true, the Strength is taken as a change in velocity instead of an impulse (ie. mass will have no affect).
            @param bIncludeSelf If false, Force is only applied to bodies below but not given bone name.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.AddForceToAllBodiesBelow(UnrealEngine.FVector,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a force to all rigid bodies below.
            This is like a 'thruster'. Good for adding a burst over some (non zero) time. Should be called every frame for the duration of the force.
            @param  Force            Force vector to apply. Magnitude indicates strength of force.
            @param  BoneName         If a SkeletalMeshComponent, name of body to apply force to. 'None' indicates root body.
            @param  bAccelChange If true, Force is taken as a change in acceleration instead of a physical force (i.e. mass will have no affect).
            @param  bIncludeSelf If false, Force is only applied to bodies below but not given bone name.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetSkeletalCenterOfMass">
            <summary>Returns the center of mass of the skeletal mesh, instead of the root body's location</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetBoneMass(System.String,System.Boolean)">
            <summary>
            Returns the mass (in kg) of the given bone
            @param BoneName         Name of the body to return. 'None' indicates root body.
            @param bScaleMass       If true, the mass is scaled by the bone's MassScale.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset(UnrealEngine.FVector,UnrealEngine.FVector@,UnrealEngine.FVector@,System.String@,System.Single@)">
            <summary>
            Given a world position, find the closest point on the physics asset. Note that this is independent of collision and welding. This is based purely on animation position
            @param      WorldPosition                           The point we want the closest point to (i.e. for all bodies in the physics asset, find the one that has a point closest to WorldPosition)
            @param      ClosestPointOnPhysicsAsset      The data associated with the closest point (position, normal, etc...)
            @return     true if we found a closest point
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow(System.Boolean,System.String,System.Boolean)">
            <summary>
            Enables or disables gravity to all bodies below the given bone.
            NAME_None indicates all bodies will be edited.
            In that case, consider using UPrimitiveComponent::EnableGravity.
            @param bEnableGravity   Whether gravity should be enabled or disabled.
            @param BoneName                 The name of the top most bone.
            @param bIncludeSelf             Whether the bone specified should be edited.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.IsBodyGravityEnabled(System.String)">
            <summary>
            Checks whether or not gravity is enabled on the given bone.
            NAME_None indicates the root body should be queried.
            If the bone name given is otherwise invalid, false is returned.
            @param BoneName The name of the bone to check.
            @return True if gravity is enabled on the bone.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetEnableBodyGravity(System.Boolean,System.String)">
            <summary>
            Enables or disables gravity for the given bone.
            NAME_None indicates the root body will be edited.
            If the bone name given is otherwise invalid, nothing happens.
            @param bEnableGravity   Whether gravity should be enabled or disabled.
            @param BoneName                 The name of the bone to modify.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow(System.Boolean,System.String,System.Boolean)">
            <summary>
            Changes the value of bNotifyRigidBodyCollision on all bodies below a given bone
            @param bNewNotifyRigidBodyCollision   The value to assign to bNotifyRigidBodyCollision
            @param BoneName                                               Name of the body to turn hit notifies on (and below)
            @param bIncludeSelf                                   Whether to modify the given body (useful for roots with multiple children)
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetBodyNotifyRigidBodyCollision(System.Boolean,System.String)">
            <summary>
            Changes the value of bNotifyRigidBodyCollision for a given body
            @param bNewNotifyRigidBodyCollision   The value to assign to bNotifyRigidBodyCollision
            @param BoneName                                               Name of the body to turn hit notifies on/off. None implies root body
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetUpdateAnimationInEditor(System.Boolean)">
            <summary>
            Sets whether or not to force tick component in order to update animation and refresh transform for this component
            This is supported only in the editor
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.UnbindClothFromMasterPoseComponent(System.Boolean)">
            <summary>
            If this component has a valid MasterPoseComponent and has previously had its cloth bound to the
            MCP, this function will unbind the cloth and resume simulation.
            @param bRestoreSimulationSpace if true and the master pose cloth was originally simulating in world
            space, we will restore this setting. This will cause the master component to reset which may be
            undesirable.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.BindClothToMasterPoseComponent">
            <summary>
            If this component has a valid MasterPoseComponent then this function makes cloth items on the slave component
            take the transforms of the cloth items on the master component instead of simulating separately.
            @Note This will FORCE any cloth actor on the master component to simulate in local space. Also
            The meshes used in the components must be identical for the cloth to bind correctly
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.ResetClothTeleportMode">
            <summary>Reset the teleport mode of a next update to 'Continuous'</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.IsClothingSimulationSuspended">
            <summary>Gets whether or not the clothing simulation is currently suspended</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.ResumeClothingSimulation">
            <summary>Resumes a previously suspended clothing simulation, teleporting the clothing on the next tick</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SuspendClothingSimulation">
            <summary>Stops simulating clothing, but does not show clothing ref pose. Keeps the last known simulation state</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset">
            <summary>
            Used to indicate we should force 'teleport and reset' during the next call to UpdateClothState.
            This can be used to reset it from a bad state or by a teleport where the old state is not important anymore.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.ForceClothNextUpdateTeleport">
            <summary>
            Used to indicate we should force 'teleport' during the next call to UpdateClothState,
            This will transform positions and velocities and thus keep the simulation state, just translate it to a new pose.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetClothMaxDistanceScale">
            <summary>Get/Set the max distance scale of clothing mesh vertices</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SnapshotPose(UnrealEngine.FPoseSnapshot@)">
            <summary>
            Takes a snapshot of this skeletal mesh component's pose and saves it to the specified snapshot.
            The snapshot is taken at the current LOD, so if for example you took the snapshot at LOD1
            and then used it at LOD0 any bones not in LOD1 will use the reference pose
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetMorphTarget(System.String)">
            <summary>Get Morph target with given name</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.ClearMorphTargets">
            <summary>Clear all Morph Target that are set to this mesh</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetMorphTarget(System.String,System.Single,System.Boolean)">
            <summary>
            Set Morph Target with Name and Value(0-1)
            @param bRemoveZeroWeight : Used by editor code when it should stay in the active list with zero weight
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.OverrideAnimationData(UnrealEngine.UAnimationAsset,System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            This overrides current AnimationData parameter in the SkeletalMeshComponent. This will serialize when the component serialize
            so it can be used during construction script. However note that this will override current existing data
            This can be useful if you'd like to make a blueprint with custom default animation per component
            This sets single player mode, which means you can't use AnimBlueprint with it
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetPlayRate">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetPlayRate(System.Single)">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetPosition">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetPosition(System.Single,System.Boolean)">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.IsPlaying">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.Stop">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.Play(System.Boolean)">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAnimation(UnrealEngine.UAnimationAsset)">
            <summary>
            Animation play functions
                  *
                  * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                  * Becuase of that reason, it is not safe to be used during construction script
                  * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.PlayAnimation(UnrealEngine.UAnimationAsset,System.Boolean)">
            <summary>
            Animation play functions
                   *
                   * These changes status of animation instance, which is transient data, which means it won't serialize with this compoennt
                   * Becuase of that reason, it is not safe to be used during construction script
                   * Please use OverrideAnimationDatat for construction script. That will override AnimationData to be serialized
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.SetAnimationMode(UnrealEngine.EAnimationMode)">
            <summary>Below are the interface to control animation when animation mode, not blueprint mode *</summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetPostProcessInstance">
            <summary>
            Returns the active post process instance is one is available. This is set on the mesh that this
            component is using, and is evaluated immediately after the main instance.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshComponent.GetAnimInstance">
            <summary>
            Returns the animation instance that is driving the class (if available). This is typically an instance of
            the class set as AnimBlueprintGeneratedClass (generated by an animation blueprint)
            Since this instance is transient, it is not safe to be used during construction script
            </summary>
        </member>
        <member name="M:UnrealEngine.USkeletalMeshSocket.InitializeSocketFromLocation(UnrealEngine.USkeletalMeshComponent,UnrealEngine.FVector,UnrealEngine.FVector)">
            <summary>Sets BoneName, RelativeLocation and RelativeRotation based on closest bone to WorldLocation and WorldNormal</summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.IsBoneHiddenByName(System.String)">
            <summary>
            Determines if the specified bone is hidden.
            @param  BoneName            Name of bone to check
            @return true if hidden
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.UnHideBoneByName(System.String)">
            <summary>
            UnHide the specified bone with name.  Currently this just enforces a scale of 0 for the hidden bones.
            Compoared to HideBone By Index - This keeps track of list of bones and update when LOD changes
            @param  BoneName            Name of bone to unhide
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.HideBoneByName(System.String,UnrealEngine.EPhysBodyOp)">
            <summary>
            Hides the specified bone with name.  Currently this just enforces a scale of 0 for the hidden bones.
            Compoared to HideBone By Index - This keeps track of list of bones and update when LOD changes
            @param  BoneName            Name of bone to hide
            @param  PhysBodyOption          Option for physics bodies that attach to the bones to be hidden
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.FindClosestBone_K2(UnrealEngine.FVector,UnrealEngine.FVector@,System.Single,System.Boolean)">
            <summary>
            finds the closest bone to the given location
            @param TestLocation the location to test against
            @param BoneLocation (optional, out) if specified, set to the world space location of the bone that was found, or (0,0,0) if no bone was found
            @param IgnoreScale (optional) if specified, only bones with scaling larger than the specified factor are considered
            @param bRequirePhysicsAsset (optional) if true, only bones with physics will be considered
            @return the name of the bone that was found, or 'None' if no bone was found
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.TransformFromBoneSpace(System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.FVector@,UnrealEngine.FRotator@)">
            <summary>
            Transform a location/rotation in bone relative space to world space.
            @param BoneName Name of bone
            @param InPosition Input position
            @param InRotation Input rotation
            @param OutPosition (out) Transformed position
            @param OutRotation (out) Transformed rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.TransformToBoneSpace(System.String,UnrealEngine.FVector,UnrealEngine.FRotator,UnrealEngine.FVector@,UnrealEngine.FRotator@)">
            <summary>
            Transform a location/rotation from world space to bone relative space.
            This is handy if you know the location in world space for a bone attachment, as AttachComponent takes location/rotation in bone-relative space.
            @param BoneName Name of bone
            @param InPosition Input position
            @param InRotation Input rotation
            @param OutPosition (out) Transformed position
            @param OutRotation (out) Transformed rotation
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.BoneIsChildOf(System.String,System.String)">
            <summary>
            Tests if BoneName is child of (or equal to) ParentBoneName.
            @param BoneName Name of the bone
            @param ParentBone Name to check
            @return true if child (strictly, not same). false otherwise
            Note - will return false if ChildBoneIndex is the same as ParentBoneIndex ie. must be strictly a child.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.SetMasterPoseComponent(UnrealEngine.USkinnedMeshComponent)">
            <summary>
            Set MasterPoseComponent for this component
            @param NewMasterBoneComponent New MasterPoseComponent
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.ClearSkinWeightOverride(System.Int32)">
            <summary>Clear any applied skin weight override</summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.ClearVertexColorOverride(System.Int32)">
            <summary>Clear any applied vertex color override</summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.SetVertexColorOverride_LinearColor(System.Int32,UnrealEngine.FLinearColor[])">
            <summary>Allow override of vertex colors on a per-component basis, taking array of Blueprint-friendly LinearColors.</summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.GetParentBone(System.String)">
            <summary>
            Get Parent Bone of the input bone
            @param BoneName Name of the bone
            @return the name of the parent bone for the specified bone. Returns 'None' if the bone does not exist or it is the root bone
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.SetSkeletalMesh(UnrealEngine.USkeletalMesh,System.Boolean)">
            <summary>
            Change the SkeletalMesh that is rendered for this Component. Will re-initialize the animation tree etc.
            @param NewMesh New mesh to set for this component
            @param bReinitPose Whether we should keep current pose or reinitialize.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.GetSocketBoneName(System.String)">
            <summary>
            Returns bone name linked to a given named socket on the skeletal mesh component.
            If you're unsure to deal with sockets or bones names, you can use this function to filter through, and always return the bone name.
            @param       bone name or socket name
            @return      bone name
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.GetBoneName(System.Int32)">
            <summary>
            Get Bone Name from index
            @param BoneIndex Index of the bone
            @return the name of the bone at the specified index
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.GetBoneIndex(System.String)">
            <summary>
            Find the index of bone by name. Looks in the current SkeletalMesh being used by this SkeletalMeshComponent.
            @param BoneName Name of bone to look up
            @return Index of the named bone in the current SkeletalMesh. Will return INDEX_NONE if bone not found.
            @see USkeletalMesh::GetBoneIndex.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.GetNumBones">
            <summary>Returns the number of bones in the skeleton.</summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.SetForcedLOD(System.Int32)">
            <summary>
            Set MinLodModel of the mesh component
            @param       InNewForcedLOD  Set new ForcedLODModel that forces to set the incoming LOD. Range from [1, Max Number of LOD]. This will affect in the next tick update.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.SetMinLOD(System.Int32)">
            <summary>
            Set MinLodModel of the mesh component
            @param       InNewMinLOD     Set new MinLodModel that make sure the LOD does not go below of this value. Range from [0, Max Number of LOD - 1]. This will affect in the next tick update.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkinnedMeshComponent.SetPhysicsAsset(UnrealEngine.UPhysicsAsset,System.Boolean)">
            <summary>
            Override the Physics Asset of the mesh. It uses SkeletalMesh.PhysicsAsset, but if you'd like to override use this function
            @param       NewPhysicsAsset New PhysicsAsset
            @param       bForceReInit    Force reinitialize
            </summary>
        </member>
        <member name="M:UnrealEngine.USkyLightComponent.RecaptureSky">
            <summary>
            Recaptures the scene for the skylight.
            This is useful for making sure the sky light is up to date after changing something in the world that it would capture.
            Warning: this is very costly and will definitely cause a hitch.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkyLightComponent.SetCubemapBlend(UnrealEngine.UTextureCube,UnrealEngine.UTextureCube,System.Single)">
            <summary>
            Creates sky lighting from a blend between two cubemaps, which is only valid when SourceType is set to SpecifiedCubemap.
            This can be used to seamlessly transition sky lighting between different times of day.
            The caller should continue to update the blend until BlendFraction is 0 or 1 to reduce rendering cost.
            The caller is responsible for avoiding pops due to changing the source or destination.
            </summary>
        </member>
        <member name="M:UnrealEngine.USkyLightComponent.SetCubemap(UnrealEngine.UTextureCube)">
            <summary>Sets the cubemap used when SourceType is set to SpecifiedCubemap, and causes a skylight update on the next tick.</summary>
        </member>
        <member name="M:UnrealEngine.USkyLightComponent.SetLightColor(UnrealEngine.FLinearColor)">
            <summary>Set color of the light</summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.ScreenToViewport(UnrealEngine.UObject,UnrealEngine.FVector2D,UnrealEngine.FVector2D@)">
            <summary>Translates a screen position in pixels into the local space of the viewport widget.</summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.ScreenToWidgetAbsolute(UnrealEngine.UObject,UnrealEngine.FVector2D,UnrealEngine.FVector2D@)">
            <summary>Translates a screen position in pixels into absolute application coordinates.</summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.ScreenToWidgetLocal(UnrealEngine.UObject,UnrealEngine.FGeometry,UnrealEngine.FVector2D,UnrealEngine.FVector2D@)">
            <summary>Translates a screen position in pixels into the local space of a widget with the given geometry.</summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.AbsoluteToViewport(UnrealEngine.UObject,UnrealEngine.FVector2D,UnrealEngine.FVector2D@,UnrealEngine.FVector2D@)">
            <summary>
            Translates absolute coordinate in desktop space of the geometry provided into local viewport coordinates.
            @param PixelPosition The position in the game's viewport, usable for line traces and
            other uses where you need a coordinate in the space of viewport resolution units.
            @param ViewportPosition The position in the space of other widgets in the viewport.  Like if you wanted
            to add another widget to the viewport at the same position in viewport space as this location, this is
            what you would use.
            </summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.LocalToViewport(UnrealEngine.UObject,UnrealEngine.FGeometry,UnrealEngine.FVector2D,UnrealEngine.FVector2D@,UnrealEngine.FVector2D@)">
            <summary>
            Translates local coordinate of the geometry provided into local viewport coordinates.
            @param PixelPosition The position in the game's viewport, usable for line traces and
            other uses where you need a coordinate in the space of viewport resolution units.
            @param ViewportPosition The position in the space of other widgets in the viewport.  Like if you wanted
            to add another widget to the viewport at the same position in viewport space as this location, this is
            what you would use.
            </summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.EqualEqual_SlateBrush(UnrealEngine.FSlateBrush,UnrealEngine.FSlateBrush)">
            <summary>@return Whether brushes A and B are identical.</summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.GetLocalSize(UnrealEngine.FGeometry)">
            <summary>@return the size of the geometry in local space.</summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.LocalToAbsolute(UnrealEngine.FGeometry,UnrealEngine.FVector2D)">
            <summary>
            Translates local coordinates into absolute coordinates
            Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.
            @return  Absolute coordinates
            </summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.AbsoluteToLocal(UnrealEngine.FGeometry,UnrealEngine.FVector2D)">
            <summary>
            Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.
            @return Transforms AbsoluteCoordinate into the local space of this Geometry.
            </summary>
        </member>
        <member name="M:UnrealEngine.USlateBlueprintLibrary.IsUnderLocation(UnrealEngine.FGeometry,UnrealEngine.FVector2D)">
            <summary>
            Absolute coordinates could be either desktop or window space depending on what space the root of the widget hierarchy is in.
            @return true if the provided location in absolute coordinates is within the bounds of this geometry.
            </summary>
        </member>
        <member name="M:UnrealEngine.USlider.SetSliderHandleColor(UnrealEngine.FLinearColor)">
            <summary>Sets the color of the handle bar</summary>
        </member>
        <member name="M:UnrealEngine.USlider.SetSliderBarColor(UnrealEngine.FLinearColor)">
            <summary>Sets the color of the slider bar</summary>
        </member>
        <member name="M:UnrealEngine.USlider.SetStepSize(System.Single)">
            <summary>Sets the amount to adjust the value by, when using a controller or keyboard</summary>
        </member>
        <member name="M:UnrealEngine.USlider.SetLocked(System.Boolean)">
            <summary>Sets the handle to be interactive or fixed</summary>
        </member>
        <member name="M:UnrealEngine.USlider.SetIndentHandle(System.Boolean)">
            <summary>Sets if the slidable area should be indented to fit the handle</summary>
        </member>
        <member name="M:UnrealEngine.USlider.SetValue(System.Single)">
            <summary>Sets the current value of the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USlider.GetValue">
            <summary>Gets the current value of the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpacer.SetSize(UnrealEngine.FVector2D)">
            <summary>Sets the size of the spacer</summary>
        </member>
        <member name="M:UnrealEngine.USphereComponent.GetShapeScale">
            <summary>
            Get the scale used by this shape. This is a uniform scale that is the minimum of any non-uniform scaling.
            @return the scale used by this shape.
            </summary>
        </member>
        <member name="M:UnrealEngine.USphereComponent.GetUnscaledSphereRadius">
            <summary>@return the radius of the sphere, ignoring component scale.</summary>
        </member>
        <member name="M:UnrealEngine.USphereComponent.GetScaledSphereRadius">
            <summary>@return the radius of the sphere, with component scale applied.</summary>
        </member>
        <member name="M:UnrealEngine.USphereComponent.SetSphereRadius(System.Single,System.Boolean)">
            <summary>
            Change the sphere radius. This is the unscaled radius, before component scale is applied.
            @param       InSphereRadius: the new sphere radius
            @param       bUpdateOverlaps: if true and this shape is registered and collides, updates touching array for owner actor.
            </summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.ClearMaxSliderValue">
            <summary>Clear the maximum value that can be specified using the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.SetMaxSliderValue(System.Single)">
            <summary>Set the maximum value that can be specified using the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.GetMaxSliderValue">
            <summary>Get the current maximum value that can be specified using the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.ClearMinSliderValue">
            <summary>Clear the minimum value that can be specified using the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.SetMinSliderValue(System.Single)">
            <summary>Set the minimum value that can be specified using the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.GetMinSliderValue">
            <summary>Get the current minimum value that can be specified using the slider.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.ClearMaxValue">
            <summary>Clear the maximum value that can be manually set in the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.SetMaxValue(System.Single)">
            <summary>Set the maximum value that can be manually set in the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.GetMaxValue">
            <summary>Get the current maximum value that can be manually set in the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.ClearMinValue">
            <summary>Clear the minimum value that can be manually set in the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.SetMinValue(System.Single)">
            <summary>Set the minimum value that can be manually set in the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.GetMinValue">
            <summary>Get the current minimum value that can be manually set in the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.SetValue(System.Single)">
            <summary>Set the value of the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USpinBox.GetValue">
            <summary>Get the current value of the spin box.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindTransformClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a location, in world space, return an FTransform closest to that location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindScaleClosestToWorldLocation(UnrealEngine.FVector)">
            <summary>Given a location, in world space, return the spline's scale closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindRollClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world space, return the spline's roll closest to the location, in degrees.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindRightVectorClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world space, return a unit direction vector corresponding to the spline's right vector closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindUpVectorClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world space, return a unit direction vector corresponding to the spline's up vector closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindRotationClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world space, return rotation corresponding to the spline's rotation closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindTangentClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world space, return the tangent vector of the spline closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindDirectionClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world spcae, return a unit direction vector of the spline tangent closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindLocationClosestToWorldLocation(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a location, in world space, return the point on the curve that is closest to the location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.FindInputKeyClosestToWorldLocation(UnrealEngine.FVector)">
            <summary>Given a location, in world space, return the input key closest to that location.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetScaleAtTime(System.Single,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the spline's scale there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRollAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the spline's roll there, in degrees.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetTransformAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the spline's transform at the corresponding position.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRightVectorAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the spline's right vector there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetUpVectorAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the spline's up vector there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRotationAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return a rotation corresponding to the spline's position and direction there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetTangentAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the spline's tangent there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetDirectionAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return a unit direction vector of the spline tangent there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetLocationAtTime(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a time from 0 to the spline duration, return the point in space where this puts you</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetTransformAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Given a distance along the length of this spline, return an FTransform corresponding to that point on the spline.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetScaleAtDistanceAlongSpline(System.Single)">
            <summary>Given a distance along the length of this spline, return the spline's scale there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRollAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return the spline's roll there, in degrees.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRightVectorAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return a unit direction vector corresponding to the spline's right vector there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetUpVectorAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return a unit direction vector corresponding to the spline's up vector there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRotationAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return a rotation corresponding to the spline's rotation there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetTangentAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return the tangent vector of the spline there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetDirectionAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return a unit direction vector of the spline tangent there.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetLocationAtDistanceAlongSpline(System.Single,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Given a distance along the length of this spline, return the point in space where this puts you</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetInputKeyAtDistanceAlongSpline(System.Single)">
            <summary>Given a distance along the length of this spline, return the corresponding input key at that point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetDefaultUpVector(UnrealEngine.ESplineCoordinateSpace)">
            <summary>Gets the default up vector used by this spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetDefaultUpVector(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Sets the default up vector used by this spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetSplineLength">
            <summary>Returns total length along this spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetDistanceAlongSplineAtSplinePoint(System.Int32)">
            <summary>Get the distance along the spline at the spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetLocationAndTangentAtSplinePoint(System.Int32,UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get location and tangent at a spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetTransformAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Get the transform at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetScaleAtSplinePoint(System.Int32)">
            <summary>Get the scale at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRollAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the amount of roll at spline point, in degrees</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRightVectorAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the right vector at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetUpVectorAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the up vector at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetRotationAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the rotation at spline point as a rotator</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetLeaveTangentAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the leave tangent at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetArriveTangentAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the arrive tangent at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetTangentAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the tangent at spline point. This fetches the Leave tangent of the point.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetDirectionAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the location at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetLocationAtSplinePoint(System.Int32,UnrealEngine.ESplineCoordinateSpace)">
            <summary>Get the location at spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetNumberOfSplinePoints">
            <summary>Get the number of points that make up this spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetSplinePointType(System.Int32,UnrealEngine.ESplinePointType,System.Boolean)">
            <summary>Specify the type of a spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.GetSplinePointType(System.Int32)">
            <summary>Get the type of a spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetUpVectorAtSplinePoint(System.Int32,UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Specify the up vector at a given spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetTangentsAtSplinePoint(System.Int32,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Specify the tangents at a given spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetTangentAtSplinePoint(System.Int32,UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Specify the tangent at a given spline point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetLocationAtSplinePoint(System.Int32,UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Move an existing point to a new location</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetSplinePoints(UnrealEngine.FVector[],UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Sets the spline to an array of points</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.RemoveSplinePoint(System.Int32,System.Boolean)">
            <summary>Removes point at specified index from the spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.AddSplinePointAtIndex(UnrealEngine.FVector,System.Int32,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Adds a point to the spline at the specified index</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.AddSplinePoint(UnrealEngine.FVector,UnrealEngine.ESplineCoordinateSpace,System.Boolean)">
            <summary>Adds a point to the spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.AddPoints(UnrealEngine.FSplinePoint[],System.Boolean)">
            <summary>Adds an array of FSplinePoints to the spline.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.AddPoint(UnrealEngine.FSplinePoint,System.Boolean)">
            <summary>Adds an FSplinePoint to the spline. This contains its input key, position, tangent, rotation and scale.</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.ClearSplinePoints(System.Boolean)">
            <summary>Clears all the points in the spline</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.IsClosedLoop">
            <summary>Check whether the spline is a closed loop or not</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetClosedLoopAtPosition(System.Boolean,System.Single,System.Boolean)">
            <summary>Specify whether the spline is a closed loop or not, and if so, the input key corresponding to the loop point</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetClosedLoop(System.Boolean,System.Boolean)">
            <summary>Specify whether the spline is a closed loop or not. The loop position will be at 1.0 after the last point's input key</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetDrawDebug(System.Boolean)">
            <summary>Specify whether this spline should be rendered when the Editor/Game spline show flag is set</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetSelectedSplineSegmentColor(UnrealEngine.FLinearColor)">
            <summary>Specify selected spline component segment color in the editor</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.SetUnselectedSplineSegmentColor(UnrealEngine.FLinearColor)">
            <summary>Specify unselected spline component segment color in the editor</summary>
        </member>
        <member name="M:UnrealEngine.USplineComponent.UpdateSpline">
            <summary>Update the spline tangents and SplineReparamTable</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetBoundaryMax(System.Single,System.Boolean)">
            <summary>Set the boundary max</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetBoundaryMax">
            <summary>Get the boundary max</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetBoundaryMin(System.Single,System.Boolean)">
            <summary>Set the boundary min</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetBoundaryMin">
            <summary>Get the boundary min</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetSplineUpDir(UnrealEngine.FVector,System.Boolean)">
            <summary>Set the spline up direction</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetSplineUpDir">
            <summary>Get the spline up direction</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetForwardAxis(UnrealEngine.ESplineMeshAxis,System.Boolean)">
            <summary>Set the forward axis</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetForwardAxis">
            <summary>Get the forward axis</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetEndOffset(UnrealEngine.FVector2D,System.Boolean)">
            <summary>Set the end offset</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetEndOffset">
            <summary>Get the end offset</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetEndRoll(System.Single,System.Boolean)">
            <summary>Set the end roll</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetEndRoll">
            <summary>Get the end roll</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetEndScale(UnrealEngine.FVector2D,System.Boolean)">
            <summary>Set the end scaling</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetEndScale">
            <summary>Get the end scaling</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetStartOffset(UnrealEngine.FVector2D,System.Boolean)">
            <summary>Set the start offset</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetStartOffset">
            <summary>Get the start offset</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetStartRoll(System.Single,System.Boolean)">
            <summary>Set the start roll</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetStartRoll">
            <summary>Get the start roll</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetStartScale(UnrealEngine.FVector2D,System.Boolean)">
            <summary>Set the start scaling</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetStartScale">
            <summary>Get the start scaling</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetStartAndEnd(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,System.Boolean)">
            <summary>Set the start and end, position and tangent, all in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetEndTangent(UnrealEngine.FVector,System.Boolean)">
            <summary>Set the end tangent vector of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetEndTangent">
            <summary>Get the end tangent vector of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetEndPosition(UnrealEngine.FVector,System.Boolean)">
            <summary>Set the end position of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetEndPosition">
            <summary>Get the end position of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetStartTangent(UnrealEngine.FVector,System.Boolean)">
            <summary>Set the start tangent vector of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetStartTangent">
            <summary>Get the start tangent vector of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.SetStartPosition(UnrealEngine.FVector,System.Boolean)">
            <summary>Set the start position of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.GetStartPosition">
            <summary>Get the start position of spline in local space</summary>
        </member>
        <member name="M:UnrealEngine.USplineMeshComponent.UpdateMesh">
            <summary>Update the collision and render state on the spline mesh following changes to its geometry</summary>
        </member>
        <member name="M:UnrealEngine.UStaticMesh.GetNumSections(System.Int32)">
            <summary>Returns number of Sections that this StaticMesh has, in the supplied LOD (LOD 0 is the highest)</summary>
        </member>
        <member name="M:UnrealEngine.UStaticMesh.GetBoundingBox">
            <summary>Returns the bounding box, in local space including bounds extension(s), of the StaticMesh asset</summary>
        </member>
        <member name="M:UnrealEngine.UStaticMesh.GetBounds">
            <summary>
            Returns the number of bounds of the mesh.
            @return      The bounding box represented as box origin with extents and also a sphere that encapsulates that box
            </summary>
        </member>
        <member name="M:UnrealEngine.UStaticMesh.GetNumLODs">
            <summary>Returns the number of LODs used by the mesh.</summary>
        </member>
        <member name="M:UnrealEngine.UStaticMeshComponent.GetLocalBounds(UnrealEngine.FVector@,UnrealEngine.FVector@)">
            <summary>Get Local bounds</summary>
        </member>
        <member name="M:UnrealEngine.UStaticMeshComponent.SetStaticMesh(UnrealEngine.UStaticMesh)">
            <summary>Change the StaticMesh used by this instance.</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.MarkTextureForUpdate">
            <summary>Manually mark the stereo layer texture for updating</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.GetPriority">
            <summary>@return the render priority</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.SetPriority(System.Int32)">
            <summary>
            Change the layer's render priority, higher priorities render on top of lower priorities
            @param       InPriority: Priority value
            </summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.GetUVRect">
            <summary>@return the UV coordinates mapped to the quad face</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.SetUVRect(UnrealEngine.FBox2D)">
            <summary>
            Change the UV coordinates mapped to the quad face
            @param       InUVRect: Min and Max UV coordinates
            </summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.GetQuadSize">
            <summary>@return the height and width of the rendered quad</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.SetQuadSize(UnrealEngine.FVector2D)">
            <summary>
            Change the quad size. This is the unscaled height and width, before component scale is applied.
            @param       InQuadSize: new quad size.
            </summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.GetTexture">
            <summary>@return the texture mapped to the stereo layer quad</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerComponent.SetTexture(UnrealEngine.UTexture)">
            <summary>
            Change the texture displayed on the stereo layer quad
            @param       InTexture: new Texture2D
            </summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen(System.Boolean)">
            <summary>
            Enables/disables splash screen to be automatically shown when LoadMap is called.
            @param       bAutoShowEnabled        (in)    True, if automatic showing of splash screens is enabled when map is being loaded.
            </summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerFunctionLibrary.HideSplashScreen">
            <summary>Hide the splash screen and return to normal display.</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerFunctionLibrary.ShowSplashScreen">
            <summary>Show the splash screen and override the VR display</summary>
        </member>
        <member name="M:UnrealEngine.UStereoLayerFunctionLibrary.SetSplashScreen(UnrealEngine.UTexture,UnrealEngine.FVector2D,UnrealEngine.FVector2D,System.Boolean,System.Boolean)">
            <summary>
            Set splash screen attributes
            @param Texture                        (in) A texture to be used for the splash. B8R8G8A8 format.
            @param Scale                          (in) Scale of the texture.
            @param Offset                         (in) Position from which to start rendering the texture.
            @param ShowLoadingMovie       (in) Whether the splash screen presents loading movies.
            </summary>
        </member>
        <member name="M:UnrealEngine.USubDSurfaceComponent.SetMesh(UnrealEngine.USubDSurface)">
            <summary>Change the SubDSurface used by this instance.</summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetText(System.String)">
            <summary>
            Directly sets the widget text.
            Warning: This will wipe any binding created for the Text property!
            @param InText The text to assign to the widget
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.GetText">
            <summary>
            Gets the widget text
            @return The widget text
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetMinDesiredWidth(System.Single)">
            <summary>
            Set the minimum desired width for this text block
            @param InMinDesiredWidth new minimum desired width
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetJustification(UnrealEngine.ETextJustify)">
            <summary>
            Set the text justification for this text block
            @param InJustification new justification
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetFont(UnrealEngine.FSlateFontInfo)">
            <summary>
            Dynamically set the font info for this text block
            @param InFontInfo THe new font info
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetShadowOffset(UnrealEngine.FVector2D)">
            <summary>
            Sets the offset that the text drop shadow should be drawn at
            @param InShadowOffset                The new offset
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetShadowColorAndOpacity(UnrealEngine.FLinearColor)">
            <summary>
            Sets the color and opacity of the text drop shadow
            Note: if opacity is zero no shadow will be drawn
            @param InShadowColorAndOpacity               The new drop shadow color and opacity
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetOpacity(System.Single)">
            <summary>
            Sets the opacity of the text in this text block
            @param InOpacity              The new text opacity
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextBlock.SetColorAndOpacity(UnrealEngine.FSlateColor)">
            <summary>
            Sets the color and opacity of the text in this text block
            @param InColorAndOpacity             The new text color and opacity
            </summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.GetTextWorldSize">
            <summary>Get world space size of text</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.GetTextLocalSize">
            <summary>Get local size of text</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetWorldSize(System.Single)">
            <summary>Change the world size of the text and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetVertSpacingAdjust(System.Single)">
            <summary>Change the text vertical spacing adjustment and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetHorizSpacingAdjust(System.Single)">
            <summary>Change the text horizontal spacing adjustment and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetYScale(System.Single)">
            <summary>Change the text Y scale and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetXScale(System.Single)">
            <summary>Change the text X scale and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetTextRenderColor(UnrealEngine.FColor)">
            <summary>Change the text render color and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetVerticalAlignment(UnrealEngine.EVerticalTextAligment)">
            <summary>Change the vertical alignment and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetHorizontalAlignment(UnrealEngine.EHorizTextAligment)">
            <summary>Change the horizontal alignment and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetFont(UnrealEngine.UFont)">
            <summary>Change the font and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.SetTextMaterial(UnrealEngine.UMaterialInterface)">
            <summary>Change the text material and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UTextRenderComponent.K2_SetText(System.String)">
            <summary>Change the text value and signal the primitives to be rebuilt</summary>
        </member>
        <member name="M:UnrealEngine.UThrobber.SetAnimateOpacity(System.Boolean)">
            <summary>Sets whether the pieces animate their opacity.</summary>
        </member>
        <member name="M:UnrealEngine.UThrobber.SetAnimateVertically(System.Boolean)">
            <summary>Sets whether the pieces animate vertically.</summary>
        </member>
        <member name="M:UnrealEngine.UThrobber.SetAnimateHorizontally(System.Boolean)">
            <summary>Sets whether the pieces animate horizontally.</summary>
        </member>
        <member name="M:UnrealEngine.UThrobber.SetNumberOfPieces(System.Int32)">
            <summary>Sets how many pieces there are</summary>
        </member>
        <member name="M:UnrealEngine.UTileView.RequestListRefresh">
            <summary>Refreshes the list</summary>
        </member>
        <member name="M:UnrealEngine.UTileView.SetItemHeight(System.Single)">
            <summary>Set item height</summary>
        </member>
        <member name="M:UnrealEngine.UTileView.SetItemWidth(System.Single)">
            <summary>Set item width</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetLinearColorCurve(UnrealEngine.UCurveLinearColor,System.String)">
            <summary>Update a certain linear color track's curve</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetVectorCurve(UnrealEngine.UCurveVector,System.String)">
            <summary>Update a certain vector track's curve</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetFloatCurve(UnrealEngine.UCurveFloat,System.String)">
            <summary>Update a certain float track's curve</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.GetIgnoreTimeDilation">
            <summary>Get whether to ignore time dilation.</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetIgnoreTimeDilation(System.Boolean)">
            <summary>Set whether to ignore time dilation.</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetTimelineLengthMode(UnrealEngine.ETimelineLengthMode)">
            <summary>Sets the length mode of the timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetTimelineLength(System.Single)">
            <summary>Set length of the timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.GetTimelineLength">
            <summary>Get length of the timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetNewTime(System.Single)">
            <summary>Set the new playback position time to use</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.GetPlayRate">
            <summary>Get the current play rate for this timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetPlayRate(System.Single)">
            <summary>Sets the new play rate for this timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.IsLooping">
            <summary>Get whether we are looping or not</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetLooping(System.Boolean)">
            <summary>true means we would loop, false means we should not.</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.GetPlaybackPosition">
            <summary>Get the current playback position of the Timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.SetPlaybackPosition(System.Single,System.Boolean,System.Boolean)">
            <summary>
            Jump to a position in the timeline.
            @param bFireEvents If true, event functions that are between current position and new playback position will fire.
            @param bFireUpdate If true, the update output exec will fire after setting the new playback position.
            </summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.IsReversing">
            <summary>Get whether we are reversing or not</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.IsPlaying">
            <summary>Get whether this timeline is playing or not.</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.Stop">
            <summary>Stop playback of timeline</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.ReverseFromEnd">
            <summary>Start playback of timeline in reverse from the end</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.Reverse">
            <summary>Start playback of timeline in reverse</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.PlayFromStart">
            <summary>Start playback of timeline from the start</summary>
        </member>
        <member name="M:UnrealEngine.UTimelineComponent.Play">
            <summary>Start playback of timeline</summary>
        </member>
        <member name="M:UnrealEngine.UUniformGridSlot.SetColumn(System.Int32)">
            <summary>Sets the column index of the slot, this determines what cell the slot is in the panel</summary>
        </member>
        <member name="M:UnrealEngine.UUniformGridSlot.SetRow(System.Int32)">
            <summary>Sets the row index of the slot, this determines what cell the slot is in the panel</summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.IsPlayingAnimation">
            <summary>Are we currently playing any animations?</summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.ReverseAnimation(UnrealEngine.UWidgetAnimation)">
            <summary>
            If an animation is playing, this function will reverse the playback.
            @param InAnimation The playing animation that we want to reverse
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetPlaybackSpeed(UnrealEngine.UWidgetAnimation,System.Single)">
            <summary>
            Changes the playback rate of a playing animation
            @param InAnimation The animation that is already playing
            @param PlaybackRate Playback rate multiplier (1 is default)
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetNumLoopsToPlay(UnrealEngine.UWidgetAnimation,System.Int32)">
            <summary>
            Changes the number of loops to play given a playing animation
            @param InAnimation The animation that is already playing
            @param NumLoopsToPlay The number of loops to play. (0 to loop indefinitely)
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.IsAnyAnimationPlaying">
            <summary>@return True if any animation is currently playing</summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.IsAnimationPlaying(UnrealEngine.UWidgetAnimation)">
            <summary>
            Gets whether an animation is currently playing on this widget.
            @param InAnimation The animation to check the playback status of
            @return True if the animation is currently playing
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.GetAnimationCurrentTime(UnrealEngine.UWidgetAnimation)">
            <summary>
            Gets the current time of the animation in this widget
            @param The name of the animation to get the current time for
            @return the current time of the animation.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.PauseAnimation(UnrealEngine.UWidgetAnimation)">
            <summary>
            Pauses an already running animation in this widget
            @param The name of the animation to pause
            @return the time point the animation was at when it was paused, relative to its start position.  Use this as the StartAtTime when you trigger PlayAnimation.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.StopAnimation(UnrealEngine.UWidgetAnimation)">
            <summary>
            Stops an already running animation in this widget
            @param The name of the animation to stop
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.PlayAnimationTo(UnrealEngine.UWidgetAnimation,System.Single,System.Single,System.Int32,UnrealEngine.EUMGSequencePlayMode,System.Single)">
            <summary>
            Plays an animation in this widget a specified number of times stoping at a specified time
            @param InAnimation The animation to play
            @param StartAtTime The time in the animation from which to start playing, relative to the start position. For looped animations, this will only affect the first playback of the animation.
            @param EndAtTime The absolute time in the animation where to stop, this is only considered in the last loop.
            @param NumLoopsToPlay The number of times to loop this animation (0 to loop indefinitely)
            @param PlaybackSpeed The speed at which the animation should play
            @param PlayMode Specifies the playback mode
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.PlayAnimation(UnrealEngine.UWidgetAnimation,System.Single,System.Int32,UnrealEngine.EUMGSequencePlayMode,System.Single)">
            <summary>
            Plays an animation in this widget a specified number of times
            @param InAnimation The animation to play
            @param StartAtTime The time in the animation from which to start playing, relative to the start position. For looped animations, this will only affect the first playback of the animation.
            @param NumLoopsToPlay The number of times to loop this animation (0 to loop indefinitely)
            @param PlaybackSpeed The speed at which the animation should play
            @param PlayMode Specifies the playback mode
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetForegroundColor(UnrealEngine.FSlateColor)">
            <summary>
            Sets the foreground color of the widget, this is inherited by sub widgets.  Any color property
            that is marked as inherit will use this color.
            @param InForegroundColor     The foreground color.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetColorAndOpacity(UnrealEngine.FLinearColor)">
            <summary>
            Sets the tint of the widget, this affects all child widgets.
            @param InColorAndOpacity     The tint to apply to all child widgets.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.GetOwningPlayerPawn">
            <summary>
            Gets the player pawn associated with this UI.
            @return Gets the owning player pawn that's owned by the player controller assigned to this widget.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetOwningPlayer(UnrealEngine.APlayerController)">
            <summary>
            Sets the local player associated with this UI via PlayerController reference.
            @param LocalPlayerController The PlayerController of the local player you want to be the conceptual owner of this UI.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.GetOwningPlayer">
            <summary>
            Gets the player controller associated with this UI.
            @return The player controller that owns the UI.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetOwningLocalPlayer(UnrealEngine.ULocalPlayer)">
            <summary>
            Sets the player associated with this UI via LocalPlayer reference.
            @param LocalPlayer The local player you want to be the conceptual owner of this UI.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.GetOwningLocalPlayer">
            <summary>
            Gets the local player associated with this UI.
            @return The owning local player.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.IsInViewport">
            <summary>@return true if the widget was added to the viewport using AddToViewport.</summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.SetPositionInViewport(UnrealEngine.FVector2D,System.Boolean)">
            <summary>
            Sets the widgets position in the viewport.
            @param Position The 2D position to set the widget to in the viewport.
            @param bRemoveDPIScale If you've already calculated inverse DPI, set this to false.
            Otherwise inverse DPI is applied to the position so that when the location is scaled
            by DPI, it ends up in the expected position.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.AddToPlayerScreen(System.Int32)">
            <summary>
            Adds the widget to the game's viewport in a section dedicated to the player.  This is valuable in a split screen
            game where you need to only show a widget over a player's portion of the viewport.
            @param ZOrder The higher the number, the more on top this widget will be.
            </summary>
        </member>
        <member name="M:UnrealEngine.UUserWidget.AddToViewport(System.Int32)">
            <summary>
            Adds it to the game's viewport and fills the entire screen, unless SetDesiredSizeInViewport is called
            to explicitly set the size.
            @param ZOrder The higher the number, the more on top this widget will be.
            </summary>
        </member>
        <member name="M:UnrealEngine.UVectorFieldComponent.SetIntensity(System.Single)">
            <summary>
            Set the intensity of the vector field.
            @param NewIntensity - The new intensity of the vector field.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.GetOwningPlayer">
            <summary>
            Gets the player controller associated with this UI.
            @return The player controller that owns the UI.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.GetCachedGeometry">
            <summary>
            Gets the last geometry used to Tick the widget.  This data may not exist yet if this call happens prior to
            the widget having been ticked/painted, or it may be out of date, or a frame behind.
            We recommend not to use this data unless there's no other way to solve your problem.  Normally in Slate we
            try and handle these issues by making a dependent widget part of the hierarchy, as to avoid frame behind
            or what are referred to as hysteresis problems, both caused by depending on geometry from the previous frame
            being used to advise how to layout a dependent object the current frame.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.RemoveFromParent">
            <summary>
            Removes the widget from its parent widget.  If this widget was added to the player's screen or the viewport
            it will also be removed from those containers.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.GetParent">
            <summary>Gets the parent widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.GetDesiredSize">
            <summary>
            Gets the widgets desired size.
            NOTE: The underlying Slate widget must exist and be valid, also at least one pre-pass must
                  have occurred before this value will be of any use.
            @return The widget's desired size
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.InvalidateLayoutAndVolatility">
            <summary>
            Invalidates the widget from the view of a layout caching widget that may own this widget.
            will force the owning widget to redraw and cache children on the next paint pass.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.ForceLayoutPrepass">
            <summary>
            Forces a pre-pass.  A pre-pass caches the desired size of the widget hierarchy owned by this widget.
            One pre-pass is already happens for every widget before Tick occurs.  You only need to perform another
            pre-pass if you are adding child widgets this frame and want them to immediately be visible this frame.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.SetUserFocus(UnrealEngine.APlayerController)">
            <summary>Sets the focus to this widget for a specific user</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.HasUserFocusedDescendants(UnrealEngine.APlayerController)">
            <summary>@return true if any descendant widget is focused by a specific user.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.HasFocusedDescendants">
            <summary>@return true if any descendant widget is focused by any user.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.HasAnyUserFocus">
            <summary>@return true if this widget is focused by any user.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.HasUserFocus(UnrealEngine.APlayerController)">
            <summary>@return true if this widget is focused by a specific user.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.SetKeyboardFocus">
            <summary>Sets the focus to this widget.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.HasMouseCapture">
            <summary>
            Checks to see if this widget is the current mouse captor
            @return  True if this widget has captured the mouse
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.HasKeyboardFocus">
            <summary>
            Checks to see if this widget currently has the keyboard focus
            @return  True if this widget has keyboard focus
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidget.IsHovered">
            <summary>@return true if the widget is currently being hovered by a pointer device</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.ForceVolatile(System.Boolean)">
            <summary>Sets the forced volatility of the widget.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.IsVisible">
            <summary>@return true if the widget is Visible, HitTestInvisible or SelfHitTestInvisible.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.ResetCursor">
            <summary>Resets the cursor to use on the widget, removing any customization for it.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.SetCursor(UnrealEngine.EMouseCursor)">
            <summary>Sets the cursor to show over the widget.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.SetToolTip(UnrealEngine.UWidget)">
            <summary>Sets a custom widget as the tooltip of the widget.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.SetToolTipText(System.String)">
            <summary>Sets the tooltip text for the widget.</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.SetIsEnabled(System.Boolean)">
            <summary>Sets the current enabled status of the widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidget.GetIsEnabled">
            <summary>Gets the current enabled status of the widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetAnimation.GetEndTime">
            <summary>
            Get the end time of this animation.
            @return End time in seconds.
            @see GetStartTime
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetAnimation.GetStartTime">
            <summary>
            Get the start time of this animation.
            @return Start time in seconds.
            @see GetEndTime
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.SetHardwareCursor(UnrealEngine.UObject,UnrealEngine.EMouseCursor,System.String,UnrealEngine.FVector2D)">
            <summary>Loads or sets a hardware cursor from the content directory in the game.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetSafeZonePadding(UnrealEngine.UObject,UnrealEngine.FVector2D@,UnrealEngine.FVector2D@,UnrealEngine.FVector2D@)">
            <summary>Gets the amount of padding that needs to be added when accounting for the safe zone on TVs.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetAllWidgetsWithInterface(UnrealEngine.UObject,UnrealEngine.TSubclassOf{UnrealEngine.UInterface},UnrealEngine.UUserWidget[]@,System.Boolean)">
            <summary>
            Find all widgets in the world with the specified interface.
            This is a slow operation, use with caution e.g. do not use every frame.
            @param Interface The interface to find. Must be specified or result array will be empty.
            @param FoundWidgets Output array of widgets that implement the specified interface.
            @param TopLevelOnly Only the widgets that are direct children of the viewport will be returned.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetAllWidgetsOfClass(UnrealEngine.UObject,UnrealEngine.UUserWidget[]@,UnrealEngine.TSubclassOf{UnrealEngine.UUserWidget},System.Boolean)">
            <summary>
            Find all widgets of a certain class.
            @param FoundWidgets The widgets that were found matching the filter.
            @param WidgetClass The widget class to filter by.
            @param TopLevelOnly Only the widgets that are direct children of the viewport will be returned.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DismissAllMenus">
            <summary>Closes any popup menu</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetDynamicMaterial(UnrealEngine.FSlateBrush@)">
            <summary>
            Gets the material that allows changes to parameters at runtime.  The brush must already have a material assigned to it,
            if it does it will automatically be converted to a MID.
            @return A material that supports dynamic input from the game.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.NoResourceBrush">
            <summary>
            Creates a Slate Brush that wont draw anything, the "Null Brush".
            @return A new slate brush that wont draw anything.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.SetBrushResourceToMaterial(UnrealEngine.FSlateBrush@,UnrealEngine.UMaterialInterface)">
            <summary>Sets the resource on a brush to be a Material.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.SetBrushResourceToTexture(UnrealEngine.FSlateBrush@,UnrealEngine.UTexture2D)">
            <summary>Sets the resource on a brush to be a UTexture2D.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetBrushResourceAsMaterial(UnrealEngine.FSlateBrush@)">
            <summary>Gets the brush resource as a material.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetBrushResourceAsTexture2D(UnrealEngine.FSlateBrush@)">
            <summary>Gets the brush resource as a texture 2D.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetBrushResource(UnrealEngine.FSlateBrush@)">
            <summary>Gets the resource object on a brush.  This could be a UTexture2D or a UMaterialInterface.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.MakeBrushFromMaterial(UnrealEngine.UMaterialInterface,System.Int32,System.Int32)">
            <summary>
            Creates a Slate Brush from a Material.  Materials don't have an implicit size, so providing a widget and height
            is required to hint slate with how large the image wants to be by default.
            @return A new slate brush using the material.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.MakeBrushFromTexture(UnrealEngine.UTexture2D,System.Int32,System.Int32)">
            <summary>
            Creates a Slate Brush from a Texture2D
            @param Width  When less than or equal to zero, the Width of the brush will default to the Width of the Texture
            @param Height  When less than or equal to zero, the Height of the brush will default to the Height of the Texture
            @return A new slate brush using the texture.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.MakeBrushFromAsset(UnrealEngine.USlateBrushAsset)">
            <summary>
            Creates a Slate Brush from a Slate Brush Asset
            @return A new slate brush using the asset's brush.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.CancelDragDrop">
            <summary>Cancels any current drag drop operation.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.GetDragDroppingContent">
            <summary>Returns the drag and drop operation that is currently occurring if any, otherwise nothing.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.IsDragDropping">
            <summary>Returns true if a drag/drop event is occurring that a widget can handle.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.EndDragDrop(UnrealEngine.FEventReply@)">
            <summary>An event should return FReply::Handled().EndDragDrop() to request that the current drag/drop operation be terminated.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DetectDragIfPressed(UnrealEngine.FPointerEvent,UnrealEngine.UWidget,UnrealEngine.FKey)">
            <summary>
            Given the pointer event, emit the DetectDrag reply if the provided key was pressed.
            If the DragKey is a touch key, that will also automatically work.
            @param PointerEvent  The pointer device event coming in.
            @param WidgetDetectingDrag  Detect dragging in this widget.
            @param DragKey                      This button should be pressed to detect the drag, won't emit the DetectDrag FEventReply unless this is pressed.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DetectDrag(UnrealEngine.FEventReply@,UnrealEngine.UWidget,UnrealEngine.FKey)">
            <summary>
            Ask Slate to detect if a user starts dragging in this widget later.  Slate internally tracks the movement
            and if it surpasses the drag threshold, Slate will send an OnDragDetected event to the widget.
            @param WidgetDetectingDrag  Detect dragging in this widget
            @param DragKey                      This button should be pressed to detect the drag
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.Unhandled">
            <summary>The event reply to use when you choose not to handle an event.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.Handled">
            <summary>
            The event reply to use when you choose to handle an event.  This will prevent the event
            from continuing to bubble up / down the widget hierarchy.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DrawTextFormatted(UnrealEngine.FPaintContext@,System.String,UnrealEngine.FVector2D,UnrealEngine.UFont,System.Int32,System.String,UnrealEngine.FLinearColor)">
            <summary>
            Draws text.
            @param Text                  The string to draw.
            @param Position              The starting position where the text is drawn in local space.
            @param Tint                  Color to render the line.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DrawLines(UnrealEngine.FPaintContext@,UnrealEngine.FVector2D[],UnrealEngine.FLinearColor,System.Boolean)">
            <summary>
            Draws several line segments.
            @param Points                Line pairs, each line needs to be 2 separate points in the array.
            @param Thickness             How many pixels thick this line should be.
            @param Tint                  Color to render the line.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DrawLine(UnrealEngine.FPaintContext@,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.FLinearColor,System.Boolean)">
            <summary>
            Draws a line.
            @param PositionA             Starting position of the line in local space.
            @param PositionB             Ending position of the line in local space.
            @param Thickness             How many pixels thick this line should be.
            @param Tint                  Color to render the line.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.DrawBox(UnrealEngine.FPaintContext@,UnrealEngine.FVector2D,UnrealEngine.FVector2D,UnrealEngine.USlateBrushAsset,UnrealEngine.FLinearColor)">
            <summary>Draws a box</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.SetInputMode_GameOnly(UnrealEngine.APlayerController)">
            <summary>Setup an input mode that allows only player input / player controller to respond to user input.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.CreateDragDropOperation(UnrealEngine.TSubclassOf{UnrealEngine.UDragDropOperation})">
            <summary>
            Creates a new drag and drop operation that can be returned from a drag begin to inform the UI what i
            being dragged and dropped and what it looks like.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetBlueprintLibrary.Create(UnrealEngine.UObject,UnrealEngine.TSubclassOf{UnrealEngine.UUserWidget},UnrealEngine.APlayerController)">
            <summary>Creates a widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.SetBackgroundColor(UnrealEngine.FLinearColor)">
            <summary>Sets the background color and opacityscale for this widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.RequestRedraw">
            <summary>Requests that the widget be redrawn.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.SetDrawSize(UnrealEngine.FVector2D)">
            <summary>Sets the draw size of the quad in the world</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.GetDrawSize">
            <summary>@return The draw size of the quad in the world</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.GetOwnerPlayer">
            <summary>Gets the local player that owns this widget component.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.SetOwnerPlayer(UnrealEngine.ULocalPlayer)">
            <summary>
            Sets the local player that owns this widget component.  Setting the owning player controls
            which player's viewport the widget appears on in a split screen scenario.  Additionally it
            forwards the owning player to the actual UserWidget that is spawned.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.SetWidget(UnrealEngine.UUserWidget)">
            <summary>
            Sets the widget to use directly. This function will keep track of the widget till the next time it's called
                with either a newer widget or a nullptr
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.GetMaterialInstance">
            <summary>@return The dynamic material instance used to render the user widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.GetRenderTarget">
            <summary>@return The render target to which the user widget is rendered</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetComponent.GetUserWidgetObject">
            <summary>@return The user widget object displayed by this component</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.SetCustomHitResult(UnrealEngine.FHitResult)">
            <summary>Set custom hit result.  This is only taken into account if InteractionSource is set to EWidgetInteractionSource::Custom.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.Get2DHitLocation">
            <summary>Gets the last hit location on the widget in 2D, local pixel units of the render target.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.GetLastHitResult">
            <summary>Gets the last hit result generated by the component.  Returns the custom hit result if that was set.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.IsOverHitTestVisibleWidget">
            <summary>
            Returns true if a widget under the hit result is has a visibility that makes it hit test
            visible.  e.g. Slate widgets that return true for GetVisibility().IsHitTestVisible().
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.IsOverFocusableWidget">
            <summary>
            Returns true if a widget under the hit result is focusable.  e.g. Slate widgets that
            return true for SupportsKeyboardFocus().
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.IsOverInteractableWidget">
            <summary>
            Returns true if a widget under the hit result is interactive.  e.g. Slate widgets
            that return true for IsInteractable().
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.GetHoveredWidgetComponent">
            <summary>Get the currently hovered widget component.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.ScrollWheel(System.Single)">
            <summary>Sends a scroll wheel event to the widget under the last hit result.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.SendKeyChar(System.String,System.Boolean)">
            <summary>
            Transmits a list of characters to a widget by simulating a OnKeyChar event for each key listed in
            the string.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.PressAndReleaseKey(UnrealEngine.FKey)">
            <summary>Does both the press and release of a simulated keyboard key.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.ReleaseKey(UnrealEngine.FKey)">
            <summary>Releases a key as if it had been released by the keyboard.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.PressKey(UnrealEngine.FKey,System.Boolean)">
            <summary>
            Press a key as if it had come from the keyboard.  Avoid using this for 'a-z|A-Z', things like
            the Editable Textbox in Slate expect OnKeyChar to be called to signal a specific character being
            send to the widget.  So for those cases you should use SendKeyChar.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.ReleasePointerKey(UnrealEngine.FKey)">
            <summary>
            Releases a key as if the mouse/pointer were the source of it.  Normally you would just use
            Left/Right mouse button for the Key.  However - advanced uses could also be imagined where you
            send other keys to signal widgets to take special actions if they're under the cursor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetInteractionComponent.PressPointerKey(UnrealEngine.FKey)">
            <summary>
            Presses a key as if the mouse/pointer were the source of it.  Normally you would just use
            Left/Right mouse button for the Key.  However - advanced uses could also be imagined where you
            send other keys to signal widgets to take special actions if they're under the cursor.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.RemoveAllWidgets(UnrealEngine.UObject)">
            <summary>Removes all widgets from the viewport.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsVerticalBoxSlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Vertical Box Slot, allowing you to manipulate its information.
            @param Widget The child widget of a Vertical Box.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsUniformGridSlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Uniform Grid Slot, allowing you to manipulate layout information.
            @param Widget The child widget of a uniform grid panel.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsOverlaySlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Overlay Slot, allowing you to manipulate layout information.
            @param Widget The child widget of a overlay panel.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsHorizontalBoxSlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Horizontal Box Slot, allowing you to manipulate its information.
            @param Widget The child widget of a Horizontal Box.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsGridSlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Grid Slot, allowing you to manipulate layout information.
            @param Widget The child widget of a grid panel.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsCanvasSlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Canvas Slot, allowing you to manipulate layout information.
            @param Widget The child widget of a canvas panel.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.SlotAsBorderSlot(UnrealEngine.UWidget)">
            <summary>
            Gets the slot object on the child widget as a Border Slot, allowing you to manipulate layout information.
            @param Widget The child widget of a border panel.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.GetMousePositionScaledByDPI(UnrealEngine.APlayerController,System.Single@,System.Single@)">
            <summary>
            Gets the mouse position of the player controller, scaled by the DPI.  If you're trying to go from raw mouse screenspace coordinates
            to fullscreen widget space, you'll need to transform the mouse into DPI Scaled space.  This function performs that scaling.
            MousePositionScaledByDPI = MousePosition * (1 / ViewportScale).
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.GetViewportSize(UnrealEngine.UObject)">
            <summary>Gets the size of the game viewport.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.GetViewportScale(UnrealEngine.UObject)">
            <summary>Gets the current DPI Scale being applied to the viewport and all the Widgets.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetLayoutLibrary.ProjectWorldLocationToWidgetPosition(UnrealEngine.APlayerController,UnrealEngine.FVector,UnrealEngine.FVector2D@)">
            <summary>
            Gets the projected world to screen position for a player, then converts it into a widget
            position, which takes into account any quality scaling.
            @param PlayerController The player controller to project the position in the world to their screen.
            @param WorldLocation The world location to project from.
            @param ScreenPosition The position in the viewport with quality scale removed and DPI scale remove.
            @return true if the position projects onto the screen.
            </summary>
        </member>
        <member name="M:UnrealEngine.UWidgetSwitcher.GetWidgetAtIndex(System.Int32)">
            <summary>Get a widget at the provided index</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetSwitcher.SetActiveWidget(UnrealEngine.UWidget)">
            <summary>Activates the widget and makes it the active index.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetSwitcher.SetActiveWidgetIndex(System.Int32)">
            <summary>Activates the widget at the specified index.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetSwitcher.GetActiveWidgetIndex">
            <summary>Gets the slot index of the currently active widget</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetSwitcher.GetNumWidgets">
            <summary>Gets the number of widgets that this switcher manages.</summary>
        </member>
        <member name="M:UnrealEngine.UWidgetTree.FindWidget(System.IntPtr,System.String)">
            Finds the widget in the tree by name. 
        </member>
        <member name="M:UnrealEngine.UWidgetTree.RemoveWidget(System.IntPtr,System.IntPtr)">
            Removes the widget from the hierarchy and all sub widgets. 
        </member>
        <member name="M:UnrealEngine.UWidgetTree.FindWidgetParent(System.IntPtr,System.IntPtr,System.Int32@)">
            Gets the parent widget of a given widget, and potentially the child index. 
        </member>
        <member name="M:UnrealEngine.UWidgetTree.GetAllWidgets(System.IntPtr,System.IntPtr[]@)">
            Gathers all the widgets in the tree recursively 
        </member>
        <member name="M:UnrealEngine.UWrapBox.SetInnerSlotPadding(UnrealEngine.FVector2D)">
            <summary>Sets the inner slot padding goes between slots sharing borders</summary>
        </member>
        <member name="F:UnrealEngine.FColor.White">
            Some pre-inited colors, useful for debug code 
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Multiply(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Gets the result of multiplying a Matrix to this.
            
             @param Other The matrix to multiply this by.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Addition(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Gets the result of adding a matrix to this.
            
             @param Other The Matrix to add.
             @return The result of addition.
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Multiply(UnrealEngine.FMatrix,System.Single)">
            This isn't applying SCALE, just multiplying float to all members - i.e. weighting
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Equality(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Checks whether two matrix are identical.
            
             @param Other The other matrix.
             @return true if two matrix are identical, otherwise false.
        </member>
        <member name="M:UnrealEngine.FMatrix.Equals(System.Object)">
             Checks whether another Matrix is equal to this, within specified tolerance.
            
             @param Other The other Matrix.
             @param Tolerance Error Tolerance.
             @return true if two Matrix are equal, within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FMatrix.op_Inequality(UnrealEngine.FMatrix,UnrealEngine.FMatrix)">
             Checks whether another Matrix is not equal to this, within specified tolerance.
            
             @param Other The other Matrix.
             @return true if two Matrix are not equal, within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FMatrix.TransformPosition(UnrealEngine.FVector)">
            Transform a location - will take into account translation part of the FMatrix. 
        </member>
        <member name="M:UnrealEngine.FMatrix.InverseTransformPosition(UnrealEngine.FVector)">
            Inverts the matrix and then transforms V - correctly handles scaling in this matrix. 
        </member>
        <member name="M:UnrealEngine.FMatrix.TransformVector(UnrealEngine.FVector)">
            Transform a direction vector - will not take into account translation part of the FMatrix. 
            If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT.
        </member>
        <member name="M:UnrealEngine.FMatrix.InverseTransformVector(UnrealEngine.FVector)">
            Transform a direction vector by the inverse of this matrix - will not take into account translation part.
            If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT with adjoint of matrix inverse.
        </member>
        <member name="M:UnrealEngine.FMatrix.RotDeterminant">
            @return the determinant of rotation 3x3 matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.InverseFast">
            Fast path, doesn't check for nil matrices in final release builds 
        </member>
        <member name="M:UnrealEngine.FMatrix.Inverse">
            Fast path, and handles nil matrices. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ExtractScaling(System.Single)">
            Remove any scaling from this matrix (ie magnitude of each row is 1) and return the 3D scale vector that was initially present with error Tolerance 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetScaleVector(System.Single)">
            return a 3D scale vector calculated from this matrix (where each component is the magnitude of a row vector) with error Tolerance. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ConcatTranslation(UnrealEngine.FVector)">
            Returns a matrix with an additional translation concatenated. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ScaleTranslation(UnrealEngine.FVector)">
            Scale the translation part of the matrix by the supplied vector. 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetMaximumAxisScale">
            @return the maximum magnitude of any row of the matrix. 
        </member>
        <member name="M:UnrealEngine.FMatrix.ApplyScale(System.Single)">
            Apply Scale to this matrix *
        </member>
        <member name="M:UnrealEngine.FMatrix.GetScaledAxis(UnrealEngine.EAxis)">
             get axis of this matrix scaled by the scale of the matrix
            
             @param i index into the axis of the matrix
             @ return vector of the axis
        </member>
        <member name="M:UnrealEngine.FMatrix.GetScaledAxes(UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
             get axes of this matrix scaled by the scale of the matrix
            
             @param X axes returned to this param
             @param Y axes returned to this param
             @param Z axes returned to this param
        </member>
        <member name="M:UnrealEngine.FMatrix.GetUnitAxis(UnrealEngine.EAxis)">
             get unit length axis of this matrix
            
             @param i index into the axis of the matrix
             @return vector of the axis
        </member>
        <member name="M:UnrealEngine.FMatrix.GetUnitAxes(UnrealEngine.FVector@,UnrealEngine.FVector@,UnrealEngine.FVector@)">
             get unit length axes of this matrix
            
             @param X axes returned to this param
             @param Y axes returned to this param
             @param Z axes returned to this param
        </member>
        <member name="M:UnrealEngine.FMatrix.SetAxis(System.Int32,UnrealEngine.FVector)">
             set an axis of this matrix
            
             @param i index into the axis of the matrix
             @param Axis vector of the axis
        </member>
        <member name="M:UnrealEngine.FMatrix.GetColumn(System.Int32)">
             get a column of this matrix
            
             @param i index into the column of the matrix
             @return vector of the column 
        </member>
        <member name="M:UnrealEngine.FMatrix.Rotator">
            @return rotator representation of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.ToQuat">
             Transform a rotation matrix into a quaternion.
            
             @warning rotation part will need to be unit length for this to be right!
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumNearPlane(UnrealEngine.FPlane@)">
            @param OutPlane the near plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumFarPlane(UnrealEngine.FPlane@)">
            @param OutPlane the far plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumLeftPlane(UnrealEngine.FPlane@)">
            @param OutPlane the left plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumRightPlane(UnrealEngine.FPlane@)">
            @param OutPlane the right plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumTopPlane(UnrealEngine.FPlane@)">
            @param OutPlane the top plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.GetFrustumBottomPlane(UnrealEngine.FPlane@)">
            @param OutPlane the bottom plane of the Frustum of this matrix 
        </member>
        <member name="M:UnrealEngine.FMatrix.Mirror(UnrealEngine.EAxis,UnrealEngine.EAxis)">
            Utility for mirroring this transform across a certain plane, and flipping one of the axis as well.
        </member>
        <member name="M:UnrealEngine.FMatrix.ToString">
             Get a textual representation of the vector.
            
             @return Text describing the vector.
        </member>
        <member name="P:UnrealEngine.FPlane.Item(System.Int32)">
             Gets specific component of the vector.
            
             @param Index the index of vector component
             @return reference to component.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector4)">
             Constructor.
            
             @param V 4D vector to set up plane.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(System.Single,System.Single,System.Single,System.Single)">
             Constructor.
            
             @param InX X Coordinate.
             @param InY Y Coordinate.
             @param InZ Z Coordinate.
             @param InW W Coordinate.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector,System.Single)">
             Constructor.
            
             @param InNormal Plane Normal Vector.
             @param InW Plane W Coordinate.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector,UnrealEngine.FVector)">
             Constructor.
            
             @param InBase Base point in plane.
             @param InNormal Plane Normal Vector.
        </member>
        <member name="M:UnrealEngine.FPlane.#ctor(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Constructor.
            
             @param A First point in the plane.
             @param B Second point in the plane.
             @param C Third point in the plane.
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnrealEngine.FPlane.PlaneDot(UnrealEngine.FVector)" -->
        <member name="M:UnrealEngine.FPlane.Flip">
             Get a flipped version of the plane.
            
             @return A flipped version of the plane.
        </member>
        <member name="M:UnrealEngine.FPlane.TransformBy(UnrealEngine.FMatrix)">
             Get the result of transforming the plane by a Matrix.
            
             @param M The matrix to transform plane with.
             @return The result of transform.
        </member>
        <member name="M:UnrealEngine.FPlane.TransformByUsingAdjointT(UnrealEngine.FMatrix,System.Single,UnrealEngine.FMatrix)">
             You can optionally pass in the matrices transpose-adjoint, which save it recalculating it.
             MSM: If we are going to save the transpose-adjoint we should also save the more expensive
             determinant.
            
             @param M The Matrix to transform plane with.
             @param DetM Determinant of Matrix.
             @param TA Transpose-adjoint of Matrix.
             @return The result of transform.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Equality(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Check if two planes are identical.
            
             @param V The other plane.
             @return true if planes are identical, otherwise false.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Inequality(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Check if two planes are different.
            
             @param V The other plane.
             @return true if planes are different, otherwise false.
        </member>
        <member name="M:UnrealEngine.FPlane.Equals(UnrealEngine.FPlane,System.Single)">
             Checks whether two planes are equal within specified tolerance.
            
             @param V The other plane.
             @param Tolerance Error Tolerance.
             @return true if the two planes are equal within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FPlane.op_BitwiseOr(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Calculates dot product of two planes.
            
             @param V The other plane.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Addition(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Gets result of adding a plane to this.
            
             @param V The other plane.
             @return The result of adding a plane to this.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Subtraction(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Gets result of subtracting a plane from this.
            
             @param V The other plane.
             @return The result of subtracting a plane from this.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Division(UnrealEngine.FPlane,System.Single)">
             Gets result of dividing a plane.
            
             @param Scale What to divide by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Multiply(UnrealEngine.FPlane,System.Single)">
             Gets result of scaling a plane.
            
             @param Scale The scaling factor.
             @return The result of scaling.
        </member>
        <member name="M:UnrealEngine.FPlane.op_Multiply(UnrealEngine.FPlane,UnrealEngine.FPlane)">
             Gets result of multiplying a plane with this.
            
             @param V The other plane.
             @return The result of multiplying a plane with this.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Addition(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Gets the result of adding a Quaternion to this.
             This is a component-wise addition; composing quaternions should be done via multiplication.
            
             @param Q The Quaternion to add.
             @return The result of addition.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Subtraction(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Gets the result of subtracting a Quaternion to this.
             This is a component-wise subtraction; composing quaternions should be done via multiplication.
            
             @param Q The Quaternion to subtract.
             @return The result of subtraction.
        </member>
        <member name="M:UnrealEngine.FQuat.Equals(System.Object)">
             Checks whether another Quaternion is equal to this, within specified tolerance.
            
             @param Q The other Quaternion.
             @param Tolerance Error Tolerance.
             @return true if two Quaternion are equal, within specified tolerance, otherwise false.
        </member>
        <member name="M:UnrealEngine.FQuat.IsIdentity">
             Checks whether this Quaternion is an Identity Quaternion.
             Assumes Quaternion tested is normalized.
            
             @return true if Quaternion is a normalized Identity Quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Multiply(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Gets the result of multiplying this by another quaternion (this * Q).
            
             Order matters when composing quaternions: C = A * B will yield a quaternion C that logically
             first applies B then A to any subsequent transformation (right first, then left).
            
             @param Q The Quaternion to multiply this by.
             @return The result of multiplication (this * Q).
        </member>
        <member name="M:UnrealEngine.FQuat.op_Multiply(UnrealEngine.FQuat,UnrealEngine.FVector)">
             Rotate a vector by this quaternion.
            
             @param V the vector to be rotated
             @return vector after rotation
             @see RotateVector()
        </member>
        <member name="M:UnrealEngine.FQuat.op_Multiply(UnrealEngine.FQuat,System.Single)">
             Get the result of scaling this quaternion.
            
             @param Scale The scaling factor.
             @return The result of scaling.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Division(UnrealEngine.FQuat,System.Single)">
             Divide this quaternion by scale.
            
             @param Scale What to divide by.
             @return new Quaternion of this after division by scale.
        </member>
        <member name="M:UnrealEngine.FQuat.op_Equality(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Checks whether two quaternions are identical.
             This is an exact comparison per-component;see Equals() for a comparison
             that allows for a small error tolerance and flipped axes of rotation.
            
             @param Q The other quaternion.
             @return true if two quaternion are identical, otherwise false.
             @see Equals()
        </member>
        <member name="M:UnrealEngine.FQuat.op_Inequality(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Checks whether two quaternions are not identical.
            
             @param Q The other quaternion.
             @return true if two quaternion are not identical, otherwise false.
        </member>
        <member name="M:UnrealEngine.FQuat.op_BitwiseOr(UnrealEngine.FQuat,UnrealEngine.FQuat)">
             Calculates dot product of two quaternions.
            
             @param Q The other quaternions.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FQuat.MakeFromEuler(UnrealEngine.FVector)">
            Convert a vector of floating-point Euler angles (in degrees) into a Quaternion.
            
            @param Euler the Euler angles
            @return constructed FQuat
        </member>
        <member name="M:UnrealEngine.FQuat.Euler">
            Convert a Quaternion into floating-point Euler angles (in degrees). 
        </member>
        <member name="M:UnrealEngine.FQuat.Normalize(System.Single)">
             Normalize this quaternion if it is large enough.
             If it is too small, returns an identity quaternion.
            
             @param Tolerance Minimum squared length of quaternion for normalization.
        </member>
        <member name="M:UnrealEngine.FQuat.GetNormalized(System.Single)">
             Get a normalized copy of this quaternion.
             If it is too small, returns an identity quaternion.
            
             @param Tolerance Minimum squared length of quaternion for normalization.
        </member>
        <member name="M:UnrealEngine.FQuat.Size">
             Get the length of this quaternion.
            
             @return The length of this quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.SizeSquared">
             Get the length squared of this quaternion.
            
             @return The length of this quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.ToAxisAndAngle(UnrealEngine.FVector@,System.Single@)">
             get the axis and angle of rotation of this quaternion
            
             @param Axis{out] vector of axis of the quaternion
             @param Angle{out] angle of the quaternion
             @warning : assumes normalized quaternions.
        </member>
        <member name="M:UnrealEngine.FQuat.RotateVector(UnrealEngine.FVector)">
             Rotate a vector by this quaternion.
            
             @param V the vector to be rotated
             @return vector after rotation
        </member>
        <member name="M:UnrealEngine.FQuat.UnrotateVector(UnrealEngine.FVector)">
             Rotate a vector by the inverse of this quaternion.
            
             @param V the vector to be rotated
             @return vector after rotation by the inverse of this quaternion.
        </member>
        <member name="M:UnrealEngine.FQuat.Log">
            @return quaternion with W=0 and V=theta*v.
        </member>
        <member name="M:UnrealEngine.FQuat.Exp">
            @note Exp should really only be used after Log.
            Assumes a quaternion with W=0 and V=theta*v (where |v| = 1).
            Exp(q) = (sin(theta)*v, cos(theta))
        </member>
        <member name="M:UnrealEngine.FQuat.Inverse">
            @return inverse of this quaternion
        </member>
        <member name="M:UnrealEngine.FQuat.EnforceShortestArcWith(UnrealEngine.FQuat)">
            Enforce that the delta between this Quaternion and another one represents
            the shortest possible rotation angle
        </member>
        <member name="M:UnrealEngine.FQuat.GetAxisX">
            Get the forward direction (X axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetAxisY">
            Get the right direction (Y axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetAxisZ">
            Get the up direction (Z axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetForwardVector">
            Get the forward direction (X axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetRightVector">
            Get the right direction (Y axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetUpVector">
            Get the up direction (Z axis) after it has been rotated by this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.Vector">
            Convert a rotation into a unit vector facing in its direction. Equivalent to GetForwardVector(). 
        </member>
        <member name="M:UnrealEngine.FQuat.Rotator">
            Get the FRotator representation of this Quaternion. 
        </member>
        <member name="M:UnrealEngine.FQuat.GetRotationAxis">
            Get the axis of rotation of the Quaternion.
            This is the axis around which rotation occurs to transform the canonical coordinate system to the target orientation.
            For the identity Quaternion which has no such rotation, FVector(1,0,0) is returned.
        </member>
        <member name="M:UnrealEngine.FQuat.ToString">
             Get a textual representation of the vector.
            
             @return Text describing the vector.
        </member>
        <member name="M:UnrealEngine.FRotator.#ctor(System.Single)">
             Constructor
            
             @param InF Value to set all components to.
        </member>
        <member name="M:UnrealEngine.FRotator.#ctor(System.Single,System.Single,System.Single)">
             Constructor.
            
             @param InPitch Pitch in degrees.
             @param InYaw Yaw in degrees.
             @param InRoll Roll in degrees.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Addition(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Get the result of adding a rotator to this.
            
             @param R The other rotator.
             @return The result of adding a rotator to this.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Subtraction(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Get the result of subtracting a rotator from this.
            
             @param R The other rotator.
             @return The result of subtracting a rotator from this.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Multiply(UnrealEngine.FRotator,System.Single)">
             Get the result of scaling this rotator.
            
             @param Scale The scaling factor.
             @return The result of scaling.
        </member>
        <member name="M:UnrealEngine.FRotator.op_Equality(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Checks whether two rotators are identical. This checks each component for exact equality.
            
             @param R The other rotator.
             @return true if two rotators are identical, otherwise false.
             @see Equals()
        </member>
        <member name="M:UnrealEngine.FRotator.op_Inequality(UnrealEngine.FRotator,UnrealEngine.FRotator)">
             Checks whether two rotators are different.
            
             @param V The other rotator.
             @return true if two rotators are different, otherwise false.
        </member>
        <member name="M:UnrealEngine.FRotator.Add(System.Single,System.Single,System.Single)">
             Adds to each component of the rotator.
            
             @param DeltaPitch Change in pitch. (+/-)
             @param DeltaYaw Change in yaw. (+/-)
             @param DeltaRoll Change in roll. (+/-)
             @return Copy of rotator after addition.
        </member>
        <member name="M:UnrealEngine.FRotator.GetInverse">
            Returns the inverse of the rotator.
        </member>
        <member name="M:UnrealEngine.FRotator.Vector">
             Convert a rotation into a unit vector facing in its direction.
            
             @return Rotation as a unit direction vector.
        </member>
        <member name="M:UnrealEngine.FRotator.Quaternion">
             Get Rotation as a quaternion.
            
             @return Rotation as a quaternion.
        </member>
        <member name="M:UnrealEngine.FRotator.Euler">
             Convert a Rotator into floating-point Euler angles (in degrees). Rotator now stored in degrees.
            
             @return Rotation as a Euler angle vector.
        </member>
        <member name="M:UnrealEngine.FRotator.RotateVector(UnrealEngine.FVector)">
             Rotate a vector rotated by this rotator.
            
             @param V The vector to rotate.
             @return The rotated vector.
        </member>
        <member name="M:UnrealEngine.FRotator.UnrotateVector(UnrealEngine.FVector)">
             Returns the vector rotated by the inverse of this rotator.
            
             @param V The vector to rotate.
             @return The rotated vector.
        </member>
        <member name="M:UnrealEngine.FRotator.Clamp">
             Gets the rotation values so they fall within the range [0,360]
            
             @return Clamped version of rotator.
        </member>
        <member name="M:UnrealEngine.FRotator.GetNormalized">
             Create a copy of this rotator and normalize, removes all winding and creates the "shortest route" rotation. 
            
             @return Normalized copy of this rotator
        </member>
        <member name="M:UnrealEngine.FRotator.GetDenormalized">
             Create a copy of this rotator and denormalize, clamping each axis to 0 - 360. 
            
             @return Denormalized copy of this rotator
        </member>
        <member name="M:UnrealEngine.FRotator.Normalize">
            In-place normalize, removes all winding and creates the "shortest route" rotation.
        </member>
        <member name="M:UnrealEngine.FRotator.ClampAxis(System.Single)">
             Clamps an angle to the range of [0, 360).
            
             @param Angle The angle to clamp.
             @return The clamped angle.
        </member>
        <member name="M:UnrealEngine.FRotator.NormalizeAxis(System.Single)">
             Clamps an angle to the range of (-180, 180].
            
             @param Angle The Angle to clamp.
             @return The clamped angle.
        </member>
        <member name="M:UnrealEngine.FRotator.MakeFromEuler(UnrealEngine.FVector)">
             Convert a vector of floating-point Euler angles (in degrees) into a Rotator. Rotator now stored in degrees
            
             @param Euler Euler angle vector.
             @return A rotator from a Euler angle.
        </member>
        <member name="M:UnrealEngine.FTransform.ToMatrixWithScale">
            Convert this Transform to a transformation matrix with scaling.
        </member>
        <member name="M:UnrealEngine.FTransform.ToInverseMatrixWithScale">
            Convert this Transform to matrix with scaling and compute the inverse of that.
        </member>
        <member name="M:UnrealEngine.FTransform.Inverse">
            Convert this Transform to inverse.
        </member>
        <member name="M:UnrealEngine.FTransform.ToMatrixNoScale">
            Convert this Transform to a transformation matrix, ignoring its scaling
        </member>
        <member name="M:UnrealEngine.FTransform.Blend(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single)">
            Set this transform to the weighted blend of the supplied two transforms. 
        </member>
        <member name="M:UnrealEngine.FTransform.BlendWith(UnrealEngine.FTransform,System.Single)">
            Set this Transform to the weighted blend of it and the supplied Transform. 
        </member>
        <member name="M:UnrealEngine.FTransform.op_Addition(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Quaternion addition is wrong here. This is just a special case for linear interpolation.
            Use only within blends!!
            Rotation part is NOT normalized!!
        </member>
        <member name="M:UnrealEngine.FTransform.op_Multiply(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Return a transform that is the result of this multiplied by another transform.
            Order matters when composing transforms : C = A * B will yield a transform C that logically first applies A then B to any subsequent transformation.
            
            @param  Other other transform by which to multiply.
            @return new transform: this * Other
        </member>
        <member name="M:UnrealEngine.FTransform.op_Multiply(UnrealEngine.FTransform,UnrealEngine.FQuat)">
             Return a transform that is the result of this multiplied by another transform (made only from a rotation).
             Order matters when composing transforms : C = A * B will yield a transform C that logically first applies A then B to any subsequent transformation.
            
             @param  Other other quaternion rotation by which to multiply.
             @return new transform: this * FTransform(Other)
        </member>
        <member name="M:UnrealEngine.FTransform.SetToRelativeTransform(UnrealEngine.FTransform)">
            Set current transform and the relative to ParentTransform.
            Equates to This = This->GetRelativeTransform(Parent), but saves the intermediate FTransform storage and copy.
        </member>
        <member name="M:UnrealEngine.FTransform.InverseTransformPosition(UnrealEngine.FVector)">
            Inverts the matrix and then transforms V - correctly handles scaling in this matrix. 
        </member>
        <member name="M:UnrealEngine.FTransform.InverseTransformVector(UnrealEngine.FVector)">
            Transform a direction vector by the inverse of this matrix - will not take into account translation part.
            If you want to transform a surface normal (or plane) and correctly account for non-uniform scaling you should use TransformByUsingAdjointT with adjoint of matrix inverse.
        </member>
        <member name="M:UnrealEngine.FTransform.GetDeterminant">
            Calculate the  
        </member>
        <member name="M:UnrealEngine.FTransform.SetLocation(UnrealEngine.FVector)">
            Set the translation of this transformation 
        </member>
        <member name="M:UnrealEngine.FTransform.Multiply(UnrealEngine.FTransform@,UnrealEngine.FTransform@,UnrealEngine.FTransform@)">
             Create a new transform: OutTransform = A * B.
            
             Order matters when composing transforms : A * B will yield a transform that logically first applies A then B to any subsequent transformation.
             
             @param  OutTransform pointer to transform that will store the result of A * B.
             @param  A Transform A.
             @param  B Transform B.
        </member>
        <member name="M:UnrealEngine.FTransform.SetComponents(UnrealEngine.FQuat,UnrealEngine.FVector,UnrealEngine.FVector)">
            Sets the components
            @param InRotation The new value for the Rotation component
            @param InTranslation The new value for the Translation component
            @param InScale3D The new value for the Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.SetIdentity">
            Sets the components to the identity transform:
              Rotation = (0,0,0,1)
              Translation = (0,0,0)
              Scale3D = (1,1,1)
        </member>
        <member name="M:UnrealEngine.FTransform.MultiplyScale3D(UnrealEngine.FVector)">
            Scales the Scale3D component by a new factor
            @param Scale3DMultiplier The value to multiply Scale3D with
        </member>
        <member name="M:UnrealEngine.FTransform.SetTranslation(UnrealEngine.FVector)">
            Sets the translation component
            @param NewTranslation The new value for the translation component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyTranslation(UnrealEngine.FTransform)">
            Copy translation from another FTransform. 
        </member>
        <member name="M:UnrealEngine.FTransform.ConcatenateRotation(UnrealEngine.FQuat)">
            Concatenates another rotation to this transformation 
            @param DeltaRotation The rotation to concatenate in the following fashion: Rotation = Rotation * DeltaRotation
        </member>
        <member name="M:UnrealEngine.FTransform.AddToTranslation(UnrealEngine.FVector)">
            Adjusts the translation component of this transformation 
            @param DeltaTranslation The translation to add in the following fashion: Translation += DeltaTranslation
        </member>
        <member name="M:UnrealEngine.FTransform.AddTranslations(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Add the translations from two FTransforms and return the result.
            @return A.Translation + B.Translation
        </member>
        <member name="M:UnrealEngine.FTransform.SubtractTranslations(UnrealEngine.FTransform,UnrealEngine.FTransform)">
            Subtract translations from two FTransforms and return the difference.
            @return A.Translation - B.Translation.
        </member>
        <member name="M:UnrealEngine.FTransform.SetRotation(UnrealEngine.FQuat)">
            Sets the rotation component
            @param NewRotation The new value for the rotation component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyRotation(UnrealEngine.FTransform)">
            Copy rotation from another FTransform. 
        </member>
        <member name="M:UnrealEngine.FTransform.SetScale3D(UnrealEngine.FVector)">
            Sets the Scale3D component
            @param NewScale3D The new value for the Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyScale3D(UnrealEngine.FTransform)">
            Copy scale from another FTransform. 
        </member>
        <member name="M:UnrealEngine.FTransform.SetTranslationAndScale3D(UnrealEngine.FVector,UnrealEngine.FVector)">
            Sets both the translation and Scale3D components at the same time
            @param NewTranslation The new value for the translation component
            @param NewScale3D The new value for the Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.AccumulateWithShortestRotation(UnrealEngine.FTransform,System.Single)">
             Accumulates another transform with this one, with an optional blending weight
            
             Rotation is accumulated additively, in the shortest direction (Rotation = Rotation +/- DeltaAtom.Rotation * Weight)
             Translation is accumulated additively (Translation += DeltaAtom.Translation * Weight)
             Scale3D is accumulated additively (Scale3D += DeltaAtom.Scale3D * Weight)
            
             @param DeltaAtom The other transform to accumulate into this one
             @param Weight The weight to multiply DeltaAtom by before it is accumulated.
        </member>
        <member name="M:UnrealEngine.FTransform.Accumulate(UnrealEngine.FTransform)">
             Accumulates another transform with this one
            
             Rotation is accumulated multiplicatively (Rotation = SourceAtom.Rotation * Rotation)
             Translation is accumulated additively (Translation += SourceAtom.Translation)
             Scale3D is accumulated multiplicatively (Scale3D *= SourceAtom.Scale3D)
            
             @param SourceAtom The other transform to accumulate into this one
        </member>
        <member name="M:UnrealEngine.FTransform.Accumulate(UnrealEngine.FTransform,System.Single)">
            Accumulates another transform with this one, with a blending weight
            
             Let SourceAtom = Atom * BlendWeight
             Rotation is accumulated multiplicatively (Rotation = SourceAtom.Rotation * Rotation).
             Translation is accumulated additively (Translation += SourceAtom.Translation)
             Scale3D is accumulated multiplicatively (Scale3D *= SourceAtom.Scale3D)
            
             Note: Rotation will not be normalized! Will have to be done manually.
            
             @param Atom The other transform to accumulate into this one
             @param BlendWeight The weight to multiply Atom by before it is accumulated.
        </member>
        <member name="M:UnrealEngine.FTransform.LerpTranslationScale3D(UnrealEngine.FTransform,UnrealEngine.FTransform,System.Single)">
             Set the translation and Scale3D components of this transform to a linearly interpolated combination of two other transforms
            
             Translation = FMath::Lerp(SourceAtom1.Translation, SourceAtom2.Translation, Alpha)
             Scale3D = FMath::Lerp(SourceAtom1.Scale3D, SourceAtom2.Scale3D, Alpha)
            
             @param SourceAtom1 The starting point source atom (used 100% if Alpha is 0)
             @param SourceAtom2 The ending point source atom (used 100% if Alpha is 1)
             @param Alpha The blending weight between SourceAtom1 and SourceAtom2
        </member>
        <member name="M:UnrealEngine.FTransform.AccumulateWithAdditiveScale3D(UnrealEngine.FTransform)">
             Accumulates another transform with this one
            
             Rotation is accumulated multiplicatively (Rotation = SourceAtom.Rotation * Rotation)
             Translation is accumulated additively (Translation += SourceAtom.Translation)
             Scale3D is accumulated additively (Scale3D += SourceAtom.Scale3D)
            
             @param SourceAtom The other transform to accumulate into this one
        </member>
        <member name="M:UnrealEngine.FTransform.NormalizeRotation">
            Normalize the rotation component of this transformation
        </member>
        <member name="M:UnrealEngine.FTransform.IsRotationNormalized">
             Checks whether the rotation component is normalized or not
            
             @return true if the rotation component is normalized, and false otherwise.
        </member>
        <member name="M:UnrealEngine.FTransform.GetRotation">
             Returns the rotation component
            
             @return The rotation component
        </member>
        <member name="M:UnrealEngine.FTransform.GetTranslation">
             Returns the translation component
            
             @return The translation component
        </member>
        <member name="M:UnrealEngine.FTransform.GetScale3D">
             Returns the Scale3D component
            
             @return The Scale3D component
        </member>
        <member name="M:UnrealEngine.FTransform.CopyRotationPart(UnrealEngine.FTransform)">
             Sets the Rotation and Scale3D of this transformation from another transform
            
             @param SrcBA The transform to copy rotation and Scale3D from
        </member>
        <member name="M:UnrealEngine.FTransform.CopyTranslationAndScale3D(UnrealEngine.FTransform)">
             Sets the Translation and Scale3D of this transformation from another transform
            
             @param SrcBA The transform to copy translation and Scale3D from
        </member>
        <member name="F:UnrealEngine.FVector.ZeroVector">
            A zero vector (0,0,0) 
        </member>
        <member name="F:UnrealEngine.FVector.UpVector">
            World up vector (0,0,1) 
        </member>
        <member name="F:UnrealEngine.FVector.ForwardVector">
            Unreal forward vector (1,0,0) 
        </member>
        <member name="F:UnrealEngine.FVector.RightVector">
            Unreal right vector (0,1,0) 
        </member>
        <member name="M:UnrealEngine.FVector.#ctor(System.Single)">
             Constructor initializing all components to a single float value.
            
             @param InF Value to set all components to.
        </member>
        <member name="M:UnrealEngine.FVector.#ctor(System.Single,System.Single,System.Single)">
             Constructor using initial values for each component.
            
             @param InX X Coordinate.
             @param InY Y Coordinate.
             @param InZ Z Coordinate.
        </member>
        <member name="M:UnrealEngine.FVector.#ctor(UnrealEngine.FVector4)">
             Constructor using the XYZ components from a 4D vector.
            
             @param V 4D Vector to copy from.
        </member>
        <member name="M:UnrealEngine.FVector.op_ExclusiveOr(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate cross product between this and another vector.
            
             @param V The other vector.
             @return The cross product.
        </member>
        <member name="M:UnrealEngine.FVector.CrossProduct(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the cross product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The cross product.
        </member>
        <member name="M:UnrealEngine.FVector.op_BitwiseOr(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the dot product between this and another vector.
            
             @param V The other vector.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FVector.DotProduct(UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the dot product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FVector.op_Addition(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise addition of this and another vector.
            
             @param V The vector to add to this.
             @return The result of vector addition.
        </member>
        <member name="M:UnrealEngine.FVector.op_Subtraction(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise subtraction of this by another vector.
            
             @param V The vector to subtract from this.
             @return The result of vector subtraction.
        </member>
        <member name="M:UnrealEngine.FVector.op_Subtraction(UnrealEngine.FVector,System.Single)">
             Gets the result of subtracting from each component of the vector.
            
             @param Bias How much to subtract from each component.
             @return The result of subtraction.
        </member>
        <member name="M:UnrealEngine.FVector.op_Addition(UnrealEngine.FVector,System.Single)">
             Gets the result of adding to each component of the vector.
            
             @param Bias How much to add to each component.
             @return The result of addition.
        </member>
        <member name="M:UnrealEngine.FVector.op_Multiply(UnrealEngine.FVector,System.Single)">
             Gets the result of scaling the vector (multiplying each component by a value).
            
             @param Scale What to multiply each component by.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector.op_Division(UnrealEngine.FVector,System.Single)">
             Gets the result of dividing each component of the vector by a value.
            
             @param Scale What to divide each component by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector.op_Multiply(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise multiplication of this vector by another.
            
             @param V The vector to multiply with.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector.op_Division(UnrealEngine.FVector,UnrealEngine.FVector)">
             Gets the result of component-wise division of this vector by another.
            
             @param V The vector to divide by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector.op_UnaryNegation(UnrealEngine.FVector)">
             Get a negated copy of the vector.
            
             @return A negated copy of the vector.
        </member>
        <member name="P:UnrealEngine.FVector.Item(System.Int32)">
             Gets specific component of the vector.
            
             @param Index the index of vector component
             @return reference to component.
        </member>
        <member name="M:UnrealEngine.FVector.Set(System.Single,System.Single,System.Single)">
             Set the values of the vector directly.
            
             @param InX New X coordinate.
             @param InY New Y coordinate.
             @param InZ New Z coordinate.
        </member>
        <member name="M:UnrealEngine.FVector.GetMax">
             Get the maximum value of the vector's components.
            
             @return The maximum value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.GetAbsMax">
             Get the maximum absolute value of the vector's components.
            
             @return The maximum absolute value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.GetMin">
             Get the minimum value of the vector's components.
            
             @return The minimum value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.GetAbsMin">
             Get the minimum absolute value of the vector's components.
            
             @return The minimum absolute value of the vector's components.
        </member>
        <member name="M:UnrealEngine.FVector.ComponentMin(UnrealEngine.FVector)">
            Gets the component-wise min of two vectors. 
        </member>
        <member name="M:UnrealEngine.FVector.ComponentMax(UnrealEngine.FVector)">
            Gets the component-wise max of two vectors. 
        </member>
        <member name="M:UnrealEngine.FVector.GetAbs">
             Get a copy of this vector with absolute value of each component.
            
             @return A copy of this vector with absolute value of each component.
        </member>
        <member name="M:UnrealEngine.FVector.Size">
             Get the length (magnitude) of this vector.
            
             @return The length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.SizeSquared">
             Get the squared length of this vector.
            
             @return The squared length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.Size2D">
             Get the length of the 2D components of this vector.
            
             @return The 2D length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.SizeSquared2D">
             Get the squared length of the 2D components of this vector.
            
             @return The squared 2D length of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.IsZero">
             Checks whether all components of the vector are exactly zero.
            
             @return true if the vector is exactly zero, false otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.Normalize(System.Single)">
             Normalize this vector in-place if it is large enough, set it to (0,0,0) otherwise.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @return true if the vector was normalized correctly, false otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.IsNormalized">
             Checks whether vector is normalized.
            
             @return true if Normalized, false otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.ToDirectionAndLength(UnrealEngine.FVector@,System.Single@)">
             Util to convert this vector into a unit direction vector and its original length.
            
             @param OutDir Reference passed in to store unit direction vector.
             @param OutLength Reference passed in to store length of the vector.
        </member>
        <member name="M:UnrealEngine.FVector.GetSignVector">
             Get a copy of the vector as sign only.
             Each component is set to +1 or -1, with the sign of zero treated as +1.
            
             @param A copy of the vector with each component set to +1 or -1
        </member>
        <member name="M:UnrealEngine.FVector.Projection">
             Projects 2D components of vector based on Z.
            
             @return Projected version of vector based on Z.
        </member>
        <member name="M:UnrealEngine.FVector.GetUnsafeNormal">
             Calculates normalized version of vector without checking for zero length.
            
             @return Normalized version of vector.
             @see GetSafeNormal()
        </member>
        <member name="M:UnrealEngine.FVector.Reciprocal">
             Gets the reciprocal of this vector, avoiding division by zero.
             Zero components are set to BIG_NUMBER.
            
             @return Reciprocal of this vector.
        </member>
        <member name="M:UnrealEngine.FVector.IsUniform(System.Single)">
             Check whether X, Y and Z are nearly equal.
            
             @param Tolerance Specified Tolerance.
             @return true if X == Y == Z within the specified tolerance.
        </member>
        <member name="M:UnrealEngine.FVector.MirrorByVector(UnrealEngine.FVector)">
             Mirror a vector about a normal vector.
            
             @param MirrorNormal Normal vector to mirror about.
             @return Mirrored vector.
        </member>
        <member name="M:UnrealEngine.FVector.MirrorByPlane(UnrealEngine.FPlane)">
             Mirrors a vector about a plane.
            
             @param Plane Plane to mirror about.
             @return Mirrored vector.
        </member>
        <member name="M:UnrealEngine.FVector.RotateAngleAxis(System.Single,UnrealEngine.FVector)">
             Rotates around Axis (assumes Axis.Size() == 1).
            
             @param Angle Angle to rotate (in degrees).
             @param Axis Axis to rotate around.
             @return Rotated Vector.
        </member>
        <member name="M:UnrealEngine.FVector.GetSafeNormal(System.Single)">
             Gets a normalized copy of the vector, checking it is safe to do so based on the length.
             Returns zero vector if vector length is too small to safely normalize.
            
             @param Tolerance Minimum squared vector length.
             @return A normalized copy if safe, (0,0,0) otherwise.
        </member>
        <member name="M:UnrealEngine.FVector.ProjectOnTo(UnrealEngine.FVector)">
             Gets a copy of this vector projected onto the input vector.
            
             @param A	Vector to project onto, does not assume it is normalized.
             @return Projected vector.
        </member>
        <member name="M:UnrealEngine.FVector.ProjectOnToNormal(UnrealEngine.FVector)">
            Gets a copy of this vector projected onto the input vector, which is assumed to be unit length.
            
            @param  Normal Vector to project onto (assumed to be unit length).
            @return Projected vector.
        </member>
        <member name="M:UnrealEngine.FVector.PointsAreSame(UnrealEngine.FVector,UnrealEngine.FVector)">
             Compare two points and see if they're the same, using a threshold.
            
             @param P First vector.
             @param Q Second vector.
             @return Whether points are the same within a threshold. Uses fast distance approximation (linear per-component distance).
        </member>
        <member name="M:UnrealEngine.FVector.PointsAreNear(UnrealEngine.FVector,UnrealEngine.FVector,System.Single)">
             Compare two points and see if they're within specified distance.
            
             @param Point1 First vector.
             @param Point2 Second vector.
             @param Dist Specified distance.
             @return Whether two points are within the specified distance. Uses fast distance approximation (linear per-component distance).
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneDist(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the signed distance (in the direction of the normal) between a point and a plane.
            
             @param Point The Point we are checking.
             @param PlaneBase The Base Point in the plane.
             @param PlaneNormal The Normal of the plane (assumed to be unit length).
             @return Signed distance between point and plane.
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneProject(UnrealEngine.FVector,UnrealEngine.FPlane)">
             Calculate the projection of a point on the given plane.
            
             @param Point The point to project onto the plane
             @param Plane The plane
             @return Projection of Point onto Plane
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneProject(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the projection of a point on the plane defined by counter-clockwise (CCW) points A,B,C.
            
             @param Point The point to project onto the plane
             @param A 1st of three points in CCW order defining the plane 
             @param B 2nd of three points in CCW order defining the plane
             @param C 3rd of three points in CCW order defining the plane
             @return Projection of Point onto plane ABC
        </member>
        <member name="M:UnrealEngine.FVector.PointPlaneProject(UnrealEngine.FVector,UnrealEngine.FVector,UnrealEngine.FVector)">
             Calculate the projection of a point on the plane defined by PlaneBase and PlaneNormal.
            
             @param Point The point to project onto the plane
             @param PlaneBase Point on the plane
             @param PlaneNorm Normal of the plane (assumed to be unit length).
             @return Projection of Point onto plane
        </member>
        <member name="M:UnrealEngine.FVector.VectorPlaneProject(UnrealEngine.FVector,UnrealEngine.FVector)">
            Calculate the projection of a vector on the plane defined by PlaneNormal.
            
            @param  V The vector to project onto the plane.
            @param  PlaneNormal Normal of the plane (assumed to be unit length).
            @return Projection of V onto plane.
        </member>
        <member name="M:UnrealEngine.FVector.Dist(UnrealEngine.FVector,UnrealEngine.FVector)">
             Euclidean distance between two points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The distance between two points.
        </member>
        <member name="M:UnrealEngine.FVector.DistSquared(UnrealEngine.FVector,UnrealEngine.FVector)">
             Squared distance between two points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two points.
        </member>
        <member name="M:UnrealEngine.FVector.DistSquaredXY(UnrealEngine.FVector,UnrealEngine.FVector)">
             Squared distance between two points in the XY plane only.
            	
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two points in the XY plane
        </member>
        <member name="M:UnrealEngine.FVector.RadiansToDegrees(UnrealEngine.FVector)">
             Converts a vector containing radian values to a vector containing degree values.
            
             @param RadVector	Vector containing radian values
             @return Vector  containing degree values
        </member>
        <member name="M:UnrealEngine.FVector.DegreesToRadians(UnrealEngine.FVector)">
             Converts a vector containing degree values to a vector containing radian values.
            
             @param DegVector	Vector containing degree values
             @return Vector containing radian values
        </member>
        <member name="F:UnrealEngine.FVector2D.ZeroVector">
            Global 2D zero vector constant (0,0) 
        </member>
        <member name="F:UnrealEngine.FVector2D.UnitVector">
            Global 2D unit vector constant (1,1) 
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Addition(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise addition of this and another vector.
            
             @param V The vector to add to this.
             @return The result of vector addition.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Subtraction(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise subtraction of this by another vector.
            
             @param V The vector to subtract from this.
             @return The result of vector subtraction.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Multiply(UnrealEngine.FVector2D,System.Single)">
             Gets the result of scaling the vector (multiplying each component by a value).
            
             @param Scale What to multiply each component by.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Division(UnrealEngine.FVector2D,System.Single)">
             Gets the result of dividing each component of the vector by a value.
            
             @param Scale What to divide each component by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Multiply(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise multiplication of this vector by another.
            
             @param V The vector to multiply with.
             @return The result of multiplication.
        </member>
        <member name="M:UnrealEngine.FVector2D.op_Division(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Gets the result of component-wise division of this vector by another.
            
             @param V The vector to divide by.
             @return The result of division.
        </member>
        <member name="M:UnrealEngine.FVector2D.DotProduct(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Calculates the dot product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The dot product.
        </member>
        <member name="M:UnrealEngine.FVector2D.DistSquared(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Squared distance between two 2D points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two 2D points.
        </member>
        <member name="M:UnrealEngine.FVector2D.Distance(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Distance between two 2D points.
            
             @param V1 The first point.
             @param V2 The second point.
             @return The squared distance between two 2D points.
        </member>
        <member name="M:UnrealEngine.FVector2D.CrossProduct(UnrealEngine.FVector2D,UnrealEngine.FVector2D)">
             Calculate the cross product of two vectors.
            
             @param A The first vector.
             @param B The second vector.
             @return The cross product.
        </member>
        <member name="M:UnrealEngine.FVector2D.GetRotated(System.Single)">
             Rotates around axis (0,0,1)
            
             @param AngleDeg Angle to rotate (in degrees)
             @return Rotated Vector
        </member>
        <member name="M:UnrealEngine.FVector2D.GetSafeNormal(System.Single)">
             Gets a normalized copy of the vector, checking it is safe to do so based on the length.
             Returns zero vector if vector length is too small to safely normalize.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @return A normalized copy of the vector if safe, (0,0) otherwise.
        </member>
        <member name="M:UnrealEngine.FVector2D.Normalize(System.Single)">
             Normalize this vector in-place if it is large enough, set it to (0,0) otherwise.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @see GetSafeNormal()
        </member>
        <member name="M:UnrealEngine.FVector4.GetSafeNormal(System.Single)">
             Returns a normalized copy of the vector if safe to normalize.
            
             @param Tolerance Minimum squared length of vector for normalization.
             @return A normalized copy of the vector or a zero vector.
        </member>
        <member name="M:UnrealEngine.IFileManager.ConvertToAbsolutePathForExternalAppForRead(System.String)">
             Converts passed in filename to use an absolute path (for reading)
            
             @param	Filename	filename to convert to use an absolute path, safe to pass in already using absolute path
             
             @return	filename using absolute path
        </member>
        <member name="M:UnrealEngine.IFileManager.ConvertToAbsolutePathForExternalAppForWrite(System.String)">
             Converts passed in filename to use an absolute path (for writing)
            
             @param	Filename	filename to convert to use an absolute path, safe to pass in already using absolute path
             
             @return	filename using absolute path
        </member>
        <member name="M:UnrealEngine.MarshalUtil.CreateInstance(System.String)">
            <summary>
            Used by the native hot reload code to create managed instance by name
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="F:UnrealEngine.Const.FLOAT_NORMAL_THRESH">
            Lengths of normalized vectors (These are half their maximum values
            to assure that dot products with normalized vectors don't overflow).
        </member>
        <member name="F:UnrealEngine.Const.THRESH_VECTOR_NORMALIZED">
            Allowed error for a normalized vector (against squared magnitude) 
        </member>
        <member name="F:UnrealEngine.Const.THRESH_QUAT_NORMALIZED">
            Allowed error for a normalized quaternion (against squared magnitude) 
        </member>
        <member name="M:UnrealEngine.FMath.SinCos(System.Single@,System.Single@,System.Single)">
             Computes the sine and cosine of a scalar float.
            
             @param ScalarSin	Pointer to where the Sin result should be stored
             @param ScalarCos	Pointer to where the Cos result should be stored
             @param Value  input angles 
        </member>
        <member name="M:UnrealEngine.FScriptMap.AddUninitialized(UnrealEngine.FScriptMap@,UnrealEngine.FScriptMapLayout@)">
             Adds an uninitialized object to the map.
             The map will need rehashing at some point after this call to make it valid.
            
             @return  The index of the added element.
        </member>
    </members>
</doc>
